// Capture the output of this into a variable, if you want
(function(fb, parentModule) {
  var Module = {};
  var args = [];
  Module.arguments = [];
  Module.print = parentModule.print;
  Module.printErr = parentModule.printErr;

  Module.cleanups = [];

  var gb = 0;
  // Each module has its own stack
  var STACKTOP = getMemory(TOTAL_STACK);
  assert(STACKTOP % 8 == 0);
  var STACK_MAX = STACKTOP + TOTAL_STACK;
  Module.cleanups.push(function() {
    parentModule['_free'](STACKTOP); // XXX ensure exported
    parentModule['_free'](gb);
  });

  

// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

// === Body ===

var ASM_CONSTS = [];





gb = Runtime.alignMemory(getMemory(24174816, 16 || 1));

// STATICTOP = STATIC_BASE + 24174816;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,11,0,0,0,17,0,0,0,12,0,0,0,18,0,0,0,13,0,0,0,21,0,0,0,100,0,0,0,100,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,1,0,0,0,63,0,0,0,2,0,0,0,120,0,0,0,3,0,0,0,145,0,0,0,4,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,43,0,0,0,0,0,156,0,40,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,45,0,55,0,56,0,39,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,51,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,49,0,48,0,0,0,0,0,0,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,99,0,84,0,85,0,86,0,87,0,88,0,103,0,82,0,81,0,79,0,80,0,73,0,74,0,77,0,75,0,78,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,104,0,105,0,106,0,0,0,0,0,0,0,83,0,57,0,0,0,229,0,225,0,228,0,224,0,230,0,226,0,0,0,0,0,227,0,231,0,1,1,0,0,117,0,0,0,154,0,0,0,118,0,102,0,0,0,122,0,0,0,0,0,0,0,0,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,48,0,13,0,27,0,8,0,9,0,32,0,45,0,61,0,91,0,93,0,92,0,0,0,59,0,0,0,0,0,44,0,46,0,47,0,45,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,0,0,0,0,19,0,21,1,22,1,24,1,127,0,23,1,25,1,19,1,20,1,18,1,17,1,44,1,11,1,12,1,13,1,14,1,15,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,0,1,10,1,0,0,0,0,64,1,16,1,38,1,39,1,40,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,1,63,1,0,0,0,0,0,0,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,1,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,1,48,1,52,1,55,1,49,1,47,1,51,1,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,117,112,101,110,54,52,80,108,117,115,32,67,111,114,101,0,69,82,82,79,82,58,32,73,110,118,97,108,105,100,32,109,54,52,112,95,101,114,114,111,114,32,99,111,100,101,32,103,105,118,101,110,32,116,111,32,67,111,114,101,69,114,114,111,114,77,101,115,115,97,103,101,40,41,0,83,85,67,67,69,83,83,58,32,78,111,32,101,114,114,111,114,0,78,79,84,95,73,78,73,84,58,32,65,32,102,117,110,99,116,105,111,110,32,119,97,115,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,105,116,39,115,32,97,115,115,111,99,105,97,116,101,100,32,109,111,100,117,108,101,32,119,97,115,32,105,110,105,116,105,97,108,105,122,101,100,0,65,76,82,69,65,68,89,95,73,78,73,84,58,32,73,110,105,116,105,97,108,105,122,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,99,97,108,108,101,100,32,116,119,105,99,101,0,73,78,67,79,77,80,65,84,73,66,76,69,58,32,65,80,73,32,118,101,114,115,105,111,110,115,32,98,101,116,119,101,101,110,32,99,111,109,112,111,110,101,110,116,115,32,97,114,101,32,105,110,99,111,109,112,97,116,105,98,108,101,0,73,78,80,85,84,95,65,83,83,69,82,84,58,32,73,110,118,97,108,105,100,32,102,117,110,99,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,44,32,115,117,99,104,32,97,115,32,97,32,78,85,76,76,32,112,111,105,110,116,101,114,0,73,78,80,85,84,95,73,78,86,65,76,73,68,58,32,65,110,32,105,110,112,117,116,32,102,117,110,99,116,105,111,110,32,112,97,114,97,109,101,116,101,114,32,105,115,32,108,111,103,105,99,97,108,108,121,32,105,110,118,97,108,105,100,0,73,78,80,85,84,95,78,79,84,95,70,79,85,78,68,58,32,84,104,101,32,105,110,112,117,116,32,112,97,114,97,109,101,116,101,114,40,115,41,32,115,112,101,99,105,102,105,101,100,32,97,32,112,97,114,116,105,99,117,108,97,114,32,105,116,101,109,32,119,104,105,99,104,32,119,97,115,32,110,111,116,32,102,111,117,110,100,0,78,79,95,77,69,77,79,82,89,58,32,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,70,73,76,69,83,58,32,69,114,114,111,114,32,111,112,101,110,105,110,103,44,32,99,114,101,97,116,105,110,103,44,32,114,101,97,100,105,110,103,44,32,111,114,32,119,114,105,116,105,110,103,32,116,111,32,97,32,102,105,108,101,0,73,78,84,69,82,78,65,76,58,32,108,111,103,105,99,97,108,32,105,110,99,111,110,115,105,115,116,101,110,99,121,32,105,110,32,112,114,111,103,114,97,109,32,99,111,100,101,46,32,32,80,114,111,98,97,98,108,121,32,97,32,98,117,103,46,0,73,78,86,65,76,73,68,95,83,84,65,84,69,58,32,65,110,32,111,112,101,114,97,116,105,111,110,32,119,97,115,32,114,101,113,117,101,115,116,101,100,32,119,104,105,99,104,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,115,116,97,116,101,0,80,76,85,71,73,78,95,70,65,73,76,58,32,65,32,112,108,117,103,105,110,32,102,117,110,99,116,105,111,110,32,114,101,116,117,114,110,101,100,32,97,32,102,97,116,97,108,32,101,114,114,111,114,0,83,89,83,84,69,77,95,70,65,73,76,58,32,65,32,115,121,115,116,101,109,32,102,117,110,99,116,105,111,110,32,99,97,108,108,44,32,115,117,99,104,32,97,115,32,97,110,32,83,68,76,32,111,114,32,102,105,108,101,32,111,112,101,114,97,116,105,111,110,44,32,102,97,105,108,101,100,0,85,78,83,85,80,80,79,82,84,69,68,58,32,70,117,110,99,116,105,111,110,32,99,97,108,108,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,40,105,101,44,32,99,111,114,101,32,110,111,116,32,98,117,105,108,116,32,119,105,116,104,32,100,101,98,117,103,103,101,114,41,0,87,82,79,78,71,95,84,89,80,69,58,32,65,32,103,105,118,101,110,32,105,110,112,117,116,32,116,121,112,101,32,112,97,114,97,109,101,116,101,114,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,100,101,115,105,114,101,100,32,111,112,101,114,97,116,105,111,110,0,109,117,112,101,110,54,52,112,108,117,115,46,99,102,103,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,39,37,115,39,46,32,32,85,115,105,110,103,32,100,101,102,97,117,108,116,115,46,0,102,97,108,115,101,0,116,114,117,101,0,67,111,110,102,105,103,72,97,115,85,110,115,97,118,101,100,67,104,97,110,103,101,115,40,41,58,32,67,111,114,101,32,99,111,110,102,105,103,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,33,0,67,111,110,102,105,103,72,97,115,85,110,115,97,118,101,100,67,104,97,110,103,101,115,40,41,58,32,115,101,99,116,105,111,110,32,110,97,109,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,33,0,67,111,110,102,105,103,72,97,115,85,110,115,97,118,101,100,67,104,97,110,103,101,115,40,41,58,32,86,97,114,105,97,98,108,101,32,39,37,115,39,32,78,85,76,76,32,65,99,116,105,118,101,32,115,116,114,105,110,103,32,112,111,105,110,116,101,114,33,0,67,111,110,102,105,103,72,97,115,85,110,115,97,118,101,100,67,104,97,110,103,101,115,40,41,58,32,86,97,114,105,97,98,108,101,32,39,37,115,39,32,78,85,76,76,32,83,97,118,101,100,32,115,116,114,105,110,103,32,112,111,105,110,116,101,114,33,0,67,111,110,102,105,103,72,97,115,85,110,115,97,118,101,100,67,104,97,110,103,101,115,40,41,58,32,73,110,118,97,108,105,100,32,118,97,114,105,97,98,108,101,32,39,37,115,39,32,116,121,112,101,32,37,105,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,73,110,116,40,41,58,32,73,110,112,117,116,32,97,115,115,101,114,116,105,111,110,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,73,110,116,40,41,58,32,67,111,110,102,105,103,83,101,99,116,105,111,110,72,97,110,100,108,101,32,105,110,118,97,108,105,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,73,110,116,40,41,58,32,80,97,114,97,109,101,116,101,114,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,73,110,116,40,41,58,32,105,110,118,97,108,105,100,32,105,110,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,70,108,111,97,116,40,41,58,32,73,110,112,117,116,32,97,115,115,101,114,116,105,111,110,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,70,108,111,97,116,40,41,58,32,67,111,110,102,105,103,83,101,99,116,105,111,110,72,97,110,100,108,101,32,105,110,118,97,108,105,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,70,108,111,97,116,40,41,58,32,80,97,114,97,109,101,116,101,114,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,70,108,111,97,116,40,41,58,32,105,110,118,97,108,105,100,32,105,110,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,66,111,111,108,40,41,58,32,73,110,112,117,116,32,97,115,115,101,114,116,105,111,110,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,66,111,111,108,40,41,58,32,67,111,110,102,105,103,83,101,99,116,105,111,110,72,97,110,100,108,101,32,105,110,118,97,108,105,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,66,111,111,108,40,41,58,32,80,97,114,97,109,101,116,101,114,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,66,111,111,108,40,41,58,32,105,110,118,97,108,105,100,32,105,110,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,83,116,114,105,110,103,40,41,58,32,73,110,112,117,116,32,97,115,115,101,114,116,105,111,110,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,83,116,114,105,110,103,40,41,58,32,67,111,110,102,105,103,83,101,99,116,105,111,110,72,97,110,100,108,101,32,105,110,118,97,108,105,100,33,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,83,116,114,105,110,103,40,41,58,32,80,97,114,97,109,101,116,101,114,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,33,0,37,105,0,37,102,0,84,114,117,101,0,70,97,108,115,101,0,67,111,110,102,105,103,71,101,116,80,97,114,97,109,83,116,114,105,110,103,40,41,58,32,105,110,118,97,108,105,100,32,105,110,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,119,114,105,116,105,110,103,46,0,35,32,77,117,112,101,110,54,52,80,108,117,115,32,67,111,110,102,105,103,117,114,97,116,105,111,110,32,70,105,108,101,10,0,35,32,84,104,105,115,32,102,105,108,101,32,105,115,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,114,101,97,100,32,97,110,100,32,119,114,105,116,116,101,110,32,98,121,32,116,104,101,32,77,117,112,101,110,54,52,80,108,117,115,32,67,111,114,101,32,108,105,98,114,97,114,121,10,0,10,91,37,115,93,10,10,0,35,32,37,115,10,0,37,115,32,61,32,37,105,10,0,37,115,32,61,32,37,102,10,0,37,115,32,61,32,84,114,117,101,10,0,37,115,32,61,32,70,97,108,115,101,10,0,37,115,32,61,32,34,37,115,34,10,0,10,0,37,102,37,56,115,0,66,117,103,58,32,68,101,98,117,103,71,101,116,83,116,97,116,101,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,68,101,99,111,100,101,79,112,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,71,101,116,82,101,99,111,109,112,73,110,102,111,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,71,101,116,77,101,109,73,110,102,111,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,71,101,116,80,111,105,110,116,101,114,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,109,54,52,112,95,100,98,103,95,109,101,109,112,116,114,95,116,121,112,101,0,66,117,103,58,32,68,101,98,117,103,77,101,109,82,101,97,100,54,52,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,82,101,97,100,51,50,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,82,101,97,100,49,54,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,82,101,97,100,56,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,87,114,105,116,101,54,52,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,87,114,105,116,101,51,50,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,87,114,105,116,101,49,54,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,77,101,109,87,114,105,116,101,56,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,71,101,116,67,80,85,68,97,116,97,80,116,114,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,105,110,112,117,116,32,109,54,52,112,95,100,98,103,95,99,112,117,95,100,97,116,97,0,66,117,103,58,32,68,101,98,117,103,66,114,101,97,107,112,111,105,110,116,76,111,111,107,117,112,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,66,117,103,58,32,68,101,98,117,103,66,114,101,97,107,112,111,105,110,116,67,111,109,109,97,110,100,40,41,32,99,97,108,108,101,100,44,32,98,117,116,32,68,101,98,117,103,103,101,114,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,111,114,101,32,108,105,98,114,97,114,121,0,67,111,114,101,83,116,97,114,116,117,112,40,41,58,32,70,114,111,110,116,45,101,110,100,32,40,65,80,73,32,118,101,114,115,105,111,110,32,37,105,46,37,105,46,37,105,41,32,105,115,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,116,104,105,115,32,99,111,114,101,32,40,65,80,73,32,37,105,46,37,105,46,37,105,41,0,83,68,76,32,118,105,100,101,111,32,115,117,98,115,121,115,116,101,109,32,105,110,105,116,32,102,97,105,108,101,100,58,32,37,115,0,83,68,76,95,71,101,116,86,105,100,101,111,73,110,102,111,32,113,117,101,114,121,32,102,97,105,108,101,100,58,32,37,115,0,78,111,32,102,117,108,108,115,99,114,101,101,110,32,83,68,76,32,118,105,100,101,111,32,109,111,100,101,115,32,97,118,97,105,108,97,98,108,101,0,83,101,116,116,105,110,103,32,37,105,45,98,105,116,32,118,105,100,101,111,32,109,111,100,101,58,32,37,105,120,37,105,0,83,101,116,116,105,110,103,32,118,105,100,101,111,32,109,111,100,101,58,32,37,105,120,37,105,0,83,68,76,95,83,101,116,86,105,100,101,111,77,111,100,101,32,102,97,105,108,101,100,58,32,37,115,0,86,105,100,69,120,116,95,82,101,115,105,122,101,87,105,110,100,111,119,40,41,32,99,97,108,108,101,100,32,105,110,32,102,117,108,108,115,99,114,101,101,110,32,109,111,100,101,46,0,77,54,52,43,32,86,105,100,101,111,0,83,68,76,95,83,101,116,86,105,100,101,111,77,111,100,101,40,41,32,104,97,115,110,39,116,32,98,101,101,110,32,99,97,108,108,101,100,0,83,68,76,95,86,73,68,69,79,95,87,73,78,68,79,87,95,80,79,83,0,83,68,76,95,86,73,68,69,79,95,67,69,78,84,69,82,69,68,0,37,100,44,37,100,0,99,101,110,116,101,114,0,83,68,76,95,86,73,68,69,79,95,70,85,76,76,83,67,82,69,69,78,95,68,73,83,80,76,65,89,0,83,68,76,95,86,73,68,69,79,95,70,85,76,76,83,67,82,69,69,78,95,72,69,65,68,0,83,97,118,101,83,116,97,116,101,80,97,116,104,0,83,97,118,101,83,82,65,77,80,97,116,104,0,79,110,83,99,114,101,101,110,68,105,115,112,108,97,121,0,37,115,0,78,111,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,105,110,32,39,67,111,114,101,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,46,32,83,101,116,116,105,110,103,32,100,101,102,97,117,108,116,115,46,0,67,111,114,101,0,73,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,32,37,46,50,102,32,105,110,32,39,67,111,114,101,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,58,32,99,117,114,114,101,110,116,32,105,115,32,37,46,50,102,46,32,83,101,116,116,105,110,103,32,100,101,102,97,117,108,116,115,46,0,85,112,100,97,116,105,110,103,32,112,97,114,97,109,101,116,101,114,32,115,101,116,32,118,101,114,115,105,111,110,32,105,110,32,39,67,111,114,101,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,32,116,111,32,37,46,50,102,0,77,117,112,101,110,54,52,80,108,117,115,32,67,111,114,101,32,99,111,110,102,105,103,32,112,97,114,97,109,101,116,101,114,32,115,101,116,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,46,32,32,80,108,101,97,115,101,32,100,111,110,39,116,32,99,104,97,110,103,101,32,116,104,105,115,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,46,0,68,114,97,119,32,111,110,45,115,99,114,101,101,110,32,100,105,115,112,108,97,121,32,105,102,32,84,114,117,101,44,32,111,116,104,101,114,119,105,115,101,32,100,111,110,39,116,32,100,114,97,119,32,79,83,68,0,82,52,51,48,48,69,109,117,108,97,116,111,114,0,85,115,101,32,80,117,114,101,32,73,110,116,101,114,112,114,101,116,101,114,32,105,102,32,48,44,32,67,97,99,104,101,100,32,73,110,116,101,114,112,114,101,116,101,114,32,105,102,32,49,44,32,111,114,32,68,121,110,97,109,105,99,32,82,101,99,111,109,112,105,108,101,114,32,105,102,32,50,32,111,114,32,109,111,114,101,0,78,111,67,111,109,112,105,108,101,100,74,117,109,112,0,68,105,115,97,98,108,101,32,99,111,109,112,105,108,101,100,32,106,117,109,112,32,99,111,109,109,97,110,100,115,32,105,110,32,100,121,110,97,109,105,99,32,114,101,99,111,109,112,105,108,101,114,32,40,115,104,111,117,108,100,32,98,101,32,115,101,116,32,116,111,32,70,97,108,115,101,41,32,0,68,105,115,97,98,108,101,69,120,116,114,97,77,101,109,0,68,105,115,97,98,108,101,32,52,77,66,32,101,120,112,97,110,115,105,111,110,32,82,65,77,32,112,97,99,107,46,32,77,97,121,32,98,101,32,110,101,99,101,115,115,97,114,121,32,102,111,114,32,115,111,109,101,32,103,97,109,101,115,0,65,117,116,111,83,116,97,116,101,83,108,111,116,73,110,99,114,101,109,101,110,116,0,73,110,99,114,101,109,101,110,116,32,116,104,101,32,115,97,118,101,32,115,116,97,116,101,32,115,108,111,116,32,97,102,116,101,114,32,101,97,99,104,32,115,97,118,101,32,111,112,101,114,97,116,105,111,110,0,69,110,97,98,108,101,68,101,98,117,103,103,101,114,0,65,99,116,105,118,97,116,101,32,116,104,101,32,82,52,51,48,48,32,100,101,98,117,103,103,101,114,32,119,104,101,110,32,82,79,77,32,101,120,101,99,117,116,105,111,110,32,98,101,103,105,110,115,44,32,105,102,32,99,111,114,101,32,119,97,115,32,98,117,105,108,116,32,119,105,116,104,32,68,101,98,117,103,103,101,114,32,115,117,112,112,111,114,116,0,83,97,118,101,32,115,116,97,116,101,32,115,108,111,116,32,40,48,45,57,41,32,116,111,32,117,115,101,32,119,104,101,110,32,115,97,118,105,110,103,47,108,111,97,100,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,32,115,116,97,116,101,0,80,97,116,104,32,116,111,32,100,105,114,101,99,116,111,114,121,32,119,104,101,114,101,32,115,99,114,101,101,110,115,104,111,116,115,32,97,114,101,32,115,97,118,101,100,46,32,73,102,32,116,104,105,115,32,105,115,32,98,108,97,110,107,44,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,102,32,36,123,85,115,101,114,67,111,110,102,105,103,80,97,116,104,125,47,115,99,114,101,101,110,115,104,111,116,32,119,105,108,108,32,98,101,32,117,115,101,100,0,80,97,116,104,32,116,111,32,100,105,114,101,99,116,111,114,121,32,119,104,101,114,101,32,101,109,117,108,97,116,111,114,32,115,97,118,101,32,115,116,97,116,101,115,32,40,115,110,97,112,115,104,111,116,115,41,32,97,114,101,32,115,97,118,101,100,46,32,73,102,32,116,104,105,115,32,105,115,32,98,108,97,110,107,44,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,102,32,36,123,85,115,101,114,67,111,110,102,105,103,80,97,116,104,125,47,115,97,118,101,32,119,105,108,108,32,98,101,32,117,115,101,100,0,80,97,116,104,32,116,111,32,100,105,114,101,99,116,111,114,121,32,119,104,101,114,101,32,83,82,65,77,47,69,69,80,82,79,77,32,100,97,116,97,32,40,105,110,45,103,97,109,101,32,115,97,118,101,115,41,32,97,114,101,32,115,116,111,114,101,100,46,32,73,102,32,116,104,105,115,32,105,115,32,98,108,97,110,107,44,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,102,32,36,123,85,115,101,114,67,111,110,102,105,103,80,97,116,104,125,47,115,97,118,101,32,119,105,108,108,32,98,101,32,117,115,101,100,0,83,104,97,114,101,100,68,97,116,97,80,97,116,104,0,80,97,116,104,32,116,111,32,97,32,100,105,114,101,99,116,111,114,121,32,116,111,32,115,101,97,114,99,104,32,119,104,101,110,32,108,111,111,107,105,110,103,32,102,111,114,32,115,104,97,114,101,100,32,100,97,116,97,32,102,105,108,101,115,0,68,101,108,97,121,83,73,0,68,101,108,97,121,32,105,110,116,101,114,114,117,112,116,32,97,102,116,101,114,32,68,77,65,32,83,73,32,114,101,97,100,47,119,114,105,116,101,0,70,111,114,99,101,32,110,117,109,98,101,114,32,111,102,32,99,121,99,108,101,115,32,112,101,114,32,101,109,117,108,97,116,101,100,32,105,110,115,116,114,117,99,116,105,111,110,0,37,115,32,37,100,37,37,0,80,108,97,121,98,97,99,107,32,115,112,101,101,100,58,0,70,97,115,116,32,70,111,114,119,97,114,100,0,69,109,117,108,97,116,105,111,110,32,99,111,110,116,105,110,117,101,100,46,0,69,109,117,108,97,116,105,111,110,32,112,97,117,115,101,100,46,0,80,97,117,115,101,100,0,73,110,118,97,108,105,100,32,115,97,118,101,115,116,97,116,101,32,115,108,111,116,32,39,37,105,39,32,105,110,32,109,97,105,110,95,115,116,97,116,101,95,115,101,116,95,115,108,111,116,40,41,46,32,32,85,115,105,110,103,32,48,0,83,116,111,112,112,105,110,103,32,101,109,117,108,97,116,105,111,110,46,0,77,117,112,101,110,54,52,80,108,117,115,32,83,116,97,114,116,101,100,46,46,46,0,37,115,37,115,46,115,114,97,0,37,115,37,115,46,102,108,97,0,37,115,37,115,46,101,101,112,0,37,115,37,115,46,109,112,107,0,32,32,32,32,97,112,112,108,121,95,115,112,101,101,100,95,108,105,109,105,116,101,114,40,41,58,32,87,97,105,116,105,110,103,32,37,105,109,115,0,86,111,108,117,109,101,32,78,111,116,32,83,117,112,112,111,114,116,101,100,46,0,37,115,58,32,37,115,0,86,111,108,117,109,101,0,73,110,118,97,108,105,100,32,115,112,101,101,100,32,115,101,116,116,105,110,103,32,37,105,32,112,101,114,99,101,110,116,0,37,115,115,97,118,101,37,99,0,37,115,37,99,0,68,101,109,111,0,66,101,116,97,0,85,83,65,47,74,97,112,97,110,0,71,101,114,109,97,110,121,0,85,83,65,0,70,114,97,110,99,101,0,73,116,97,108,121,0,74,97,112,97,110,0,83,112,97,105,110,0,65,117,115,116,114,97,108,105,97,32,40,48,120,37,48,50,88,41,0,69,117,114,111,112,101,32,40,48,120,37,48,50,88,41,0,85,110,107,110,111,119,110,32,40,48,120,37,48,50,88,41,0,46,122,54,52,32,40,110,97,116,105,118,101,41,0,46,118,54,52,32,40,98,121,116,101,115,119,97,112,112,101,100,41,0,46,110,54,52,32,40,119,111,114,100,115,119,97,112,112,101,100,41,0,37,46,42,115,37,99,37,115,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,102,97,105,108,101,100,32,116,111,32,108,111,99,107,32,109,117,116,101,120,32,105,110,32,99,104,101,97,116,95,97,112,112,108,121,95,99,104,101,97,116,115,40,41,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,102,97,105,108,101,100,32,116,111,32,108,111,99,107,32,109,117,116,101,120,32,105,110,32,99,104,101,97,116,95,100,101,108,101,116,101,95,97,108,108,40,41,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,102,97,105,108,101,100,32,116,111,32,108,111,99,107,32,109,117,116,101,120,32,105,110,32,99,104,101,97,116,95,115,101,116,95,101,110,97,98,108,101,100,40,41,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,102,97,105,108,101,100,32,116,111,32,108,111,99,107,32,109,117,116,101,120,32,105,110,32,99,104,101,97,116,95,97,100,100,95,110,101,119,40,41,0,72,65,67,75,37,117,0,37,48,56,120,32,37,48,52,88,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,101,101,112,114,111,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,101,101,112,114,111,109,32,102,105,108,101,32,39,37,115,39,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,101,101,112,114,111,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,119,114,105,116,105,110,103,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,101,101,112,114,111,109,32,102,105,108,101,32,39,37,115,39,0,44,0,67,111,114,101,69,118,101,110,116,115,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,67,111,114,101,69,118,101,110,116,115,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,46,0,86,101,114,115,105,111,110,0,78,111,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,105,110,32,39,67,111,114,101,69,118,101,110,116,115,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,46,32,83,101,116,116,105,110,103,32,100,101,102,97,117,108,116,115,46,0,73,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,32,37,46,50,102,32,105,110,32,39,67,111,114,101,69,118,101,110,116,115,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,58,32,99,117,114,114,101,110,116,32,105,115,32,37,46,50,102,46,32,83,101,116,116,105,110,103,32,100,101,102,97,117,108,116,115,46,0,85,112,100,97,116,105,110,103,32,112,97,114,97,109,101,116,101,114,32,115,101,116,32,118,101,114,115,105,111,110,32,105,110,32,39,67,111,114,101,69,118,101,110,116,115,39,32,99,111,110,102,105,103,32,115,101,99,116,105,111,110,32,116,111,32,37,46,50,102,0,77,117,112,101,110,54,52,80,108,117,115,32,67,111,114,101,69,118,101,110,116,115,32,99,111,110,102,105,103,32,112,97,114,97,109,101,116,101,114,32,115,101,116,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,46,32,32,80,108,101,97,115,101,32,100,111,110,39,116,32,99,104,97,110,103,101,32,116,104,105,115,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,46,0,75,98,100,32,77,97,112,112,105,110,103,32,83,116,111,112,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,115,116,111,112,112,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,0,75,98,100,32,77,97,112,112,105,110,103,32,70,117,108,108,115,99,114,101,101,110,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,115,119,105,116,99,104,105,110,103,32,98,101,116,119,101,101,110,32,102,117,108,108,115,99,114,101,101,110,47,119,105,110,100,111,119,101,100,32,109,111,100,101,115,0,75,98,100,32,77,97,112,112,105,110,103,32,83,97,118,101,32,83,116,97,116,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,115,97,118,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,32,115,116,97,116,101,0,75,98,100,32,77,97,112,112,105,110,103,32,76,111,97,100,32,83,116,97,116,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,108,111,97,100,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,32,115,116,97,116,101,0,75,98,100,32,77,97,112,112,105,110,103,32,73,110,99,114,101,109,101,110,116,32,83,108,111,116,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,97,100,118,97,110,99,105,110,103,32,116,104,101,32,115,97,118,101,32,115,116,97,116,101,32,115,108,111,116,0,75,98,100,32,77,97,112,112,105,110,103,32,82,101,115,101,116,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,114,101,115,101,116,116,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,0,75,98,100,32,77,97,112,112,105,110,103,32,83,112,101,101,100,32,68,111,119,110,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,115,108,111,119,105,110,103,32,100,111,119,110,32,116,104,101,32,101,109,117,108,97,116,111,114,0,75,98,100,32,77,97,112,112,105,110,103,32,83,112,101,101,100,32,85,112,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,115,112,101,101,100,105,110,103,32,117,112,32,116,104,101,32,101,109,117,108,97,116,111,114,0,75,98,100,32,77,97,112,112,105,110,103,32,83,99,114,101,101,110,115,104,111,116,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,116,97,107,105,110,103,32,97,32,115,99,114,101,101,110,115,104,111,116,0,75,98,100,32,77,97,112,112,105,110,103,32,80,97,117,115,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,112,97,117,115,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,0,75,98,100,32,77,97,112,112,105,110,103,32,77,117,116,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,109,117,116,105,110,103,47,117,110,109,117,116,105,110,103,32,116,104,101,32,115,111,117,110,100,0,75,98,100,32,77,97,112,112,105,110,103,32,73,110,99,114,101,97,115,101,32,86,111,108,117,109,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,105,110,99,114,101,97,115,105,110,103,32,116,104,101,32,118,111,108,117,109,101,0,75,98,100,32,77,97,112,112,105,110,103,32,68,101,99,114,101,97,115,101,32,86,111,108,117,109,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,100,101,99,114,101,97,115,105,110,103,32,116,104,101,32,118,111,108,117,109,101,0,75,98,100,32,77,97,112,112,105,110,103,32,70,97,115,116,32,70,111,114,119,97,114,100,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,116,101,109,112,111,114,97,114,105,108,121,32,103,111,105,110,103,32,114,101,97,108,108,121,32,102,97,115,116,0,75,98,100,32,77,97,112,112,105,110,103,32,70,114,97,109,101,32,65,100,118,97,110,99,101,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,97,100,118,97,110,99,105,110,103,32,98,121,32,111,110,101,32,102,114,97,109,101,32,119,104,101,110,32,112,97,117,115,101,100,0,75,98,100,32,77,97,112,112,105,110,103,32,71,97,109,101,115,104,97,114,107,0,83,68,76,32,107,101,121,115,121,109,32,102,111,114,32,112,114,101,115,115,105,110,103,32,116,104,101,32,103,97,109,101,32,115,104,97,114,107,32,98,117,116,116,111,110,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,115,116,111,112,112,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,115,119,105,116,99,104,105,110,103,32,98,101,116,119,101,101,110,32,102,117,108,108,115,99,114,101,101,110,47,119,105,110,100,111,119,101,100,32,109,111,100,101,115,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,115,97,118,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,32,115,116,97,116,101,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,108,111,97,100,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,32,115,116,97,116,101,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,97,100,118,97,110,99,105,110,103,32,116,104,101,32,115,97,118,101,32,115,116,97,116,101,32,115,108,111,116,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,116,97,107,105,110,103,32,97,32,115,99,114,101,101,110,115,104,111,116,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,112,97,117,115,105,110,103,32,116,104,101,32,101,109,117,108,97,116,111,114,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,109,117,116,105,110,103,47,117,110,109,117,116,105,110,103,32,116,104,101,32,115,111,117,110,100,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,105,110,99,114,101,97,115,105,110,103,32,116,104,101,32,118,111,108,117,109,101,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,100,101,99,114,101,97,115,105,110,103,32,116,104,101,32,118,111,108,117,109,101,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,102,97,115,116,45,102,111,114,119,97,114,100,0,74,111,121,115,116,105,99,107,32,101,118,101,110,116,32,115,116,114,105,110,103,32,102,111,114,32,112,114,101,115,115,105,110,103,32,116,104,101,32,103,97,109,101,32,115,104,97,114,107,32,98,117,116,116,111,110,0,65,37,100,37,99,0,72,37,100,86,37,100,0,66,37,100,0,74,111,121,32,77,97,112,112,105,110,103,32,70,117,108,108,115,99,114,101,101,110,0,74,111,121,32,77,97,112,112,105,110,103,32,83,116,111,112,0,74,111,121,32,77,97,112,112,105,110,103,32,80,97,117,115,101,0,74,111,121,32,77,97,112,112,105,110,103,32,83,97,118,101,32,83,116,97,116,101,0,74,111,121,32,77,97,112,112,105,110,103,32,76,111,97,100,32,83,116,97,116,101,0,74,111,121,32,77,97,112,112,105,110,103,32,73,110,99,114,101,109,101,110,116,32,83,108,111,116,0,74,111,121,32,77,97,112,112,105,110,103,32,83,99,114,101,101,110,115,104,111,116,0,74,111,121,32,77,97,112,112,105,110,103,32,77,117,116,101,0,74,111,121,32,77,97,112,112,105,110,103,32,73,110,99,114,101,97,115,101,32,86,111,108,117,109,101,0,74,111,121,32,77,97,112,112,105,110,103,32,68,101,99,114,101,97,115,101,32,86,111,108,117,109,101,0,74,111,121,32,77,97,112,112,105,110,103,32,70,97,115,116,32,70,111,114,119,97,114,100,0,74,111,121,32,77,97,112,112,105,110,103,32,71,97,109,101,115,104,97,114,107,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,102,108,97,115,104,114,97,109,32,102,105,108,101,32,39,37,115,39,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,102,108,97,115,104,114,97,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,119,114,105,116,105,110,103,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,102,108,97,115,104,114,97,109,32,102,105,108,101,32,39,37,115,39,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,109,101,109,32,112,97,107,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,109,32,112,97,107,32,102,105,108,101,32,39,37,115,39,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,109,101,109,32,112,97,107,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,119,114,105,116,105,110,103,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,109,101,109,32,112,97,107,32,102,105,108,101,32,39,37,115,39,0,111,112,101,110,95,114,111,109,40,41,58,32,112,114,101,118,105,111,117,115,32,82,79,77,32,105,109,97,103,101,32,119,97,115,32,110,111,116,32,102,114,101,101,100,0,111,112,101,110,95,114,111,109,40,41,58,32,110,111,116,32,97,32,118,97,108,105,100,32,82,79,77,32,105,109,97,103,101,0,37,48,50,88,0,32,40,117,110,107,110,111,119,110,32,114,111,109,41,0,71,111,111,100,110,97,109,101,58,32,37,115,0,78,97,109,101,58,32,37,115,0,77,68,53,58,32,37,115,0,67,82,67,58,32,37,88,32,37,88,0,73,109,97,103,101,116,121,112,101,58,32,37,115,0,82,111,109,32,115,105,122,101,58,32,37,100,32,98,121,116,101,115,32,40,111,114,32,37,100,32,77,98,32,111,114,32,37,100,32,77,101,103,97,98,105,116,115,41,0,67,108,111,99,107,82,97,116,101,32,61,32,37,88,0,86,101,114,115,105,111,110,58,32,37,88,0,77,97,110,117,102,97,99,116,117,114,101,114,58,32,78,105,110,116,101,110,100,111,0,77,97,110,117,102,97,99,116,117,114,101,114,58,32,37,88,0,67,97,114,116,114,105,100,103,101,95,73,68,58,32,37,88,0,67,111,117,110,116,114,121,58,32,37,115,0,80,67,32,61,32,37,88,0,83,97,118,101,32,116,121,112,101,58,32,37,100,0,71,79,76,68,69,78,69,89,69,0,82,111,109,32,99,108,111,115,101,100,46,0,109,117,112,101,110,54,52,112,108,117,115,46,105,110,105,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,114,111,109,32,100,97,116,97,98,97,115,101,32,102,105,108,101,32,39,37,115,39,46,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,77,68,53,32,111,110,32,108,105,110,101,32,37,105,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,103,110,111,114,105,110,103,32,112,114,111,112,101,114,116,121,32,111,110,32,108,105,110,101,32,37,105,0,71,111,111,100,78,97,109,101,0,67,82,67,0,37,88,32,37,88,37,99,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,67,82,67,32,111,110,32,108,105,110,101,32,37,105,0,82,101,102,77,68,53,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,82,101,102,77,68,53,32,111,110,32,108,105,110,101,32,37,105,0,83,97,118,101,84,121,112,101,0,69,101,112,114,111,109,32,52,75,66,0,69,101,112,114,111,109,32,49,54,75,66,0,83,82,65,77,0,70,108,97,115,104,32,82,65,77,0,67,111,110,116,114,111,108,108,101,114,32,80,97,99,107,0,78,111,110,101,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,115,97,118,101,32,116,121,112,101,32,111,110,32,108,105,110,101,32,37,105,0,83,116,97,116,117,115,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,115,116,97,116,117,115,32,111,110,32,108,105,110,101,32,37,105,0,80,108,97,121,101,114,115,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,112,108,97,121,101,114,32,99,111,117,110,116,32,111,110,32,108,105,110,101,32,37,105,0,82,117,109,98,108,101,0,89,101,115,0,78,111,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,114,117,109,98,108,101,32,115,116,114,105,110,103,32,111,110,32,108,105,110,101,32,37,105,0,67,111,117,110,116,80,101,114,79,112,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,73,110,118,97,108,105,100,32,67,111,117,110,116,80,101,114,79,112,32,111,110,32,108,105,110,101,32,37,105,0,67,104,101,97,116,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,70,97,105,108,101,100,32,116,111,32,97,112,112,101,110,100,32,99,104,101,97,116,0,59,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,85,110,107,110,111,119,110,32,112,114,111,112,101,114,116,121,32,111,110,32,108,105,110,101,32,37,105,0,85,110,97,98,108,101,32,116,111,32,114,101,115,111,108,118,101,32,114,111,109,32,100,97,116,97,98,97,115,101,32,101,110,116,114,105,101,115,32,40,108,111,111,112,41,0,82,79,77,32,68,97,116,97,98,97,115,101,58,32,69,114,114,111,114,32,115,111,108,118,105,110,103,32,82,101,102,77,68,53,115,0,55,128,64,18,64,18,55,128,128,55,18,64,67,117,114,114,101,110,116,83,116,97,116,101,83,108,111,116,0,83,101,108,101,99,116,101,100,32,115,116,97,116,101,32,115,108,111,116,58,32,37,100,0,78,111,32,77,117,112,101,110,54,52,80,108,117,115,47,80,74,54,52,32,115,116,97,116,101,32,102,105,108,101,32,102,111,117,110,100,32,102,111,114,32,115,108,111,116,32,37,105,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,115,97,118,101,115,116,97,116,101,32,102,105,108,101,32,37,115,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,115,97,118,101,115,116,97,116,101,115,32,108,105,115,116,32,108,111,99,107,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,80,74,54,52,32,115,116,97,116,101,32,102,105,108,101,58,32,37,115,0,83,97,118,101,100,32,115,116,97,116,101,32,116,111,58,32,37,115,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,97,118,101,32,115,116,97,116,101,46,0,200,166,216,35,67,111,117,108,100,110,39,116,32,119,114,105,116,101,32,100,97,116,97,32,116,111,32,80,114,111,106,101,99,116,54,52,32,115,116,97,116,101,32,102,105,108,101,32,37,115,46,0,90,105,112,32,101,114,114,111,114,46,32,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,115,116,97,116,101,32,102,105,108,101,58,32,37,115,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,115,116,97,116,101,32,102,105,108,101,58,32,37,115,0,67,111,117,108,100,32,110,111,116,32,119,114,105,116,101,32,100,97,116,97,32,116,111,32,115,116,97,116,101,32,102,105,108,101,58,32,37,115,0,77,54,52,43,83,65,86,69,0,83,116,97,116,101,32,108,111,97,100,101,100,32,102,114,111,109,58,32,37,115,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,80,114,111,106,101,99,116,54,52,32,115,97,118,101,115,116,97,116,101,32,37,115,0,83,116,97,116,101,32,102,105,108,101,58,32,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,114,111,106,101,99,116,54,52,32,115,97,118,101,115,116,97,116,101,46,32,85,110,114,101,99,111,103,110,105,122,101,100,32,102,105,108,101,32,102,111,114,109,97,116,46,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,108,111,97,100,32,115,116,97,116,101,46,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,115,97,118,101,115,116,97,116,101,32,100,97,116,97,32,102,114,111,109,32,80,114,111,106,101,99,116,54,52,32,115,97,118,101,115,116,97,116,101,32,37,115,0,83,116,97,116,101,32,82,79,77,32,104,101,97,100,101,114,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,99,117,114,114,101,110,116,32,82,79,77,46,0,90,105,112,32,101,114,114,111,114,46,32,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,115,116,97,116,101,32,102,105,108,101,58,32,37,115,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,115,116,97,116,101,32,102,105,108,101,32,37,115,0,83,116,97,116,101,32,102,105,108,101,58,32,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,77,117,112,101,110,54,52,112,108,117,115,32,115,97,118,101,115,116,97,116,101,46,0,83,116,97,116,101,32,118,101,114,115,105,111,110,32,40,37,48,56,120,41,32,105,115,110,39,116,32,99,111,109,112,97,116,105,98,108,101,46,32,80,108,101,97,115,101,32,117,112,100,97,116,101,32,77,117,112,101,110,54,52,80,108,117,115,46,0,83,116,97,116,101,32,82,79,77,32,77,68,53,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,99,117,114,114,101,110,116,32,82,79,77,46,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,77,117,112,101,110,54,52,80,108,117,115,32,115,97,118,101,115,116,97,116,101,32,100,97,116,97,32,102,114,111,109,32,37,115,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,115,116,97,116,101,32,102,105,108,101,32,37,115,10,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,102,114,111,109,32,115,116,97,116,101,32,102,105,108,101,32,37,115,10,0,80,75,3,4,0,85,110,107,110,111,119,110,32,115,116,97,116,101,32,102,105,108,101,32,116,121,112,101,32,37,115,10,0,37,115,46,115,116,37,100,0,37,115,46,112,106,37,100,46,122,105,112,0,37,115,46,112,106,37,100,0,37,115,37,115,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,115,114,97,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,114,97,109,32,102,105,108,101,32,39,37,115,39,0,99,111,117,108,100,110,39,116,32,111,112,101,110,32,115,114,97,109,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,119,114,105,116,105,110,103,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,115,114,97,109,32,102,105,108,101,32,39,37,115,39,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,111,114,107,113,117,101,117,101,32,109,97,110,97,103,101,109,101,110,116,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,111,114,107,113,117,101,117,101,32,116,104,114,101,97,100,32,109,97,110,97,103,101,109,101,110,116,32,100,97,116,97,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,111,114,107,113,117,101,117,101,32,116,104,114,101,97,100,32,119,111,114,107,95,97,118,97,105,108,32,99,111,110,100,105,116,105,111,110,0,109,54,52,112,119,113,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,111,114,107,113,117,101,117,101,32,116,104,114,101,97,100,32,104,97,110,100,108,101,114,0,83,116,111,112,112,101,100,32,119,111,114,107,113,117,101,117,101,32,119,105,116,104,32,119,111,114,107,32,115,116,105,108,108,32,112,101,110,100,105,110,103,0,77,101,109,111,114,121,32,105,110,105,116,105,97,108,105,122,101,100,0,117,110,107,110,111,119,110,32,114,101,97,100,32,105,110,32,114,101,97,100,95,102,108,97,115,104,114,97,109,95,115,116,97,116,117,115,40,41,0,117,110,107,110,111,119,110,32,119,114,105,116,101,32,105,110,32,119,114,105,116,101,95,102,108,97,115,104,114,97,109,95,99,111,109,109,97,110,100,40,41,0,117,110,107,110,111,119,110,32,100,109,97,95,114,101,97,100,95,102,108,97,115,104,114,97,109,58,32,37,120,0,117,110,107,110,111,119,110,32,100,109,97,95,119,114,105,116,101,95,102,108,97,115,104,114,97,109,58,32,37,120,0,117,110,107,110,111,119,110,32,102,108,97,115,104,114,97,109,32,99,111,109,109,97,110,100,32,119,105,116,104,32,109,111,100,101,58,37,120,0,117,110,107,110,111,119,110,32,102,108,97,115,104,114,97,109,32,99,111,109,109,97,110,100,58,32,37,88,0,85,110,107,110,111,119,110,32,100,109,97,32,119,114,105,116,101,32,48,120,37,88,32,105,110,32,100,109,97,95,112,105,95,119,114,105,116,101,40,41,0,85,110,107,110,111,119,110,32,100,109,97,32,114,101,97,100,32,105,110,32,100,109,97,95,112,105,95,114,101,97,100,40,41,0,35,1,3,192,27,70,114,111,110,116,45,101,110,100,32,98,117,103,58,32,112,108,117,103,105,110,115,32,97,114,101,32,97,116,116,97,99,104,101,100,32,105,110,32,119,114,111,110,103,32,111,114,100,101,114,46,0,78,111,32,118,105,100,101,111,32,112,108,117,103,105,110,32,97,116,116,97,99,104,101,100,46,32,32,84,104,101,114,101,32,119,105,108,108,32,98,101,32,110,111,32,118,105,100,101,111,32,111,117,116,112,117,116,46,0,78,111,32,82,83,80,32,112,108,117,103,105,110,32,97,116,116,97,99,104,101,100,46,32,32,84,104,101,32,118,105,100,101,111,32,111,117,116,112,117,116,32,119,105,108,108,32,98,101,32,99,111,114,114,117,112,116,101,100,46,0,78,111,32,97,117,100,105,111,32,112,108,117,103,105,110,32,97,116,116,97,99,104,101,100,46,32,32,84,104,101,114,101,32,119,105,108,108,32,98,101,32,110,111,32,115,111,117,110,100,32,111,117,116,112,117,116,46,0,78,111,32,105,110,112,117,116,32,112,108,117,103,105,110,32,97,116,116,97,99,104,101,100,46,32,32,89,111,117,32,119,111,110,39,116,32,98,101,32,97,98,108,101,32,116,111,32,99,111,110,116,114,111,108,32,116,104,101,32,103,97,109,101,46,0,80,108,117,103,105,110,71,101,116,86,101,114,115,105,111,110,0,68,111,82,115,112,67,121,99,108,101,115,0,73,110,105,116,105,97,116,101,82,83,80,0,82,111,109,67,108,111,115,101,100,0,98,114,111,107,101,110,32,82,83,80,32,112,108,117,103,105,110,59,32,102,117,110,99,116,105,111,110,40,115,41,32,110,111,116,32,102,111,117,110,100,46,0,105,110,99,111,109,112,97,116,105,98,108,101,32,82,83,80,32,112,108,117,103,105,110,0,67,111,110,116,114,111,108,108,101,114,67,111,109,109,97,110,100,0,71,101,116,75,101,121,115,0,73,110,105,116,105,97,116,101,67,111,110,116,114,111,108,108,101,114,115,0,82,101,97,100,67,111,110,116,114,111,108,108,101,114,0,82,111,109,79,112,101,110,0,83,68,76,95,75,101,121,68,111,119,110,0,83,68,76,95,75,101,121,85,112,0,98,114,111,107,101,110,32,73,110,112,117,116,32,112,108,117,103,105,110,59,32,102,117,110,99,116,105,111,110,40,115,41,32,110,111,116,32,102,111,117,110,100,46,0,105,110,99,111,109,112,97,116,105,98,108,101,32,73,110,112,117,116,32,112,108,117,103,105,110,0,82,101,110,100,101,114,67,97,108,108,98,97,99,107,0,105,110,112,117,116,32,112,108,117,103,105,110,32,100,105,100,32,110,111,116,32,115,112,101,99,105,102,121,32,97,32,114,101,110,100,101,114,32,99,97,108,108,98,97,99,107,59,32,116,104,101,114,101,32,119,105,108,108,32,98,101,32,110,111,32,111,110,32,115,99,114,101,101,110,32,100,105,115,112,108,97,121,32,98,121,32,116,104,101,32,105,110,112,117,116,32,112,108,117,103,105,110,46,0,65,105,68,97,99,114,97,116,101,67,104,97,110,103,101,100,0,65,105,76,101,110,67,104,97,110,103,101,100,0,73,110,105,116,105,97,116,101,65,117,100,105,111,0,80,114,111,99,101,115,115,65,76,105,115,116,0,83,101,116,83,112,101,101,100,70,97,99,116,111,114,0,86,111,108,117,109,101,85,112,0,86,111,108,117,109,101,68,111,119,110,0,86,111,108,117,109,101,71,101,116,76,101,118,101,108,0,86,111,108,117,109,101,83,101,116,76,101,118,101,108,0,86,111,108,117,109,101,77,117,116,101,0,86,111,108,117,109,101,71,101,116,83,116,114,105,110,103,0,98,114,111,107,101,110,32,65,117,100,105,111,32,112,108,117,103,105,110,59,32,102,117,110,99,116,105,111,110,40,115,41,32,110,111,116,32,102,111,117,110,100,46,0,105,110,99,111,109,112,97,116,105,98,108,101,32,65,117,100,105,111,32,112,108,117,103,105,110,0,67,104,97,110,103,101,87,105,110,100,111,119,0,73,110,105,116,105,97,116,101,71,70,88,0,77,111,118,101,83,99,114,101,101,110,0,80,114,111,99,101,115,115,68,76,105,115,116,0,80,114,111,99,101,115,115,82,68,80,76,105,115,116,0,83,104,111,119,67,70,66,0,85,112,100,97,116,101,83,99,114,101,101,110,0,86,105,83,116,97,116,117,115,67,104,97,110,103,101,100,0,86,105,87,105,100,116,104,67,104,97,110,103,101,100,0,82,101,97,100,83,99,114,101,101,110,50,0,83,101,116,82,101,110,100,101,114,105,110,103,67,97,108,108,98,97,99,107,0,70,66,82,101,97,100,0,70,66,87,114,105,116,101,0,70,66,71,101,116,70,114,97,109,101,66,117,102,102,101,114,73,110,102,111,0,98,114,111,107,101,110,32,86,105,100,101,111,32,112,108,117,103,105,110,59,32,102,117,110,99,116,105,111,110,40,115,41,32,110,111,116,32,102,111,117,110,100,46,0,82,101,115,105,122,101,86,105,100,101,111,79,117,116,112,117,116,0,105,110,99,111,109,112,97,116,105,98,108,101,32,86,105,100,101,111,32,112,108,117,103,105,110,0,70,97,108,108,98,97,99,107,32,102,111,114,32,86,105,100,101,111,32,112,108,117,103,105,110,32,65,80,73,32,40,37,48,50,105,46,37,48,50,105,46,37,48,50,105,41,32,60,32,50,46,49,46,48,46,32,83,99,114,101,101,110,115,104,111,116,115,32,109,97,121,32,99,111,110,116,97,105,110,32,79,110,32,83,99,114,101,101,110,32,68,105,115,112,108,97,121,32,116,101,120,116,0,70,97,108,108,98,97,99,107,32,102,111,114,32,86,105,100,101,111,32,112,108,117,103,105,110,32,65,80,73,32,40,37,48,50,105,46,37,48,50,105,46,37,48,50,105,41,32,60,32,50,46,50,46,48,46,32,82,101,115,105,122,97,98,108,101,32,118,105,100,101,111,32,119,105,108,108,32,110,111,116,32,119,111,114,107,0,77,117,112,101,110,54,52,80,108,117,115,45,78,111,86,105,100,101,111,0,77,117,112,101,110,54,52,80,108,117,115,45,78,111,65,117,100,105,111,0,100,105,115,97,98,108,101,100,0,77,117,112,101,110,54,52,80,108,117,115,45,78,111,73,110,112,117,116,0,77,117,112,101,110,54,52,80,108,117,115,45,78,111,82,83,80,0,115,115,115,115,115,115,115,115,83,116,97,114,116,105,110,103,32,82,52,51,48,48,32,101,109,117,108,97,116,111,114,58,32,80,117,114,101,32,73,110,116,101,114,112,114,101,116,101,114,0,83,116,97,114,116,105,110,103,32,82,52,51,48,48,32,101,109,117,108,97,116,111,114,58,32,67,97,99,104,101,100,32,73,110,116,101,114,112,114,101,116,101,114,0,82,52,51,48,48,32,101,109,117,108,97,116,111,114,32,102,105,110,105,115,104,101,100,46,0,110,111,116,32,99,111,109,112,105,108,101,100,32,101,120,99,101,112,116,105,111,110,0,116,119,111,32,101,118,101,110,116,115,32,111,102,32,116,121,112,101,32,48,120,37,120,32,105,110,32,105,110,116,101,114,114,117,112,116,32,113,117,101,117,101,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,110,111,100,101,32,102,111,114,32,110,101,119,32,105,110,116,101,114,114,117,112,116,32,101,118,101,110,116,0,85,110,107,110,111,119,110,32,105,110,116,101,114,114,117,112,116,32,113,117,101,117,101,32,101,118,101,110,116,32,116,121,112,101,32,37,46,56,88,46,0,112,117,114,101,95,105,110,116,101,114,112,114,101,116,101,114,46,46,46,0,79,112,99,111,100,101,58,32,37,117,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,101,120,99,101,112,116,105,111,110,32,105,110,32,67,32,111,112,99,111,100,101,0,68,73,86,95,68,32,98,121,32,48,0,68,73,86,95,83,32,98,121,32,48,0,101,114,114,111,114,32,105,110,32,69,82,69,84,0,77,84,67,48,32,105,110,115,116,114,117,99,116,105,111,110,32,119,114,105,116,105,110,103,32,73,110,100,101,120,32,114,101,103,105,115,116,101,114,32,119,105,116,104,32,84,76,66,32,105,110,100,101,120,32,62,32,51,49,0,77,84,67,48,32,105,110,115,116,114,117,99,116,105,111,110,32,116,114,121,105,110,103,32,116,111,32,119,114,105,116,101,32,67,97,117,115,101,32,114,101,103,105,115,116,101,114,32,119,105,116,104,32,110,111,110,45,48,32,118,97,108,117,101,0,85,110,107,110,111,119,110,32,77,84,67,48,32,119,114,105,116,101,58,32,37,100,0,77,70,67,48,32,105,110,115,116,114,117,99,116,105,111,110,32,114,101,97,100,105,110,103,32,117,110,45,105,109,112,108,101,109,101,110,116,101,100,32,82,97,110,100,111,109,32,114,101,103,105,115,116,101,114,0,114,101,115,101,114,118,101,100,32,111,112,99,111,100,101,58,32,37,88,58,37,88,0,116,114,97,112,32,101,120,99,101,112,116,105,111,110,32,105,110,32,84,69,81,0,68,68,73,86,85,58,32,100,105,118,105,100,101,32,98,121,32,48,0,68,68,73,86,58,32,100,105,118,105,100,101,32,98,121,32,48,0,68,73,86,85,58,32,100,105,118,105,100,101,32,98,121,32,48,0,68,73,86,58,32,100,105,118,105,100,101,32,98,121,32,48,0,78,73,40,41,32,64,32,48,120,37,88,0,111,112,99,111,100,101,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,58,32,37,88,58,37,88,0,77,101,109,111,114,121,32,101,114,114,111,114,58,32,99,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,101,120,101,99,117,116,97,98,108,101,32,109,101,109,111,114,121,32,102,111,114,32,100,121,110,97,109,105,99,32,114,101,99,111,109,112,105,108,101,114,46,32,84,114,121,32,116,111,32,117,115,101,32,97,110,32,105,110,116,101,114,112,114,101,116,101,114,32,109,111,100,101,46,0,77,101,109,111,114,121,32,101,114,114,111,114,58,32,99,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,99,97,99,104,101,100,32,105,110,116,101,114,112,114,101,116,101,114,46,0,77,101,109,111,114,121,32,101,114,114,111,114,58,32,99,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,37,122,105,32,98,121,116,101,32,98,108,111,99,107,32,111,102,32,97,108,105,103,110,101,100,32,82,87,88,32,109,101,109,111,114,121,46,0,65,70,45,82,84,67,32,114,101,97,100,32,99,111,109,109,97,110,100,58,32,99,97,110,110,111,116,32,114,101,97,100,32,98,108,111,99,107,32,49,0,65,70,45,82,84,67,32,119,114,105,116,101,32,99,111,109,109,97,110,100,58,32,110,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,0,85,110,107,110,111,119,110,32,67,73,67,32,116,121,112,101,32,40,37,48,49,54,108,108,88,41,33,32,117,115,105,110,103,32,67,73,67,32,54,49,48,50,46,0,73,110,118,97,108,105,100,32,97,99,99,101,115,115,32,116,111,32,101,101,112,114,111,109,32,97,100,100,114,101,115,115,61,37,48,52,88,0,85,110,107,110,111,119,110,32,112,108,117,103,103,101,100,32,112,97,107,32,37,100,0,129,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,255,255,255,255,5,26,95,19,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,1,255,102,37,153,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,26,95,19,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,1,255,102,37,153,205,255,255,255,255,5,26,95,19,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,1,255,102,37,153,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,26,95,19,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,1,255,102,37,153,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,3,0,3,0,3,0,3,0,3,0,3,0,3,4,7,10,7,14,5,14,1,12,15,8,15,6,3,6,9,4,1,10,7,14,5,14,1,12,9,8,5,6,3,12,9,73,110,118,97,108,105,100,32,80,73,70,32,97,100,100,114,101,115,115,58,32,37,48,56,88,0,101,114,114,111,114,32,105,110,32,117,112,100,97,116,101,95,112,105,102,95,119,114,105,116,101,40,41,58,32,37,88,0,99,104,97,110,110,101,108,32,62,61,32,52,32,105,110,32,117,112,100,97,116,101,95,112,105,102,95,119,114,105,116,101,0,117,110,107,110,111,119,110,32,80,73,70,32,99,111,109,109,97,110,100,58,32,37,48,50,88,0,100,109,97,95,115,105,95,119,114,105,116,101,40,41,58,32,117,110,107,110,111,119,110,32,83,73,32,117,115,101,0,100,109,97,95,115,105,95,114,101,97,100,40,41,58,32,117,110,107,110,111,119,110,32,83,73,32,117,115,101,0,88,68,71,95,67,79,78,70,73,71,95,72,79,77,69,0,109,117,112,101,110,54,52,112,108,117,115,47,0,72,79,77,69,0,46,99,111,110,102,105,103,47,109,117,112,101,110,54,52,112,108,117,115,47,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,100,105,114,101,99,116,111,114,121,59,32,36,72,79,77,69,32,105,115,32,117,110,100,101,102,105,110,101,100,32,111,114,32,105,110,118,97,108,105,100,46,0,88,68,71,95,68,65,84,65,95,72,79,77,69,0,46,108,111,99,97,108,47,115,104,97,114,101,47,109,117,112,101,110,54,52,112,108,117,115,47,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,100,97,116,97,32,100,105,114,101,99,116,111,114,121,59,32,36,72,79,77,69,32,105,115,32,117,110,100,101,102,105,110,101,100,32,111,114,32,105,110,118,97,108,105,100,46,0,88,68,71,95,67,65,67,72,69,95,72,79,77,69,0,46,99,97,99,104,101,47,109,117,112,101,110,54,52,112,108,117,115,47,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,99,97,99,104,101,32,100,105,114,101,99,116,111,114,121,59,32,36,72,79,77,69,32,105,115,32,117,110,100,101,102,105,110,101,100,32,111,114,32,105,110,118,97,108,105,100,46,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,100,105,114,101,99,116,111,114,121,58,32,37,115,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,109,117,112,101,110,54,52,112,108,117,115,0,47,117,115,114,47,115,104,97,114,101,47,109,117,112,101,110,54,52,112,108,117,115,0,46,47,0,114,98,0,114,43,98,0,32,122,105,112,32,49,46,48,49,32,67,111,112,121,114,105,103,104,116,32,49,57,57,56,45,50,48,48,52,32,71,105,108,108,101,115,32,86,111,108,108,97,110,116,32,45,32,104,116,116,112,58,47,47,119,119,119,46,119,105,110,105,109,97,103,101,46,99,111,109,47,122,76,105,98,68,108,108,0,45,0,32,117,110,122,105,112,32,49,46,48,49,32,67,111,112,121,114,105,103,104,116,32,49,57,57,56,45,50,48,48,52,32,71,105,108,108,101,115,32,86,111,108,108,97,110,116,32,45,32,104,116,116,112,58,47,47,119,119,119,46,119,105,110,105,109,97,103,101,46,99,111,109,47,122,76,105,98,68,108,108,0,49,46,50,46,56,0,67,97,112,116,117,114,101,100,32,115,99,114,101,101,110,115,104,111,116,32,102,111,114,32,102,114,97,109,101,32,37,105,46,0,49,46,54,46,49,55,0,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,80,78,71,32,119,114,105,116,101,32,115,116,114,117,99,116,46,0,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,80,78,71,32,105,110,102,111,32,115,116,114,117,99,116,46,0,69,114,114,111,114,32,99,97,108,108,105,110,103,32,115,101,116,106,109,112,40,41,0,119,98,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,39,37,115,39,32,116,111,32,115,97,118,101,32,115,99,114,101,101,110,115,104,111,116,46,0,70,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,37,122,105,32,98,121,116,101,115,32,116,111,32,115,99,114,101,101,110,115,104,111,116,32,102,105,108,101,46,0,80,78,71,32,87,97,114,110,105,110,103,58,32,37,115,0,80,78,71,32,69,114,114,111,114,58,32,37,115,0,45,35,35,35,46,112,110,103,0,83,99,114,101,101,110,115,104,111,116,80,97,116,104,0,37,115,115,99,114,101,101,110,115,104,111,116,37,99,37,115,0,47,0,37,48,51,105,46,112,110,103,0,114,0,67,97,110,39,116,32,115,97,118,101,32,115,99,114,101,101,110,115,104,111,116,59,32,102,111,108,100,101,114,32,97,108,114,101,97,100,121,32,99,111,110,116,97,105,110,115,32,49,48,48,48,32,115,99,114,101,101,110,115,104,111,116,115,32,102,111,114,32,116,104,105,115,32,82,79,77,0], "i8", ALLOC_NONE, gb);





/* no memory initializer */
// {{PRE_LIBRARY}}

function _SDL_SetWindowTitle() {
  if (!parentModule['_SDL_SetWindowTitle']) abort("external function 'SDL_SetWindowTitle' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetWindowTitle'].apply(null, arguments);
  }
function _png_set_rows() {
  if (!parentModule['_png_set_rows']) abort("external function 'png_set_rows' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_set_rows'].apply(null, arguments);
  }
function _DtoILow() {
  if (!parentModule['_DtoILow']) abort("external function 'DtoILow' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_DtoILow'].apply(null, arguments);
  }
function _fclose() {
  if (!parentModule['_fclose']) abort("external function 'fclose' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fclose'].apply(null, arguments);
  }
function _SDL_JoystickOpen() {
  if (!parentModule['_SDL_JoystickOpen']) abort("external function 'SDL_JoystickOpen' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_JoystickOpen'].apply(null, arguments);
  }
function _fflush() {
  if (!parentModule['_fflush']) abort("external function 'fflush' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fflush'].apply(null, arguments);
  }
function _SDL_GetMouseState() {
  if (!parentModule['_SDL_GetMouseState']) abort("external function 'SDL_GetMouseState' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetMouseState'].apply(null, arguments);
  }
function _emscripten_check_longjmp() {
  if (!parentModule['_emscripten_check_longjmp']) abort("external function 'emscripten_check_longjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_check_longjmp'].apply(null, arguments);
  }
function _png_create_write_struct() {
  if (!parentModule['_png_create_write_struct']) abort("external function 'png_create_write_struct' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_create_write_struct'].apply(null, arguments);
  }
function _strtol() {
  if (!parentModule['_strtol']) abort("external function 'strtol' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strtol'].apply(null, arguments);
  }
function _SDL_ShowCursor() {
  if (!parentModule['_SDL_ShowCursor']) abort("external function 'SDL_ShowCursor' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_ShowCursor'].apply(null, arguments);
  }
function _SDL_GL_GetProcAddress() {
  if (!parentModule['_SDL_GL_GetProcAddress']) abort("external function 'SDL_GL_GetProcAddress' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_GetProcAddress'].apply(null, arguments);
  }
function _floorf() {
  if (!parentModule['_floorf']) abort("external function 'floorf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_floorf'].apply(null, arguments);
  }
function _strtok() {
  if (!parentModule['_strtok']) abort("external function 'strtok' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strtok'].apply(null, arguments);
  }
function _strtod() {
  if (!parentModule['_strtod']) abort("external function 'strtod' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strtod'].apply(null, arguments);
  }
function _fwrite() {
  if (!parentModule['_fwrite']) abort("external function 'fwrite' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fwrite'].apply(null, arguments);
  }
function _SDL_DestroyCond() {
  if (!parentModule['_SDL_DestroyCond']) abort("external function 'SDL_DestroyCond' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_DestroyCond'].apply(null, arguments);
  }
function _SDL_SetEventFilter() {
  if (!parentModule['_SDL_SetEventFilter']) abort("external function 'SDL_SetEventFilter' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetEventFilter'].apply(null, arguments);
  }
function _saveSetjmp() {
  if (!parentModule['_saveSetjmp']) abort("external function 'saveSetjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_saveSetjmp'].apply(null, arguments);
  }
function _SDL_GL_MakeCurrent() {
  if (!parentModule['_SDL_GL_MakeCurrent']) abort("external function 'SDL_GL_MakeCurrent' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_MakeCurrent'].apply(null, arguments);
  }
function _llvm_sqrt_f64() {
  if (!parentModule['_llvm_sqrt_f64']) abort("external function 'llvm_sqrt_f64' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_llvm_sqrt_f64'].apply(null, arguments);
  }
function _isspace() {
  if (!parentModule['_isspace']) abort("external function 'isspace' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_isspace'].apply(null, arguments);
  }
function _localtime() {
  if (!parentModule['_localtime']) abort("external function 'localtime' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_localtime'].apply(null, arguments);
  }

function _SDL_WasInit() {
  if (!parentModule['_SDL_WasInit']) abort("external function 'SDL_WasInit' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_WasInit'].apply(null, arguments);
  }
function _mmap() {
  if (!parentModule['_mmap']) abort("external function 'mmap' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_mmap'].apply(null, arguments);
  }
function _SDL_NumJoysticks() {
  if (!parentModule['_SDL_NumJoysticks']) abort("external function 'SDL_NumJoysticks' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_NumJoysticks'].apply(null, arguments);
  }
function _fesetround() {
  if (!parentModule['_fesetround']) abort("external function 'fesetround' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fesetround'].apply(null, arguments);
  }
function _ceil() {
  if (!parentModule['_ceil']) abort("external function 'ceil' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_ceil'].apply(null, arguments);
  }
function _SDL_strdup() {
  if (!parentModule['_SDL_strdup']) abort("external function 'SDL_strdup' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_strdup'].apply(null, arguments);
  }
function _SDL_PumpEvents() {
  if (!parentModule['_SDL_PumpEvents']) abort("external function 'SDL_PumpEvents' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_PumpEvents'].apply(null, arguments);
  }
function _memcpy() {
  if (!parentModule['_memcpy']) abort("external function 'memcpy' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_memcpy'].apply(null, arguments);
  }
function _SDL_AllocFormat() {
  if (!parentModule['_SDL_AllocFormat']) abort("external function 'SDL_AllocFormat' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_AllocFormat'].apply(null, arguments);
  }
function _memmove() {
  if (!parentModule['_memmove']) abort("external function 'memmove' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_memmove'].apply(null, arguments);
  }
function _SDL_SetError() {
  if (!parentModule['_SDL_SetError']) abort("external function 'SDL_SetError' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetError'].apply(null, arguments);
  }
function _inflateInit2_() {
  if (!parentModule['_inflateInit2_']) abort("external function 'inflateInit2_' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_inflateInit2_'].apply(null, arguments);
  }
function _emscripten_preinvoke() {
  if (!parentModule['_emscripten_preinvoke']) abort("external function 'emscripten_preinvoke' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_preinvoke'].apply(null, arguments);
  }
function _ceilf() {
  if (!parentModule['_ceilf']) abort("external function 'ceilf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_ceilf'].apply(null, arguments);
  }
function _SDL_atoi() {
  if (!parentModule['_SDL_atoi']) abort("external function 'SDL_atoi' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_atoi'].apply(null, arguments);
  }
function _strcmp() {
  if (!parentModule['_strcmp']) abort("external function 'strcmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strcmp'].apply(null, arguments);
  }
function _strncmp() {
  if (!parentModule['_strncmp']) abort("external function 'strncmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strncmp'].apply(null, arguments);
  }
function _snprintf() {
  if (!parentModule['_snprintf']) abort("external function 'snprintf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_snprintf'].apply(null, arguments);
  }
function _memset() {
  if (!parentModule['_memset']) abort("external function 'memset' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_memset'].apply(null, arguments);
  }
function _SDL_SetWindowSize() {
  if (!parentModule['_SDL_SetWindowSize']) abort("external function 'SDL_SetWindowSize' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetWindowSize'].apply(null, arguments);
  }
function _strcat() {
  if (!parentModule['_strcat']) abort("external function 'strcat' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strcat'].apply(null, arguments);
  }

function _SDL_CondSignal() {
  if (!parentModule['_SDL_CondSignal']) abort("external function 'SDL_CondSignal' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CondSignal'].apply(null, arguments);
  }
function _fgets() {
  if (!parentModule['_fgets']) abort("external function 'fgets' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fgets'].apply(null, arguments);
  }
function _SDL_DestroyWindow() {
  if (!parentModule['_SDL_DestroyWindow']) abort("external function 'SDL_DestroyWindow' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_DestroyWindow'].apply(null, arguments);
  }
function _strchr() {
  if (!parentModule['_strchr']) abort("external function 'strchr' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strchr'].apply(null, arguments);
  }
function _SDL_GetWindowFlags() {
  if (!parentModule['_SDL_GetWindowFlags']) abort("external function 'SDL_GetWindowFlags' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetWindowFlags'].apply(null, arguments);
  }
function _ftell() {
  if (!parentModule['_ftell']) abort("external function 'ftell' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_ftell'].apply(null, arguments);
  }
function _sprintf() {
  if (!parentModule['_sprintf']) abort("external function 'sprintf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_sprintf'].apply(null, arguments);
  }
function _emscripten_get_longjmp_result() {
  if (!parentModule['_emscripten_get_longjmp_result']) abort("external function 'emscripten_get_longjmp_result' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_get_longjmp_result'].apply(null, arguments);
  }
function _SDL_free() {
  if (!parentModule['_SDL_free']) abort("external function 'SDL_free' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_free'].apply(null, arguments);
  }
function _SDL_getenv() {
  if (!parentModule['_SDL_getenv']) abort("external function 'SDL_getenv' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_getenv'].apply(null, arguments);
  }
function _png_set_longjmp_fn() {
  if (!parentModule['_png_set_longjmp_fn']) abort("external function 'png_set_longjmp_fn' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_set_longjmp_fn'].apply(null, arguments);
  }
function _munmap() {
  if (!parentModule['_munmap']) abort("external function 'munmap' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_munmap'].apply(null, arguments);
  }
function _fabsf() {
  if (!parentModule['_fabsf']) abort("external function 'fabsf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fabsf'].apply(null, arguments);
  }
function _SDL_GL_CreateContext() {
  if (!parentModule['_SDL_GL_CreateContext']) abort("external function 'SDL_GL_CreateContext' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_CreateContext'].apply(null, arguments);
  }
function _ferror() {
  if (!parentModule['_ferror']) abort("external function 'ferror' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_ferror'].apply(null, arguments);
  }
function _free() {
  if (!parentModule['_free']) abort("external function 'free' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_free'].apply(null, arguments);
  }
function _png_create_info_struct() {
  if (!parentModule['_png_create_info_struct']) abort("external function 'png_create_info_struct' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_create_info_struct'].apply(null, arguments);
  }
function _png_get_io_ptr() {
  if (!parentModule['_png_get_io_ptr']) abort("external function 'png_get_io_ptr' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_get_io_ptr'].apply(null, arguments);
  }
function _crc32() {
  if (!parentModule['_crc32']) abort("external function 'crc32' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_crc32'].apply(null, arguments);
  }
function _SDL_GetTicks() {
  if (!parentModule['_SDL_GetTicks']) abort("external function 'SDL_GetTicks' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetTicks'].apply(null, arguments);
  }
function _png_set_IHDR() {
  if (!parentModule['_png_set_IHDR']) abort("external function 'png_set_IHDR' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_set_IHDR'].apply(null, arguments);
  }
function _trunc() {
  if (!parentModule['_trunc']) abort("external function 'trunc' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_trunc'].apply(null, arguments);
  }
function _SDL_GetWindowPosition() {
  if (!parentModule['_SDL_GetWindowPosition']) abort("external function 'SDL_GetWindowPosition' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetWindowPosition'].apply(null, arguments);
  }
function _fseeko() {
  if (!parentModule['_fseeko']) abort("external function 'fseeko' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fseeko'].apply(null, arguments);
  }
function _SDL_CreateWindow() {
  if (!parentModule['_SDL_CreateWindow']) abort("external function 'SDL_CreateWindow' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CreateWindow'].apply(null, arguments);
  }
function _SDL_Init() {
  if (!parentModule['_SDL_Init']) abort("external function 'SDL_Init' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_Init'].apply(null, arguments);
  }
function _round() {
  if (!parentModule['_round']) abort("external function 'round' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_round'].apply(null, arguments);
  }
function _strcpy() {
  if (!parentModule['_strcpy']) abort("external function 'strcpy' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strcpy'].apply(null, arguments);
  }
function _SDL_DestroyMutex() {
  if (!parentModule['_SDL_DestroyMutex']) abort("external function 'SDL_DestroyMutex' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_DestroyMutex'].apply(null, arguments);
  }
function _deflateInit2_() {
  if (!parentModule['_deflateInit2_']) abort("external function 'deflateInit2_' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_deflateInit2_'].apply(null, arguments);
  }
function _SDL_WaitThread() {
  if (!parentModule['_SDL_WaitThread']) abort("external function 'SDL_WaitThread' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_WaitThread'].apply(null, arguments);
  }
function _inflateEnd() {
  if (!parentModule['_inflateEnd']) abort("external function 'inflateEnd' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_inflateEnd'].apply(null, arguments);
  }

function _SDL_GetEventFilter() {
  if (!parentModule['_SDL_GetEventFilter']) abort("external function 'SDL_GetEventFilter' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetEventFilter'].apply(null, arguments);
  }

function _SDL_QuitSubSystem() {
  if (!parentModule['_SDL_QuitSubSystem']) abort("external function 'SDL_QuitSubSystem' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_QuitSubSystem'].apply(null, arguments);
  }
function _roundf() {
  if (!parentModule['_roundf']) abort("external function 'roundf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_roundf'].apply(null, arguments);
  }
function _realloc() {
  if (!parentModule['_realloc']) abort("external function 'realloc' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_realloc'].apply(null, arguments);
  }
function _FtoIHigh() {
  if (!parentModule['_FtoIHigh']) abort("external function 'FtoIHigh' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_FtoIHigh'].apply(null, arguments);
  }
function _SDL_CreateRGBSurfaceFrom() {
  if (!parentModule['_SDL_CreateRGBSurfaceFrom']) abort("external function 'SDL_CreateRGBSurfaceFrom' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CreateRGBSurfaceFrom'].apply(null, arguments);
  }
function _SDL_malloc() {
  if (!parentModule['_SDL_malloc']) abort("external function 'SDL_malloc' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_malloc'].apply(null, arguments);
  }
function _SDL_GL_GetAttribute() {
  if (!parentModule['_SDL_GL_GetAttribute']) abort("external function 'SDL_GL_GetAttribute' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_GetAttribute'].apply(null, arguments);
  }
function _printf() {
  if (!parentModule['_printf']) abort("external function 'printf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_printf'].apply(null, arguments);
  }
function _SDL_GetNumDisplayModes() {
  if (!parentModule['_SDL_GetNumDisplayModes']) abort("external function 'SDL_GetNumDisplayModes' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetNumDisplayModes'].apply(null, arguments);
  }
function _fopen() {
  if (!parentModule['_fopen']) abort("external function 'fopen' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fopen'].apply(null, arguments);
  }
function _strncpy() {
  if (!parentModule['_strncpy']) abort("external function 'strncpy' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strncpy'].apply(null, arguments);
  }
function _SDL_SetWindowIcon() {
  if (!parentModule['_SDL_SetWindowIcon']) abort("external function 'SDL_SetWindowIcon' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetWindowIcon'].apply(null, arguments);
  }
function _SDL_GL_SetAttribute() {
  if (!parentModule['_SDL_GL_SetAttribute']) abort("external function 'SDL_GL_SetAttribute' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_SetAttribute'].apply(null, arguments);
  }
function _emscripten_cleanup_setjmp() {
  if (!parentModule['_emscripten_cleanup_setjmp']) abort("external function 'emscripten_cleanup_setjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_cleanup_setjmp'].apply(null, arguments);
  }
function _emscripten_postinvoke() {
  if (!parentModule['_emscripten_postinvoke']) abort("external function 'emscripten_postinvoke' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_postinvoke'].apply(null, arguments);
  }
function _mkdir() {
  if (!parentModule['_mkdir']) abort("external function 'mkdir' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_mkdir'].apply(null, arguments);
  }
function _dlsym() {
  if (!parentModule['_dlsym']) abort("external function 'dlsym' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_dlsym'].apply(null, arguments);
  }
function _deflateEnd() {
  if (!parentModule['_deflateEnd']) abort("external function 'deflateEnd' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_deflateEnd'].apply(null, arguments);
  }
function _SDL_SetWindowFullscreen() {
  if (!parentModule['_SDL_SetWindowFullscreen']) abort("external function 'SDL_SetWindowFullscreen' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_SetWindowFullscreen'].apply(null, arguments);
  }
function _memcmp() {
  if (!parentModule['_memcmp']) abort("external function 'memcmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_memcmp'].apply(null, arguments);
  }
function _SDL_InitSubSystem() {
  if (!parentModule['_SDL_InitSubSystem']) abort("external function 'SDL_InitSubSystem' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_InitSubSystem'].apply(null, arguments);
  }
function _strdup() {
  if (!parentModule['_strdup']) abort("external function 'strdup' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strdup'].apply(null, arguments);
  }
function _SDL_GetError() {
  if (!parentModule['_SDL_GetError']) abort("external function 'SDL_GetError' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetError'].apply(null, arguments);
  }
function _SDL_GetWindowSize() {
  if (!parentModule['_SDL_GetWindowSize']) abort("external function 'SDL_GetWindowSize' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetWindowSize'].apply(null, arguments);
  }
function _SDL_LockMutex() {
  if (!parentModule['_SDL_LockMutex']) abort("external function 'SDL_LockMutex' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_LockMutex'].apply(null, arguments);
  }

function _adler32() {
  if (!parentModule['_adler32']) abort("external function 'adler32' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_adler32'].apply(null, arguments);
  }
function _SDL_sscanf() {
  if (!parentModule['_SDL_sscanf']) abort("external function 'SDL_sscanf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_sscanf'].apply(null, arguments);
  }
function _SDL_CreateThread() {
  if (!parentModule['_SDL_CreateThread']) abort("external function 'SDL_CreateThread' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CreateThread'].apply(null, arguments);
  }
function _SDL_strcmp() {
  if (!parentModule['_SDL_strcmp']) abort("external function 'SDL_strcmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_strcmp'].apply(null, arguments);
  }
function _SDL_JoystickInstanceID() {
  if (!parentModule['_SDL_JoystickInstanceID']) abort("external function 'SDL_JoystickInstanceID' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_JoystickInstanceID'].apply(null, arguments);
  }
function _atoi() {
  if (!parentModule['_atoi']) abort("external function 'atoi' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_atoi'].apply(null, arguments);
  }
function _SDL_CondWait() {
  if (!parentModule['_SDL_CondWait']) abort("external function 'SDL_CondWait' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CondWait'].apply(null, arguments);
  }
function _atof() {
  if (!parentModule['_atof']) abort("external function 'atof' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_atof'].apply(null, arguments);
  }
function _inflate() {
  if (!parentModule['_inflate']) abort("external function 'inflate' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_inflate'].apply(null, arguments);
  }
function ___errno_location() {
  if (!parentModule['___errno_location']) abort("external function '__errno_location' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['___errno_location'].apply(null, arguments);
  }
function _truncf() {
  if (!parentModule['_truncf']) abort("external function 'truncf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_truncf'].apply(null, arguments);
  }
function _SDL_PushEvent() {
  if (!parentModule['_SDL_PushEvent']) abort("external function 'SDL_PushEvent' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_PushEvent'].apply(null, arguments);
  }
function _SDL_Quit() {
  if (!parentModule['_SDL_Quit']) abort("external function 'SDL_Quit' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_Quit'].apply(null, arguments);
  }
function _strspn() {
  if (!parentModule['_strspn']) abort("external function 'strspn' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strspn'].apply(null, arguments);
  }
function _time() {
  if (!parentModule['_time']) abort("external function 'time' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_time'].apply(null, arguments);
  }
function _vsprintf() {
  if (!parentModule['_vsprintf']) abort("external function 'vsprintf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_vsprintf'].apply(null, arguments);
  }
function _vsnprintf() {
  if (!parentModule['_vsnprintf']) abort("external function 'vsnprintf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_vsnprintf'].apply(null, arguments);
  }
function _malloc() {
  if (!parentModule['_malloc']) abort("external function 'malloc' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_malloc'].apply(null, arguments);
  }
function _sscanf() {
  if (!parentModule['_sscanf']) abort("external function 'sscanf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_sscanf'].apply(null, arguments);
  }
function _SDL_GL_SwapWindow() {
  if (!parentModule['_SDL_GL_SwapWindow']) abort("external function 'SDL_GL_SwapWindow' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_SwapWindow'].apply(null, arguments);
  }
function _SItoD() {
  if (!parentModule['_SItoD']) abort("external function 'SItoD' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SItoD'].apply(null, arguments);
  }
function _SItoF() {
  if (!parentModule['_SItoF']) abort("external function 'SItoF' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SItoF'].apply(null, arguments);
  }
function _fread() {
  if (!parentModule['_fread']) abort("external function 'fread' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fread'].apply(null, arguments);
  }
function _ftello() {
  if (!parentModule['_ftello']) abort("external function 'ftello' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_ftello'].apply(null, arguments);
  }
function _DtoIHigh() {
  if (!parentModule['_DtoIHigh']) abort("external function 'DtoIHigh' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_DtoIHigh'].apply(null, arguments);
  }
function _fprintf() {
  if (!parentModule['_fprintf']) abort("external function 'fprintf' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fprintf'].apply(null, arguments);
  }
function _emscripten_prep_setjmp() {
  if (!parentModule['_emscripten_prep_setjmp']) abort("external function 'emscripten_prep_setjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_prep_setjmp'].apply(null, arguments);
  }
function _strlen() {
  if (!parentModule['_strlen']) abort("external function 'strlen' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strlen'].apply(null, arguments);
  }
function _fabs() {
  if (!parentModule['_fabs']) abort("external function 'fabs' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fabs'].apply(null, arguments);
  }
function _floor() {
  if (!parentModule['_floor']) abort("external function 'floor' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_floor'].apply(null, arguments);
  }
function _fseek() {
  if (!parentModule['_fseek']) abort("external function 'fseek' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_fseek'].apply(null, arguments);
  }
function _SDL_UnlockMutex() {
  if (!parentModule['_SDL_UnlockMutex']) abort("external function 'SDL_UnlockMutex' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_UnlockMutex'].apply(null, arguments);
  }
function _gzread() {
  if (!parentModule['_gzread']) abort("external function 'gzread' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_gzread'].apply(null, arguments);
  }
function _llvm_sqrt_f32() {
  if (!parentModule['_llvm_sqrt_f32']) abort("external function 'llvm_sqrt_f32' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_llvm_sqrt_f32'].apply(null, arguments);
  }
function _SDL_GL_DeleteContext() {
  if (!parentModule['_SDL_GL_DeleteContext']) abort("external function 'SDL_GL_DeleteContext' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GL_DeleteContext'].apply(null, arguments);
  }
function _stat() {
  if (!parentModule['_stat']) abort("external function 'stat' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_stat'].apply(null, arguments);
  }
function _longjmp() {
  if (!parentModule['_longjmp']) abort("external function 'longjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_longjmp'].apply(null, arguments);
  }
function _tolower() {
  if (!parentModule['_tolower']) abort("external function 'tolower' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_tolower'].apply(null, arguments);
  }
function _png_write_png() {
  if (!parentModule['_png_write_png']) abort("external function 'png_write_png' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_write_png'].apply(null, arguments);
  }
function _emscripten_set_main_loop() {
  if (!parentModule['_emscripten_set_main_loop']) abort("external function 'emscripten_set_main_loop' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_set_main_loop'].apply(null, arguments);
  }
function _gzwrite() {
  if (!parentModule['_gzwrite']) abort("external function 'gzwrite' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_gzwrite'].apply(null, arguments);
  }
function _deflate() {
  if (!parentModule['_deflate']) abort("external function 'deflate' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_deflate'].apply(null, arguments);
  }
function _strpbrk() {
  if (!parentModule['_strpbrk']) abort("external function 'strpbrk' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strpbrk'].apply(null, arguments);
  }
function _png_set_write_fn() {
  if (!parentModule['_png_set_write_fn']) abort("external function 'png_set_write_fn' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_set_write_fn'].apply(null, arguments);
  }
function _emscripten_longjmp() {
  if (!parentModule['_emscripten_longjmp']) abort("external function 'emscripten_longjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_longjmp'].apply(null, arguments);
  }
function _SDL_Delay() {
  if (!parentModule['_SDL_Delay']) abort("external function 'SDL_Delay' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_Delay'].apply(null, arguments);
  }
function _getenv() {
  if (!parentModule['_getenv']) abort("external function 'getenv' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_getenv'].apply(null, arguments);
  }
function _strcasecmp() {
  if (!parentModule['_strcasecmp']) abort("external function 'strcasecmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_strcasecmp'].apply(null, arguments);
  }
function _emscripten_setjmp() {
  if (!parentModule['_emscripten_setjmp']) abort("external function 'emscripten_setjmp' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_emscripten_setjmp'].apply(null, arguments);
  }
function _SDL_CreateMutex() {
  if (!parentModule['_SDL_CreateMutex']) abort("external function 'SDL_CreateMutex' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CreateMutex'].apply(null, arguments);
  }
function _SDL_GetDesktopDisplayMode() {
  if (!parentModule['_SDL_GetDesktopDisplayMode']) abort("external function 'SDL_GetDesktopDisplayMode' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetDesktopDisplayMode'].apply(null, arguments);
  }
function _gzopen() {
  if (!parentModule['_gzopen']) abort("external function 'gzopen' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_gzopen'].apply(null, arguments);
  }
function _gzclose() {
  if (!parentModule['_gzclose']) abort("external function 'gzclose' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_gzclose'].apply(null, arguments);
  }
function _SDL_realloc() {
  if (!parentModule['_SDL_realloc']) abort("external function 'SDL_realloc' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_realloc'].apply(null, arguments);
  }
function _png_destroy_write_struct() {
  if (!parentModule['_png_destroy_write_struct']) abort("external function 'png_destroy_write_struct' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_png_destroy_write_struct'].apply(null, arguments);
  }
function _SDL_FreeSurface() {
  if (!parentModule['_SDL_FreeSurface']) abort("external function 'SDL_FreeSurface' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_FreeSurface'].apply(null, arguments);
  }
function _FtoILow() {
  if (!parentModule['_FtoILow']) abort("external function 'FtoILow' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_FtoILow'].apply(null, arguments);
  }
function _SDL_CreateCond() {
  if (!parentModule['_SDL_CreateCond']) abort("external function 'SDL_CreateCond' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_CreateCond'].apply(null, arguments);
  }
function _SDL_GetDisplayMode() {
  if (!parentModule['_SDL_GetDisplayMode']) abort("external function 'SDL_GetDisplayMode' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return parentModule['_SDL_GetDisplayMode'].apply(null, arguments);
  }
 


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
var setTempRet0 = Runtime.setTempRet0, getTempRet0 = Runtime.getTempRet0;

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiii(x, a0, a1, a2) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_iiii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_iiii"][x](a0, a1, a2);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_i(x) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_i"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_i"][x]();
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_vi(x, a0) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_vi"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_vi"][x](a0);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_vii(x, a0, a1) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_vii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_vii"][x](a0, a1);
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viiiiiiiii(x, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_viiiiiiiii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_viiiiiiiii"][x](a0, a1, a2, a3, a4, a5, a6, a7, a8);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_ii(x, a0) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_ii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_ii"][x](a0);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viii(x, a0, a1, a2) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_viii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_viii"][x](a0, a1, a2);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_v(x) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_v"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_v"][x]();
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_iiiii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_iiiii"][x](a0, a1, a2, a3);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iii(x, a0, a1) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_iii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_iii"][x](a0, a1);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiiiii(x, a0, a1, a2, a3, a4) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_iiiiii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_iiiiii"][x](a0, a1, a2, a3, a4);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= parentModule["FUNCTION_TABLE_viiii"].length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return parentModule["FUNCTION_TABLE_viiii"][x](a0, a1, a2, a3);
}


var dynCall_iiii = ftCall_iiii;


var dynCall_i = ftCall_i;


var dynCall_vi = ftCall_vi;


var dynCall_vii = ftCall_vii;


var dynCall_viiiiiiiii = ftCall_viiiiiiiii;


var dynCall_ii = ftCall_ii;


var dynCall_viii = ftCall_viii;


var dynCall_v = ftCall_v;


var dynCall_iiiii = ftCall_iiiii;


var dynCall_iii = ftCall_iii;


var dynCall_iiiiii = ftCall_iiiiii;


var dynCall_viiii = ftCall_viiii;


Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "invoke_iiii": invoke_iiii, "ftCall_iiii": ftCall_iiii, "invoke_i": invoke_i, "ftCall_i": ftCall_i, "invoke_vi": invoke_vi, "ftCall_vi": ftCall_vi, "invoke_vii": invoke_vii, "ftCall_vii": ftCall_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "ftCall_viiiiiiiii": ftCall_viiiiiiiii, "invoke_ii": invoke_ii, "ftCall_ii": ftCall_ii, "invoke_viii": invoke_viii, "ftCall_viii": ftCall_viii, "invoke_v": invoke_v, "ftCall_v": ftCall_v, "invoke_iiiii": invoke_iiiii, "ftCall_iiiii": ftCall_iiiii, "invoke_iii": invoke_iii, "ftCall_iii": ftCall_iii, "invoke_iiiiii": invoke_iiiiii, "ftCall_iiiiii": ftCall_iiiiii, "invoke_viiii": invoke_viiii, "ftCall_viiii": ftCall_viiii, "_fabs": _fabs, "_FtoILow": _FtoILow, "_strlen": _strlen, "_strcat": _strcat, "_gzread": _gzread, "_dlsym": _dlsym, "_png_get_io_ptr": _png_get_io_ptr, "_fread": _fread, "_SDL_CreateWindow": _SDL_CreateWindow, "_strpbrk": _strpbrk, "_SDL_UnlockMutex": _SDL_UnlockMutex, "_gzwrite": _gzwrite, "_longjmp": _longjmp, "_strncpy": _strncpy, "_emscripten_preinvoke": _emscripten_preinvoke, "_emscripten_prep_setjmp": _emscripten_prep_setjmp, "_ceilf": _ceilf, "_memcpy": _memcpy, "_SDL_FreeSurface": _SDL_FreeSurface, "_SDL_GetNumDisplayModes": _SDL_GetNumDisplayModes, "_SDL_DestroyWindow": _SDL_DestroyWindow, "_adler32": _adler32, "_ferror": _ferror, "_SDL_GetDisplayMode": _SDL_GetDisplayMode, "_png_set_rows": _png_set_rows, "_SDL_strdup": _SDL_strdup, "_vsprintf": _vsprintf, "_SDL_GL_SwapWindow": _SDL_GL_SwapWindow, "_SDL_GetWindowSize": _SDL_GetWindowSize, "_gzopen": _gzopen, "_ftell": _ftell, "_SDL_GL_DeleteContext": _SDL_GL_DeleteContext, "_llvm_sqrt_f32": _llvm_sqrt_f32, "_free": _free, "_round": _round, "_SDL_realloc": _SDL_realloc, "_SDL_JoystickOpen": _SDL_JoystickOpen, "_tolower": _tolower, "_DtoIHigh": _DtoIHigh, "_mkdir": _mkdir, "_SDL_WasInit": _SDL_WasInit, "_SDL_WaitThread": _SDL_WaitThread, "_emscripten_postinvoke": _emscripten_postinvoke, "_SDL_AllocFormat": _SDL_AllocFormat, "_SDL_CreateCond": _SDL_CreateCond, "_SDL_SetEventFilter": _SDL_SetEventFilter, "_SDL_QuitSubSystem": _SDL_QuitSubSystem, "_truncf": _truncf, "_SDL_SetError": _SDL_SetError, "_emscripten_cleanup_setjmp": _emscripten_cleanup_setjmp, "_SDL_GetError": _SDL_GetError, "_deflateEnd": _deflateEnd, "_SDL_GetTicks": _SDL_GetTicks, "_png_write_png": _png_write_png, "_SDL_free": _SDL_free, "_fseeko": _fseeko, "_SDL_SetWindowTitle": _SDL_SetWindowTitle, "_strtod": _strtod, "_strtol": _strtol, "_strtok": _strtok, "_SDL_LockMutex": _SDL_LockMutex, "_deflate": _deflate, "_strcasecmp": _strcasecmp, "_SDL_GetEventFilter": _SDL_GetEventFilter, "_strchr": _strchr, "_inflateInit2_": _inflateInit2_, "_atoi": _atoi, "_DtoILow": _DtoILow, "_printf": _printf, "_sprintf": _sprintf, "_SDL_strcmp": _SDL_strcmp, "_localtime": _localtime, "_stat": _stat, "_vsnprintf": _vsnprintf, "_fesetround": _fesetround, "_SDL_CondSignal": _SDL_CondSignal, "_fwrite": _fwrite, "_time": _time, "_crc32": _crc32, "_munmap": _munmap, "_mmap": _mmap, "_strcpy": _strcpy, "_SDL_SetWindowFullscreen": _SDL_SetWindowFullscreen, "_roundf": _roundf, "_SDL_ShowCursor": _SDL_ShowCursor, "_trunc": _trunc, "_inflate": _inflate, "_SDL_CreateMutex": _SDL_CreateMutex, "_emscripten_setjmp": _emscripten_setjmp, "_SDL_Delay": _SDL_Delay, "_SDL_GL_CreateContext": _SDL_GL_CreateContext, "_floor": _floor, "_SDL_PumpEvents": _SDL_PumpEvents, "_deflateInit2_": _deflateInit2_, "_llvm_sqrt_f64": _llvm_sqrt_f64, "_SDL_getenv": _SDL_getenv, "_memset": _memset, "_atof": _atof, "_fabsf": _fabsf, "_SDL_Init": _SDL_Init, "_snprintf": _snprintf, "_SDL_CreateThread": _SDL_CreateThread, "_SDL_malloc": _SDL_malloc, "_SDL_sscanf": _SDL_sscanf, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_SDL_SetWindowSize": _SDL_SetWindowSize, "_SDL_GL_GetAttribute": _SDL_GL_GetAttribute, "_fseek": _fseek, "_SDL_GetMouseState": _SDL_GetMouseState, "_getenv": _getenv, "_fclose": _fclose, "_SDL_CondWait": _SDL_CondWait, "_floorf": _floorf, "_SDL_CreateRGBSurfaceFrom": _SDL_CreateRGBSurfaceFrom, "_SDL_Quit": _SDL_Quit, "_emscripten_get_longjmp_result": _emscripten_get_longjmp_result, "_SDL_NumJoysticks": _SDL_NumJoysticks, "_SDL_GL_MakeCurrent": _SDL_GL_MakeCurrent, "_memcmp": _memcmp, "_FtoIHigh": _FtoIHigh, "_SDL_JoystickInstanceID": _SDL_JoystickInstanceID, "_malloc": _malloc, "_strncmp": _strncmp, "_png_create_info_struct": _png_create_info_struct, "_isspace": _isspace, "_fopen": _fopen, "_strspn": _strspn, "_SDL_InitSubSystem": _SDL_InitSubSystem, "_png_set_IHDR": _png_set_IHDR, "_SDL_GetWindowPosition": _SDL_GetWindowPosition, "_ceil": _ceil, "_fflush": _fflush, "_SDL_DestroyCond": _SDL_DestroyCond, "_SItoF": _SItoF, "_SItoD": _SItoD, "_fprintf": _fprintf, "_sscanf": _sscanf, "_strdup": _strdup, "_gzclose": _gzclose, "_png_set_longjmp_fn": _png_set_longjmp_fn, "_SDL_PushEvent": _SDL_PushEvent, "_realloc": _realloc, "_SDL_atoi": _SDL_atoi, "_saveSetjmp": _saveSetjmp, "_SDL_SetWindowIcon": _SDL_SetWindowIcon, "_SDL_DestroyMutex": _SDL_DestroyMutex, "_SDL_GetWindowFlags": _SDL_GetWindowFlags, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_png_create_write_struct": _png_create_write_struct, "_SDL_GetDesktopDisplayMode": _SDL_GetDesktopDisplayMode, "_strcmp": _strcmp, "_SDL_GL_GetProcAddress": _SDL_GL_GetProcAddress, "_ftello": _ftello, "_memmove": _memmove, "_inflateEnd": _inflateEnd, "_png_destroy_write_struct": _png_destroy_write_struct, "_emscripten_longjmp": _emscripten_longjmp, "_png_set_write_fn": _png_set_write_fn, "_fgets": _fgets, "_emscripten_check_longjmp": _emscripten_check_longjmp, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "gb": gb, "fb": fb };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var gb=env.gb|0;
  var fb=env.fb|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var invoke_iiii=env.invoke_iiii;
  var ftCall_iiii=env.ftCall_iiii;
  var invoke_i=env.invoke_i;
  var ftCall_i=env.ftCall_i;
  var invoke_vi=env.invoke_vi;
  var ftCall_vi=env.ftCall_vi;
  var invoke_vii=env.invoke_vii;
  var ftCall_vii=env.ftCall_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var ftCall_viiiiiiiii=env.ftCall_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var ftCall_ii=env.ftCall_ii;
  var invoke_viii=env.invoke_viii;
  var ftCall_viii=env.ftCall_viii;
  var invoke_v=env.invoke_v;
  var ftCall_v=env.ftCall_v;
  var invoke_iiiii=env.invoke_iiiii;
  var ftCall_iiiii=env.ftCall_iiiii;
  var invoke_iii=env.invoke_iii;
  var ftCall_iii=env.ftCall_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var ftCall_iiiiii=env.ftCall_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var ftCall_viiii=env.ftCall_viiii;
  var _fabs=env._fabs;
  var _FtoILow=env._FtoILow;
  var _strlen=env._strlen;
  var _strcat=env._strcat;
  var _gzread=env._gzread;
  var _dlsym=env._dlsym;
  var _png_get_io_ptr=env._png_get_io_ptr;
  var _fread=env._fread;
  var _SDL_CreateWindow=env._SDL_CreateWindow;
  var _strpbrk=env._strpbrk;
  var _SDL_UnlockMutex=env._SDL_UnlockMutex;
  var _gzwrite=env._gzwrite;
  var _longjmp=env._longjmp;
  var _strncpy=env._strncpy;
  var _emscripten_preinvoke=env._emscripten_preinvoke;
  var _emscripten_prep_setjmp=env._emscripten_prep_setjmp;
  var _ceilf=env._ceilf;
  var _memcpy=env._memcpy;
  var _SDL_FreeSurface=env._SDL_FreeSurface;
  var _SDL_GetNumDisplayModes=env._SDL_GetNumDisplayModes;
  var _SDL_DestroyWindow=env._SDL_DestroyWindow;
  var _adler32=env._adler32;
  var _ferror=env._ferror;
  var _SDL_GetDisplayMode=env._SDL_GetDisplayMode;
  var _png_set_rows=env._png_set_rows;
  var _SDL_strdup=env._SDL_strdup;
  var _vsprintf=env._vsprintf;
  var _SDL_GL_SwapWindow=env._SDL_GL_SwapWindow;
  var _SDL_GetWindowSize=env._SDL_GetWindowSize;
  var _gzopen=env._gzopen;
  var _ftell=env._ftell;
  var _SDL_GL_DeleteContext=env._SDL_GL_DeleteContext;
  var _llvm_sqrt_f32=env._llvm_sqrt_f32;
  var _free=env._free;
  var _round=env._round;
  var _SDL_realloc=env._SDL_realloc;
  var _SDL_JoystickOpen=env._SDL_JoystickOpen;
  var _tolower=env._tolower;
  var _DtoIHigh=env._DtoIHigh;
  var _mkdir=env._mkdir;
  var _SDL_WasInit=env._SDL_WasInit;
  var _SDL_WaitThread=env._SDL_WaitThread;
  var _emscripten_postinvoke=env._emscripten_postinvoke;
  var _SDL_AllocFormat=env._SDL_AllocFormat;
  var _SDL_CreateCond=env._SDL_CreateCond;
  var _SDL_SetEventFilter=env._SDL_SetEventFilter;
  var _SDL_QuitSubSystem=env._SDL_QuitSubSystem;
  var _truncf=env._truncf;
  var _SDL_SetError=env._SDL_SetError;
  var _emscripten_cleanup_setjmp=env._emscripten_cleanup_setjmp;
  var _SDL_GetError=env._SDL_GetError;
  var _deflateEnd=env._deflateEnd;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _png_write_png=env._png_write_png;
  var _SDL_free=env._SDL_free;
  var _fseeko=env._fseeko;
  var _SDL_SetWindowTitle=env._SDL_SetWindowTitle;
  var _strtod=env._strtod;
  var _strtol=env._strtol;
  var _strtok=env._strtok;
  var _SDL_LockMutex=env._SDL_LockMutex;
  var _deflate=env._deflate;
  var _strcasecmp=env._strcasecmp;
  var _SDL_GetEventFilter=env._SDL_GetEventFilter;
  var _strchr=env._strchr;
  var _inflateInit2_=env._inflateInit2_;
  var _atoi=env._atoi;
  var _DtoILow=env._DtoILow;
  var _printf=env._printf;
  var _sprintf=env._sprintf;
  var _SDL_strcmp=env._SDL_strcmp;
  var _localtime=env._localtime;
  var _stat=env._stat;
  var _vsnprintf=env._vsnprintf;
  var _fesetround=env._fesetround;
  var _SDL_CondSignal=env._SDL_CondSignal;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _crc32=env._crc32;
  var _munmap=env._munmap;
  var _mmap=env._mmap;
  var _strcpy=env._strcpy;
  var _SDL_SetWindowFullscreen=env._SDL_SetWindowFullscreen;
  var _roundf=env._roundf;
  var _SDL_ShowCursor=env._SDL_ShowCursor;
  var _trunc=env._trunc;
  var _inflate=env._inflate;
  var _SDL_CreateMutex=env._SDL_CreateMutex;
  var _emscripten_setjmp=env._emscripten_setjmp;
  var _SDL_Delay=env._SDL_Delay;
  var _SDL_GL_CreateContext=env._SDL_GL_CreateContext;
  var _floor=env._floor;
  var _SDL_PumpEvents=env._SDL_PumpEvents;
  var _deflateInit2_=env._deflateInit2_;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var _SDL_getenv=env._SDL_getenv;
  var _memset=env._memset;
  var _atof=env._atof;
  var _fabsf=env._fabsf;
  var _SDL_Init=env._SDL_Init;
  var _snprintf=env._snprintf;
  var _SDL_CreateThread=env._SDL_CreateThread;
  var _SDL_malloc=env._SDL_malloc;
  var _SDL_sscanf=env._SDL_sscanf;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _SDL_SetWindowSize=env._SDL_SetWindowSize;
  var _SDL_GL_GetAttribute=env._SDL_GL_GetAttribute;
  var _fseek=env._fseek;
  var _SDL_GetMouseState=env._SDL_GetMouseState;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _SDL_CondWait=env._SDL_CondWait;
  var _floorf=env._floorf;
  var _SDL_CreateRGBSurfaceFrom=env._SDL_CreateRGBSurfaceFrom;
  var _SDL_Quit=env._SDL_Quit;
  var _emscripten_get_longjmp_result=env._emscripten_get_longjmp_result;
  var _SDL_NumJoysticks=env._SDL_NumJoysticks;
  var _SDL_GL_MakeCurrent=env._SDL_GL_MakeCurrent;
  var _memcmp=env._memcmp;
  var _FtoIHigh=env._FtoIHigh;
  var _SDL_JoystickInstanceID=env._SDL_JoystickInstanceID;
  var _malloc=env._malloc;
  var _strncmp=env._strncmp;
  var _png_create_info_struct=env._png_create_info_struct;
  var _isspace=env._isspace;
  var _fopen=env._fopen;
  var _strspn=env._strspn;
  var _SDL_InitSubSystem=env._SDL_InitSubSystem;
  var _png_set_IHDR=env._png_set_IHDR;
  var _SDL_GetWindowPosition=env._SDL_GetWindowPosition;
  var _ceil=env._ceil;
  var _fflush=env._fflush;
  var _SDL_DestroyCond=env._SDL_DestroyCond;
  var _SItoF=env._SItoF;
  var _SItoD=env._SItoD;
  var _fprintf=env._fprintf;
  var _sscanf=env._sscanf;
  var _strdup=env._strdup;
  var _gzclose=env._gzclose;
  var _png_set_longjmp_fn=env._png_set_longjmp_fn;
  var _SDL_PushEvent=env._SDL_PushEvent;
  var _realloc=env._realloc;
  var _SDL_atoi=env._SDL_atoi;
  var _saveSetjmp=env._saveSetjmp;
  var _SDL_SetWindowIcon=env._SDL_SetWindowIcon;
  var _SDL_DestroyMutex=env._SDL_DestroyMutex;
  var _SDL_GetWindowFlags=env._SDL_GetWindowFlags;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _png_create_write_struct=env._png_create_write_struct;
  var _SDL_GetDesktopDisplayMode=env._SDL_GetDesktopDisplayMode;
  var _strcmp=env._strcmp;
  var _SDL_GL_GetProcAddress=env._SDL_GL_GetProcAddress;
  var _ftello=env._ftello;
  var _memmove=env._memmove;
  var _inflateEnd=env._inflateEnd;
  var _png_destroy_write_struct=env._png_destroy_write_struct;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _png_set_write_fn=env._png_set_write_fn;
  var _fgets=env._fgets;
  var _emscripten_check_longjmp=env._emscripten_check_longjmp;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function _set_audio_format($ai,$frequency,$bits) {
 $ai = $ai|0;
 $frequency = $frequency|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $frequency;
 $2 = $bits;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 mftCall_viii($5|0,($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function _push_audio_samples($ai,$buffer,$size) {
 $ai = $ai|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $buffer;
 $2 = $size;
 $3 = $0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 mftCall_viii($5|0,($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function _connect_ai($ai,$r4300,$ri,$vi) {
 $ai = $ai|0;
 $r4300 = $r4300|0;
 $ri = $ri|0;
 $vi = $vi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $r4300;
 $2 = $ri;
 $3 = $vi;
 $4 = $1;
 $5 = $0;
 $6 = ((($5)) + 64|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = $0;
 $9 = ((($8)) + 68|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $0;
 $12 = ((($11)) + 72|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _init_ai($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;
 $4 = $0;
 $5 = ((($4)) + 48|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function _read_ai_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $ai = $3;
 $4 = $1;
 $5 = (_ai_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $ai;
  $9 = (_get_remaining_dma_length($8)|0);
  $10 = $2;
  HEAP32[$10>>2] = $9;
  STACKTOP = sp;return 0;
 } else {
  $11 = $reg;
  $12 = $ai;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _ai_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _get_remaining_dma_length($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp0_regs = 0, $next_ai_event = 0, $remaining_dma_duration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ai;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 _cp0_update_count();
 $7 = (_get_event(64)|0);
 $next_ai_event = $7;
 $8 = $next_ai_event;
 $9 = ($8|0)==(0);
 if ($9) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $10 = (_r4300_cp0_regs()|0);
 $cp0_regs = $10;
 $11 = $next_ai_event;
 $12 = $cp0_regs;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) - ($14))|0;
 $remaining_dma_duration = $15;
 $16 = $remaining_dma_duration;
 $17 = ($16>>>0)>=(2147483648);
 if ($17) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $18 = $remaining_dma_duration;
  $19 = $1;
  $20 = ((($19)) + 24|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (___muldi3(($18|0),0,($22|0),0)|0);
  $24 = (getTempRet0() | 0);
  $25 = $1;
  $26 = ((($25)) + 24|0);
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (___udivdi3(($23|0),($24|0),($28|0),0)|0);
  $30 = (getTempRet0() | 0);
  $0 = $29;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _write_ai_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $reg = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $ai = $5;
 $6 = $2;
 $7 = (_ai_reg($6)|0);
 $reg = $7;
 $8 = $reg;
 switch ($8|0) {
 case 1:  {
  $9 = $ai;
  $10 = ((($9)) + 4|0);
  $11 = $3;
  $12 = $4;
  _masked_write($10,$11,$12);
  $13 = $ai;
  _fifo_push($13);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
  break;
 }
 case 3:  {
  $14 = $ai;
  $15 = ((($14)) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  _clear_rcp_interrupt($16,4);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
  break;
 }
 case 4: case 5:  {
  $17 = $reg;
  $18 = $ai;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = $4;
  $23 = $21 & $22;
  $24 = ($20|0)!=($23|0);
  if ($24) {
   $25 = $ai;
   $26 = ((($25)) + 48|0);
   HEAP32[$26>>2] = 1;
  }
  $27 = $reg;
  $28 = $ai;
  $29 = (($28) + ($27<<2)|0);
  $30 = $3;
  $31 = $4;
  _masked_write($29,$30,$31);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
  break;
 }
 default: {
  $32 = $reg;
  $33 = $ai;
  $34 = (($33) + ($32<<2)|0);
  $35 = $3;
  $36 = $4;
  _masked_write($34,$35,$36);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 }
 return (0)|0;
}
function _masked_write($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _fifo_push($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $duration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $0;
 $2 = (_get_dma_duration($1)|0);
 $duration = $2;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1073741824;
 $7 = ($6|0)!=(0);
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 24|0);
 if ($7) {
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = $9;
  $13 = $0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = ((($16)) + 24|0);
  $18 = ((($17)) + 12|0);
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $15;
  $20 = $duration;
  $21 = $0;
  $22 = ((($21)) + 24|0);
  $23 = ((($22)) + 12|0);
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = $20;
  $25 = $0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 | -2147483648;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return;
 } else {
  HEAP32[$11>>2] = $9;
  $29 = $0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = ((($32)) + 24|0);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $31;
  $35 = $duration;
  $36 = $0;
  $37 = ((($36)) + 24|0);
  $38 = ((($37)) + 8|0);
  HEAP32[$38>>2] = $35;
  $39 = $0;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 | 1073741824;
  HEAP32[$40>>2] = $42;
  $43 = $0;
  $44 = $0;
  $45 = ((($44)) + 24|0);
  _do_dma($43,$45);
  STACKTOP = sp;return;
 }
}
function _ai_end_of_dma_event($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $0;
 _fifo_pop($1);
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 _raise_rcp_interrupt($4,4);
 STACKTOP = sp;return;
}
function _fifo_pop($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -2147483648;
 $5 = ($4|0)!=(0);
 $6 = $0;
 if ($5) {
  $7 = ((($6)) + 24|0);
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = ((($10)) + 24|0);
  HEAP32[$11>>2] = $9;
  $12 = $0;
  $13 = ((($12)) + 24|0);
  $14 = ((($13)) + 12|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  $18 = ((($17)) + 24|0);
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $16;
  $20 = $0;
  $21 = ((($20)) + 24|0);
  $22 = ((($21)) + 12|0);
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = ((($25)) + 24|0);
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $24;
  $28 = $0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 2147483647;
  HEAP32[$29>>2] = $31;
  $32 = $0;
  $33 = $0;
  $34 = ((($33)) + 24|0);
  _do_dma($32,$34);
  STACKTOP = sp;return;
 } else {
  $35 = ((($6)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & -1073741825;
  HEAP32[$35>>2] = $37;
  STACKTOP = sp;return;
 }
}
function _get_dma_duration($ai) {
 $ai = $ai|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $samples_per_sec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = HEAP32[((((gb + (8422180) | 0)) + 12|0))>>2]|0;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (1 + ($4))|0;
 $6 = (($1>>>0) / ($5>>>0))&-1;
 $samples_per_sec = $6;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (___muldi3(($9|0),0,($14|0),0)|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[((((gb + (8422180) | 0)) + 8|0))>>2]|0;
 $18 = ($17|0)<(0);
 $19 = $18 << 31 >> 31;
 $20 = (___muldi3(($15|0),($16|0),($17|0),($19|0))|0);
 $21 = (getTempRet0() | 0);
 $22 = $samples_per_sec;
 $23 = $22<<2;
 $24 = (___udivdi3(($20|0),($21|0),($23|0),0)|0);
 $25 = (getTempRet0() | 0);
 STACKTOP = sp;return ($24|0);
}
function _do_dma($ai,$dma) {
 $ai = $ai|0;
 $dma = $dma|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $frequency = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ai;
 $1 = $dma;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $16 = 44100;
  } else {
   $10 = HEAP32[((((gb + (8422180) | 0)) + 12|0))>>2]|0;
   $11 = $0;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (1 + ($13))|0;
   $15 = (($10>>>0) / ($14>>>0))&-1;
   $16 = $15;
  }
  $frequency = $16;
  $17 = $0;
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $25 = 16;
  } else {
   $21 = $0;
   $22 = ((($21)) + 20|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (1 + ($23))|0;
   $25 = $24;
  }
  $bits = $25;
  $26 = $0;
  $27 = $frequency;
  $28 = $bits;
  _set_audio_format($26,$27,$28);
  $29 = $0;
  $30 = ((($29)) + 48|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $0;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33>>>0) / 4)&-1;
 $35 = $0;
 $36 = ((($35)) + 68|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($34<<2)|0);
 $42 = $1;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 _push_audio_samples($31,$41,$44);
 _cp0_update_count();
 $45 = $1;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 _add_interupt_event(64,$47);
 STACKTOP = sp;return;
}
function _SetDebugCallback($pFunc,$Context) {
 $pFunc = $pFunc|0;
 $Context = $Context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFunc;
 $1 = $Context;
 $2 = $0;
 HEAP32[(gb + (8410488) | 0)>>2] = $2;
 $3 = $1;
 HEAP32[(gb + (8410492) | 0)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _SetStateCallback($pFunc,$Context) {
 $pFunc = $pFunc|0;
 $Context = $Context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pFunc;
 $1 = $Context;
 $2 = $0;
 HEAP32[(gb + (8410496) | 0)>>2] = $2;
 $3 = $1;
 HEAP32[(gb + (8410500) | 0)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _DebugMessage($level,$message,$varargs) {
 $level = $level|0;
 $message = $message|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $args = 0, $msgbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msgbuf = sp + 24|0;
 $args = sp;
 $0 = $level;
 $1 = $message;
 $2 = HEAP32[(gb + (8410488) | 0)>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = $1;
 (_vsprintf(($msgbuf|0),($4|0),($args|0))|0);
 $5 = HEAP32[(gb + (8410488) | 0)>>2]|0;
 $6 = HEAP32[(gb + (8410492) | 0)>>2]|0;
 $7 = $0;
 mftCall_viii($5|0,($6|0),($7|0),($msgbuf|0));
 STACKTOP = sp;return;
}
function _StateChanged($param_type,$new_value) {
 $param_type = $param_type|0;
 $new_value = $new_value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $param_type;
 $1 = $new_value;
 $2 = HEAP32[(gb + (8410496) | 0)>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(gb + (8410496) | 0)>>2]|0;
 $5 = HEAP32[(gb + (8410500) | 0)>>2]|0;
 $6 = $0;
 $7 = $1;
 mftCall_viii($4|0,($5|0),($6|0),($7|0));
 STACKTOP = sp;return;
}
function _PluginGetVersion($PluginType,$PluginVersion,$APIVersion,$PluginNamePtr,$Capabilities) {
 $PluginType = $PluginType|0;
 $PluginVersion = $PluginVersion|0;
 $APIVersion = $APIVersion|0;
 $PluginNamePtr = $PluginNamePtr|0;
 $Capabilities = $Capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $PluginType;
 $1 = $PluginVersion;
 $2 = $APIVersion;
 $3 = $PluginNamePtr;
 $4 = $Capabilities;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  HEAP32[$7>>2] = 5;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  HEAP32[$10>>2] = 132352;
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 131329;
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  HEAP32[$16>>2] = (gb + (4920) | 0);
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $4;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _CoreGetAPIVersions($ConfigVersion,$DebugVersion,$VidextVersion,$ExtraVersion) {
 $ConfigVersion = $ConfigVersion|0;
 $DebugVersion = $DebugVersion|0;
 $VidextVersion = $VidextVersion|0;
 $ExtraVersion = $ExtraVersion|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ConfigVersion;
 $1 = $DebugVersion;
 $2 = $VidextVersion;
 $3 = $ExtraVersion;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  HEAP32[$6>>2] = 131840;
 }
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  HEAP32[$9>>2] = 131072;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  HEAP32[$12>>2] = 196608;
 }
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return 0;
 }
 $15 = $3;
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return 0;
}
function _CoreErrorMessage($ReturnCode) {
 $ReturnCode = $ReturnCode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ReturnCode;
 $2 = $1;
 $i = $2;
 $3 = $i;
 $4 = ($3>>>0)>=(15);
 if ($4) {
  $0 = (gb + (4937) | 0);
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 } else {
  $5 = $i;
  $6 = ((gb + (0) | 0) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _ConfigInit($ConfigDirOverride,$DataDirOverride) {
 $ConfigDirOverride = $ConfigDirOverride|0;
 $DataDirOverride = $DataDirOverride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $configpath = 0, $configtext = 0, $current_section = 0, $end = 0, $fPtr = 0;
 var $filelen = 0, $filepath = 0, $ftell_result = 0, $l = 0, $lastcomment = 0, $line = 0, $rval = 0, $val_float = 0.0, $val_int = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $current_section = sp + 36|0;
 $line = sp + 32|0;
 $l = sp + 12|0;
 $1 = $ConfigDirOverride;
 $2 = $DataDirOverride;
 $configpath = 0;
 HEAP32[$current_section>>2] = 0;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 2;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 HEAP32[(gb + (8410504) | 0)>>2] = 1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = (_strdup(($7|0))|0);
  HEAP32[(gb + (8410508) | 0)>>2] = $8;
  $9 = HEAP32[(gb + (8410508) | 0)>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $0 = 7;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 }
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = (_strdup(($13|0))|0);
  HEAP32[(gb + (8410512) | 0)>>2] = $14;
  $15 = HEAP32[(gb + (8410512) | 0)>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $0 = 7;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 }
 $17 = (_ConfigGetUserConfigPath()|0);
 $configpath = $17;
 $18 = $configpath;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $0 = 8;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $20 = $configpath;
 $21 = (_combinepath($20,(gb + (5961) | 0))|0);
 $filepath = $21;
 $22 = $filepath;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $0 = 7;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $24 = $filepath;
 $25 = (_fopen(($24|0),((gb + (20660) | 0)|0))|0);
 $fPtr = $25;
 $26 = $fPtr;
 $27 = ($26|0)==(0|0);
 $28 = $filepath;
 if ($27) {
  HEAP32[$vararg_buffer>>2] = $28;
  _DebugMessage(3,(gb + (5977) | 0),$vararg_buffer);
  $29 = $filepath;
  _free(($29|0));
  HEAP32[(gb + (8410516) | 0)>>2] = 1;
  $0 = 0;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 _free(($28|0));
 $30 = $fPtr;
 $31 = (_fseek(($30|0),0,2)|0);
 $32 = ($31|0)!=(0);
 $33 = $fPtr;
 if ($32) {
  (_fclose(($33|0))|0);
  $0 = 8;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $34 = (_ftell(($33|0))|0);
 $ftell_result = $34;
 $35 = $ftell_result;
 $36 = ($35|0)==(-1);
 if ($36) {
  $37 = $fPtr;
  (_fclose(($37|0))|0);
  $0 = 8;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $38 = $ftell_result;
 $filelen = $38;
 $39 = $fPtr;
 $40 = (_fseek(($39|0),0,0)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $fPtr;
  (_fclose(($42|0))|0);
  $0 = 8;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $43 = $filelen;
 $44 = (($43) + 1)|0;
 $45 = (_malloc(($44|0))|0);
 $configtext = $45;
 $46 = $configtext;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $fPtr;
  (_fclose(($48|0))|0);
  $0 = 7;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $49 = $configtext;
 $50 = $filelen;
 $51 = $fPtr;
 $52 = (_fread(($49|0),1,($50|0),($51|0))|0);
 $53 = $filelen;
 $54 = ($52|0)!=($53|0);
 if ($54) {
  $55 = $configtext;
  _free(($55|0));
  $56 = $fPtr;
  (_fclose(($56|0))|0);
  $0 = 8;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 $57 = $fPtr;
 (_fclose(($57|0))|0);
 HEAP32[$current_section>>2] = 0;
 $58 = $configtext;
 HEAP32[$line>>2] = $58;
 $59 = $configtext;
 $60 = $filelen;
 $61 = (($59) + ($60)|0);
 $end = $61;
 $lastcomment = 0;
 $62 = $end;
 HEAP8[$62>>0] = 0;
 L47: while(1) {
  $63 = HEAP32[$line>>2]|0;
  $64 = $end;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   label = 45;
   break;
  }
  _ini_parse_line($l,$line);
  $66 = HEAP32[$l>>2]|0;
  switch ($66|0) {
  case 1:  {
   $67 = ((($l)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $lastcomment = $68;
   continue L47;
   break;
  }
  case 2:  {
   $69 = ((($l)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (_ConfigOpenSection($70,$current_section)|0);
   $rval = $71;
   $72 = $rval;
   $73 = ($72|0)!=(0);
   if ($73) {
    label = 30;
    break L47;
   }
   $lastcomment = 0;
   continue L47;
   break;
  }
  case 3:  {
   $76 = ((($l)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   $80 = ($79|0)==(34);
   if ($80) {
    $81 = ((($l)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_strlen(($82|0))|0);
    $84 = (($83) - 1)|0;
    $85 = ((($l)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($84)|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88 << 24 >> 24;
    $90 = ($89|0)==(34);
    if ($90) {
     $91 = ((($l)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($92)) + 1|0);
     HEAP32[$91>>2] = $93;
     $94 = ((($l)) + 8|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (_strlen(($95|0))|0);
     $97 = (($96) - 1)|0;
     $98 = ((($l)) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + ($97)|0);
     HEAP8[$100>>0] = 0;
     $101 = HEAP32[$current_section>>2]|0;
     $102 = ((($l)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ((($l)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $lastcomment;
     (_ConfigSetDefaultString($101,$103,$105,$106)|0);
    } else {
     label = 35;
    }
   } else {
    label = 35;
   }
   do {
    if ((label|0) == 35) {
     label = 0;
     $107 = ((($l)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (_strcasecmp(($108|0),((gb + (6033) | 0)|0))|0);
     $110 = ($109|0)==(0);
     if ($110) {
      $111 = HEAP32[$current_section>>2]|0;
      $112 = ((($l)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $lastcomment;
      (_ConfigSetDefaultBool($111,$113,0,$114)|0);
      break;
     }
     $115 = ((($l)) + 8|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (_strcasecmp(($116|0),((gb + (6039) | 0)|0))|0);
     $118 = ($117|0)==(0);
     if ($118) {
      $119 = HEAP32[$current_section>>2]|0;
      $120 = ((($l)) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $lastcomment;
      (_ConfigSetDefaultBool($119,$121,1,$122)|0);
      break;
     }
     $123 = ((($l)) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_is_numeric($124)|0);
     $126 = ($125|0)!=(0);
     if (!($126)) {
      $147 = HEAP32[$current_section>>2]|0;
      $148 = ((($l)) + 4|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ((($l)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = $lastcomment;
      (_ConfigSetDefaultString($147,$149,$151,$152)|0);
      break;
     }
     $127 = ((($l)) + 8|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (_strtol(($128|0),(0|0),10)|0);
     $val_int = $129;
     $130 = ((($l)) + 8|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (+_strtod(($131|0),(0|0)));
     $133 = $132;
     $val_float = $133;
     $134 = $val_float;
     $135 = $val_int;
     $136 = (+($135|0));
     $137 = $134 - $136;
     $138 = $137;
     $139 = $138 != 0.0;
     $140 = HEAP32[$current_section>>2]|0;
     $141 = ((($l)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     if ($139) {
      $143 = $val_float;
      $144 = $lastcomment;
      (_ConfigSetDefaultFloat($140,$142,$143,$144)|0);
      break;
     } else {
      $145 = $val_int;
      $146 = $lastcomment;
      (_ConfigSetDefaultInt($140,$142,$145,$146)|0);
      break;
     }
    }
   } while(0);
   $lastcomment = 0;
   continue L47;
   break;
  }
  default: {
   continue L47;
  }
  }
 }
 if ((label|0) == 30) {
  $74 = $configtext;
  _free(($74|0));
  $75 = $rval;
  $0 = $75;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 else if ((label|0) == 45) {
  $153 = $configtext;
  _free(($153|0));
  _copy_configlist_active_to_saved();
  $0 = 0;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 return (0)|0;
}
function _ConfigGetUserConfigPath() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410512) | 0)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[(gb + (8410512) | 0)>>2]|0;
  (_osal_mkdirp($3,448)|0);
  $4 = HEAP32[(gb + (8410512) | 0)>>2]|0;
  $0 = $4;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $5 = (_osal_get_user_configpath()|0);
  $0 = $5;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _ConfigOpenSection($SectionName,$ConfigSectionHandle) {
 $SectionName = $SectionName|0;
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_section = 0, $new_section = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $SectionName;
 $2 = $ConfigSectionHandle;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 4;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $9 = $1;
 $10 = (_find_alpha_section_link((gb + (8410520) | 0),$9)|0);
 $curr_section = $10;
 $11 = $curr_section;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = $curr_section;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strcasecmp(($14|0),($18|0))|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $curr_section;
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   HEAP32[$23>>2] = $22;
   $0 = 0;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
 }
 $24 = $1;
 $25 = (_config_section_create($24)|0);
 $new_section = $25;
 $26 = $new_section;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $0 = 7;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $28 = $curr_section;
  $29 = HEAP32[$28>>2]|0;
  $30 = $new_section;
  $31 = ((($30)) + 12|0);
  HEAP32[$31>>2] = $29;
  $32 = $new_section;
  $33 = $curr_section;
  HEAP32[$33>>2] = $32;
  $34 = $new_section;
  $35 = $2;
  HEAP32[$35>>2] = $34;
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _ConfigSetDefaultString($ConfigSectionHandle,$ParamName,$ParamValue,$ParamHelp) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamValue = $ParamValue|0;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamValue;
 $4 = $ParamHelp;
 $5 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ($7|0)==(0|0);
   $9 = $2;
   $10 = ($9|0)==(0|0);
   $or$cond = $8 | $10;
   $11 = $3;
   $12 = ($11|0)==(0|0);
   $or$cond3 = $or$cond | $12;
   if ($or$cond3) {
    $0 = 4;
    break;
   }
   $13 = $1;
   $section = $13;
   $14 = $section;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(-606337664);
   if ($16) {
    $0 = 5;
    break;
   }
   $17 = $section;
   $18 = $2;
   $19 = (_find_section_var($17,$18)|0);
   $var = $19;
   $20 = $var;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $0 = 0;
    break;
   }
   $22 = $2;
   $23 = $4;
   $24 = (_config_var_create($22,$23)|0);
   $var = $24;
   $25 = $var;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $0 = 7;
    break;
   }
   $27 = $var;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = 4;
   $29 = $3;
   $30 = (_strdup(($29|0))|0);
   $31 = $var;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $30;
   $33 = $var;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = $var;
    _delete_var($37);
    $0 = 7;
    break;
   } else {
    $38 = $section;
    $39 = $var;
    _append_var_to_section($38,$39);
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _ConfigSetDefaultBool($ConfigSectionHandle,$ParamName,$ParamValue,$ParamHelp) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamValue = $ParamValue|0;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamValue;
 $4 = $ParamHelp;
 $5 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ($7|0)==(0|0);
   $9 = $2;
   $10 = ($9|0)==(0|0);
   $or$cond = $8 | $10;
   if ($or$cond) {
    $0 = 4;
    break;
   }
   $11 = $1;
   $section = $11;
   $12 = $section;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(-606337664);
   if ($14) {
    $0 = 5;
    break;
   }
   $15 = $section;
   $16 = $2;
   $17 = (_find_section_var($15,$16)|0);
   $var = $17;
   $18 = $var;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $0 = 0;
    break;
   }
   $20 = $2;
   $21 = $4;
   $22 = (_config_var_create($20,$21)|0);
   $var = $22;
   $23 = $var;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $0 = 7;
    break;
   } else {
    $25 = $var;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = 3;
    $27 = $3;
    $28 = ($27|0)!=(0);
    $29 = $28 ? 1 : 0;
    $30 = $var;
    $31 = ((($30)) + 8|0);
    HEAP32[$31>>2] = $29;
    $32 = $section;
    $33 = $var;
    _append_var_to_section($32,$33);
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _ConfigSetDefaultFloat($ConfigSectionHandle,$ParamName,$ParamValue,$ParamHelp) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamValue = +$ParamValue;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamValue;
 $4 = $ParamHelp;
 $5 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ($7|0)==(0|0);
   $9 = $2;
   $10 = ($9|0)==(0|0);
   $or$cond = $8 | $10;
   if ($or$cond) {
    $0 = 4;
    break;
   }
   $11 = $1;
   $section = $11;
   $12 = $section;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(-606337664);
   if ($14) {
    $0 = 5;
    break;
   }
   $15 = $section;
   $16 = $2;
   $17 = (_find_section_var($15,$16)|0);
   $var = $17;
   $18 = $var;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $0 = 0;
    break;
   }
   $20 = $2;
   $21 = $4;
   $22 = (_config_var_create($20,$21)|0);
   $var = $22;
   $23 = $var;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $0 = 7;
    break;
   } else {
    $25 = $var;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = 2;
    $27 = $3;
    $28 = $var;
    $29 = ((($28)) + 8|0);
    HEAPF32[$29>>2] = $27;
    $30 = $section;
    $31 = $var;
    _append_var_to_section($30,$31);
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _ConfigSetDefaultInt($ConfigSectionHandle,$ParamName,$ParamValue,$ParamHelp) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamValue = $ParamValue|0;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamValue;
 $4 = $ParamHelp;
 $5 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ($7|0)==(0|0);
   $9 = $2;
   $10 = ($9|0)==(0|0);
   $or$cond = $8 | $10;
   if ($or$cond) {
    $0 = 4;
    break;
   }
   $11 = $1;
   $section = $11;
   $12 = $section;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(-606337664);
   if ($14) {
    $0 = 5;
    break;
   }
   $15 = $section;
   $16 = $2;
   $17 = (_find_section_var($15,$16)|0);
   $var = $17;
   $18 = $var;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $0 = 0;
    break;
   }
   $20 = $2;
   $21 = $4;
   $22 = (_config_var_create($20,$21)|0);
   $var = $22;
   $23 = $var;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $0 = 7;
    break;
   } else {
    $25 = $var;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = 1;
    $27 = $3;
    $28 = $var;
    $29 = ((($28)) + 8|0);
    HEAP32[$29>>2] = $27;
    $30 = $section;
    $31 = $var;
    _append_var_to_section($30,$31);
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _ConfigShutdown() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410516) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  (_ConfigSaveFile()|0);
 }
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 HEAP32[(gb + (8410504) | 0)>>2] = 0;
 $5 = HEAP32[(gb + (8410508) | 0)>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[(gb + (8410508) | 0)>>2]|0;
  _free(($7|0));
  HEAP32[(gb + (8410508) | 0)>>2] = 0;
 }
 $8 = HEAP32[(gb + (8410512) | 0)>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[(gb + (8410512) | 0)>>2]|0;
  _free(($10|0));
  HEAP32[(gb + (8410512) | 0)>>2] = 0;
 }
 _delete_list((gb + (8410520) | 0));
 _delete_list((gb + (8410524) | 0));
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _ConfigSaveFile() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  _copy_configlist_active_to_saved();
  $3 = (_write_configlist_file()|0);
  $0 = $3;
 } else {
  $0 = 1;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _ConfigListSections($context,$SectionListCallback) {
 $context = $context|0;
 $SectionListCallback = $SectionListCallback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_section = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $context;
 $2 = $SectionListCallback;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 4;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $7 = HEAP32[(gb + (8410520) | 0)>>2]|0;
 $curr_section = $7;
 while(1) {
  $8 = $curr_section;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $1;
  $12 = $curr_section;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  mftCall_vii($10|0,($11|0),($14|0));
  $15 = $curr_section;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $curr_section = $17;
 }
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _ConfigListParameters($ConfigSectionHandle,$context,$ParameterListCallback) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $context = $context|0;
 $ParameterListCallback = $ParameterListCallback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_var = 0, $or$cond = 0, $section = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $context;
 $3 = $ParameterListCallback;
 $4 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $0 = 4;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $1;
 $section = $10;
 $11 = $section;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(-606337664);
 if ($13) {
  $0 = 5;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $14 = $section;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $curr_var = $16;
 while(1) {
  $17 = $curr_var;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $3;
  $20 = $2;
  $21 = $curr_var;
  $22 = HEAP32[$21>>2]|0;
  $23 = $curr_var;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  mftCall_viii($19|0,($20|0),($22|0),($25|0));
  $26 = $curr_var;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $curr_var = $28;
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _ConfigHasUnsavedChanges($SectionName) {
 $SectionName = $SectionName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $active_var = 0, $curr_section = 0, $iNumActiveSections = 0, $iNumSavedSections = 0, $input_section = 0, $or$cond = 0, $saved_var = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $SectionName;
 $2 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  _DebugMessage(1,(gb + (6044) | 0),$vararg_buffer);
  $0 = 0;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = (_strlen(($6|0))|0);
  $8 = ($7>>>0)<(1);
  if (!($8)) {
   $33 = HEAP32[(gb + (8410520) | 0)>>2]|0;
   $34 = $1;
   $35 = (_find_section($33,$34)|0);
   $input_section = $35;
   $36 = $input_section;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $38 = $1;
    HEAP32[$vararg_buffer2>>2] = $38;
    _DebugMessage(1,(gb + (6100) | 0),$vararg_buffer2);
    $0 = 0;
    $145 = $0;
    STACKTOP = sp;return ($145|0);
   }
   $39 = HEAP32[(gb + (8410524) | 0)>>2]|0;
   $40 = $1;
   $41 = (_find_section($39,$40)|0);
   $curr_section = $41;
   $42 = $curr_section;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $0 = 1;
    $145 = $0;
    STACKTOP = sp;return ($145|0);
   }
   $44 = $input_section;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $active_var = $46;
   $47 = $curr_section;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $saved_var = $49;
   L16: while(1) {
    $50 = $active_var;
    $51 = ($50|0)!=(0|0);
    $52 = $saved_var;
    $53 = ($52|0)!=(0|0);
    $54 = $51 ? $53 : 0;
    $55 = $active_var;
    if (!($54)) {
     label = 45;
     break;
    }
    $56 = HEAP32[$55>>2]|0;
    $57 = $saved_var;
    $58 = HEAP32[$57>>2]|0;
    $59 = (_strcmp(($56|0),($58|0))|0);
    $60 = ($59|0)!=(0);
    if ($60) {
     label = 23;
     break;
    }
    $61 = $active_var;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $saved_var;
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)!=($66|0);
    if ($67) {
     label = 25;
     break;
    }
    $68 = $active_var;
    $69 = ((($68)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    switch ($70|0) {
    case 1:  {
     $71 = $active_var;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $saved_var;
     $75 = ((($74)) + 8|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($73|0)!=($76|0);
     if ($77) {
      label = 28;
      break L16;
     }
     break;
    }
    case 2:  {
     $78 = $active_var;
     $79 = ((($78)) + 8|0);
     $80 = +HEAPF32[$79>>2];
     $81 = $saved_var;
     $82 = ((($81)) + 8|0);
     $83 = +HEAPF32[$82>>2];
     $84 = $80 != $83;
     if ($84) {
      label = 30;
      break L16;
     }
     break;
    }
    case 3:  {
     $85 = $active_var;
     $86 = ((($85)) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)!=(0);
     $89 = $88&1;
     $90 = $saved_var;
     $91 = ((($90)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)!=(0);
     $94 = $93&1;
     $95 = ($89|0)!=($94|0);
     if ($95) {
      label = 32;
      break L16;
     }
     break;
    }
    case 4:  {
     $96 = $active_var;
     $97 = ((($96)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(0|0);
     if ($99) {
      label = 34;
      break L16;
     }
     $102 = $saved_var;
     $103 = ((($102)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(0|0);
     $106 = $active_var;
     if ($105) {
      label = 36;
      break L16;
     }
     $108 = ((($106)) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $saved_var;
     $111 = ((($110)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (_strcmp(($109|0),($112|0))|0);
     $114 = ($113|0)!=(0);
     if ($114) {
      label = 38;
      break L16;
     }
     break;
    }
    default: {
     label = 39;
     break L16;
    }
    }
    $120 = $active_var;
    $121 = ((($120)) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)!=(0|0);
    if ($123) {
     $124 = $saved_var;
     $125 = ((($124)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)!=(0|0);
     if ($127) {
      $128 = $active_var;
      $129 = ((($128)) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $saved_var;
      $132 = ((($131)) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (_strcmp(($130|0),($133|0))|0);
      $135 = ($134|0)!=(0);
      if ($135) {
       label = 43;
       break;
      }
     }
    }
    $136 = $active_var;
    $137 = ((($136)) + 16|0);
    $138 = HEAP32[$137>>2]|0;
    $active_var = $138;
    $139 = $saved_var;
    $140 = ((($139)) + 16|0);
    $141 = HEAP32[$140>>2]|0;
    $saved_var = $141;
   }
   switch (label|0) {
    case 23: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 25: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 28: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 30: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 32: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 34: {
     $100 = $active_var;
     $101 = HEAP32[$100>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $101;
     _DebugMessage(1,(gb + (6156) | 0),$vararg_buffer4);
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 36: {
     $107 = HEAP32[$106>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $107;
     _DebugMessage(1,(gb + (6225) | 0),$vararg_buffer7);
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 38: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 39: {
     $115 = $active_var;
     $116 = HEAP32[$115>>2]|0;
     $117 = $active_var;
     $118 = ((($117)) + 4|0);
     $119 = HEAP32[$118>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $116;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $119;
     _DebugMessage(1,(gb + (6293) | 0),$vararg_buffer10);
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 43: {
     $0 = 1;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
     break;
    }
    case 45: {
     $142 = ($55|0)!=(0|0);
     $143 = $saved_var;
     $144 = ($143|0)!=(0|0);
     $or$cond = $142 | $144;
     if ($or$cond) {
      $0 = 1;
      $145 = $0;
      STACKTOP = sp;return ($145|0);
     } else {
      $0 = 0;
      $145 = $0;
      STACKTOP = sp;return ($145|0);
     }
     break;
    }
   }
  }
 }
 $iNumActiveSections = 0;
 $iNumSavedSections = 0;
 $9 = HEAP32[(gb + (8410520) | 0)>>2]|0;
 $curr_section = $9;
 while(1) {
  $10 = $curr_section;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $curr_section;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_ConfigHasUnsavedChanges($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 8;
   break;
  }
  $17 = $curr_section;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $curr_section = $19;
  $20 = $iNumActiveSections;
  $21 = (($20) + 1)|0;
  $iNumActiveSections = $21;
 }
 if ((label|0) == 8) {
  $0 = 1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $22 = HEAP32[(gb + (8410524) | 0)>>2]|0;
 $curr_section = $22;
 while(1) {
  $23 = $curr_section;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   break;
  }
  $25 = $curr_section;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $curr_section = $27;
  $28 = $iNumSavedSections;
  $29 = (($28) + 1)|0;
  $iNumSavedSections = $29;
 }
 $30 = $iNumActiveSections;
 $31 = $iNumSavedSections;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $0 = 0;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 } else {
  $0 = 1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 return (0)|0;
}
function _ConfigDeleteSection($SectionName) {
 $SectionName = $SectionName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $curr_section_link = 0, $next_section = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $SectionName;
 $2 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $4 = HEAP32[(gb + (8410520) | 0)>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 6;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $6 = $1;
 $7 = (_find_section_link((gb + (8410520) | 0),$6)|0);
 $curr_section_link = $7;
 $8 = $curr_section_link;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = 6;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $curr_section_link;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $next_section = $14;
  $15 = $curr_section_link;
  $16 = HEAP32[$15>>2]|0;
  _delete_section($16);
  $17 = $next_section;
  $18 = $curr_section_link;
  HEAP32[$18>>2] = $17;
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _ConfigSaveSection($SectionName) {
 $SectionName = $SectionName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_section = 0, $insertion_point = 0, $new_section = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $SectionName;
 $2 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = (_strlen(($6|0))|0);
  $8 = ($7>>>0)<(1);
  if (!($8)) {
   $9 = HEAP32[(gb + (8410520) | 0)>>2]|0;
   $10 = $1;
   $11 = (_find_section($9,$10)|0);
   $curr_section = $11;
   $12 = $curr_section;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $0 = 6;
    $47 = $0;
    STACKTOP = sp;return ($47|0);
   }
   $14 = $curr_section;
   $15 = (_section_deepcopy($14)|0);
   $new_section = $15;
   $16 = $new_section;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $0 = 7;
    $47 = $0;
    STACKTOP = sp;return ($47|0);
   }
   $18 = $1;
   $19 = (_find_alpha_section_link((gb + (8410524) | 0),$18)|0);
   $insertion_point = $19;
   $20 = $insertion_point;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $insertion_point;
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $1;
    $28 = (_strcasecmp(($26|0),($27|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $insertion_point;
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($31)) + 12|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $new_section;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $33;
     $36 = $insertion_point;
     $37 = HEAP32[$36>>2]|0;
     _delete_section($37);
     $38 = $new_section;
     $39 = $insertion_point;
     HEAP32[$39>>2] = $38;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
   if ((label|0) == 13) {
    $40 = $insertion_point;
    $41 = HEAP32[$40>>2]|0;
    $42 = $new_section;
    $43 = ((($42)) + 12|0);
    HEAP32[$43>>2] = $41;
    $44 = $new_section;
    $45 = $insertion_point;
    HEAP32[$45>>2] = $44;
   }
   $46 = (_write_configlist_file()|0);
   $0 = $46;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $0 = 4;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _ConfigRevertChanges($SectionName) {
 $SectionName = $SectionName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active_section = 0, $active_section_link = 0, $new_section = 0, $saved_section = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $SectionName;
 $2 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $0 = 4;
    break;
   }
   $6 = $1;
   $7 = (_find_section_link((gb + (8410520) | 0),$6)|0);
   $active_section_link = $7;
   $8 = $active_section_link;
   $9 = HEAP32[$8>>2]|0;
   $active_section = $9;
   $10 = $active_section;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $0 = 6;
    break;
   }
   $12 = HEAP32[(gb + (8410524) | 0)>>2]|0;
   $13 = $1;
   $14 = (_find_section($12,$13)|0);
   $saved_section = $14;
   $15 = $saved_section;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $0 = 6;
    break;
   }
   $17 = $saved_section;
   $18 = (_section_deepcopy($17)|0);
   $new_section = $18;
   $19 = $new_section;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $0 = 7;
    break;
   } else {
    $21 = $new_section;
    $22 = $active_section_link;
    HEAP32[$22>>2] = $21;
    $23 = $active_section;
    $24 = ((($23)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $new_section;
    $27 = ((($26)) + 12|0);
    HEAP32[$27>>2] = $25;
    $28 = $active_section;
    _delete_section($28);
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _ConfigSetParameter($ConfigSectionHandle,$ParamName,$ParamType,$ParamValue) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamType = $ParamType|0;
 $ParamValue = $ParamValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamType;
 $4 = $ParamValue;
 $5 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $0 = 1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $9 = $2;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 $or$cond3 = $or$cond | $12;
 $13 = $3;
 $14 = ($13|0)<(1);
 $or$cond5 = $or$cond3 | $14;
 $15 = $3;
 $16 = ($15|0)>(4);
 $or$cond7 = $or$cond5 | $16;
 if ($or$cond7) {
  $0 = 4;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $17 = $1;
 $section = $17;
 $18 = $section;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(-606337664);
 if ($20) {
  $0 = 5;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $21 = $section;
 $22 = $2;
 $23 = (_find_section_var($21,$22)|0);
 $var = $23;
 $24 = $var;
 $25 = ($24|0)==(0|0);
 do {
  if ($25) {
   $26 = $2;
   $27 = (_config_var_create($26,0)|0);
   $var = $27;
   $28 = $var;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    $30 = $section;
    $31 = $var;
    _append_var_to_section($30,$31);
    break;
   }
   $0 = 7;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $32 = $var;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $cond = ($34|0)==(4);
 if ($cond) {
  $35 = $var;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  _free(($37|0));
 }
 $38 = $3;
 $39 = $var;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $38;
 $41 = $3;
 switch ($41|0) {
 case 1:  {
  $42 = $4;
  $43 = HEAP32[$42>>2]|0;
  $44 = $var;
  $45 = ((($44)) + 8|0);
  HEAP32[$45>>2] = $43;
  break;
 }
 case 2:  {
  $46 = $4;
  $47 = +HEAPF32[$46>>2];
  $48 = $var;
  $49 = ((($48)) + 8|0);
  HEAPF32[$49>>2] = $47;
  break;
 }
 case 3:  {
  $50 = $4;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  $53 = $52&1;
  $54 = $var;
  $55 = ((($54)) + 8|0);
  HEAP32[$55>>2] = $53;
  break;
 }
 case 4:  {
  $56 = $4;
  $57 = (_strdup(($56|0))|0);
  $58 = $var;
  $59 = ((($58)) + 8|0);
  HEAP32[$59>>2] = $57;
  $60 = $var;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   $0 = 7;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
  break;
 }
 default: {
 }
 }
 $0 = 0;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _ConfigSetParameterHelp($ConfigSectionHandle,$ParamName,$ParamHelp) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamHelp;
 $4 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = ($6|0)==(0|0);
   $8 = $2;
   $9 = ($8|0)==(0|0);
   $or$cond = $7 | $9;
   $10 = $3;
   $11 = ($10|0)==(0|0);
   $or$cond3 = $or$cond | $11;
   if ($or$cond3) {
    $0 = 4;
    break;
   }
   $12 = $1;
   $section = $12;
   $13 = $section;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(-606337664);
   if ($15) {
    $0 = 5;
    break;
   }
   $16 = $section;
   $17 = $2;
   $18 = (_find_section_var($16,$17)|0);
   $var = $18;
   $19 = $var;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $0 = 6;
    break;
   }
   $21 = $var;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $var;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    _free(($27|0));
   }
   $28 = $3;
   $29 = (_strdup(($28|0))|0);
   $30 = $var;
   $31 = ((($30)) + 12|0);
   HEAP32[$31>>2] = $29;
   $0 = 0;
  } else {
   $0 = 1;
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _ConfigGetParameter($ConfigSectionHandle,$ParamName,$ParamType,$ParamValue,$MaxSize) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamType = $ParamType|0;
 $ParamValue = $ParamValue|0;
 $MaxSize = $MaxSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $section = 0, $string = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamType;
 $4 = $ParamValue;
 $5 = $MaxSize;
 $6 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $7 = ($6|0)!=(0);
 L1: do {
  if ($7) {
   $8 = $1;
   $9 = ($8|0)==(0|0);
   $10 = $2;
   $11 = ($10|0)==(0|0);
   $or$cond = $9 | $11;
   $12 = $4;
   $13 = ($12|0)==(0|0);
   $or$cond3 = $or$cond | $13;
   $14 = $3;
   $15 = ($14|0)<(1);
   $or$cond5 = $or$cond3 | $15;
   $16 = $3;
   $17 = ($16|0)>(4);
   $or$cond7 = $or$cond5 | $17;
   if ($or$cond7) {
    $0 = 4;
    break;
   }
   $18 = $1;
   $section = $18;
   $19 = $section;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(-606337664);
   if ($21) {
    $0 = 5;
    break;
   }
   $22 = $section;
   $23 = $2;
   $24 = (_find_section_var($22,$23)|0);
   $var = $24;
   $25 = $var;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $0 = 6;
    break;
   }
   $27 = $3;
   switch ($27|0) {
   case 1:  {
    $28 = $5;
    $29 = ($28>>>0)<(4);
    if ($29) {
     $0 = 5;
     break L1;
    }
    $30 = $var;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(1);
    if ($33) {
     $34 = $var;
     $35 = ((($34)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)!=(2);
     if ($37) {
      $0 = 14;
      break L1;
     }
    }
    $38 = $1;
    $39 = $2;
    $40 = (_ConfigGetParamInt($38,$39)|0);
    $41 = $4;
    HEAP32[$41>>2] = $40;
    break;
   }
   case 2:  {
    $42 = $5;
    $43 = ($42>>>0)<(4);
    if ($43) {
     $0 = 5;
     break L1;
    }
    $44 = $var;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(1);
    if ($47) {
     $48 = $var;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)!=(2);
     if ($51) {
      $0 = 14;
      break L1;
     }
    }
    $52 = $1;
    $53 = $2;
    $54 = (+_ConfigGetParamFloat($52,$53));
    $55 = $4;
    HEAPF32[$55>>2] = $54;
    break;
   }
   case 3:  {
    $56 = $5;
    $57 = ($56>>>0)<(4);
    if ($57) {
     $0 = 5;
     break L1;
    }
    $58 = $var;
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)!=(3);
    if ($61) {
     $62 = $var;
     $63 = ((($62)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=(1);
     if ($65) {
      $0 = 14;
      break L1;
     }
    }
    $66 = $1;
    $67 = $2;
    $68 = (_ConfigGetParamBool($66,$67)|0);
    $69 = $4;
    HEAP32[$69>>2] = $68;
    break;
   }
   case 4:  {
    $70 = $5;
    $71 = ($70|0)<(1);
    if ($71) {
     $0 = 5;
     break L1;
    }
    $72 = $var;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)!=(4);
    if ($75) {
     $76 = $var;
     $77 = ((($76)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(3);
     if ($79) {
      $0 = 14;
      break L1;
     }
    }
    $80 = $1;
    $81 = $2;
    $82 = (_ConfigGetParamString($80,$81)|0);
    $string = $82;
    $83 = $4;
    $84 = $string;
    $85 = $5;
    (_strncpy(($83|0),($84|0),($85|0))|0);
    $86 = $4;
    $87 = $5;
    $88 = (($86) + ($87)|0);
    $89 = ((($88)) + -1|0);
    HEAP8[$89>>0] = 0;
    break;
   }
   default: {
   }
   }
   $0 = 0;
  } else {
   $0 = 1;
  }
 } while(0);
 $90 = $0;
 STACKTOP = sp;return ($90|0);
}
function _ConfigGetParamInt($ConfigSectionHandle,$ParamName) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 L1: do {
  if ($or$cond3) {
   _DebugMessage(1,(gb + (6351) | 0),$vararg_buffer);
   $0 = 0;
  } else {
   $9 = $1;
   $section = $9;
   $10 = $section;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(-606337664);
   if ($12) {
    _DebugMessage(1,(gb + (6389) | 0),$vararg_buffer4);
    $0 = 0;
    break;
   }
   $13 = $section;
   $14 = $2;
   $15 = (_find_section_var($13,$14)|0);
   $var = $15;
   $16 = $var;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = $2;
    HEAP32[$vararg_buffer6>>2] = $18;
    _DebugMessage(1,(gb + (6439) | 0),$vararg_buffer6);
    $0 = 0;
    break;
   }
   $19 = $var;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   switch ($21|0) {
   case 1:  {
    $22 = $var;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $0 = $24;
    break L1;
    break;
   }
   case 2:  {
    $25 = $var;
    $26 = ((($25)) + 8|0);
    $27 = +HEAPF32[$26>>2];
    $28 = (~~(($27)));
    $0 = $28;
    break L1;
    break;
   }
   case 3:  {
    $29 = $var;
    $30 = ((($29)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0);
    $33 = $32&1;
    $0 = $33;
    break L1;
    break;
   }
   case 4:  {
    $34 = $var;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_atoi(($36|0))|0);
    $0 = $37;
    break L1;
    break;
   }
   default: {
    $38 = $2;
    HEAP32[$vararg_buffer8>>2] = $38;
    _DebugMessage(1,(gb + (6486) | 0),$vararg_buffer8);
    $0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _ConfigGetParamFloat($ConfigSectionHandle,$ParamName) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 L1: do {
  if ($or$cond3) {
   _DebugMessage(1,(gb + (6548) | 0),$vararg_buffer);
   $0 = 0.0;
  } else {
   $9 = $1;
   $section = $9;
   $10 = $section;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(-606337664);
   if ($12) {
    _DebugMessage(1,(gb + (6588) | 0),$vararg_buffer4);
    $0 = 0.0;
    break;
   }
   $13 = $section;
   $14 = $2;
   $15 = (_find_section_var($13,$14)|0);
   $var = $15;
   $16 = $var;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = $2;
    HEAP32[$vararg_buffer6>>2] = $18;
    _DebugMessage(1,(gb + (6640) | 0),$vararg_buffer6);
    $0 = 0.0;
    break;
   }
   $19 = $var;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   switch ($21|0) {
   case 1:  {
    $22 = $var;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (+($24|0));
    $0 = $25;
    break L1;
    break;
   }
   case 2:  {
    $26 = $var;
    $27 = ((($26)) + 8|0);
    $28 = +HEAPF32[$27>>2];
    $0 = $28;
    break L1;
    break;
   }
   case 3:  {
    $29 = $var;
    $30 = ((($29)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0);
    $33 = $32 ? 1.0 : 0.0;
    $0 = $33;
    break L1;
    break;
   }
   case 4:  {
    $34 = $var;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (+_atof(($36|0)));
    $38 = $37;
    $0 = $38;
    break L1;
    break;
   }
   default: {
    $39 = $2;
    HEAP32[$vararg_buffer8>>2] = $39;
    _DebugMessage(1,(gb + (6689) | 0),$vararg_buffer8);
    $0 = 0.0;
    break L1;
   }
   }
  }
 } while(0);
 $40 = $0;
 STACKTOP = sp;return (+$40);
}
function _ConfigGetParamBool($ConfigSectionHandle,$ParamName) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 L1: do {
  if ($or$cond3) {
   _DebugMessage(1,(gb + (6753) | 0),$vararg_buffer);
   $0 = 0;
  } else {
   $9 = $1;
   $section = $9;
   $10 = $section;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(-606337664);
   if ($12) {
    _DebugMessage(1,(gb + (6792) | 0),$vararg_buffer4);
    $0 = 0;
    break;
   }
   $13 = $section;
   $14 = $2;
   $15 = (_find_section_var($13,$14)|0);
   $var = $15;
   $16 = $var;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = $2;
    HEAP32[$vararg_buffer6>>2] = $18;
    _DebugMessage(1,(gb + (6843) | 0),$vararg_buffer6);
    $0 = 0;
    break;
   }
   $19 = $var;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   switch ($21|0) {
   case 1:  {
    $22 = $var;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0);
    $26 = $25&1;
    $0 = $26;
    break L1;
    break;
   }
   case 2:  {
    $27 = $var;
    $28 = ((($27)) + 8|0);
    $29 = +HEAPF32[$28>>2];
    $30 = $29;
    $31 = $30 != 0.0;
    $32 = $31&1;
    $0 = $32;
    break L1;
    break;
   }
   case 3:  {
    $33 = $var;
    $34 = ((($33)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $0 = $35;
    break L1;
    break;
   }
   case 4:  {
    $36 = $var;
    $37 = ((($36)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_strcasecmp(($38|0),((gb + (6039) | 0)|0))|0);
    $40 = ($39|0)==(0);
    $41 = $40&1;
    $0 = $41;
    break L1;
    break;
   }
   default: {
    $42 = $2;
    HEAP32[$vararg_buffer8>>2] = $42;
    _DebugMessage(1,(gb + (6891) | 0),$vararg_buffer8);
    $0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _ConfigGetParamString($ConfigSectionHandle,$ParamName) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $section = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 if ($or$cond3) {
  _DebugMessage(1,(gb + (6954) | 0),$vararg_buffer);
  $0 = (gb + (23109844) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $9 = $1;
 $section = $9;
 $10 = $section;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(-606337664);
 if ($12) {
  _DebugMessage(1,(gb + (6995) | 0),$vararg_buffer4);
  $0 = (gb + (23109844) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = $section;
 $14 = $2;
 $15 = (_find_section_var($13,$14)|0);
 $var = $15;
 $16 = $var;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $2;
  HEAP32[$vararg_buffer6>>2] = $18;
  _DebugMessage(1,(gb + (7048) | 0),$vararg_buffer6);
  $0 = (gb + (23109844) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $19 = $var;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 switch ($21|0) {
 case 1:  {
  $22 = $var;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $24;
  (_snprintf(((gb + (23108462) | 0)|0),63,((gb + (7098) | 0)|0),($vararg_buffer8|0))|0);
  HEAP8[((((gb + (23108462) | 0)) + 63|0))>>0] = 0;
  $0 = (gb + (23108462) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 2:  {
  $25 = $var;
  $26 = ((($25)) + 8|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27;
  HEAPF64[$vararg_buffer11>>3] = $28;
  (_snprintf(((gb + (23108462) | 0)|0),63,((gb + (7101) | 0)|0),($vararg_buffer11|0))|0);
  HEAP8[((((gb + (23108462) | 0)) + 63|0))>>0] = 0;
  $0 = (gb + (23108462) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 3:  {
  $29 = $var;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0);
  $33 = $32 ? (gb + (7104) | 0) : (gb + (7109) | 0);
  $0 = $33;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 4:  {
  $34 = $var;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $0 = $36;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 default: {
  $37 = $2;
  HEAP32[$vararg_buffer14>>2] = $37;
  _DebugMessage(1,(gb + (7115) | 0),$vararg_buffer14);
  $0 = (gb + (23109844) | 0);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 }
 return (0)|0;
}
function _ConfigGetParameterType($ConfigSectionHandle,$ParamName,$ParamType) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 $ParamType = $ParamType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = $ParamType;
 $4 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = ($6|0)==(0|0);
   $8 = $2;
   $9 = ($8|0)==(0|0);
   $or$cond = $7 | $9;
   $10 = $3;
   $11 = ($10|0)==(0|0);
   $or$cond3 = $or$cond | $11;
   if ($or$cond3) {
    $0 = 4;
    break;
   }
   $12 = $1;
   $section = $12;
   $13 = $section;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(-606337664);
   if ($15) {
    $0 = 5;
    break;
   }
   $16 = $section;
   $17 = $2;
   $18 = (_find_section_var($16,$17)|0);
   $var = $18;
   $19 = $var;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $0 = 6;
    break;
   } else {
    $21 = $var;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $3;
    HEAP32[$24>>2] = $23;
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _ConfigGetParameterHelp($ConfigSectionHandle,$ParamName) {
 $ConfigSectionHandle = $ConfigSectionHandle|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $section = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ConfigSectionHandle;
 $2 = $ParamName;
 $3 = HEAP32[(gb + (8410504) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 do {
  if ($or$cond3) {
   $0 = 0;
  } else {
   $9 = $1;
   $section = $9;
   $10 = $section;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(-606337664);
   if ($12) {
    $0 = 0;
    break;
   }
   $13 = $section;
   $14 = $2;
   $15 = (_find_section_var($13,$14)|0);
   $var = $15;
   $16 = $var;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $0 = 0;
    break;
   } else {
    $18 = $var;
    $19 = ((($18)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $0 = $20;
    break;
   }
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _ConfigGetSharedDataFilepath($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CoreHandle = 0, $configsharepath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $CoreHandle = sp;
 $1 = $filename;
 $configsharepath = 0;
 HEAP32[$CoreHandle>>2] = 0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = (_ConfigOpenSection((gb + (9208) | 0),$CoreHandle)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$CoreHandle>>2]|0;
  $7 = (_ConfigGetParamString($6,(gb + (10464) | 0))|0);
  $configsharepath = $7;
 }
 $8 = $1;
 $9 = HEAP32[(gb + (8410508) | 0)>>2]|0;
 $10 = $configsharepath;
 $11 = (_osal_get_shared_filepath($8,$9,$10)|0);
 $0 = $11;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _ConfigGetUserDataPath() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_osal_get_user_datapath()|0);
 return ($0|0);
}
function _ConfigGetUserCachePath() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_osal_get_user_cachepath()|0);
 return ($0|0);
}
function _is_numeric($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $chTemp = 0, $fTemp = 0, $rval = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $chTemp = sp + 24|0;
 $fTemp = sp + 12|0;
 $0 = $string;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $fTemp;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $chTemp;
 $2 = (_sscanf(($1|0),((gb + (7412) | 0)|0),($vararg_buffer|0))|0);
 $rval = $2;
 $3 = $rval;
 $4 = ($3|0)==(1);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _copy_configlist_active_to_saved() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_section = 0, $last_section = 0, $new_section = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (8410520) | 0)>>2]|0;
 $curr_section = $0;
 $last_section = 0;
 _delete_list((gb + (8410524) | 0));
 while(1) {
  $1 = $curr_section;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   label = 8;
   break;
  }
  $3 = $curr_section;
  $4 = (_section_deepcopy($3)|0);
  $new_section = $4;
  $5 = $new_section;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 8;
   break;
  }
  $7 = $last_section;
  $8 = ($7|0)==(0|0);
  $9 = $new_section;
  if ($8) {
   HEAP32[(gb + (8410524) | 0)>>2] = $9;
  } else {
   $10 = $last_section;
   $11 = ((($10)) + 12|0);
   HEAP32[$11>>2] = $9;
  }
  $12 = $new_section;
  $last_section = $12;
  $13 = $curr_section;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $curr_section = $15;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _find_alpha_section_link($list,$ParamName) {
 $list = $list|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_sec_link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $ParamName;
 $2 = $0;
 $curr_sec_link = $2;
 while(1) {
  $3 = $curr_sec_link;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 5;
   break;
  }
  $6 = $curr_sec_link;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = (_strcasecmp(($9|0),($10|0))|0);
  $12 = ($11|0)>=(0);
  if ($12) {
   label = 5;
   break;
  }
  $13 = $curr_sec_link;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  $curr_sec_link = $15;
 }
 if ((label|0) == 5) {
  $16 = $curr_sec_link;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _config_section_create($ParamName) {
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $sec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ParamName;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $0 = 0;
  } else {
   $4 = (_malloc(16)|0);
   $sec = $4;
   $5 = $sec;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $0 = 0;
    break;
   }
   $7 = $sec;
   HEAP32[$7>>2] = -606337664;
   $8 = $1;
   $9 = (_strdup(($8|0))|0);
   $10 = $sec;
   $11 = ((($10)) + 4|0);
   HEAP32[$11>>2] = $9;
   $12 = $sec;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   $16 = $sec;
   if ($15) {
    _free(($16|0));
    $0 = 0;
    break;
   } else {
    $17 = ((($16)) + 8|0);
    HEAP32[$17>>2] = 0;
    $18 = $sec;
    $19 = ((($18)) + 12|0);
    HEAP32[$19>>2] = 0;
    $20 = $sec;
    $0 = $20;
    break;
   }
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _find_section_var($section,$ParamName) {
 $section = $section|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $section;
 $2 = $ParamName;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $curr_var = $5;
 while(1) {
  $6 = $curr_var;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $2;
  $9 = $curr_var;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strcasecmp(($8|0),($10|0))|0);
  $12 = ($11|0)==(0);
  $13 = $curr_var;
  if ($12) {
   label = 4;
   break;
  }
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $curr_var = $15;
 }
 if ((label|0) == 4) {
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _config_var_create($ParamName,$ParamHelp) {
 $ParamName = $ParamName|0;
 $ParamHelp = $ParamHelp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $var = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ParamName;
 $2 = $ParamHelp;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $5 = (_malloc(20)|0);
 $var = $5;
 $6 = $var;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $8 = $var;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
 $9 = $1;
 $10 = (_strdup(($9|0))|0);
 $11 = $var;
 HEAP32[$11>>2] = $10;
 $12 = $var;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 $15 = $var;
 if ($14) {
  _free(($15|0));
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 1;
 $17 = $var;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = $2;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $2;
  $22 = (_strdup(($21|0))|0);
  $23 = $var;
  $24 = ((($23)) + 12|0);
  HEAP32[$24>>2] = $22;
  $25 = $var;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = $var;
   $30 = HEAP32[$29>>2]|0;
   _free(($30|0));
   $31 = $var;
   _free(($31|0));
   $0 = 0;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 } else {
  $32 = $var;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = 0;
 }
 $34 = $var;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = 0;
 $36 = $var;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _delete_var($var) {
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $var;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(4);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  _free(($7|0));
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 _free(($9|0));
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 _free(($12|0));
 $13 = $0;
 _free(($13|0));
 STACKTOP = sp;return;
}
function _append_var_to_section($section,$var) {
 $section = $section|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_var = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $section;
 $1 = $var;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(-606337664);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  $14 = $0;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = $13;
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $last_var = $18;
 while(1) {
  $19 = $last_var;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $last_var;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $last_var = $25;
 }
 $26 = $1;
 $27 = $last_var;
 $28 = ((($27)) + 16|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _delete_list($pConfigList) {
 $pConfigList = $pConfigList|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_section = 0, $next_section = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pConfigList;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $curr_section = $2;
 while(1) {
  $3 = $curr_section;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $curr_section;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $next_section = $7;
  $8 = $curr_section;
  _delete_section($8);
  $9 = $next_section;
  $curr_section = $9;
 }
 $10 = $0;
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _write_configlist_file() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $configpath = 0, $curr_section = 0, $curr_var = 0, $fPtr = 0, $filepath = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_ConfigGetUserConfigPath()|0);
 $configpath = $1;
 $2 = $configpath;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 8;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $4 = $configpath;
 $5 = (_combinepath($4,(gb + (5961) | 0))|0);
 $filepath = $5;
 $6 = $filepath;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 7;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $8 = $filepath;
 $9 = (_fopen(($8|0),((gb + (20964) | 0)|0))|0);
 $fPtr = $9;
 $10 = $fPtr;
 $11 = ($10|0)==(0|0);
 $12 = $filepath;
 if ($11) {
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(1,(gb + (7180) | 0),$vararg_buffer);
  $13 = $filepath;
  _free(($13|0));
  $0 = 8;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 _free(($12|0));
 $14 = $fPtr;
 (_fprintf(($14|0),((gb + (7231) | 0)|0),($vararg_buffer1|0))|0);
 $15 = $fPtr;
 (_fprintf(($15|0),((gb + (7265) | 0)|0),($vararg_buffer3|0))|0);
 $16 = HEAP32[(gb + (8410524) | 0)>>2]|0;
 $curr_section = $16;
 while(1) {
  $17 = $curr_section;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $curr_section;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $curr_var = $21;
  $22 = $fPtr;
  $23 = $curr_section;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $25;
  (_fprintf(($22|0),((gb + (7344) | 0)|0),($vararg_buffer5|0))|0);
  while(1) {
   $26 = $curr_var;
   $27 = ($26|0)!=(0|0);
   if (!($27)) {
    break;
   }
   $28 = $curr_var;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $curr_var;
    $33 = ((($32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (_strlen(($34|0))|0);
    $36 = ($35>>>0)>(0);
    if ($36) {
     $37 = $fPtr;
     $38 = $curr_var;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $40;
     (_fprintf(($37|0),((gb + (7352) | 0)|0),($vararg_buffer8|0))|0);
    }
   }
   $41 = $curr_var;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(1);
   do {
    if ($44) {
     $45 = $fPtr;
     $46 = $curr_var;
     $47 = HEAP32[$46>>2]|0;
     $48 = $curr_var;
     $49 = ((($48)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $47;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $50;
     (_fprintf(($45|0),((gb + (7358) | 0)|0),($vararg_buffer11|0))|0);
    } else {
     $51 = $curr_var;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(2);
     if ($54) {
      $55 = $fPtr;
      $56 = $curr_var;
      $57 = HEAP32[$56>>2]|0;
      $58 = $curr_var;
      $59 = ((($58)) + 8|0);
      $60 = +HEAPF32[$59>>2];
      $61 = $60;
      HEAP32[$vararg_buffer15>>2] = $57;
      $vararg_ptr18 = ((($vararg_buffer15)) + 8|0);
      HEAPF64[$vararg_ptr18>>3] = $61;
      (_fprintf(($55|0),((gb + (7367) | 0)|0),($vararg_buffer15|0))|0);
      break;
     }
     $62 = $curr_var;
     $63 = ((($62)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==(3);
     if ($65) {
      $66 = $curr_var;
      $67 = ((($66)) + 8|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(0);
      if ($69) {
       $70 = $fPtr;
       $71 = $curr_var;
       $72 = HEAP32[$71>>2]|0;
       HEAP32[$vararg_buffer19>>2] = $72;
       (_fprintf(($70|0),((gb + (7376) | 0)|0),($vararg_buffer19|0))|0);
       break;
      }
     }
     $73 = $curr_var;
     $74 = ((($73)) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==(3);
     if ($76) {
      $77 = $curr_var;
      $78 = ((($77)) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)!=(0);
      if (!($80)) {
       $81 = $fPtr;
       $82 = $curr_var;
       $83 = HEAP32[$82>>2]|0;
       HEAP32[$vararg_buffer22>>2] = $83;
       (_fprintf(($81|0),((gb + (7387) | 0)|0),($vararg_buffer22|0))|0);
       break;
      }
     }
     $84 = $curr_var;
     $85 = ((($84)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)==(4);
     if ($87) {
      $88 = $curr_var;
      $89 = ((($88)) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)!=(0|0);
      if ($91) {
       $92 = $fPtr;
       $93 = $curr_var;
       $94 = HEAP32[$93>>2]|0;
       $95 = $curr_var;
       $96 = ((($95)) + 8|0);
       $97 = HEAP32[$96>>2]|0;
       HEAP32[$vararg_buffer25>>2] = $94;
       $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
       HEAP32[$vararg_ptr28>>2] = $97;
       (_fprintf(($92|0),((gb + (7399) | 0)|0),($vararg_buffer25|0))|0);
      }
     }
    }
   } while(0);
   $98 = $curr_var;
   $99 = ((($98)) + 16|0);
   $100 = HEAP32[$99>>2]|0;
   $curr_var = $100;
  }
  $101 = $fPtr;
  (_fprintf(($101|0),((gb + (7410) | 0)|0),($vararg_buffer29|0))|0);
  $102 = $curr_section;
  $103 = ((($102)) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $curr_section = $104;
 }
 $105 = $fPtr;
 (_fclose(($105|0))|0);
 $0 = 0;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function _find_section($list,$ParamName) {
 $list = $list|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $list;
 $1 = $ParamName;
 $2 = $1;
 $3 = (_find_section_link($0,$2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _find_section_link($list,$ParamName) {
 $list = $list|0;
 $ParamName = $ParamName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_sec_link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $ParamName;
 $2 = $0;
 $curr_sec_link = $2;
 while(1) {
  $3 = $curr_sec_link;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 5;
   break;
  }
  $6 = $1;
  $7 = $curr_sec_link;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strcasecmp(($6|0),($10|0))|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 5;
   break;
  }
  $13 = $curr_sec_link;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  $curr_sec_link = $15;
 }
 if ((label|0) == 5) {
  $16 = $curr_sec_link;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _delete_section($pSection) {
 $pSection = $pSection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr_var = 0, $next_var = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSection;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $curr_var = $5;
 while(1) {
  $6 = $curr_var;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $curr_var;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $next_var = $10;
  $11 = $curr_var;
  _delete_var($11);
  $12 = $next_var;
  $curr_var = $12;
 }
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _free(($15|0));
 $16 = $0;
 _free(($16|0));
 STACKTOP = sp;return;
}
function _section_deepcopy($orig_section) {
 $orig_section = $orig_section|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $last_new_var = 0, $new_section = 0, $new_var = 0, $orig_var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $orig_section;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_config_section_create($6)|0);
 $new_section = $7;
 $8 = $new_section;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $orig_var = $12;
 $last_new_var = 0;
 L9: while(1) {
  $13 = $orig_var;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 20;
   break;
  }
  $15 = $orig_var;
  $16 = HEAP32[$15>>2]|0;
  $17 = $orig_var;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_config_var_create($16,$19)|0);
  $new_var = $20;
  $21 = $new_var;
  $22 = ($21|0)==(0|0);
  if ($22) {
   label = 8;
   break;
  }
  $24 = $orig_var;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $new_var;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = $26;
  $29 = $orig_var;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  L13: do {
   switch ($31|0) {
   case 3: case 1:  {
    $32 = $orig_var;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $new_var;
    $36 = ((($35)) + 8|0);
    HEAP32[$36>>2] = $34;
    break;
   }
   case 2:  {
    $37 = $orig_var;
    $38 = ((($37)) + 8|0);
    $39 = +HEAPF32[$38>>2];
    $40 = $new_var;
    $41 = ((($40)) + 8|0);
    HEAPF32[$41>>2] = $39;
    break;
   }
   case 4:  {
    $42 = $orig_var;
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = $orig_var;
     $47 = ((($46)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_strdup(($48|0))|0);
     $50 = $new_var;
     $51 = ((($50)) + 8|0);
     HEAP32[$51>>2] = $49;
     $52 = $new_var;
     $53 = ((($52)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      label = 14;
      break L9;
     } else {
      break L13;
     }
    } else {
     $58 = $new_var;
     $59 = ((($58)) + 8|0);
     HEAP32[$59>>2] = 0;
     break L13;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $60 = $last_new_var;
  $61 = ($60|0)==(0|0);
  $62 = $new_var;
  if ($61) {
   $63 = $new_section;
   $64 = ((($63)) + 8|0);
   HEAP32[$64>>2] = $62;
  } else {
   $65 = $last_new_var;
   $66 = ((($65)) + 16|0);
   HEAP32[$66>>2] = $62;
  }
  $67 = $new_var;
  $last_new_var = $67;
  $68 = $orig_var;
  $69 = ((($68)) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $orig_var = $70;
 }
 if ((label|0) == 8) {
  $23 = $new_section;
  _delete_section($23);
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 14) {
  $56 = $new_section;
  _delete_section($56);
  $57 = $new_var;
  _delete_var($57);
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 20) {
  $71 = $new_section;
  $0 = $71;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _DebuggerCallback($type,$param) {
 $type = $type|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $param;
 $2 = $0;
 $3 = ($2|0)==(1);
 do {
  if ($3) {
   $4 = HEAP32[(gb + (8410532) | 0)>>2]|0;
   $5 = ($4|0)!=(0|0);
   if ($5) {
    $6 = HEAP32[(gb + (8410532) | 0)>>2]|0;
    mftCall_v($6|0);
   }
  } else {
   $7 = $0;
   $8 = ($7|0)==(2);
   if ($8) {
    $9 = HEAP32[(gb + (8410536) | 0)>>2]|0;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break;
    }
    $11 = HEAP32[(gb + (8410536) | 0)>>2]|0;
    $12 = $1;
    mftCall_vi($11|0,($12|0));
    break;
   } else {
    $13 = $0;
    $14 = ($13|0)==(3);
    $15 = HEAP32[(gb + (8410540) | 0)>>2]|0;
    $16 = ($15|0)!=(0|0);
    $or$cond = $14 & $16;
    if (!($or$cond)) {
     break;
    }
    $17 = HEAP32[(gb + (8410540) | 0)>>2]|0;
    mftCall_v($17|0);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _CoreCompareCallback() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410544) | 0)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(gb + (8410544) | 0)>>2]|0;
 $3 = HEAP32[(gb + (8410528) | 0)>>2]|0;
 mftCall_vi($2|0,($3|0));
 return;
}
function _CoreCompareDataSync($length,$ptr) {
 $length = $length|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $ptr;
 $2 = HEAP32[(gb + (8410548) | 0)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(gb + (8410548) | 0)>>2]|0;
 $5 = $0;
 $6 = $1;
 mftCall_vii($4|0,($5|0),($6|0));
 STACKTOP = sp;return;
}
function _DebugSetCoreCompare($dbg_core_compare,$dbg_core_data_sync) {
 $dbg_core_compare = $dbg_core_compare|0;
 $dbg_core_data_sync = $dbg_core_data_sync|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dbg_core_compare;
 $1 = $dbg_core_data_sync;
 $2 = $0;
 HEAP32[(gb + (8410544) | 0)>>2] = $2;
 $3 = $1;
 HEAP32[(gb + (8410548) | 0)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _DebugSetCallbacks($dbg_frontend_init,$dbg_frontend_update,$dbg_frontend_vi) {
 $dbg_frontend_init = $dbg_frontend_init|0;
 $dbg_frontend_update = $dbg_frontend_update|0;
 $dbg_frontend_vi = $dbg_frontend_vi|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dbg_frontend_init;
 $1 = $dbg_frontend_update;
 $2 = $dbg_frontend_vi;
 STACKTOP = sp;return 13;
}
function _DebugSetRunState($runstate) {
 $runstate = $runstate|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $runstate;
 STACKTOP = sp;return 13;
}
function _DebugGetState($statenum) {
 $statenum = $statenum|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $statenum;
 _DebugMessage(1,(gb + (7418) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _DebugStep() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 13;
}
function _DebugDecodeOp($instruction,$op,$args,$pc) {
 $instruction = $instruction|0;
 $op = $op|0;
 $args = $args|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $instruction;
 $1 = $op;
 $2 = $args;
 $3 = $pc;
 _DebugMessage(1,(gb + (7490) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _DebugMemGetRecompInfo($recomp_type,$address,$index) {
 $recomp_type = $recomp_type|0;
 $address = $address|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $recomp_type;
 $1 = $address;
 $2 = $index;
 _DebugMessage(1,(gb + (7562) | 0),$vararg_buffer);
 STACKTOP = sp;return (0|0);
}
function _DebugMemGetMemInfo($mem_info_type,$address) {
 $mem_info_type = $mem_info_type|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mem_info_type;
 $1 = $address;
 _DebugMessage(1,(gb + (7642) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _DebugMemGetPointer($mem_ptr_type) {
 $mem_ptr_type = $mem_ptr_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $mem_ptr_type;
 $2 = $1;
 switch ($2|0) {
 case 1:  {
  $0 = (gb + (21216) | 0);
  break;
 }
 case 2:  {
  $0 = (gb + (8409824) | 0);
  break;
 }
 case 3:  {
  $0 = (gb + (8410672) | 0);
  break;
 }
 case 4:  {
  $0 = (gb + (8421560) | 0);
  break;
 }
 case 5:  {
  $0 = (gb + (8421480) | 0);
  break;
 }
 case 6:  {
  $0 = (gb + (8421404) | 0);
  break;
 }
 default: {
  _DebugMessage(1,(gb + (7719) | 0),$vararg_buffer);
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _DebugMemRead64($address) {
 $address = $address|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 _DebugMessage(1,(gb + (7786) | 0),$vararg_buffer);
 setTempRet0((0) | 0);
 STACKTOP = sp;return 0;
}
function _DebugMemRead32($address) {
 $address = $address|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 _DebugMessage(1,(gb + (7859) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _DebugMemRead16($address) {
 $address = $address|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 _DebugMessage(1,(gb + (7932) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _DebugMemRead8($address) {
 $address = $address|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 _DebugMessage(1,(gb + (8005) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _DebugMemWrite64($address,$0,$1) {
 $address = $address|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $2 = $address;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 _DebugMessage(1,(gb + (8077) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _DebugMemWrite32($address,$value) {
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 $1 = $value;
 _DebugMessage(1,(gb + (8151) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _DebugMemWrite16($address,$value) {
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 $1 = $value;
 _DebugMessage(1,(gb + (8225) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _DebugMemWrite8($address,$value) {
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 $1 = $value;
 _DebugMessage(1,(gb + (8299) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _DebugGetCPUDataPtr($cpu_data_type) {
 $cpu_data_type = $cpu_data_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $cpu_data_type;
 $2 = $1;
 do {
  switch ($2|0) {
  case 1:  {
   $3 = (_r4300_pc()|0);
   $0 = $3;
   break;
  }
  case 2:  {
   $4 = (_r4300_regs()|0);
   $0 = $4;
   break;
  }
  case 3:  {
   $5 = (_r4300_mult_hi()|0);
   $0 = $5;
   break;
  }
  case 4:  {
   $6 = (_r4300_mult_lo()|0);
   $0 = $6;
   break;
  }
  case 5:  {
   $7 = (_r4300_cp0_regs()|0);
   $0 = $7;
   break;
  }
  case 6:  {
   $8 = (_r4300_cp1_regs_double()|0);
   $0 = $8;
   break;
  }
  case 7:  {
   $9 = (_r4300_cp1_regs_simple()|0);
   $0 = $9;
   break;
  }
  case 8:  {
   $10 = (_r4300_cp1_regs()|0);
   $0 = $10;
   break;
  }
  case 9:  {
   $0 = (gb + (23106792) | 0);
   break;
  }
  default: {
   _DebugMessage(1,(gb + (8372) | 0),$vararg_buffer);
   $0 = 0;
  }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _DebugBreakpointLookup($address,$size,$flags) {
 $address = $address|0;
 $size = $size|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $address;
 $1 = $size;
 $2 = $flags;
 _DebugMessage(1,(gb + (8442) | 0),$vararg_buffer);
 STACKTOP = sp;return -1;
}
function _DebugBreakpointCommand($command,$index,$bkp) {
 $command = $command|0;
 $index = $index|0;
 $bkp = $bkp|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $command;
 $1 = $index;
 $2 = $bkp;
 _DebugMessage(1,(gb + (8522) | 0),$vararg_buffer);
 STACKTOP = sp;return -1;
}
function _CoreStartup($APIVersion,$ConfigPath,$DataPath,$Context,$DebugCallback,$Context2,$StateCallback) {
 $APIVersion = $APIVersion|0;
 $ConfigPath = $ConfigPath|0;
 $DataPath = $DataPath|0;
 $Context = $Context|0;
 $DebugCallback = $DebugCallback|0;
 $Context2 = $Context2|0;
 $StateCallback = $StateCallback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $APIVersion;
 $2 = $ConfigPath;
 $3 = $DataPath;
 $4 = $Context;
 $5 = $DebugCallback;
 $6 = $Context2;
 $7 = $StateCallback;
 $8 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 2;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $10 = $5;
 $11 = $4;
 (_SetDebugCallback($10,$11)|0);
 $12 = $7;
 $13 = $6;
 (_SetStateCallback($12,$13)|0);
 $14 = $1;
 $15 = $14 & -65536;
 $16 = ($15|0)!=(131072);
 if ($16) {
  $17 = $1;
  $18 = $17 >> 16;
  $19 = $18 & 65535;
  $20 = $1;
  $21 = $20 >> 8;
  $22 = $21 & 255;
  $23 = $1;
  $24 = $23 & 255;
  HEAP32[$vararg_buffer>>2] = $19;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $22;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $24;
  $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr4>>2] = 2;
  $vararg_ptr5 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $vararg_ptr6 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr6>>2] = 1;
  _DebugMessage(1,(gb + (8603) | 0),$vararg_buffer);
  $0 = 3;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 (_plugin_connect(2,0)|0);
 (_plugin_connect(3,0)|0);
 (_plugin_connect(4,0)|0);
 (_plugin_connect(5,0)|0);
 _savestates_init();
 $25 = $2;
 $26 = $3;
 $27 = (_ConfigInit($25,$26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $0 = 9;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $29 = (_ConfigOpenSection((gb + (9208) | 0),(gb + (8410648) | 0))|0);
 $30 = ($29|0)!=(0);
 $31 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $32 = ($31|0)==(0|0);
 $or$cond = $30 | $32;
 if ($or$cond) {
  $0 = 9;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $33 = (_main_set_core_defaults()|0);
 $34 = ($33|0)!=(0);
 if ($34) {
  _romdatabase_open();
  (_workqueue_init()|0);
  HEAP32[(gb + (8410556) | 0)>>2] = 1;
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $0 = 9;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _CoreShutdown() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  _romdatabase_close();
  (_ConfigShutdown()|0);
  _workqueue_shutdown();
  _savestates_deinit();
  _SDL_Quit();
  HEAP32[(gb + (8410556) | 0)>>2] = 0;
  $0 = 0;
  $3 = $0;
  STACKTOP = sp;return ($3|0);
 } else {
  $0 = 1;
  $3 = $0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function _CoreAttachPlugin($PluginType,$PluginLibHandle) {
 $PluginType = $PluginType|0;
 $PluginLibHandle = $PluginLibHandle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $rval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $PluginType;
 $2 = $PluginLibHandle;
 $3 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $6 = ($5|0)==(0);
   $7 = HEAP32[(gb + (8410560) | 0)>>2]|0;
   $8 = ($7|0)!=(0);
   $or$cond = $6 & $8;
   if (!($or$cond)) {
    $0 = 10;
    break;
   }
   $9 = $1;
   $10 = $2;
   $11 = (_plugin_connect($9,$10)|0);
   $rval = $11;
   $12 = $rval;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $rval;
    $0 = $14;
    break;
   }
   $15 = $1;
   $16 = (_plugin_start($15)|0);
   $rval = $16;
   $17 = $rval;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $rval;
    $0 = $19;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _CoreDetachPlugin($PluginType) {
 $PluginType = $PluginType|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $PluginType;
 $2 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $0 = 10;
    break;
   } else {
    $6 = $1;
    $7 = (_plugin_connect($6,0)|0);
    $0 = $7;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _CoreDoCommand($Command,$ParamInt,$ParamPtr) {
 $Command = $Command|0;
 $ParamInt = $ParamInt|0;
 $ParamPtr = $ParamPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $keymod = 0, $keysym = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $rval = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Command;
 $2 = $ParamInt;
 $3 = $ParamPtr;
 $4 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 L1: do {
  if ($5) {
   $6 = $1;
   do {
    switch ($6|0) {
    case 0:  {
     $0 = 0;
     break L1;
     break;
    }
    case 1:  {
     $7 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $8 = ($7|0)!=(0);
     $9 = HEAP32[(gb + (8410560) | 0)>>2]|0;
     $10 = ($9|0)!=(0);
     $or$cond = $8 | $10;
     if ($or$cond) {
      $0 = 10;
      break L1;
     }
     $11 = $3;
     $12 = ($11|0)==(0|0);
     $13 = $2;
     $14 = ($13|0)<(4096);
     $or$cond3 = $12 | $14;
     if ($or$cond3) {
      $0 = 4;
      break L1;
     }
     $15 = $3;
     $16 = $2;
     $17 = (_open_rom($15,$16)|0);
     $rval = $17;
     $18 = $rval;
     $19 = ($18|0)==(0);
     if ($19) {
      HEAP32[(gb + (8410560) | 0)>>2] = 1;
      _ScreenshotRomOpen();
      _cheat_init();
     }
     $20 = $rval;
     $0 = $20;
     break L1;
     break;
    }
    case 2:  {
     $21 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $22 = ($21|0)==(0);
     $23 = HEAP32[(gb + (8410560) | 0)>>2]|0;
     $24 = ($23|0)!=(0);
     $or$cond5 = $22 & $24;
     if ($or$cond5) {
      HEAP32[(gb + (8410560) | 0)>>2] = 0;
      _cheat_delete_all();
      _cheat_uninit();
      $25 = (_close_rom()|0);
      $0 = $25;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 3:  {
     $26 = HEAP32[(gb + (8410560) | 0)>>2]|0;
     $27 = ($26|0)!=(0);
     if (!($27)) {
      $0 = 10;
      break L1;
     }
     $28 = $3;
     $29 = ($28|0)==(0|0);
     if ($29) {
      $0 = 4;
      break L1;
     }
     $30 = $2;
     $31 = (64)<($30>>>0);
     if ($31) {
      $2 = 64;
     }
     $32 = $3;
     $33 = $2;
     _memcpy(($32|0),((gb + (8422116) | 0)|0),($33|0))|0;
     $34 = $2;
     $35 = ($34|0)>=(32);
     if ($35) {
      $36 = $2;
      $37 = ($36|0)>=(52);
      $38 = $2;
      $39 = (($38) - 32)|0;
      $40 = $37 ? 20 : $39;
      $size = $40;
      $41 = $3;
      $42 = ((($41)) + 32|0);
      $43 = $size;
      _memcpy(($42|0),(((((gb + (8422180) | 0)) + 16|0))|0),($43|0))|0;
     }
     $0 = 0;
     break L1;
     break;
    }
    case 4:  {
     $44 = HEAP32[(gb + (8410560) | 0)>>2]|0;
     $45 = ($44|0)!=(0);
     if (!($45)) {
      $0 = 10;
      break L1;
     }
     $46 = $3;
     $47 = ($46|0)==(0|0);
     if ($47) {
      $0 = 4;
      break L1;
     }
     $48 = $2;
     $49 = (293)<($48>>>0);
     if ($49) {
      $2 = 293;
     }
     $50 = $3;
     $51 = $2;
     _memcpy(($50|0),((gb + (23109551) | 0)|0),($51|0))|0;
     $0 = 0;
     break L1;
     break;
    }
    case 5:  {
     $52 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $53 = ($52|0)==(0);
     $54 = HEAP32[(gb + (8410560) | 0)>>2]|0;
     $55 = ($54|0)!=(0);
     $or$cond7 = $53 & $55;
     if ($or$cond7) {
      (_plugin_check()|0);
      $56 = (_main_run()|0);
      $rval = $56;
      $57 = $rval;
      $0 = $57;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 6:  {
     $58 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $59 = ($58|0)!=(0);
     if ($59) {
      $60 = (_main_core_state_set(1,1)|0);
      $0 = $60;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 7:  {
     $61 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $62 = ($61|0)!=(0);
     if ($62) {
      $63 = (_main_core_state_set(1,3)|0);
      $0 = $63;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 8:  {
     $64 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $65 = ($64|0)!=(0);
     if ($65) {
      $66 = (_main_core_state_set(1,2)|0);
      $0 = $66;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 9:  {
     $67 = $3;
     $68 = ($67|0)==(0|0);
     if ($68) {
      $0 = 4;
      break L1;
     } else {
      $69 = $2;
      $70 = $3;
      $71 = (_main_core_state_query($69,$70)|0);
      $0 = $71;
      break L1;
     }
     break;
    }
    case 17:  {
     $72 = $3;
     $73 = ($72|0)==(0|0);
     if ($73) {
      $0 = 4;
      break L1;
     } else {
      $74 = $2;
      $75 = $3;
      $76 = HEAP32[$75>>2]|0;
      $77 = (_main_core_state_set($74,$76)|0);
      $0 = $77;
      break L1;
     }
     break;
    }
    case 10:  {
     $78 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $3;
      _main_state_load($80);
      $0 = 0;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 11:  {
     $81 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $82 = ($81|0)!=(0);
     if (!($82)) {
      $0 = 10;
      break L1;
     }
     $83 = $3;
     $84 = ($83|0)!=(0|0);
     if ($84) {
      $85 = $2;
      $86 = ($85|0)<(1);
      $87 = $2;
      $88 = ($87|0)>(3);
      $or$cond9 = $86 | $88;
      if ($or$cond9) {
       $0 = 5;
       break L1;
      }
     }
     $89 = $2;
     $90 = $3;
     _main_state_save($89,$90);
     $0 = 0;
     break L1;
     break;
    }
    case 12:  {
     $91 = $2;
     $92 = ($91|0)<(0);
     $93 = $2;
     $94 = ($93|0)>(9);
     $or$cond11 = $92 | $94;
     if ($or$cond11) {
      $0 = 5;
      break L1;
     } else {
      $95 = $2;
      $96 = (_main_core_state_set(3,$95)|0);
      $0 = $96;
      break L1;
     }
     break;
    }
    case 13:  {
     $97 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = $2;
      $100 = $99 & 65535;
      $keysym = $100;
      $101 = $2;
      $102 = $101 >> 16;
      $103 = $102 & 65535;
      $keymod = $103;
      $104 = $keysym;
      $105 = $keymod;
      _event_sdl_keydown($104,$105);
      $0 = 0;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 14:  {
     $106 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $2;
      $109 = $108 & 65535;
      $keysym = $109;
      $110 = $2;
      $111 = $110 >> 16;
      $112 = $111 & 65535;
      $keymod = $112;
      $113 = $keysym;
      $114 = $keymod;
      _event_sdl_keyup($113,$114);
      $0 = 0;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 15:  {
     $115 = $3;
     HEAP32[(gb + (8410652) | 0)>>2] = $115;
     $0 = 0;
     break L1;
     break;
    }
    case 16:  {
     $116 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $117 = ($116|0)!=(0);
     if ($117) {
      _main_take_next_screenshot();
      $0 = 0;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    case 18:  {
     $118 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $119 = ($118|0)!=(0);
     if (!($119)) {
      $0 = 10;
      break L1;
     }
     $120 = $3;
     $121 = ($120|0)==(0|0);
     if ($121) {
      $0 = 4;
      break L1;
     }
     $122 = $2;
     $123 = ($122|0)<(0);
     $124 = $2;
     $125 = ($124|0)>(1);
     $or$cond13 = $123 | $125;
     if ($or$cond13) {
      $0 = 5;
      break L1;
     } else {
      $126 = $3;
      $127 = $2;
      $128 = (_main_read_screen($126,$127)|0);
      $0 = $128;
      break L1;
     }
     break;
    }
    case 19:  {
     $129 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $130 = ($129|0)!=(0);
     if (!($130)) {
      $0 = 10;
      break L1;
     }
     $131 = $2;
     $132 = ($131|0)<(0);
     $133 = $2;
     $134 = ($133|0)>(1);
     $or$cond15 = $132 | $134;
     if ($or$cond15) {
      $0 = 5;
      break L1;
     } else {
      $135 = $2;
      $136 = (_main_reset($135)|0);
      $0 = $136;
      break L1;
     }
     break;
    }
    case 20:  {
     $137 = HEAP32[(gb + (8410660) | 0)>>2]|0;
     $138 = ($137|0)!=(0);
     if ($138) {
      _main_advance_one();
      $0 = 0;
      break L1;
     } else {
      $0 = 10;
      break L1;
     }
     break;
    }
    default: {
     $0 = 5;
     break L1;
    }
    }
   } while(0);
  } else {
   $0 = 1;
  }
 } while(0);
 $139 = $0;
 STACKTOP = sp;return ($139|0);
}
function _CoreOverrideVidExt($VideoFunctionStruct) {
 $VideoFunctionStruct = $VideoFunctionStruct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $VideoFunctionStruct;
 $2 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (_OverrideVideoFunctions($4)|0);
  $0 = $5;
 } else {
  $0 = 1;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _CoreAddCheat($CheatName,$CodeList,$NumCodes) {
 $CheatName = $CheatName|0;
 $CodeList = $CodeList|0;
 $NumCodes = $NumCodes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CheatName;
 $2 = $CodeList;
 $3 = $NumCodes;
 $4 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = ($6|0)==(0|0);
   $8 = $2;
   $9 = ($8|0)==(0|0);
   $or$cond = $7 | $9;
   if ($or$cond) {
    $0 = 4;
    break;
   }
   $10 = $1;
   $11 = (_strlen(($10|0))|0);
   $12 = ($11>>>0)<(1);
   $13 = $3;
   $14 = ($13|0)<(1);
   $or$cond3 = $12 | $14;
   if ($or$cond3) {
    $0 = 5;
    break;
   }
   $15 = $1;
   $16 = $2;
   $17 = $3;
   $18 = (_cheat_add_new($15,$16,$17)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    $0 = 0;
    break;
   } else {
    $0 = 5;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _CoreCheatEnabled($CheatName,$Enabled) {
 $CheatName = $CheatName|0;
 $Enabled = $Enabled|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CheatName;
 $2 = $Enabled;
 $3 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = $1;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $0 = 4;
    break;
   }
   $7 = $1;
   $8 = $2;
   $9 = (_cheat_set_enabled($7,$8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $0 = 0;
    break;
   } else {
    $0 = 5;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _CoreGetRomSettings($RomSettings,$RomSettingsLength,$Crc1,$Crc2) {
 $RomSettings = $RomSettings|0;
 $RomSettingsLength = $RomSettingsLength|0;
 $Crc1 = $Crc1|0;
 $Crc2 = $Crc2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $i = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $RomSettings;
 $2 = $RomSettingsLength;
 $3 = $Crc1;
 $4 = $Crc2;
 $5 = HEAP32[(gb + (8410556) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $0 = 1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $7 = $1;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 4;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $9 = $2;
 $10 = ($9>>>0)<(293);
 if ($10) {
  $0 = 5;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $11 = $3;
 $12 = $4;
 $13 = (_ini_search_by_crc($11,$12)|0);
 $entry = $13;
 $14 = $entry;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $0 = 6;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $16 = $1;
 $17 = $entry;
 $18 = HEAP32[$17>>2]|0;
 (_strncpy(($16|0),($18|0),255)|0);
 $19 = $1;
 $20 = ((($19)) + 255|0);
 HEAP8[$20>>0] = 0;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21|0)<(16);
  $23 = $1;
  $24 = ((($23)) + 256|0);
  if (!($22)) {
   break;
  }
  $25 = $i;
  $26 = $25<<1;
  $27 = (($24) + ($26)|0);
  $28 = $i;
  $29 = $entry;
  $30 = ((($29)) + 4|0);
  $31 = (($30) + ($28)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  HEAP32[$vararg_buffer>>2] = $33;
  (_sprintf(($27|0),((gb + (14309) | 0)|0),($vararg_buffer|0))|0);
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = ((($24)) + 32|0);
 HEAP8[$36>>0] = 0;
 $37 = $entry;
 $38 = ((($37)) + 37|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $1;
 $41 = ((($40)) + 289|0);
 HEAP8[$41>>0] = $39;
 $42 = $entry;
 $43 = ((($42)) + 36|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $1;
 $46 = ((($45)) + 290|0);
 HEAP8[$46>>0] = $44;
 $47 = $entry;
 $48 = ((($47)) + 38|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $1;
 $51 = ((($50)) + 291|0);
 HEAP8[$51>>0] = $49;
 $52 = $entry;
 $53 = ((($52)) + 39|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $1;
 $56 = ((($55)) + 292|0);
 HEAP8[$56>>0] = $54;
 $0 = 0;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _OverrideVideoFunctions($VideoFunctionStruct) {
 $VideoFunctionStruct = $VideoFunctionStruct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $VideoFunctionStruct;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 4;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(11);
 if ($6) {
  $0 = 5;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $1;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = $1;
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = $1;
    $20 = ((($19)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = $1;
     $24 = ((($23)) + 20|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0|0);
     if (!($26)) {
      $27 = $1;
      $28 = ((($27)) + 24|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0|0);
      if (!($30)) {
       $31 = $1;
       $32 = ((($31)) + 28|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0|0);
       if (!($34)) {
        $35 = $1;
        $36 = ((($35)) + 32|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($37|0)==(0|0);
        if (!($38)) {
         $39 = $1;
         $40 = ((($39)) + 36|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ($41|0)==(0|0);
         if (!($42)) {
          $43 = $1;
          $44 = ((($43)) + 40|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = ($45|0)==(0|0);
          if (!($46)) {
           $47 = $1;
           $48 = ((($47)) + 44|0);
           $49 = HEAP32[$48>>2]|0;
           $50 = ($49|0)==(0|0);
           if (!($50)) {
            $51 = $1;
            dest=(gb + (60) | 0); src=$51; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            HEAP32[(gb + (8410568) | 0)>>2] = 1;
            $0 = 0;
            $52 = $0;
            STACKTOP = sp;return ($52|0);
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[(gb + (60) | 0)>>2] = 11;
 dest=((((gb + (60) | 0)) + 4|0)); stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(gb + (8410568) | 0)>>2] = 0;
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _VidExt_InFullscreenMode() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410572) | 0)>>2]|0;
 return ($0|0);
}
function _VidExt_VideoRunning() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410576) | 0)>>2]|0;
 return ($0|0);
}
function _VidExt_Init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 do {
  if ($2) {
   $3 = HEAP32[((((gb + (60) | 0)) + 4|0))>>2]|0;
   $4 = (mftCall_i($3|0)|0);
   $0 = $4;
  } else {
   $5 = (_SDL_InitSubSystem(32)|0);
   $6 = ($5|0)==(-1);
   if ($6) {
    $7 = (_SDL_GetError()|0);
    HEAP32[$vararg_buffer>>2] = $7;
    _DebugMessage(1,(gb + (8697) | 0),$vararg_buffer);
    $0 = 12;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _VidExt_Quit() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[((((gb + (60) | 0)) + 8|0))>>2]|0;
  $4 = (mftCall_i($3|0)|0);
  $rval = $4;
  $5 = $rval;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[(gb + (8410576) | 0)>>2] = 0;
   _StateChanged(2,1);
  }
  $7 = $rval;
  $0 = $7;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 $8 = (_SDL_WasInit(32)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  (_SDL_ShowCursor(1)|0);
  _SDL2_DestroyWindow();
  _SDL_QuitSubSystem(32);
  HEAP32[(gb + (8410580) | 0)>>2] = 0;
  HEAP32[(gb + (8410576) | 0)>>2] = 0;
  _StateChanged(2,1);
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _VidExt_ListFullscreenModes($SizeArray,$NumSizes) {
 $SizeArray = $SizeArray|0;
 $NumSizes = $NumSizes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $modes = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $videoFlags = 0, $videoInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $SizeArray;
 $2 = $NumSizes;
 $3 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[((((gb + (60) | 0)) + 12|0))>>2]|0;
  $6 = $1;
  $7 = $2;
  $8 = (mftCall_iii($5|0,($6|0),($7|0))|0);
  $0 = $8;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $9 = (_SDL_WasInit(32)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = 1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $videoFlags = 75497472;
 $11 = (_SDL_GetVideoInfo()|0);
 $videoInfo = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $13;
  _DebugMessage(1,(gb + (8733) | 0),$vararg_buffer);
  $0 = 12;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $14 = $videoInfo;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 $18 = $videoFlags;
 if ($17) {
  $19 = $18 | 134217729;
  $videoFlags = $19;
 } else {
  $videoFlags = $18;
 }
 $20 = $videoFlags;
 $21 = (_SDL_ListModes(0,$20)|0);
 $modes = $21;
 $22 = $modes;
 $23 = ($22|0)==(0|0);
 $24 = $modes;
 $25 = ($24|0)==((-1)|0);
 $or$cond = $23 | $25;
 if ($or$cond) {
  _DebugMessage(2,(gb + (8767) | 0),$vararg_buffer2);
  $26 = $2;
  HEAP32[$26>>2] = 0;
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = $2;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27|0)<($29|0);
  if ($30) {
   $31 = $i;
   $32 = $modes;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0|0);
   $59 = $35;
  } else {
   $59 = 0;
  }
  $36 = $i;
  if (!($59)) {
   break;
  }
  $37 = $modes;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $i;
  $43 = $1;
  $44 = (($43) + ($42<<3)|0);
  HEAP32[$44>>2] = $41;
  $45 = $i;
  $46 = $modes;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $i;
  $52 = $1;
  $53 = (($52) + ($51<<3)|0);
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $50;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = $2;
 HEAP32[$57>>2] = $36;
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _VidExt_SetVideoMode($Width,$Height,$BitsPerPixel,$ScreenMode,$Flags) {
 $Width = $Width|0;
 $Height = $Height|0;
 $BitsPerPixel = $BitsPerPixel|0;
 $ScreenMode = $ScreenMode|0;
 $Flags = $Flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $rval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $videoFlags = 0, $videoInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $Width;
 $2 = $Height;
 $3 = $BitsPerPixel;
 $4 = $ScreenMode;
 $5 = $Flags;
 $videoFlags = 0;
 $6 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[((((gb + (60) | 0)) + 16|0))>>2]|0;
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = (mftCall_iiiiii($8|0,($9|0),($10|0),($11|0),($12|0),($13|0))|0);
  $rval = $14;
  $15 = $rval;
  $16 = ($15|0)==(0);
  $17 = $4;
  $18 = ($17|0)==(3);
  $19 = $16 ? $18 : 0;
  $20 = $19&1;
  HEAP32[(gb + (8410572) | 0)>>2] = $20;
  $21 = $rval;
  $22 = ($21|0)==(0);
  $23 = $22&1;
  HEAP32[(gb + (8410576) | 0)>>2] = $23;
  $24 = HEAP32[(gb + (8410576) | 0)>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $4;
   _StateChanged(2,$26);
   $27 = $1;
   $28 = $27 << 16;
   $29 = $2;
   $30 = $28 | $29;
   _StateChanged(6,$30);
  }
  $31 = $rval;
  $0 = $31;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $32 = (_SDL_WasInit(32)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $0 = 1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $34 = $4;
 $35 = ($34|0)==(2);
 do {
  if ($35) {
   $videoFlags = 67108864;
   $36 = $5;
   $37 = $36 & 1;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $videoFlags;
    $40 = $39 | 16777216;
    $videoFlags = $40;
   }
  } else {
   $41 = $4;
   $42 = ($41|0)==(3);
   if ($42) {
    $videoFlags = 75497472;
    break;
   }
   $0 = 5;
   $75 = $0;
   STACKTOP = sp;return ($75|0);
  }
 } while(0);
 $43 = (_SDL_GetVideoInfo()|0);
 $videoInfo = $43;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $45 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $45;
  _DebugMessage(1,(gb + (8733) | 0),$vararg_buffer);
  $0 = 12;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $46 = $videoInfo;
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 1;
 $49 = ($48|0)!=(0);
 $50 = $videoFlags;
 if ($49) {
  $51 = $50 | 134217729;
  $videoFlags = $51;
 } else {
  $videoFlags = $50;
 }
 $52 = $3;
 $53 = ($52|0)>(0);
 if ($53) {
  $54 = $3;
  $55 = $1;
  $56 = $2;
  HEAP32[$vararg_buffer1>>2] = $54;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $55;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $56;
  _DebugMessage(3,(gb + (8807) | 0),$vararg_buffer1);
 } else {
  $57 = $1;
  $58 = $2;
  HEAP32[$vararg_buffer6>>2] = $57;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $58;
  _DebugMessage(3,(gb + (8840) | 0),$vararg_buffer6);
 }
 $59 = $1;
 $60 = $2;
 $61 = $3;
 $62 = $videoFlags;
 $63 = (_SDL_SetVideoMode($59,$60,$61,$62)|0);
 HEAP32[(gb + (8410580) | 0)>>2] = $63;
 $64 = HEAP32[(gb + (8410580) | 0)>>2]|0;
 $65 = ($64|0)==(0|0);
 if ($65) {
  $66 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer10>>2] = $66;
  _DebugMessage(1,(gb + (8866) | 0),$vararg_buffer10);
  $0 = 12;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 } else {
  (_SDL_ShowCursor(0)|0);
  $67 = $4;
  $68 = ($67|0)==(3);
  $69 = $68&1;
  HEAP32[(gb + (8410572) | 0)>>2] = $69;
  HEAP32[(gb + (8410576) | 0)>>2] = 1;
  $70 = $4;
  _StateChanged(2,$70);
  $71 = $1;
  $72 = $71 << 16;
  $73 = $2;
  $74 = $72 | $73;
  _StateChanged(6,$74);
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _VidExt_ResizeWindow($Width,$Height) {
 $Width = $Width|0;
 $Height = $Height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $videoFlags = 0, $videoInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $Width;
 $2 = $Height;
 $videoFlags = 0;
 $3 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  _osd_exit();
  $5 = HEAP32[((((gb + (60) | 0)) + 44|0))>>2]|0;
  $6 = $1;
  $7 = $2;
  $8 = (mftCall_iii($5|0,($6|0),($7|0))|0);
  $rval = $8;
  $9 = $rval;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $1;
   $12 = $11 << 16;
   $13 = $2;
   $14 = $12 | $13;
   _StateChanged(6,$14);
   $15 = $1;
   $16 = $2;
   _osd_init($15,$16);
  }
  $17 = $rval;
  $0 = $17;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $18 = HEAP32[(gb + (8410576) | 0)>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = (_SDL_WasInit(32)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = HEAP32[(gb + (8410572) | 0)>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    _DebugMessage(1,(gb + (8894) | 0),$vararg_buffer);
    $0 = 10;
    $46 = $0;
    STACKTOP = sp;return ($46|0);
   }
   $videoFlags = 83886080;
   $24 = (_SDL_GetVideoInfo()|0);
   $videoInfo = $24;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $26 = (_SDL_GetError()|0);
    HEAP32[$vararg_buffer1>>2] = $26;
    _DebugMessage(1,(gb + (8733) | 0),$vararg_buffer1);
    $0 = 12;
    $46 = $0;
    STACKTOP = sp;return ($46|0);
   }
   $27 = $videoInfo;
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 1;
   $30 = ($29|0)!=(0);
   $31 = $videoFlags;
   if ($30) {
    $32 = $31 | 134217729;
    $videoFlags = $32;
   } else {
    $videoFlags = $31;
   }
   _osd_exit();
   $33 = $1;
   $34 = $2;
   $35 = $videoFlags;
   $36 = (_SDL_SetVideoMode($33,$34,0,$35)|0);
   HEAP32[(gb + (8410580) | 0)>>2] = $36;
   $37 = HEAP32[(gb + (8410580) | 0)>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $39 = (_SDL_GetError()|0);
    HEAP32[$vararg_buffer3>>2] = $39;
    _DebugMessage(1,(gb + (8866) | 0),$vararg_buffer3);
    $0 = 12;
    $46 = $0;
    STACKTOP = sp;return ($46|0);
   } else {
    $40 = $1;
    $41 = $40 << 16;
    $42 = $2;
    $43 = $41 | $42;
    _StateChanged(6,$43);
    $44 = $1;
    $45 = $2;
    _osd_init($44,$45);
    $0 = 0;
    $46 = $0;
    STACKTOP = sp;return ($46|0);
   }
  }
 }
 $0 = 1;
 $46 = $0;
 STACKTOP = sp;return ($46|0);
}
function _VidExt_SetCaption($Title) {
 $Title = $Title|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Title;
 $2 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = HEAP32[((((gb + (60) | 0)) + 36|0))>>2]|0;
   $5 = $1;
   $6 = (mftCall_ii($4|0,($5|0))|0);
   $0 = $6;
  } else {
   $7 = (_SDL_WasInit(32)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = $1;
    _SDL_WM_SetCaption($9,(gb + (8943) | 0));
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _VidExt_ToggleFullScreen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[((((gb + (60) | 0)) + 40|0))>>2]|0;
  $4 = (mftCall_i($3|0)|0);
  $rval = $4;
  $5 = $rval;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[(gb + (8410572) | 0)>>2]|0;
   $8 = ($7|0)!=(0);
   $9 = $8 ^ 1;
   $10 = $9&1;
   HEAP32[(gb + (8410572) | 0)>>2] = $10;
   $11 = HEAP32[(gb + (8410572) | 0)>>2]|0;
   $12 = ($11|0)!=(0);
   $13 = $12 ? 3 : 2;
   _StateChanged(2,$13);
  }
  $14 = $rval;
  $0 = $14;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $15 = (_SDL_WasInit(32)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $17 = HEAP32[(gb + (8410580) | 0)>>2]|0;
 $18 = (_SDL_WM_ToggleFullScreen($17)|0);
 $19 = ($18|0)==(1);
 if ($19) {
  $20 = HEAP32[(gb + (8410572) | 0)>>2]|0;
  $21 = ($20|0)!=(0);
  $22 = $21 ^ 1;
  $23 = $22&1;
  HEAP32[(gb + (8410572) | 0)>>2] = $23;
  $24 = HEAP32[(gb + (8410572) | 0)>>2]|0;
  $25 = ($24|0)!=(0);
  $26 = $25 ? 3 : 2;
  _StateChanged(2,$26);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $0 = 12;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _VidExt_GL_GetProcAddress($Proc) {
 $Proc = $Proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Proc;
 $2 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = HEAP32[((((gb + (60) | 0)) + 20|0))>>2]|0;
   $5 = $1;
   $6 = (mftCall_ii($4|0,($5|0))|0);
   $0 = $6;
  } else {
   $7 = (_SDL_WasInit(32)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = $1;
    $10 = (_SDL_GL_GetProcAddress(($9|0))|0);
    $0 = $10;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _VidExt_GL_SetAttribute($Attr,$Value) {
 $Attr = $Attr|0;
 $Value = $Value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $Attr;
 $2 = $Value;
 $3 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP32[((((gb + (60) | 0)) + 24|0))>>2]|0;
   $6 = $1;
   $7 = $2;
   $8 = (mftCall_iii($5|0,($6|0),($7|0))|0);
   $0 = $8;
  } else {
   $9 = (_SDL_WasInit(32)|0);
   $10 = ($9|0)!=(0);
   if (!($10)) {
    $0 = 1;
    break;
   }
   $11 = $1;
   $12 = ($11|0)==(13);
   L7: do {
    if ($12) {
     $13 = $2;
     switch ($13|0) {
     case 0:  {
      $2 = 1;
      break L7;
      break;
     }
     case 1:  {
      $2 = 2;
      break L7;
      break;
     }
     case 2:  {
      $2 = 4;
      break L7;
      break;
     }
     default: {
      $2 = 0;
      break L7;
     }
     }
    }
   } while(0);
   $i = 0;
   while(1) {
    $14 = $i;
    $15 = ($14|0)<(13);
    if (!($15)) {
     label = 18;
     break;
    }
    $16 = $i;
    $17 = ((gb + (108) | 0) + ($16<<3)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $1;
    $20 = ($18|0)==($19|0);
    $21 = $i;
    if ($20) {
     break;
    }
    $28 = (($21) + 1)|0;
    $i = $28;
   }
   if ((label|0) == 18) {
    $0 = 5;
    break;
   }
   $22 = ((gb + (108) | 0) + ($21<<3)|0);
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $2;
   $26 = (_SDL_GL_SetAttribute(($24|0),($25|0))|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $0 = 12;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _VidExt_GL_GetAttribute($Attr,$pValue) {
 $Attr = $Attr|0;
 $pValue = $pValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewValue = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $NewValue = sp;
 $1 = $Attr;
 $2 = $pValue;
 $3 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[((((gb + (60) | 0)) + 28|0))>>2]|0;
  $6 = $1;
  $7 = $2;
  $8 = (mftCall_iii($5|0,($6|0),($7|0))|0);
  $0 = $8;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $9 = (_SDL_WasInit(32)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = 1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(13);
  if (!($12)) {
   label = 18;
   break;
  }
  $13 = $i;
  $14 = ((gb + (108) | 0) + ($13<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = ($15|0)==($16|0);
  if ($17) {
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 18) {
  $0 = 5;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 HEAP32[$NewValue>>2] = 0;
 $18 = $i;
 $19 = ((gb + (108) | 0) + ($18<<3)|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_SDL_GL_GetAttribute(($21|0),($NewValue|0))|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $0 = 12;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $24 = $1;
 $25 = ($24|0)==(13);
 L21: do {
  if ($25) {
   $26 = HEAP32[$NewValue>>2]|0;
   switch ($26|0) {
   case 1:  {
    HEAP32[$NewValue>>2] = 0;
    break L21;
    break;
   }
   case 2:  {
    HEAP32[$NewValue>>2] = 1;
    break L21;
    break;
   }
   case 4:  {
    HEAP32[$NewValue>>2] = 2;
    break L21;
    break;
   }
   default: {
    HEAP32[$NewValue>>2] = 0;
    break L21;
   }
   }
  }
 } while(0);
 $27 = HEAP32[$NewValue>>2]|0;
 $28 = $2;
 HEAP32[$28>>2] = $27;
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _VidExt_GL_SwapBuffers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(gb + (8410568) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 do {
  if ($2) {
   $3 = HEAP32[((((gb + (60) | 0)) + 32|0))>>2]|0;
   $4 = (mftCall_i($3|0)|0);
   $0 = $4;
  } else {
   $5 = (_SDL_WasInit(32)|0);
   $6 = ($5|0)!=(0);
   if ($6) {
    _SDL_GL_SwapBuffers();
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _SDL2_DestroyWindow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (8410588) | 0)>>2] = 0;
 $0 = HEAP32[(gb + (8410624) | 0)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(gb + (8410624) | 0)>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & -5;
  HEAP32[$2>>2] = $4;
  $5 = HEAP32[(gb + (8410624) | 0)>>2]|0;
  _SDL_FreeSurface(($5|0));
  HEAP32[(gb + (8410624) | 0)>>2] = 0;
 }
 $6 = HEAP32[(gb + (8410620) | 0)>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[(gb + (8410620) | 0)>>2]|0;
  _SDL_GL_DeleteContext(($8|0));
  HEAP32[(gb + (8410620) | 0)>>2] = 0;
 }
 $9 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 _SDL_DestroyWindow(($11|0));
 HEAP32[(gb + (8410584) | 0)>>2] = 0;
 return;
}
function _SDL_GetVideoInfo() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mode = sp;
 $0 = HEAP32[((((gb + (8410628) | 0)) + 8|0))>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  STACKTOP = sp;return ((gb + (8410628) | 0)|0);
 }
 $2 = (_GetVideoDisplay()|0);
 $3 = (_SDL_GetDesktopDisplayMode(($2|0),($mode|0))|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return ((gb + (8410628) | 0)|0);
 }
 $5 = HEAP32[$mode>>2]|0;
 $6 = (_SDL_AllocFormat(($5|0))|0);
 HEAP32[((((gb + (8410628) | 0)) + 8|0))>>2] = $6;
 $7 = ((($mode)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[((((gb + (8410628) | 0)) + 12|0))>>2] = $8;
 $9 = ((($mode)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[((((gb + (8410628) | 0)) + 16|0))>>2] = $10;
 STACKTOP = sp;return ((gb + (8410628) | 0)|0);
}
function _SDL_ListModes($format,$flags) {
 $format = $format|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bpp = 0, $i = 0, $mode = 0, $modes = 0, $nmodes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mode = sp + 4|0;
 $1 = $format;
 $2 = $flags;
 $3 = HEAP32[(gb + (8410564) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 0;
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 $5 = $2;
 $6 = $5 & 8388608;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $0 = (-1);
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = (_SDL_GetVideoInfo()|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $1 = $12;
 }
 $nmodes = 0;
 $modes = 0;
 $i = 0;
 L12: while(1) {
  $13 = $i;
  $14 = (_GetVideoDisplay()|0);
  $15 = (_SDL_GetNumDisplayModes(($14|0))|0);
  $16 = ($13|0)<($15|0);
  if (!($16)) {
   label = 39;
   break;
  }
  $17 = (_GetVideoDisplay()|0);
  $18 = $i;
  (_SDL_GetDisplayMode(($17|0),($18|0),($mode|0))|0);
  $19 = ((($mode)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 11;
   break;
  }
  $22 = ((($mode)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 11;
   break;
  }
  $25 = HEAP32[$mode>>2]|0;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = HEAP32[$mode>>2]|0;
   $28 = $27 >>> 28;
   $29 = $28 & 15;
   $30 = ($29|0)!=(1);
   if ($30) {
    $31 = HEAP32[$mode>>2]|0;
    $32 = ($31|0)==(844715353);
    if ($32) {
     $37 = 1;
    } else {
     $33 = HEAP32[$mode>>2]|0;
     $34 = ($33|0)==(1498831189);
     if ($34) {
      $37 = 1;
     } else {
      $35 = HEAP32[$mode>>2]|0;
      $36 = ($35|0)==(1431918169);
      $37 = $36;
     }
    }
    $38 = $37 ? 2 : 1;
    $42 = $38;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $39 = HEAP32[$mode>>2]|0;
   $40 = $39 >>> 0;
   $41 = $40 & 255;
   $42 = $41;
  }
  $43 = ($42>>>0)<=(2);
  $44 = HEAP32[$mode>>2]|0;
  if ($43) {
   $45 = $44 >>> 8;
   $46 = $45 & 255;
   $bpp = $46;
  } else {
   $47 = ($44|0)!=(0);
   if ($47) {
    $48 = HEAP32[$mode>>2]|0;
    $49 = $48 >>> 28;
    $50 = $49 & 15;
    $51 = ($50|0)!=(1);
    if ($51) {
     $52 = HEAP32[$mode>>2]|0;
     $53 = ($52|0)==(844715353);
     if ($53) {
      $58 = 1;
     } else {
      $54 = HEAP32[$mode>>2]|0;
      $55 = ($54|0)==(1498831189);
      if ($55) {
       $58 = 1;
      } else {
       $56 = HEAP32[$mode>>2]|0;
       $57 = ($56|0)==(1431918169);
       $58 = $57;
      }
     }
     $59 = $58 ? 2 : 1;
     $64 = $59;
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    label = 0;
    $60 = HEAP32[$mode>>2]|0;
    $61 = $60 >>> 0;
    $62 = $61 & 255;
    $64 = $62;
   }
   $63 = $64<<3;
   $bpp = $63;
  }
  $65 = $bpp;
  $66 = $1;
  $67 = ((($66)) + 8|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = ($65|0)!=($69|0);
  do {
   if (!($70)) {
    $71 = $nmodes;
    $72 = ($71|0)>(0);
    if ($72) {
     $73 = $nmodes;
     $74 = (($73) - 1)|0;
     $75 = $modes;
     $76 = (($75) + ($74<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ((($77)) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($mode)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($79|0)==($81|0);
     if ($82) {
      $83 = $nmodes;
      $84 = (($83) - 1)|0;
      $85 = $modes;
      $86 = (($85) + ($84<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ((($87)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($mode)) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       break;
      }
     }
    }
    $93 = $modes;
    $94 = $nmodes;
    $95 = (($94) + 2)|0;
    $96 = $95<<2;
    $97 = (_SDL_realloc(($93|0),($96|0))|0);
    $modes = $97;
    $98 = $modes;
    $99 = ($98|0)!=(0|0);
    if (!($99)) {
     label = 34;
     break L12;
    }
    $100 = (_SDL_malloc(16)|0);
    $101 = $nmodes;
    $102 = $modes;
    $103 = (($102) + ($101<<2)|0);
    HEAP32[$103>>2] = $100;
    $104 = $nmodes;
    $105 = $modes;
    $106 = (($105) + ($104<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)!=(0|0);
    if (!($108)) {
     label = 36;
     break L12;
    }
    $109 = $nmodes;
    $110 = $modes;
    $111 = (($110) + ($109<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$112>>2] = 0;
    $113 = $nmodes;
    $114 = $modes;
    $115 = (($114) + ($113<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($116)) + 4|0);
    HEAP32[$117>>2] = 0;
    $118 = ((($mode)) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $nmodes;
    $121 = $modes;
    $122 = (($121) + ($120<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($123)) + 8|0);
    HEAP32[$124>>2] = $119;
    $125 = ((($mode)) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $nmodes;
    $128 = $modes;
    $129 = (($128) + ($127<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($130)) + 12|0);
    HEAP32[$131>>2] = $126;
    $132 = $nmodes;
    $133 = (($132) + 1)|0;
    $nmodes = $133;
   }
  } while(0);
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 if ((label|0) == 11) {
  $0 = (-1);
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 34) {
  $0 = 0;
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 36) {
  $0 = 0;
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 39) {
  $136 = $modes;
  $137 = ($136|0)!=(0|0);
  if ($137) {
   $138 = $nmodes;
   $139 = $modes;
   $140 = (($139) + ($138<<2)|0);
   HEAP32[$140>>2] = 0;
  }
  $141 = $modes;
  $0 = $141;
  $142 = $0;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function _SDL_SetVideoMode($width,$height,$bpp,$flags) {
 $width = $width|0;
 $height = $height|0;
 $bpp = $bpp|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $desktop_mode = 0, $display = 0, $surface_flags = 0, $window_flags = 0, $window_x = 0, $window_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $desktop_mode = sp + 20|0;
 $window_x = sp + 12|0;
 $window_y = sp + 8|0;
 $1 = $width;
 $2 = $height;
 $3 = $bpp;
 $4 = $flags;
 $5 = (_GetVideoDisplay()|0);
 $display = $5;
 $6 = $display;
 $7 = 536805376 | $6;
 HEAP32[$window_x>>2] = $7;
 $8 = $display;
 $9 = 536805376 | $8;
 HEAP32[$window_y>>2] = $9;
 $10 = HEAP32[(gb + (8410564) | 0)>>2]|0;
 $11 = ($10|0)!=(0);
 do {
  if (!($11)) {
   $12 = (_SDL_Init(1048608)|0);
   $13 = ($12|0)<(0);
   if (!($13)) {
    HEAP32[(gb + (8410564) | 0)>>2] = 1;
    break;
   }
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 } while(0);
 $14 = $display;
 (_SDL_GetDesktopDisplayMode(($14|0),($desktop_mode|0))|0);
 $15 = $1;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = ((($desktop_mode)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $1 = $18;
 }
 $19 = $2;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = ((($desktop_mode)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $2 = $22;
 }
 $23 = $3;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = HEAP32[$desktop_mode>>2]|0;
  $26 = $25 >>> 8;
  $27 = $26 & 255;
  $3 = $27;
 }
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $4;
 $32 = (_SDL_ResizeVideoMode($28,$29,$30,$31)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = HEAP32[(gb + (8410588) | 0)>>2]|0;
  $0 = $34;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $35 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = HEAP32[(gb + (8410584) | 0)>>2]|0;
  _SDL_GetWindowPosition(($37|0),($window_x|0),($window_y|0));
 }
 _SDL2_DestroyWindow();
 $38 = (_SDL_GetEventFilter((0|0),(0|0))|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  _SDL_SetEventFilter(((fb + (503) | 0)|0),(0|0));
 }
 (_SDL_GL_SetAttribute(21,4)|0);
 (_SDL_GL_SetAttribute(17,2)|0);
 (_SDL_GL_SetAttribute(18,0)|0);
 $window_flags = 4;
 $40 = $4;
 $41 = $40 & 8388608;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $window_flags;
  $44 = $43 | 1;
  $window_flags = $44;
 }
 $45 = $4;
 $46 = $45 & 67108864;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $window_flags;
  $49 = $48 | 2;
  $window_flags = $49;
 }
 $50 = $4;
 $51 = $50 & 16777216;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $window_flags;
  $54 = $53 | 32;
  $window_flags = $54;
 }
 $55 = $4;
 $56 = $55 & 33554432;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $window_flags;
  $59 = $58 | 16;
  $window_flags = $59;
 }
 $60 = $1;
 $61 = $2;
 _GetEnvironmentWindowPosition($60,$61,$window_x,$window_y);
 $62 = HEAP32[(gb + (8410608) | 0)>>2]|0;
 $63 = HEAP32[$window_x>>2]|0;
 $64 = HEAP32[$window_y>>2]|0;
 $65 = $1;
 $66 = $2;
 $67 = $window_flags;
 $68 = (_SDL_CreateWindow(($62|0),($63|0),($64|0),($65|0),($66|0),($67|0))|0);
 HEAP32[(gb + (8410584) | 0)>>2] = $68;
 $69 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $70 = ($69|0)!=(0|0);
 if (!($70)) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $71 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $72 = HEAP32[(gb + (8410612) | 0)>>2]|0;
 _SDL_SetWindowIcon(($71|0),($72|0));
 $73 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $74 = (_SDL_GetWindowFlags(($73|0))|0);
 $window_flags = $74;
 $surface_flags = 0;
 $75 = $window_flags;
 $76 = $75 & 1;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $surface_flags;
  $79 = $78 | 8388608;
  $surface_flags = $79;
 }
 $80 = $window_flags;
 $81 = $80 & 2;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = $4;
  $84 = $83 & 67108864;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $surface_flags;
   $87 = $86 | 67108864;
   $surface_flags = $87;
  }
 }
 $88 = $window_flags;
 $89 = $88 & 32;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $surface_flags;
  $92 = $91 | 16777216;
  $surface_flags = $92;
 }
 $93 = $window_flags;
 $94 = $93 & 16;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $surface_flags;
  $97 = $96 | 33554432;
  $surface_flags = $97;
 }
 $98 = $4;
 HEAP32[(gb + (8410616) | 0)>>2] = $98;
 $99 = $4;
 $100 = $99 & 67108864;
 $101 = ($100|0)!=(0);
 if (!($101)) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $102 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $103 = (_SDL_GL_CreateContext(($102|0))|0);
 HEAP32[(gb + (8410620) | 0)>>2] = $103;
 $104 = HEAP32[(gb + (8410620) | 0)>>2]|0;
 $105 = ($104|0)!=(0|0);
 if (!($105)) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $106 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $107 = HEAP32[(gb + (8410620) | 0)>>2]|0;
 $108 = (_SDL_GL_MakeCurrent(($106|0),($107|0))|0);
 $109 = ($108|0)<(0);
 if ($109) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $110 = $1;
 $111 = $2;
 $112 = $3;
 $113 = (_SDL_CreateRGBSurfaceFrom((0|0),($110|0),($111|0),($112|0),0,0,0,0,0)|0);
 HEAP32[(gb + (8410624) | 0)>>2] = $113;
 $114 = HEAP32[(gb + (8410624) | 0)>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $surface_flags;
  $117 = HEAP32[(gb + (8410624) | 0)>>2]|0;
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 | $116;
  HEAP32[$117>>2] = $119;
  $120 = HEAP32[(gb + (8410624) | 0)>>2]|0;
  HEAP32[(gb + (8410588) | 0)>>2] = $120;
  $121 = HEAP32[(gb + (8410588) | 0)>>2]|0;
  $0 = $121;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 } else {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 return (0)|0;
}
function _osd_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _osd_init($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 STACKTOP = sp;return;
}
function _SDL_WM_SetCaption($title,$icon) {
 $title = $title|0;
 $icon = $icon|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $title;
 $1 = $icon;
 $2 = HEAP32[(gb + (8410608) | 0)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(gb + (8410608) | 0)>>2]|0;
  _SDL_free(($4|0));
 }
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (_SDL_strdup(($7|0))|0);
  HEAP32[(gb + (8410608) | 0)>>2] = $8;
 } else {
  HEAP32[(gb + (8410608) | 0)>>2] = 0;
 }
 $9 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $10 = HEAP32[(gb + (8410608) | 0)>>2]|0;
 _SDL_SetWindowTitle(($9|0),($10|0));
 STACKTOP = sp;return;
}
function _SDL_WM_ToggleFullScreen($surface) {
 $surface = $surface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $window_h = 0, $window_w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $window_w = sp + 8|0;
 $window_h = sp + 4|0;
 $1 = $surface;
 $2 = HEAP32[(gb + (8410588) | 0)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  (_SDL_SetError(((gb + (8954) | 0)|0),($vararg_buffer|0))|0);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $4 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 $5 = (_SDL_GetWindowFlags(($4|0))|0);
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 do {
  if ($7) {
   $9 = (_SDL_SetWindowFullscreen(($8|0),0)|0);
   $10 = ($9|0)<(0);
   if (!($10)) {
    $11 = HEAP32[(gb + (8410588) | 0)>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & -8388609;
    HEAP32[$11>>2] = $13;
    break;
   }
   $0 = 0;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  } else {
   $14 = (_SDL_SetWindowFullscreen(($8|0),1)|0);
   $15 = ($14|0)<(0);
   if (!($15)) {
    $16 = HEAP32[(gb + (8410588) | 0)>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 | 8388608;
    HEAP32[$16>>2] = $18;
    break;
   }
   $0 = 0;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  }
 } while(0);
 $19 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 _SDL_GetWindowSize(($19|0),($window_w|0),($window_h|0));
 HEAP32[(gb + (8410592) | 0)>>2] = 0;
 HEAP32[((((gb + (8410592) | 0)) + 4|0))>>2] = 0;
 $20 = HEAP32[$window_w>>2]|0;
 HEAP32[((((gb + (8410592) | 0)) + 8|0))>>2] = $20;
 $21 = HEAP32[$window_h>>2]|0;
 HEAP32[((((gb + (8410592) | 0)) + 12|0))>>2] = $21;
 $0 = 1;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _SDL_GL_SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 _SDL_GL_SwapWindow(($0|0));
 return;
}
function _GetVideoDisplay() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $variable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_SDL_getenv(((gb + (9045) | 0)|0))|0);
 $variable = $1;
 $2 = $variable;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = (_SDL_getenv(((gb + (9074) | 0)|0))|0);
  $variable = $4;
 }
 $5 = $variable;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $variable;
  $8 = (_SDL_atoi(($7|0))|0);
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _SDL_ResizeVideoMode($width,$height,$bpp,$flags) {
 $width = $width|0;
 $height = $height|0;
 $bpp = $bpp|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $w = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 4|0;
 $h = sp;
 $1 = $width;
 $2 = $height;
 $3 = $bpp;
 $4 = $flags;
 $5 = HEAP32[(gb + (8410588) | 0)>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $4;
 $8 = $7 & 8388608;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $10 = $4;
 $11 = HEAP32[(gb + (8410616) | 0)>>2]|0;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $13 = $3;
 $14 = HEAP32[(gb + (8410624) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($13|0)!=($19|0);
 if ($20) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $21 = HEAP32[(gb + (8410584) | 0)>>2]|0;
 _SDL_GetWindowSize(($21|0),($w|0),($h|0));
 $22 = HEAP32[$w>>2]|0;
 $23 = $1;
 $24 = ($22|0)!=($23|0);
 if ($24) {
  label = 11;
 } else {
  $25 = HEAP32[$h>>2]|0;
  $26 = $2;
  $27 = ($25|0)!=($26|0);
  if ($27) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $28 = HEAP32[(gb + (8410584) | 0)>>2]|0;
  $29 = $1;
  $30 = $2;
  _SDL_SetWindowSize(($28|0),($29|0),($30|0));
 }
 $31 = $1;
 $32 = HEAP32[(gb + (8410624) | 0)>>2]|0;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = HEAP32[(gb + (8410624) | 0)>>2]|0;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _SDL_CompatEventFilter($userdata,$event) {
 $userdata = $userdata|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $button = 0, $cond = 0, $fake = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fake = sp;
 $x = sp + 60|0;
 $y = sp + 56|0;
 $0 = $userdata;
 $1 = $event;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 512:  {
  $4 = $1;
  $5 = ((($4)) + 12|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $cond = ($7|0)==(14);
  if (!($cond)) {
   STACKTOP = sp;return 1;
  }
  HEAP32[$fake>>2] = 256;
  (_SDL_PushEvent(($fake|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 1027:  {
  $28 = $1;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if ($31) {
   STACKTOP = sp;return 1;
  }
  (_SDL_GetMouseState(($x|0),($y|0))|0);
  $32 = $1;
  $33 = ((($32)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)>(0);
  if ($35) {
   $button = 4;
  } else {
   $button = 5;
  }
  $36 = $button;
  $37 = ((($fake)) + 16|0);
  HEAP8[$37>>0] = $36;
  $38 = HEAP32[$x>>2]|0;
  $39 = ((($fake)) + 20|0);
  HEAP32[$39>>2] = $38;
  $40 = HEAP32[$y>>2]|0;
  $41 = ((($fake)) + 24|0);
  HEAP32[$41>>2] = $40;
  $42 = $1;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($fake)) + 8|0);
  HEAP32[$45>>2] = $44;
  HEAP32[$fake>>2] = 1025;
  $46 = ((($fake)) + 17|0);
  HEAP8[$46>>0] = 1;
  (_SDL_PushEvent(($fake|0))|0);
  HEAP32[$fake>>2] = 1026;
  $47 = ((($fake)) + 17|0);
  HEAP8[$47>>0] = 0;
  (_SDL_PushEvent(($fake|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 1024:  {
  $8 = HEAP32[(gb + (8410592) | 0)>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) - ($8))|0;
  HEAP32[$10>>2] = $12;
  $13 = HEAP32[((((gb + (8410592) | 0)) + 4|0))>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - ($13))|0;
  HEAP32[$15>>2] = $17;
  STACKTOP = sp;return 1;
  break;
 }
 case 1026: case 1025:  {
  $18 = HEAP32[(gb + (8410592) | 0)>>2]|0;
  $19 = $1;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - ($18))|0;
  HEAP32[$20>>2] = $22;
  $23 = HEAP32[((((gb + (8410592) | 0)) + 4|0))>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) - ($23))|0;
  HEAP32[$25>>2] = $27;
  STACKTOP = sp;return 1;
  break;
 }
 default: {
  STACKTOP = sp;return 1;
 }
 }
 return (0)|0;
}
function _GetEnvironmentWindowPosition($w,$h,$x,$y) {
 $w = $w|0;
 $h = $h|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $center = 0, $display = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $window = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $w;
 $1 = $h;
 $2 = $x;
 $3 = $y;
 $4 = (_GetVideoDisplay()|0);
 $display = $4;
 $5 = (_SDL_getenv(((gb + (8992) | 0)|0))|0);
 $window = $5;
 $6 = (_SDL_getenv(((gb + (9013) | 0)|0))|0);
 $center = $6;
 $7 = $window;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $window;
  $10 = $2;
  $11 = $3;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  $12 = (_SDL_sscanf(($9|0),((gb + (9032) | 0)|0),($vararg_buffer|0))|0);
  $13 = ($12|0)==(2);
  if ($13) {
   STACKTOP = sp;return;
  }
  $14 = $window;
  $15 = (_SDL_strcmp(($14|0),((gb + (9038) | 0)|0))|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $window;
   $center = $17;
  }
 }
 $18 = $center;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $display;
 $21 = 805240832 | $20;
 $22 = $2;
 HEAP32[$22>>2] = $21;
 $23 = $display;
 $24 = 805240832 | $23;
 $25 = $3;
 HEAP32[$25>>2] = $24;
 STACKTOP = sp;return;
}
function _get_savestatepath() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $1 = (_ConfigGetParamString($0,(gb + (9100) | 0))|0);
 $2 = (_get_savepathdefault($1)|0);
 return ($2|0);
}
function _get_savesrampath() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $1 = (_ConfigGetParamString($0,(gb + (9114) | 0))|0);
 $2 = (_get_savepathdefault($1)|0);
 return ($2|0);
}
function _main_message($level,$corner,$format,$varargs) {
 $level = $level|0;
 $corner = $corner|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $buffer = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 $buffer = sp + 44|0;
 $0 = $level;
 $1 = $corner;
 $2 = $format;
 HEAP32[$ap>>2] = $varargs;
 $3 = $2;
 (_vsnprintf(($buffer|0),2047,($3|0),($ap|0))|0);
 $4 = ((($buffer)) + 2048|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $6 = (_ConfigGetParamBool($5,(gb + (9127) | 0))|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $buffer;
  (_osd_new_message($8,(gb + (9143) | 0),$vararg_buffer)|0);
 }
 $9 = $0;
 HEAP32[$vararg_buffer1>>2] = $buffer;
 _DebugMessage($9,(gb + (9143) | 0),$vararg_buffer1);
 STACKTOP = sp;return;
}
function _main_check_inputs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _SDL_PumpEvents();
 return;
}
function _main_set_core_defaults() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $bSaveConfig = 0, $bUpgrade = 0, $fConfigParamsVersion = 0, $fVersion = 0, $or$cond = 0, $pccSaveStatePath = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $fConfigParamsVersion = sp + 48|0;
 $fVersion = sp + 36|0;
 $bSaveConfig = 0;
 $bUpgrade = 0;
 $0 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $1 = (_ConfigGetParameter($0,(gb + (11617) | 0),2,$fConfigParamsVersion,4)|0);
 $2 = ($1|0)!=(0);
 do {
  if ($2) {
   _DebugMessage(2,(gb + (9146) | 0),$vararg_buffer);
   (_ConfigDeleteSection((gb + (9208) | 0))|0);
   (_ConfigOpenSection((gb + (9208) | 0),(gb + (8410648) | 0))|0);
   $bSaveConfig = 1;
  } else {
   $3 = +HEAPF32[$fConfigParamsVersion>>2];
   $4 = (~~(($3)));
   $5 = ($4|0)!=(1);
   $6 = +HEAPF32[$fConfigParamsVersion>>2];
   $7 = $6;
   if ($5) {
    HEAPF64[$vararg_buffer2>>3] = $7;
    $vararg_ptr4 = ((($vararg_buffer2)) + 8|0);
    HEAPF64[$vararg_ptr4>>3] = 1.0099999904632568;
    _DebugMessage(2,(gb + (9213) | 0),$vararg_buffer2);
    (_ConfigDeleteSection((gb + (9208) | 0))|0);
    (_ConfigOpenSection((gb + (9208) | 0),(gb + (8410648) | 0))|0);
    $bSaveConfig = 1;
    break;
   }
   $8 = 1.01 - $7;
   $9 = $8 >= 9.9999997473787516E-5;
   if ($9) {
    HEAPF32[$fVersion>>2] = 1.0099999904632568;
    $10 = HEAP32[(gb + (8410648) | 0)>>2]|0;
    (_ConfigSetParameter($10,(gb + (11617) | 0),2,$fVersion)|0);
    $11 = +HEAPF32[$fVersion>>2];
    $12 = $11;
    HEAPF64[$vararg_buffer5>>3] = $12;
    _DebugMessage(3,(gb + (9300) | 0),$vararg_buffer5);
    $bUpgrade = 1;
    $bSaveConfig = 1;
   }
  }
 } while(0);
 $13 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultFloat($13,(gb + (11617) | 0),1.0099999904632568,(gb + (9364) | 0))|0);
 $14 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($14,(gb + (9127) | 0),1,(gb + (9460) | 0))|0);
 $15 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultInt($15,(gb + (9517) | 0),1,(gb + (9531) | 0))|0);
 $16 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($16,(gb + (9618) | 0),0,(gb + (9633) | 0))|0);
 $17 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($17,(gb + (9712) | 0),0,(gb + (9728) | 0))|0);
 $18 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($18,(gb + (9792) | 0),0,(gb + (9815) | 0))|0);
 $19 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($19,(gb + (9871) | 0),0,(gb + (9886) | 0))|0);
 $20 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultInt($20,(gb + (15318) | 0),0,(gb + (9981) | 0))|0);
 $21 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultString($21,(gb + (21091) | 0),(gb + (23109844) | 0),(gb + (10049) | 0))|0);
 $22 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultString($22,(gb + (9100) | 0),(gb + (23109844) | 0),(gb + (10177) | 0))|0);
 $23 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultString($23,(gb + (9114) | 0),(gb + (23109844) | 0),(gb + (10320) | 0))|0);
 $24 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultString($24,(gb + (10464) | 0),(gb + (23109844) | 0),(gb + (10479) | 0))|0);
 $25 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultBool($25,(gb + (10544) | 0),1,(gb + (10552) | 0))|0);
 $26 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetDefaultInt($26,(gb + (15082) | 0),0,(gb + (10592) | 0))|0);
 $27 = $bUpgrade;
 $28 = ($27|0)!=(0);
 $29 = +HEAPF32[$fConfigParamsVersion>>2];
 $30 = $29 < 1.0099999904632568;
 $or$cond = $28 & $30;
 if ($or$cond) {
  $31 = HEAP32[(gb + (8410648) | 0)>>2]|0;
  $32 = (_ConfigGetParamString($31,(gb + (9100) | 0))|0);
  $pccSaveStatePath = $32;
  $33 = $pccSaveStatePath;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = HEAP32[(gb + (8410648) | 0)>>2]|0;
   $36 = $pccSaveStatePath;
   (_ConfigSetParameter($35,(gb + (9114) | 0),4,$36)|0);
  }
 }
 $37 = $bSaveConfig;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $39 = (_event_set_core_defaults()|0);
  STACKTOP = sp;return ($39|0);
 }
 (_ConfigSaveSection((gb + (9208) | 0))|0);
 $39 = (_event_set_core_defaults()|0);
 STACKTOP = sp;return ($39|0);
}
function _main_speeddown($percent) {
 $percent = $percent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $percent;
 $1 = HEAP32[(gb + (212) | 0)>>2]|0;
 $2 = $0;
 $3 = (($1) - ($2))|0;
 $4 = ($3|0)>(10);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[(gb + (212) | 0)>>2]|0;
 $7 = (($6) - ($5))|0;
 HEAP32[(gb + (212) | 0)>>2] = $7;
 $8 = HEAP32[(gb + (212) | 0)>>2]|0;
 HEAP32[$vararg_buffer>>2] = (gb + (10648) | 0);
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 _main_message(4,6,(gb + (10640) | 0),$vararg_buffer);
 $9 = HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2]|0;
 $10 = HEAP32[(gb + (212) | 0)>>2]|0;
 mftCall_vi($9|0,($10|0));
 $11 = HEAP32[(gb + (212) | 0)>>2]|0;
 _StateChanged(4,$11);
 STACKTOP = sp;return;
}
function _main_speedup($percent) {
 $percent = $percent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $percent;
 $1 = HEAP32[(gb + (212) | 0)>>2]|0;
 $2 = $0;
 $3 = (($1) + ($2))|0;
 $4 = ($3|0)<(300);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[(gb + (212) | 0)>>2]|0;
 $7 = (($6) + ($5))|0;
 HEAP32[(gb + (212) | 0)>>2] = $7;
 $8 = HEAP32[(gb + (212) | 0)>>2]|0;
 HEAP32[$vararg_buffer>>2] = (gb + (10648) | 0);
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 _main_message(4,6,(gb + (10640) | 0),$vararg_buffer);
 $9 = HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2]|0;
 $10 = HEAP32[(gb + (212) | 0)>>2]|0;
 mftCall_vi($9|0,($10|0));
 $11 = HEAP32[(gb + (212) | 0)>>2]|0;
 _StateChanged(4,$11);
 STACKTOP = sp;return;
}
function _main_set_fastforward($enable) {
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $enable;
 $1 = $0;
 $2 = ($1|0)==(0);
 $3 = HEAP32[(gb + (8421632) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 $or$cond = $2 | $4;
 if (!($or$cond)) {
  HEAP32[(gb + (8421632) | 0)>>2] = 1;
  $5 = HEAP32[(gb + (212) | 0)>>2]|0;
  HEAP32[(gb + (216) | 0)>>2] = $5;
  HEAP32[(gb + (212) | 0)>>2] = 250;
  $6 = HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2]|0;
  $7 = HEAP32[(gb + (212) | 0)>>2]|0;
  mftCall_vi($6|0,($7|0));
  $8 = HEAP32[(gb + (212) | 0)>>2]|0;
  _StateChanged(4,$8);
  $9 = (_osd_new_message(2,(gb + (10664) | 0),$vararg_buffer)|0);
  HEAP32[(gb + (8421636) | 0)>>2] = $9;
  $10 = HEAP32[(gb + (8421636) | 0)>>2]|0;
  _osd_message_set_static($10);
  $11 = HEAP32[(gb + (8421636) | 0)>>2]|0;
  _osd_message_set_user_managed($11);
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ($12|0)==(0);
 $14 = HEAP32[(gb + (8421632) | 0)>>2]|0;
 $15 = ($14|0)!=(0);
 $or$cond3 = $13 & $15;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8421632) | 0)>>2] = 0;
 $16 = HEAP32[(gb + (216) | 0)>>2]|0;
 HEAP32[(gb + (212) | 0)>>2] = $16;
 $17 = HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2]|0;
 $18 = HEAP32[(gb + (212) | 0)>>2]|0;
 mftCall_vi($17|0,($18|0));
 $19 = HEAP32[(gb + (212) | 0)>>2]|0;
 _StateChanged(4,$19);
 $20 = HEAP32[(gb + (8421636) | 0)>>2]|0;
 _osd_delete_message($20);
 HEAP32[(gb + (8421636) | 0)>>2] = 0;
 STACKTOP = sp;return;
}
function _main_toggle_pause() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (8410660) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10523008) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  _DebugMessage(4,(gb + (10677) | 0),$vararg_buffer);
  $4 = HEAP32[(gb + (8421640) | 0)>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[(gb + (8421640) | 0)>>2]|0;
   _osd_delete_message($6);
   HEAP32[(gb + (8421640) | 0)>>2] = 0;
  }
  _StateChanged(1,2);
 } else {
  $7 = HEAP32[(gb + (8421640) | 0)>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[(gb + (8421640) | 0)>>2]|0;
   _osd_delete_message($9);
  }
  _DebugMessage(4,(gb + (10698) | 0),$vararg_buffer1);
  $10 = (_osd_new_message(4,(gb + (10716) | 0),$vararg_buffer3)|0);
  HEAP32[(gb + (8421640) | 0)>>2] = $10;
  $11 = HEAP32[(gb + (8421640) | 0)>>2]|0;
  _osd_message_set_static($11);
  $12 = HEAP32[(gb + (8421640) | 0)>>2]|0;
  _osd_message_set_user_managed($12);
  _StateChanged(1,3);
 }
 $13 = HEAP32[(gb + (10523008) | 0)>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = $14 ^ 1;
 $16 = $15&1;
 HEAP32[(gb + (10523008) | 0)>>2] = $16;
 HEAP32[(gb + (8421644) | 0)>>2] = 0;
 STACKTOP = sp;return;
}
function _main_advance_one() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (8421644) | 0)>>2] = 1;
 HEAP32[(gb + (10523008) | 0)>>2] = 0;
 _StateChanged(1,2);
 return;
}
function _main_take_next_screenshot() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8421648) | 0)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(gb + (8421652) | 0)>>2] = $1;
 return;
}
function _main_state_set_slot($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $slot;
 $1 = $0;
 $2 = ($1|0)<(0);
 $3 = $0;
 $4 = ($3|0)>(9);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $5 = $0;
  HEAP32[$vararg_buffer>>2] = $5;
  _DebugMessage(2,(gb + (10723) | 0),$vararg_buffer);
  $0 = 0;
 }
 $6 = $0;
 _savestates_select_slot($6);
 $7 = $0;
 _StateChanged(3,$7);
 STACKTOP = sp;return;
}
function _main_state_inc_slot() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _savestates_inc_slot();
 return;
}
function _main_state_load($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filename;
 _rumblepak_rumble(((((gb + (8410672) | 0)) + 116|0)),0);
 _rumblepak_rumble(((((gb + (8410672) | 0)) + 148|0)),0);
 _rumblepak_rumble(((((gb + (8410672) | 0)) + 180|0)),0);
 _rumblepak_rumble(((((gb + (8410672) | 0)) + 212|0)),0);
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _savestates_set_job(1,1,0);
  STACKTOP = sp;return;
 } else {
  $3 = $0;
  _savestates_set_job(1,0,$3);
  STACKTOP = sp;return;
 }
}
function _main_state_save($format,$filename) {
 $format = $format|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $format;
 $1 = $filename;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _savestates_set_job(2,1,0);
  STACKTOP = sp;return;
 } else {
  $4 = $0;
  $5 = $1;
  _savestates_set_job(2,$4,$5);
  STACKTOP = sp;return;
 }
}
function _main_core_state_query($param,$rval) {
 $param = $param|0;
 $rval = $rval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $height = 0, $width = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 4|0;
 $height = sp;
 $1 = $param;
 $2 = $rval;
 $3 = $1;
 L1: do {
  switch ($3|0) {
  case 1:  {
   $4 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if (!($5)) {
    $6 = $2;
    HEAP32[$6>>2] = 1;
    break L1;
   }
   $7 = HEAP32[(gb + (10523008) | 0)>>2]|0;
   $8 = ($7|0)!=(0);
   $9 = $2;
   if ($8) {
    HEAP32[$9>>2] = 3;
    break L1;
   } else {
    HEAP32[$9>>2] = 2;
    break L1;
   }
   break;
  }
  case 2:  {
   $10 = (_VidExt_VideoRunning()|0);
   $11 = ($10|0)!=(0);
   if (!($11)) {
    $12 = $2;
    HEAP32[$12>>2] = 1;
    break L1;
   }
   $13 = (_VidExt_InFullscreenMode()|0);
   $14 = ($13|0)!=(0);
   $15 = $2;
   if ($14) {
    HEAP32[$15>>2] = 3;
    break L1;
   } else {
    HEAP32[$15>>2] = 2;
    break L1;
   }
   break;
  }
  case 3:  {
   $16 = (_savestates_get_slot()|0);
   $17 = $2;
   HEAP32[$17>>2] = $16;
   break;
  }
  case 4:  {
   $18 = HEAP32[(gb + (212) | 0)>>2]|0;
   $19 = $2;
   HEAP32[$19>>2] = $18;
   break;
  }
  case 5:  {
   $20 = HEAP32[(gb + (220) | 0)>>2]|0;
   $21 = $2;
   HEAP32[$21>>2] = $20;
   break;
  }
  case 6:  {
   $22 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    (_main_get_screen_size($width,$height)|0);
    $24 = HEAP32[$width>>2]|0;
    $25 = $24 << 16;
    $26 = HEAP32[$height>>2]|0;
    $27 = (($25) + ($26))|0;
    $28 = $2;
    HEAP32[$28>>2] = $27;
    break L1;
   }
   $0 = 10;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
   break;
  }
  case 7:  {
   $29 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $2;
    $32 = (_main_volume_get_level($31)|0);
    $0 = $32;
    $37 = $0;
    STACKTOP = sp;return ($37|0);
   } else {
    $0 = 10;
    $37 = $0;
    STACKTOP = sp;return ($37|0);
   }
   break;
  }
  case 8:  {
   $33 = (_main_volume_get_muted()|0);
   $34 = $2;
   HEAP32[$34>>2] = $33;
   break;
  }
  case 9:  {
   $35 = (_event_gameshark_active()|0);
   $36 = $2;
   HEAP32[$36>>2] = $35;
   break;
  }
  case 11: case 10:  {
   $0 = 5;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
   break;
  }
  default: {
   $0 = 5;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
  }
 } while(0);
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _main_get_screen_size($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2]|0;
 $3 = $0;
 $4 = $1;
 mftCall_viiii($2|0,(0|0),($3|0),($4|0),0);
 STACKTOP = sp;return 0;
}
function _main_volume_get_level($level) {
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = HEAP32[((((gb + (10521612) | 0)) + 40|0))>>2]|0;
 $2 = (mftCall_i($1|0)|0);
 $3 = $0;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return 0;
}
function _main_volume_get_muted() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10521612) | 0)) + 40|0))>>2]|0;
 $1 = (mftCall_i($0|0)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 return ($3|0);
}
function _main_core_state_set($param,$val) {
 $param = $param|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $height = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $param;
 $2 = $val;
 $3 = $1;
 L1: do {
  switch ($3|0) {
  case 1:  {
   $4 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if (!($5)) {
    $0 = 10;
    break L1;
   }
   $6 = $2;
   $7 = ($6|0)==(1);
   if ($7) {
    _main_stop();
    $0 = 0;
    break L1;
   }
   $8 = $2;
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = (_main_is_paused()|0);
    $11 = ($10|0)!=(0);
    if ($11) {
     _main_toggle_pause();
    }
    $0 = 0;
    break L1;
   }
   $12 = $2;
   $13 = ($12|0)==(3);
   if (!($13)) {
    $0 = 5;
    break L1;
   }
   $14 = (_main_is_paused()|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    _main_toggle_pause();
   }
   $0 = 0;
   break;
  }
  case 2:  {
   $16 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $17 = ($16|0)!=(0);
   if (!($17)) {
    $0 = 10;
    break L1;
   }
   $18 = $2;
   $19 = ($18|0)==(2);
   if ($19) {
    $20 = (_VidExt_InFullscreenMode()|0);
    $21 = ($20|0)!=(0);
    if ($21) {
     $22 = HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2]|0;
     mftCall_v($22|0);
    }
    $0 = 0;
    break L1;
   }
   $23 = $2;
   $24 = ($23|0)==(3);
   if (!($24)) {
    $0 = 5;
    break L1;
   }
   $25 = (_VidExt_InFullscreenMode()|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    $27 = HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2]|0;
    mftCall_v($27|0);
   }
   $0 = 0;
   break;
  }
  case 3:  {
   $28 = $2;
   $29 = ($28|0)<(0);
   $30 = $2;
   $31 = ($30|0)>(9);
   $or$cond = $29 | $31;
   if ($or$cond) {
    $0 = 5;
    break L1;
   } else {
    $32 = $2;
    _savestates_select_slot($32);
    $0 = 0;
    break L1;
   }
   break;
  }
  case 4:  {
   $33 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $2;
    _main_speedset($35);
    $0 = 0;
    break L1;
   } else {
    $0 = 10;
    break L1;
   }
   break;
  }
  case 5:  {
   $36 = $2;
   _main_set_speedlimiter($36);
   $0 = 0;
   break;
  }
  case 6:  {
   $37 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $2;
    $40 = $39 >> 16;
    $41 = $40 & 65535;
    $width = $41;
    $42 = $2;
    $43 = $42 & 65535;
    $height = $43;
    $44 = HEAP32[((((gb + (10521540) | 0)) + 56|0))>>2]|0;
    $45 = $width;
    $46 = $height;
    mftCall_vii($44|0,($45|0),($46|0));
    $0 = 0;
    break L1;
   } else {
    $0 = 10;
    break L1;
   }
   break;
  }
  case 7:  {
   $47 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $0 = 10;
    break L1;
   }
   $49 = $2;
   $50 = ($49|0)<(0);
   $51 = $2;
   $52 = ($51|0)>(100);
   $or$cond3 = $50 | $52;
   if ($or$cond3) {
    $0 = 5;
    break L1;
   } else {
    $53 = $2;
    $54 = (_main_volume_set_level($53)|0);
    $0 = $54;
    break L1;
   }
   break;
  }
  case 8:  {
   $55 = (_main_volume_get_muted()|0);
   $56 = ($55|0)==(0);
   $57 = $2;
   $58 = ($57|0)!=(0);
   $or$cond5 = $56 | $58;
   if ($or$cond5) {
    $59 = (_main_volume_get_muted()|0);
    $60 = ($59|0)==(0);
    $61 = $2;
    $62 = ($61|0)!=(0);
    $or$cond7 = $60 & $62;
    if (!($or$cond7)) {
     $0 = 0;
     break L1;
    }
   }
   $63 = (_main_volume_mute()|0);
   $0 = $63;
   break;
  }
  case 9:  {
   $64 = HEAP32[(gb + (8410660) | 0)>>2]|0;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $2;
    _event_set_gameshark($66);
    $0 = 0;
    break L1;
   } else {
    $0 = 10;
    break L1;
   }
   break;
  }
  case 11: case 10:  {
   $0 = 5;
   break;
  }
  default: {
   $0 = 5;
  }
  }
 } while(0);
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _main_stop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (8410660) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _DebugMessage(4,(gb + (10786) | 0),$vararg_buffer);
 $2 = HEAP32[(gb + (8421640) | 0)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(gb + (8421640) | 0)>>2]|0;
  _osd_delete_message($4);
  HEAP32[(gb + (8421640) | 0)>>2] = 0;
 }
 $5 = HEAP32[(gb + (8421636) | 0)>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[(gb + (8421636) | 0)>>2]|0;
  _osd_delete_message($7);
  HEAP32[(gb + (8421636) | 0)>>2] = 0;
 }
 $8 = HEAP32[(gb + (8421656) | 0)>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[(gb + (8421656) | 0)>>2]|0;
  _osd_delete_message($10);
  HEAP32[(gb + (8421656) | 0)>>2] = 0;
 }
 $11 = HEAP32[(gb + (10523008) | 0)>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  HEAP32[(gb + (10523008) | 0)>>2] = 0;
  _StateChanged(1,2);
 }
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _main_volume_set_level($level) {
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = HEAP32[((((gb + (10521612) | 0)) + 44|0))>>2]|0;
 $2 = $0;
 mftCall_vi($1|0,($2|0));
 _main_draw_volume_osd();
 $3 = HEAP32[((((gb + (10521612) | 0)) + 40|0))>>2]|0;
 $4 = (mftCall_i($3|0)|0);
 $0 = $4;
 $5 = $0;
 _StateChanged(7,$5);
 STACKTOP = sp;return 0;
}
function _main_volume_mute() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10521612) | 0)) + 48|0))>>2]|0;
 mftCall_v($0|0);
 _main_draw_volume_osd();
 $1 = (_main_volume_get_muted()|0);
 _StateChanged(8,$1);
 return 0;
}
function _main_read_screen($pixels,$bFront) {
 $pixels = $pixels|0;
 $bFront = $bFront|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $height_trash = 0, $width_trash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width_trash = sp + 4|0;
 $height_trash = sp;
 $0 = $pixels;
 $1 = $bFront;
 $2 = HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2]|0;
 $3 = $0;
 $4 = $1;
 mftCall_viiii($2|0,($3|0),($width_trash|0),($height_trash|0),($4|0));
 STACKTOP = sp;return 0;
}
function _main_volume_up() {
 var $0 = 0, $1 = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $level = sp;
 HEAP32[$level>>2] = 0;
 $0 = HEAP32[((((gb + (10521612) | 0)) + 32|0))>>2]|0;
 mftCall_v($0|0);
 _main_draw_volume_osd();
 (_main_volume_get_level($level)|0);
 $1 = HEAP32[$level>>2]|0;
 _StateChanged(7,$1);
 STACKTOP = sp;return 0;
}
function _main_volume_down() {
 var $0 = 0, $1 = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $level = sp;
 HEAP32[$level>>2] = 0;
 $0 = HEAP32[((((gb + (10521612) | 0)) + 36|0))>>2]|0;
 mftCall_v($0|0);
 _main_draw_volume_osd();
 (_main_volume_get_level($level)|0);
 $1 = HEAP32[$level>>2]|0;
 _StateChanged(7,$1);
 STACKTOP = sp;return 0;
}
function _main_reset($do_hard_reset) {
 $do_hard_reset = $do_hard_reset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $do_hard_reset;
 $1 = $0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[(gb + (14718180) | 0)>>2]|0;
  $4 = $3 | 1;
  HEAP32[(gb + (14718180) | 0)>>2] = $4;
  STACKTOP = sp;return 0;
 } else {
  _reset_soft();
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _new_frame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410652) | 0)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(gb + (8410652) | 0)>>2]|0;
  $3 = HEAP32[(gb + (8421648) | 0)>>2]|0;
  mftCall_vi($2|0,($3|0));
 }
 $4 = HEAP32[(gb + (8421648) | 0)>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[(gb + (8421648) | 0)>>2] = $5;
 $6 = HEAP32[(gb + (8421644) | 0)>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  return;
 }
 HEAP32[(gb + (10523008) | 0)>>2] = 1;
 HEAP32[(gb + (8421644) | 0)>>2] = 0;
 _StateChanged(1,3);
 return;
}
function _new_vi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gs_apply_cheats();
 _main_check_inputs();
 _pause_loop();
 _apply_speed_limiter();
 return;
}
function _main_run() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $disable_extra_mem = 0, $eep = 0, $fla = 0, $height = 0, $i = 0, $mpk = 0, $sra = 0, $vararg_buffer = 0, $width = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 297008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $eep = sp + 294936|0;
 $fla = sp + 163860|0;
 $mpk = sp + 32784|0;
 $sra = sp + 12|0;
 $width = sp + 8|0;
 $height = sp + 4|0;
 $1 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $2 = (_ConfigGetParamInt($1,(gb + (9517) | 0))|0);
 HEAP32[(gb + (10522016) | 0)>>2] = $2;
 $3 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $4 = (_ConfigGetParamBool($3,(gb + (9792) | 0))|0);
 _savestates_set_autoinc_slot($4);
 $5 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $6 = (_ConfigGetParamInt($5,(gb + (15318) | 0))|0);
 _savestates_select_slot($6);
 $7 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $8 = (_ConfigGetParamBool($7,(gb + (9618) | 0))|0);
 HEAP32[(gb + (14718128) | 0)>>2] = $8;
 $9 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $10 = (_ConfigGetParamBool($9,(gb + (10544) | 0))|0);
 HEAP32[(gb + (8410664) | 0)>>2] = $10;
 $11 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $12 = (_ConfigGetParamInt($11,(gb + (9712) | 0))|0);
 $disable_extra_mem = $12;
 $13 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $14 = (_ConfigGetParamInt($13,(gb + (15082) | 0))|0);
 HEAP32[(gb + (488) | 0)>>2] = $14;
 $15 = HEAP32[(gb + (488) | 0)>>2]|0;
 $16 = ($15>>>0)<=(0);
 if ($16) {
  $17 = HEAP8[((((gb + (8422180) | 0)) + 37|0))>>0]|0;
  $18 = $17&255;
  HEAP32[(gb + (488) | 0)>>2] = $18;
 }
 (_cheat_add_hacks()|0);
 $19 = HEAP32[(gb + (8410656) | 0)>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[(gb + (8422108) | 0)>>2]|0;
  $22 = HEAP32[(gb + (8422112) | 0)>>2]|0;
  $23 = (($22|0) / 4)&-1;
  _swap_buffer($21,4,$23);
  HEAP32[(gb + (8410656) | 0)>>2] = 1;
 }
 $24 = $disable_extra_mem;
 $25 = ($24|0)==(0);
 $26 = $25 ? 8388608 : 4194304;
 $27 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $28 = HEAP32[(gb + (8422112) | 0)>>2]|0;
 _connect_all((gb + (8410936) | 0),(gb + (8410952) | 0),(gb + (8413160) | 0),(gb + (8421404) | 0),(gb + (8409824) | 0),(gb + (8421480) | 0),(gb + (8410672) | 0),(gb + (8421560) | 0),(gb + (21216) | 0),$26,$27,$28);
 (_init_memory()|0);
 $29 = HEAP32[((((gb + (10521540) | 0)) + 28|0))>>2]|0;
 $30 = (mftCall_i($29|0)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $0 = 11;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $32 = HEAP32[((((gb + (10521612) | 0)) + 24|0))>>2]|0;
 $33 = (mftCall_i($32|0)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $35 = HEAP32[((((gb + (10521540) | 0)) + 24|0))>>2]|0;
  mftCall_v($35|0);
  $0 = 11;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $36 = HEAP32[((((gb + (10521668) | 0)) + 24|0))>>2]|0;
 $37 = (mftCall_i($36|0)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $39 = HEAP32[((((gb + (10521612) | 0)) + 20|0))>>2]|0;
  mftCall_v($39|0);
  $40 = HEAP32[((((gb + (10521540) | 0)) + 24|0))>>2]|0;
  mftCall_v($40|0);
  $0 = 11;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 _event_initialize();
 $41 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $42 = (_ConfigGetParamBool($41,(gb + (9127) | 0))|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  HEAP32[$width>>2] = 640;
  HEAP32[$height>>2] = 480;
  $44 = HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2]|0;
  mftCall_viiii($44|0,(0|0),($width|0),($height|0),0);
  $45 = HEAP32[$width>>2]|0;
  $46 = HEAP32[$height>>2]|0;
  _osd_init_162($45,$46);
 }
 $47 = HEAP32[((((gb + (10521540) | 0)) + 52|0))>>2]|0;
 mftCall_vi($47|0,((fb + (504) | 0)|0));
 HEAP32[((((gb + (8421404) | 0)) + 52|0))>>2] = (gb + (8421404) | 0);
 HEAP32[((((gb + (8421404) | 0)) + 56|0))>>2] = (fb + (505) | 0);
 HEAP32[((((gb + (8421404) | 0)) + 60|0))>>2] = (fb + (506) | 0);
 HEAP32[((((gb + (8410672) | 0)) + 240|0))>>2] = 0;
 HEAP32[((((gb + (8410672) | 0)) + 244|0))>>2] = (fb + (507) | 0);
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48>>>0)<(4);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = ((gb + (224) | 0) + ($50<<2)|0);
  $52 = $i;
  $53 = (((((gb + (8410672) | 0)) + 92|0)) + ($52<<5)|0);
  HEAP32[$53>>2] = $51;
  $54 = $i;
  $55 = (((((gb + (8410672) | 0)) + 92|0)) + ($54<<5)|0);
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = (fb + (508) | 0);
  $57 = $i;
  $58 = (((((gb + (8410672) | 0)) + 92|0)) + ($57<<5)|0);
  $59 = ((($58)) + 8|0);
  HEAP32[$59>>2] = (fb + (509) | 0);
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $i = 0;
 while(1) {
  $62 = $i;
  $63 = ($62>>>0)<(4);
  if (!($63)) {
   break;
  }
  $64 = $i;
  $65 = ((gb + (224) | 0) + ($64<<2)|0);
  $66 = $i;
  $67 = (((((gb + (8410672) | 0)) + 92|0)) + ($66<<5)|0);
  $68 = ((($67)) + 24|0);
  HEAP32[$68>>2] = $65;
  $69 = $i;
  $70 = (((((gb + (8410672) | 0)) + 92|0)) + ($69<<5)|0);
  $71 = ((($70)) + 24|0);
  $72 = ((($71)) + 4|0);
  HEAP32[$72>>2] = (fb + (510) | 0);
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 $75 = (_get_mempaks_path()|0);
 _open_mpk_file($mpk,$75);
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76>>>0)<(4);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = (((((gb + (8410672) | 0)) + 92|0)) + ($78<<5)|0);
  $80 = ((($79)) + 12|0);
  HEAP32[$80>>2] = $mpk;
  $81 = $i;
  $82 = (((((gb + (8410672) | 0)) + 92|0)) + ($81<<5)|0);
  $83 = ((($82)) + 12|0);
  $84 = ((($83)) + 4|0);
  HEAP32[$84>>2] = (fb + (511) | 0);
  $85 = $i;
  $86 = (_mpk_file_ptr($mpk,$85)|0);
  $87 = $i;
  $88 = (((((gb + (8410672) | 0)) + 92|0)) + ($87<<5)|0);
  $89 = ((($88)) + 12|0);
  $90 = ((($89)) + 8|0);
  HEAP32[$90>>2] = $86;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 $93 = (_get_eeprom_path()|0);
 _open_eep_file($eep,$93);
 HEAP32[((((gb + (8410672) | 0)) + 220|0))>>2] = $eep;
 HEAP32[((((gb + (8410672) | 0)) + 224|0))>>2] = (fb + (512) | 0);
 $94 = (_eep_file_ptr($eep)|0);
 HEAP32[((((gb + (8410672) | 0)) + 228|0))>>2] = $94;
 $95 = HEAP8[((((gb + (23109551) | 0)) + 289|0))>>0]|0;
 $96 = $95&255;
 $97 = ($96|0)!=(1);
 if ($97) {
  HEAP32[((((gb + (8410672) | 0)) + 232|0))>>2] = 512;
  HEAP16[((((gb + (8410672) | 0)) + 236|0))>>1] = -32768;
 } else {
  HEAP32[((((gb + (8410672) | 0)) + 232|0))>>2] = 2048;
  HEAP16[((((gb + (8410672) | 0)) + 236|0))>>1] = -16384;
 }
 $98 = (_get_flashram_path()|0);
 _open_fla_file($fla,$98);
 HEAP32[((((gb + (8409824) | 0)) + 64|0))>>2] = $fla;
 HEAP32[((((gb + (8409824) | 0)) + 68|0))>>2] = (fb + (513) | 0);
 $99 = (_fla_file_ptr($fla)|0);
 HEAP32[((((gb + (8409824) | 0)) + 72|0))>>2] = $99;
 $100 = (_get_sram_path()|0);
 _open_sra_file($sra,$100);
 HEAP32[((((gb + (8409824) | 0)) + 96|0))>>2] = $sra;
 HEAP32[((((gb + (8409824) | 0)) + 100|0))>>2] = (fb + (514) | 0);
 $101 = (_sra_file_ptr($sra)|0);
 HEAP32[((((gb + (8409824) | 0)) + 104|0))>>2] = $101;
 (_osd_new_message(4,(gb + (10806) | 0),$vararg_buffer)|0);
 HEAP32[(gb + (8410660) | 0)>>2] = 1;
 _StateChanged(1,2);
 _r4300_reset_hard();
 _r4300_reset_soft();
 _r4300_execute();
 _close_sra_file($sra);
 _close_fla_file($fla);
 _close_eep_file($eep);
 _close_mpk_file($mpk);
 $102 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $103 = (_ConfigGetParamBool($102,(gb + (9127) | 0))|0);
 $104 = ($103|0)!=(0);
 if ($104) {
  _osd_exit_164();
 }
 $105 = HEAP32[((((gb + (10521708) | 0)) + 12|0))>>2]|0;
 mftCall_v($105|0);
 $106 = HEAP32[((((gb + (10521668) | 0)) + 20|0))>>2]|0;
 mftCall_v($106|0);
 $107 = HEAP32[((((gb + (10521612) | 0)) + 20|0))>>2]|0;
 mftCall_v($107|0);
 $108 = HEAP32[((((gb + (10521540) | 0)) + 24|0))>>2]|0;
 mftCall_v($108|0);
 HEAP32[(gb + (8410660) | 0)>>2] = 0;
 _StateChanged(1,1);
 $0 = 0;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _get_savepathdefault($configpath) {
 $configpath = $configpath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $configpath;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (_strlen(($3|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $9 = $0;
   $10 = HEAP8[(gb + (21123) | 0)>>0]|0;
   $11 = $10 << 24 >> 24;
   HEAP32[$vararg_buffer2>>2] = $9;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $11;
   (_snprintf(((gb + (23108526) | 0)|0),1024,((gb + (10983) | 0)|0),($vararg_buffer2|0))|0);
   HEAP8[((((gb + (23108526) | 0)) + 1023|0))>>0] = 0;
   (_osal_mkdirp((gb + (23108526) | 0),448)|0);
   STACKTOP = sp;return ((gb + (23108526) | 0)|0);
  }
 }
 $6 = (_ConfigGetUserDataPath()|0);
 $7 = HEAP8[(gb + (21123) | 0)>>0]|0;
 $8 = $7 << 24 >> 24;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_snprintf(((gb + (23108526) | 0)|0),1024,((gb + (10974) | 0)|0),($vararg_buffer|0))|0);
 HEAP8[((((gb + (23108526) | 0)) + 1023|0))>>0] = 0;
 (_osal_mkdirp((gb + (23108526) | 0),448)|0);
 STACKTOP = sp;return ((gb + (23108526) | 0)|0);
}
function _osd_new_message($eCorner,$fmt,$varargs) {
 $eCorner = $eCorner|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eCorner;
 $1 = $fmt;
 STACKTOP = sp;return (0|0);
}
function _osd_message_set_static($msg) {
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 STACKTOP = sp;return;
}
function _osd_message_set_user_managed($msg) {
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 STACKTOP = sp;return;
}
function _osd_delete_message($msg) {
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 STACKTOP = sp;return;
}
function _main_is_paused() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410660) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 $2 = HEAP32[(gb + (10523008) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $1 ? $3 : 0;
 $5 = $4&1;
 return ($5|0);
}
function _main_speedset($percent) {
 $percent = $percent|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $percent;
 $1 = $0;
 $2 = ($1|0)<(1);
 $3 = $0;
 $4 = ($3|0)>(1000);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $5 = $0;
  HEAP32[$vararg_buffer>>2] = $5;
  _DebugMessage(2,(gb + (10941) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _main_set_fastforward(0);
  $6 = $0;
  HEAP32[(gb + (212) | 0)>>2] = $6;
  $7 = HEAP32[(gb + (212) | 0)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = (gb + (10648) | 0);
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $7;
  _main_message(4,6,(gb + (10640) | 0),$vararg_buffer2);
  $8 = HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2]|0;
  $9 = HEAP32[(gb + (212) | 0)>>2]|0;
  mftCall_vi($8|0,($9|0));
  $10 = HEAP32[(gb + (212) | 0)>>2]|0;
  _StateChanged(4,$10);
  STACKTOP = sp;return;
 }
}
function _main_set_speedlimiter($enable) {
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $enable;
 $1 = $0;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 1 : 0;
 HEAP32[(gb + (220) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _main_draw_volume_osd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msgString = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $volString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $msgString = sp + 24|0;
 $0 = HEAP32[((((gb + (10521612) | 0)) + 52|0))>>2]|0;
 $1 = (mftCall_i($0|0)|0);
 $volString = $1;
 $2 = $volString;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_strcpy(($msgString|0),((gb + (10905) | 0)|0))|0);
 } else {
  $4 = $volString;
  HEAP32[$vararg_buffer>>2] = (gb + (10934) | 0);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  (_sprintf(($msgString|0),((gb + (10927) | 0)|0),($vararg_buffer|0))|0);
 }
 $5 = HEAP32[(gb + (8421656) | 0)>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[(gb + (8421656) | 0)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $msgString;
  _osd_update_message($7,(gb + (9143) | 0),$vararg_buffer2);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer5>>2] = $msgString;
  $8 = (_osd_new_message(4,(gb + (9143) | 0),$vararg_buffer5)|0);
  HEAP32[(gb + (8421656) | 0)>>2] = $8;
  $9 = HEAP32[(gb + (8421656) | 0)>>2]|0;
  _osd_message_set_user_managed($9);
  STACKTOP = sp;return;
 }
}
function _gs_apply_cheats() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8410668) | 0)>>2]|0;
 $1 = ($0|0)<(60);
 if (!($1)) {
  _cheat_apply_cheats(1);
  return;
 }
 $2 = HEAP32[(gb + (8410668) | 0)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _cheat_apply_cheats(0);
 }
 $4 = HEAP32[(gb + (8410668) | 0)>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[(gb + (8410668) | 0)>>2] = $5;
 return;
}
function _pause_loop() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10523008) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  return;
 }
 _osd_render();
 (_VidExt_GL_SwapBuffers()|0);
 while(1) {
  $2 = HEAP32[(gb + (10523008) | 0)>>2]|0;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  _SDL_Delay(10);
  _main_check_inputs();
 }
 return;
}
function _apply_speed_limiter() {
 var $$sink = 0.0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var $AdjustedLimit = 0.0, $CurrentFPSTime = 0, $IntegratedDelta = 0.0, $ThisFrameDelta = 0.0, $TimeToWait = 0.0, $VILimitMilliseconds = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $0 = HEAP32[((((gb + (8422180) | 0)) + 8|0))>>2]|0;
 $1 = (+($0|0));
 $2 = 1000.0 / $1;
 $VILimitMilliseconds = $2;
 $3 = $VILimitMilliseconds;
 $4 = $3 * 100.0;
 $5 = HEAP32[(gb + (212) | 0)>>2]|0;
 $6 = (+($5|0));
 $7 = $4 / $6;
 $AdjustedLimit = $7;
 $8 = HEAP32[(gb + (8421660) | 0)>>2]|0;
 $9 = ($8|0)==(0);
 $10 = (_SDL_GetTicks()|0);
 if ($9) {
  HEAP32[(gb + (8421660) | 0)>>2] = $10;
  HEAPF32[(gb + (8421664) | 0)>>2] = 0.0;
  _memset(((gb + (8421668) | 0)|0),0,256)|0;
  HEAP32[(gb + (8421924) | 0)>>2] = 0;
  STACKTOP = sp;return;
 }
 $CurrentFPSTime = $10;
 $11 = $CurrentFPSTime;
 $12 = HEAP32[(gb + (8421660) | 0)>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (+($13>>>0));
 $15 = $AdjustedLimit;
 $16 = $14 - $15;
 $17 = $16;
 $ThisFrameDelta = $17;
 $18 = $ThisFrameDelta;
 $19 = $18 < 0.0;
 if ($19) {
  $20 = +HEAPF32[(gb + (8421664) | 0)>>2];
  $21 = $ThisFrameDelta;
  $22 = $20 + $21;
  $IntegratedDelta = $22;
  $23 = $IntegratedDelta;
  $24 = $23 < 0.0;
  $25 = HEAP32[(gb + (220) | 0)>>2]|0;
  $26 = ($25|0)!=(0);
  $or$cond = $24 & $26;
  if ($or$cond) {
   $27 = $IntegratedDelta;
   $28 = $ThisFrameDelta;
   $29 = $27 > $28;
   $30 = $IntegratedDelta;
   $31 = $ThisFrameDelta;
   $$sink = $29 ? $30 : $31;
   $32 = -$$sink;
   $TimeToWait = $32;
   $33 = $TimeToWait;
   $34 = (~~(($33)));
   HEAP32[$vararg_buffer>>2] = $34;
   _DebugMessage(5,(gb + (10865) | 0),$vararg_buffer);
   $35 = $TimeToWait;
   $36 = (~~(($35)));
   _SDL_Delay(($36|0));
   $37 = (_SDL_GetTicks()|0);
   $CurrentFPSTime = $37;
   $38 = $CurrentFPSTime;
   $39 = HEAP32[(gb + (8421660) | 0)>>2]|0;
   $40 = (($38) - ($39))|0;
   $41 = (+($40>>>0));
   $42 = $AdjustedLimit;
   $43 = $41 - $42;
   $44 = $43;
   $ThisFrameDelta = $44;
  }
 }
 $45 = $CurrentFPSTime;
 HEAP32[(gb + (8421660) | 0)>>2] = $45;
 $46 = $ThisFrameDelta;
 $47 = HEAP32[(gb + (8421924) | 0)>>2]|0;
 $48 = ((gb + (8421668) | 0) + ($47<<2)|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $46 - $49;
 $51 = +HEAPF32[(gb + (8421664) | 0)>>2];
 $52 = $51 + $50;
 HEAPF32[(gb + (8421664) | 0)>>2] = $52;
 $53 = $ThisFrameDelta;
 $54 = HEAP32[(gb + (8421924) | 0)>>2]|0;
 $55 = ((gb + (8421668) | 0) + ($54<<2)|0);
 HEAPF32[$55>>2] = $53;
 $56 = HEAP32[(gb + (8421924) | 0)>>2]|0;
 $57 = (($56) + 1)|0;
 $58 = $57 & 63;
 HEAP32[(gb + (8421924) | 0)>>2] = $58;
 STACKTOP = sp;return;
}
function _connect_all($r4300,$dp,$sp,$ai,$pi,$ri,$si,$vi,$dram,$dram_size,$rom,$rom_size) {
 $r4300 = $r4300|0;
 $dp = $dp|0;
 $sp = $sp|0;
 $ai = $ai|0;
 $pi = $pi|0;
 $ri = $ri|0;
 $si = $si|0;
 $vi = $vi|0;
 $dram = $dram|0;
 $dram_size = $dram_size|0;
 $rom = $rom|0;
 $rom_size = $rom_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r4300;
 $1 = $dp;
 $2 = $sp;
 $3 = $ai;
 $4 = $pi;
 $5 = $ri;
 $6 = $si;
 $7 = $vi;
 $8 = $dram;
 $9 = $dram_size;
 $10 = $rom;
 $11 = $rom_size;
 $12 = $1;
 $13 = $0;
 $14 = $2;
 $15 = $5;
 _connect_rdp($12,$13,$14,$15);
 $16 = $2;
 $17 = $0;
 $18 = $1;
 $19 = $5;
 _connect_rsp($16,$17,$18,$19);
 $20 = $3;
 $21 = $0;
 $22 = $5;
 $23 = $7;
 _connect_ai($20,$21,$22,$23);
 $24 = $4;
 $25 = $0;
 $26 = $5;
 $27 = $10;
 $28 = $11;
 _connect_pi($24,$25,$26,$27,$28);
 $29 = $5;
 $30 = $8;
 $31 = $9;
 _connect_ri($29,$30,$31);
 $32 = $6;
 $33 = $0;
 $34 = $5;
 _connect_si($32,$33,$34);
 $35 = $7;
 $36 = $0;
 _connect_vi($35,$36);
 STACKTOP = sp;return;
}
function _osd_init_162($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 STACKTOP = sp;return;
}
function _video_plugin_render_callback($bScreenRedrawn) {
 $bScreenRedrawn = $bScreenRedrawn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bOSD = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bScreenRedrawn;
 $1 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $2 = (_ConfigGetParamBool($1,(gb + (9127) | 0))|0);
 $bOSD = $2;
 $3 = HEAP32[(gb + (8421652) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $bOSD;
  $6 = ($5|0)==(0);
  $7 = $0;
  $8 = ($7|0)!=(0);
  $or$cond = $6 | $8;
  if ($or$cond) {
   $9 = HEAP32[(gb + (8421652) | 0)>>2]|0;
   $10 = (($9) - 1)|0;
   _TakeScreenshot($10);
   HEAP32[(gb + (8421652) | 0)>>2] = 0;
  }
 }
 $11 = $bOSD;
 $12 = ($11|0)!=(0);
 if ($12) {
  _osd_render();
 }
 $13 = HEAP32[((((gb + (10521668) | 0)) + 36|0))>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[((((gb + (10521668) | 0)) + 36|0))>>2]|0;
 mftCall_v($15|0);
 STACKTOP = sp;return;
}
function _get_mempaks_path() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_get_savesrampath()|0);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = (gb + (23109551) | 0);
 $1 = (_formatstr((gb + (10856) | 0),$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _get_eeprom_path() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_get_savesrampath()|0);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = (gb + (23109551) | 0);
 $1 = (_formatstr((gb + (10847) | 0),$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _get_flashram_path() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_get_savesrampath()|0);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = (gb + (23109551) | 0);
 $1 = (_formatstr((gb + (10838) | 0),$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _get_sram_path() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_get_savesrampath()|0);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = (gb + (23109551) | 0);
 $1 = (_formatstr((gb + (10829) | 0),$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _osd_exit_164() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _osd_render() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _osd_update_message($msg,$fmt,$varargs) {
 $msg = $msg|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $fmt;
 STACKTOP = sp;return;
}
function _read_from_file($filename,$data,$size) {
 $filename = $filename|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filename;
 $2 = $data;
 $3 = $size;
 $4 = $1;
 $5 = (_fopen(($4|0),((gb + (20660) | 0)|0))|0);
 $f = $5;
 $6 = $f;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $0 = 1;
  } else {
   $8 = $2;
   $9 = $3;
   $10 = $f;
   $11 = (_fread(($8|0),1,($9|0),($10|0))|0);
   $12 = $3;
   $13 = ($11|0)!=($12|0);
   $14 = $f;
   (_fclose(($14|0))|0);
   if ($13) {
    $0 = 2;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _write_to_file($filename,$data,$size) {
 $filename = $filename|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filename;
 $2 = $data;
 $3 = $size;
 $4 = $1;
 $5 = (_fopen(($4|0),((gb + (20964) | 0)|0))|0);
 $f = $5;
 $6 = $f;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $0 = 1;
  } else {
   $8 = $2;
   $9 = $3;
   $10 = $f;
   $11 = (_fwrite(($8|0),1,($9|0),($10|0))|0);
   $12 = $3;
   $13 = ($11|0)!=($12|0);
   $14 = $f;
   (_fclose(($14|0))|0);
   if ($13) {
    $0 = 2;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _swap_buffer($buffer,$length,$count) {
 $buffer = $buffer|0;
 $length = $length|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $pun = 0, $pun1 = 0, $pun2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $length;
 $2 = $count;
 $3 = $1;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = $0;
  $pun = $5;
  $i = 0;
  while(1) {
   $6 = $i;
   $7 = $2;
   $8 = ($6>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = $i;
   $10 = $pun;
   $11 = (($10) + ($9<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = (_m64p_swap16($12)|0);
   $14 = $i;
   $15 = $pun;
   $16 = (($15) + ($14<<1)|0);
   HEAP16[$16>>1] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ($19|0)==(4);
 if ($20) {
  $21 = $0;
  $pun1 = $21;
  $i = 0;
  while(1) {
   $22 = $i;
   $23 = $2;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $i;
   $26 = $pun1;
   $27 = (($26) + ($25<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_m64p_swap32($28)|0);
   $30 = $i;
   $31 = $pun1;
   $32 = (($31) + ($30<<2)|0);
   HEAP32[$32>>2] = $29;
   $33 = $i;
   $34 = (($33) + 1)|0;
   $i = $34;
  }
  STACKTOP = sp;return;
 }
 $35 = $1;
 $36 = ($35|0)==(8);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $0;
 $pun2 = $37;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $2;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $i;
  $42 = $pun2;
  $43 = (($42) + ($41<<3)|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (_m64p_swap64($46,$49)|0);
  $51 = (getTempRet0() | 0);
  $52 = $i;
  $53 = $pun2;
  $54 = (($53) + ($52<<3)|0);
  $55 = $54;
  $56 = $55;
  HEAP32[$56>>2] = $50;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $51;
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 STACKTOP = sp;return;
}
function _to_little_endian_buffer($buffer,$length,$count) {
 $buffer = $buffer|0;
 $length = $length|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $length;
 $2 = $count;
 STACKTOP = sp;return;
}
function _to_big_endian_buffer($buffer,$length,$count) {
 $buffer = $buffer|0;
 $length = $length|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $length;
 $2 = $count;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _swap_buffer($3,$4,$5);
 STACKTOP = sp;return;
}
function _countrycodestring($countrycode,$string) {
 $countrycode = $countrycode|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $countrycode;
 $1 = $string;
 $2 = $0;
 $3 = $2&65535;
 do {
  switch ($3|0) {
  case 0:  {
   $4 = $1;
   (_strcpy(($4|0),((gb + (10988) | 0)|0))|0);
   break;
  }
  case 55:  {
   $5 = $1;
   (_strcpy(($5|0),((gb + (10993) | 0)|0))|0);
   break;
  }
  case 65:  {
   $6 = $1;
   (_strcpy(($6|0),((gb + (10998) | 0)|0))|0);
   break;
  }
  case 68:  {
   $7 = $1;
   (_strcpy(($7|0),((gb + (11008) | 0)|0))|0);
   break;
  }
  case 69:  {
   $8 = $1;
   (_strcpy(($8|0),((gb + (11016) | 0)|0))|0);
   break;
  }
  case 70:  {
   $9 = $1;
   (_strcpy(($9|0),((gb + (11020) | 0)|0))|0);
   break;
  }
  case 73:  {
   $10 = $1;
   (_strcpy(($10|0),((gb + (11027) | 0)|0))|0);
   break;
  }
  case 74:  {
   $11 = $1;
   (_strcpy(($11|0),((gb + (11033) | 0)|0))|0);
   break;
  }
  case 83:  {
   $12 = $1;
   (_strcpy(($12|0),((gb + (11039) | 0)|0))|0);
   break;
  }
  case 89: case 85:  {
   $13 = $1;
   $14 = $0;
   $15 = $14&65535;
   HEAP32[$vararg_buffer>>2] = $15;
   (_sprintf(($13|0),((gb + (11045) | 0)|0),($vararg_buffer|0))|0);
   break;
  }
  case 112: case 56: case 33: case 32: case 88: case 80:  {
   $16 = $1;
   $17 = $0;
   $18 = $17&65535;
   HEAP32[$vararg_buffer1>>2] = $18;
   (_sprintf(($16|0),((gb + (11064) | 0)|0),($vararg_buffer1|0))|0);
   break;
  }
  default: {
   $19 = $1;
   $20 = $0;
   $21 = $20&65535;
   HEAP32[$vararg_buffer4>>2] = $21;
   (_sprintf(($19|0),((gb + (11080) | 0)|0),($vararg_buffer4|0))|0);
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _imagestring($imagetype,$string) {
 $imagetype = $imagetype|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $imagetype;
 $1 = $string;
 $2 = $0;
 $3 = $2&255;
 switch ($3|0) {
 case 0:  {
  $4 = $1;
  (_strcpy(($4|0),((gb + (11097) | 0)|0))|0);
  break;
 }
 case 1:  {
  $5 = $1;
  (_strcpy(($5|0),((gb + (11111) | 0)|0))|0);
  break;
 }
 case 2:  {
  $6 = $1;
  (_strcpy(($6|0),((gb + (11130) | 0)|0))|0);
  break;
 }
 default: {
  $7 = $1;
  HEAP8[$7>>0] = 0;
 }
 }
 STACKTOP = sp;return;
}
function _namefrompath($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_separator_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $1;
 $3 = (_strpbrk_reverse((gb + (21123) | 0),$2)|0);
 $last_separator_ptr = $3;
 $4 = $last_separator_ptr;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $last_separator_ptr;
  $7 = ((($6)) + 1|0);
  $0 = $7;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $8 = $1;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _combinepath($first,$second) {
 $first = $first|0;
 $second = $second|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len_first = 0, $off_second = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $first;
 $2 = $second;
 $off_second = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $7 = $1;
 $8 = (_strlen(($7|0))|0);
 $len_first = $8;
 while(1) {
  $9 = $len_first;
  $10 = (($9) - 1)|0;
  $11 = $1;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = (_is_path_separator($13)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $len_first;
  $17 = (($16) + -1)|0;
  $len_first = $17;
 }
 while(1) {
  $18 = $off_second;
  $19 = $2;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = (_is_path_separator($21)|0);
  $23 = ($22|0)!=(0);
  if (!($23)) {
   break;
  }
  $24 = $off_second;
  $25 = (($24) + 1)|0;
  $off_second = $25;
 }
 $26 = $len_first;
 $27 = $1;
 $28 = HEAP8[(gb + (21123) | 0)>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = $2;
 $31 = $off_second;
 $32 = (($30) + ($31)|0);
 HEAP32[$vararg_buffer>>2] = $26;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $27;
 $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr3>>2] = $29;
 $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr4>>2] = $32;
 $33 = (_formatstr((gb + (11149) | 0),$vararg_buffer)|0);
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _formatstr($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $newstr = 0, $ret = 0, $size = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $1 = $fmt;
 $size = 128;
 $2 = $size;
 $3 = (_malloc(($2|0))|0);
 $str = $3;
 while(1) {
  $4 = $str;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 12;
   break;
  }
  HEAP32[$args>>2] = $varargs;
  $6 = $str;
  $7 = $size;
  $8 = $1;
  $9 = (_vsnprintf(($6|0),($7|0),($8|0),($args|0))|0);
  $ret = $9;
  $10 = $ret;
  $11 = ($10|0)>=(0);
  if ($11) {
   $12 = $ret;
   $13 = $size;
   $14 = ($12|0)<($13|0);
   if ($14) {
    label = 5;
    break;
   }
  }
  $16 = $ret;
  $17 = $size;
  $18 = ($16|0)>=($17|0);
  if ($18) {
   $19 = $ret;
   $20 = (($19) + 1)|0;
   $size = $20;
  } else {
   $21 = $size;
   $22 = $21<<1;
   $size = $22;
  }
  $23 = $str;
  $24 = $size;
  $25 = (_realloc(($23|0),($24|0))|0);
  $newstr = $25;
  $26 = $newstr;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $28 = $str;
   _free(($28|0));
  }
  $29 = $newstr;
  $str = $29;
 }
 if ((label|0) == 5) {
  $15 = $str;
  $0 = $15;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _trim($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $end = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 $start = $1;
 $2 = $0;
 $3 = $0;
 $4 = (_strlen(($3|0))|0);
 $5 = (($2) + ($4)|0);
 $end = $5;
 while(1) {
  $6 = $start;
  $7 = $end;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $start;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (_isspace(($11|0))|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $start;
  $15 = ((($14)) + 1|0);
  $start = $15;
 }
 while(1) {
  $16 = $end;
  $17 = $start;
  $18 = ($16>>>0)>($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $end;
  $20 = ((($19)) + -1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = (_isspace(($22|0))|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   break;
  }
  $25 = $end;
  $26 = ((($25)) + -1|0);
  $end = $26;
 }
 $27 = $0;
 $28 = $start;
 $29 = $end;
 $30 = $start;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 _memmove(($27|0),($28|0),($33|0))|0;
 $34 = $end;
 $35 = $start;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $0;
 $40 = (($39) + ($38)|0);
 HEAP8[$40>>0] = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _string_to_int($str,$result) {
 $str = $str|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp + 4|0;
 $1 = $str;
 $2 = $result;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isspace(($9|0))|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = 0;
   $13 = $1;
   $14 = (_strtol(($13|0),($endptr|0),10)|0);
   $n = $14;
   $15 = HEAP32[$endptr>>2]|0;
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = (___errno_location()|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0);
    $22 = $n;
    $23 = ($22|0)<(-2147483648);
    $or$cond = $21 | $23;
    $24 = $n;
    $25 = ($24|0)>(2147483647);
    $or$cond3 = $or$cond | $25;
    if (!($or$cond3)) {
     $26 = $n;
     $27 = $2;
     HEAP32[$27>>2] = $26;
     $0 = 1;
     $28 = $0;
     STACKTOP = sp;return ($28|0);
    }
   }
   $0 = 0;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $0 = 0;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _parse_hex($str,$output,$output_size) {
 $str = $str|0;
 $output = $output|0;
 $output_size = $output_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $h = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = $output;
 $3 = $output_size;
 $i = 0;
 L1: while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $2;
  $9 = (($8) + ($7)|0);
  HEAP8[$9>>0] = 0;
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = ($10>>>0)<(2);
   if (!($11)) {
    break;
   }
   $12 = $1;
   $13 = ((($12)) + 1|0);
   $1 = $13;
   $14 = HEAP8[$12>>0]|0;
   $15 = (_char2hex($14)|0);
   $h = $15;
   $16 = $h;
   $17 = $16&255;
   $18 = ($17|0)==(255);
   if ($18) {
    label = 6;
    break L1;
   }
   $19 = $i;
   $20 = $2;
   $21 = (($20) + ($19)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 4;
   $25 = $h;
   $26 = $25&255;
   $27 = $24 | $26;
   $28 = $27&255;
   $29 = $i;
   $30 = $2;
   $31 = (($30) + ($29)|0);
   HEAP8[$31>>0] = $28;
   $32 = $j;
   $33 = (($32) + 1)|0;
   $j = $33;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $36 = $1;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 << 24 >> 24;
 $39 = ($38|0)!=(0);
 if ($39) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $0 = 1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _ini_parse_line($agg$result,$lineptr) {
 $agg$result = $agg$result|0;
 $lineptr = $lineptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $endline = 0, $equal = 0, $l = 0, $line = 0, $name = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 8|0;
 $0 = $lineptr;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $line = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strchr(($4|0),10)|0);
 $endline = $5;
 $6 = $endline;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $endline;
  HEAP8[$8>>0] = 0;
 }
 $9 = $line;
 $10 = $line;
 $11 = (_strlen(($10|0))|0);
 $12 = (($9) + ($11)|0);
 $13 = ((($12)) + 1|0);
 $14 = $0;
 HEAP32[$14>>2] = $13;
 $15 = $line;
 (_trim($15)|0);
 $16 = $line;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)==(35);
 do {
  if ($19) {
   label = 5;
  } else {
   $20 = $line;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(59);
   if ($23) {
    label = 5;
   } else {
    $30 = $line;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(91);
    if ($33) {
     $34 = $line;
     $35 = (_strlen(($34|0))|0);
     $36 = (($35) - 1)|0;
     $37 = $line;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39 << 24 >> 24;
     $41 = ($40|0)==(93);
     if ($41) {
      $42 = $line;
      $43 = (_strlen(($42|0))|0);
      $44 = (($43) - 1)|0;
      $45 = $line;
      $46 = (($45) + ($44)|0);
      HEAP8[$46>>0] = 0;
      $47 = $line;
      $48 = ((($47)) + 1|0);
      $line = $48;
      HEAP32[$l>>2] = 2;
      $49 = $line;
      $50 = (_trim($49)|0);
      $51 = ((($l)) + 4|0);
      HEAP32[$51>>2] = $50;
      $52 = ((($l)) + 8|0);
      HEAP32[$52>>2] = 0;
      break;
     }
    }
    $53 = $line;
    $54 = (_strchr(($53|0),61)|0);
    $equal = $54;
    $55 = ($54|0)!=(0|0);
    $56 = $line;
    if ($55) {
     $name = $56;
     $57 = $equal;
     $58 = ((($57)) + 1|0);
     $value = $58;
     $59 = $equal;
     HEAP8[$59>>0] = 0;
     HEAP32[$l>>2] = 3;
     $60 = $name;
     $61 = (_trim($60)|0);
     $62 = ((($l)) + 4|0);
     HEAP32[$62>>2] = $61;
     $63 = $value;
     $64 = (_trim($63)|0);
     $65 = ((($l)) + 8|0);
     HEAP32[$65>>2] = $64;
     break;
    } else {
     $66 = HEAP8[$56>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($67|0)==(0);
     $69 = $68 ? 0 : 4;
     HEAP32[$l>>2] = $69;
     $70 = ((($l)) + 4|0);
     HEAP32[$70>>2] = 0;
     $71 = ((($l)) + 8|0);
     HEAP32[$71>>2] = 0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $24 = $line;
  $25 = ((($24)) + 1|0);
  $line = $25;
  HEAP32[$l>>2] = 1;
  $26 = ((($l)) + 4|0);
  HEAP32[$26>>2] = 0;
  $27 = $line;
  $28 = (_trim($27)|0);
  $29 = ((($l)) + 8|0);
  HEAP32[$29>>2] = $28;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$l>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$l+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$l+8>>2]|0;
 STACKTOP = sp;return;
}
function _m64p_swap16($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 255;
 $4 = $3 << 8;
 $5 = $0;
 $6 = $5&65535;
 $7 = $6 & 65280;
 $8 = $7 >> 8;
 $9 = $4 | $8;
 $10 = $9&65535;
 STACKTOP = sp;return ($10|0);
}
function _m64p_swap32($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 << 24;
 $4 = $0;
 $5 = $4 & 65280;
 $6 = $5 << 8;
 $7 = $3 | $6;
 $8 = $0;
 $9 = $8 & 16711680;
 $10 = $9 >>> 8;
 $11 = $7 | $10;
 $12 = $0;
 $13 = $12 & -16777216;
 $14 = $13 >>> 24;
 $15 = $11 | $14;
 STACKTOP = sp;return ($15|0);
}
function _m64p_swap64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $9 & 255;
 $14 = (_bitshift64Shl(($13|0),0,56)|0);
 $15 = (getTempRet0() | 0);
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 & 65280;
 $23 = (_bitshift64Shl(($22|0),0,40)|0);
 $24 = (getTempRet0() | 0);
 $25 = $14 | $23;
 $26 = $15 | $24;
 $27 = $2;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $29 & 16711680;
 $34 = (_bitshift64Shl(($33|0),0,24)|0);
 $35 = (getTempRet0() | 0);
 $36 = $25 | $34;
 $37 = $26 | $35;
 $38 = $2;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $40 & -16777216;
 $45 = (_bitshift64Shl(($44|0),0,8)|0);
 $46 = (getTempRet0() | 0);
 $47 = $36 | $45;
 $48 = $37 | $46;
 $49 = $2;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 255;
 $56 = (_bitshift64Lshr(0,($55|0),8)|0);
 $57 = (getTempRet0() | 0);
 $58 = $47 | $56;
 $59 = $48 | $57;
 $60 = $2;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & 65280;
 $67 = (_bitshift64Lshr(0,($66|0),24)|0);
 $68 = (getTempRet0() | 0);
 $69 = $58 | $67;
 $70 = $59 | $68;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 16711680;
 $78 = (_bitshift64Lshr(0,($77|0),40)|0);
 $79 = (getTempRet0() | 0);
 $80 = $69 | $78;
 $81 = $70 | $79;
 $82 = $2;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & -16777216;
 $89 = (_bitshift64Lshr(0,($88|0),56)|0);
 $90 = (getTempRet0() | 0);
 $91 = $80 | $89;
 $92 = $81 | $90;
 setTempRet0(($92) | 0);
 STACKTOP = sp;return ($91|0);
}
function _strpbrk_reverse($needles,$haystack) {
 $needles = $needles|0;
 $haystack = $haystack|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter = 0, $stringlength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $needles;
 $2 = $haystack;
 $3 = $2;
 $4 = (_strlen(($3|0))|0);
 $stringlength = $4;
 $5 = $stringlength;
 $counter = $5;
 while(1) {
  $6 = $counter;
  $7 = ($6>>>0)>(0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = $counter;
  $10 = (($9) - 1)|0;
  $11 = $2;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_strchr(($8|0),($14|0))|0);
  $16 = ($15|0)!=(0|0);
  if ($16) {
   break;
  }
  $17 = $counter;
  $18 = (($17) + -1)|0;
  $counter = $18;
 }
 $19 = $counter;
 $20 = ($19|0)==(0);
 if ($20) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $21 = $2;
  $22 = $counter;
  $23 = (($21) + ($22)|0);
  $24 = ((($23)) + -1|0);
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _is_path_separator($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = (_strchr(((gb + (21123) | 0)|0),($2|0))|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _char2hex($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = (_tolower(($3|0))|0);
 $5 = $4&255;
 $1 = $5;
 $6 = $1;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)>=(48);
 if ($8) {
  $9 = $1;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)<=(57);
  if ($11) {
   $12 = $1;
   $13 = $12 << 24 >> 24;
   $14 = (($13) - 48)|0;
   $15 = $14&255;
   $0 = $15;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $16 = $1;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)>=(97);
 if ($18) {
  $19 = $1;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)<=(102);
  if ($21) {
   $22 = $1;
   $23 = $22 << 24 >> 24;
   $24 = (($23) - 97)|0;
   $25 = (($24) + 10)|0;
   $26 = $25&255;
   $0 = $26;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $0 = -1;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _cheat_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_SDL_CreateMutex()|0);
 HEAP32[(gb + (8421928) | 0)>>2] = $0;
 return;
}
function _cheat_uninit() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8421928) | 0)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(gb + (8421928) | 0)>>2]|0;
  _SDL_DestroyMutex(($2|0));
 }
 HEAP32[(gb + (8421928) | 0)>>2] = 0;
 return;
}
function _cheat_apply_cheats($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__mptr = 0;
 var $__mptr1 = 0, $__mptr2 = 0, $__mptr3 = 0, $__mptr4 = 0, $__mptr5 = 0, $__mptr6 = 0, $__mptr7 = 0, $cheat = 0, $code = 0, $cond = 0, $cond_failed = 0, $switch$split122D = 0, $switch$split2D = 0, $switch$split92D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $entry;
 $9 = (_list_empty((gb + (240) | 0))|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(gb + (8421928) | 0)>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[(gb + (8421928) | 0)>>2]|0;
  $14 = (_SDL_LockMutex(($13|0))|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $16 = HEAP32[((((gb + (240) | 0)) + 4|0))>>2]|0;
   $__mptr = $16;
   $17 = $__mptr;
   $18 = ((($17)) + -20|0);
   $1 = $18;
   $19 = $1;
   $cheat = $19;
   while(1) {
    $20 = $cheat;
    $21 = ((($20)) + 20|0);
    $22 = ($21|0)!=((gb + (240) | 0)|0);
    if (!($22)) {
     break;
    }
    $23 = $cheat;
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0);
    $27 = $cheat;
    $28 = ((($27)) + 8|0);
    L10: do {
     if ($26) {
      HEAP32[$28>>2] = 1;
      $29 = $0;
      switch ($29|0) {
      case 0:  {
       $30 = $cheat;
       $31 = ((($30)) + 12|0);
       $32 = ((($31)) + 4|0);
       $33 = HEAP32[$32>>2]|0;
       $__mptr1 = $33;
       $34 = $__mptr1;
       $35 = ((($34)) + -12|0);
       $2 = $35;
       $36 = $2;
       $code = $36;
       while(1) {
        $37 = $code;
        $38 = ((($37)) + 12|0);
        $39 = $cheat;
        $40 = ((($39)) + 12|0);
        $41 = ($38|0)!=($40|0);
        if (!($41)) {
         break L10;
        }
        $42 = $code;
        $43 = HEAP32[$42>>2]|0;
        $44 = $43 & -268435456;
        $45 = ($44|0)==(-268435456);
        if ($45) {
         $46 = $code;
         $47 = HEAP32[$46>>2]|0;
         $48 = $code;
         $49 = ((($48)) + 4|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = $50&65535;
         $52 = $code;
         $53 = ((($52)) + 8|0);
         (_execute_cheat($47,$51,$53)|0);
        }
        $54 = $code;
        $55 = ((($54)) + 12|0);
        $56 = ((($55)) + 4|0);
        $57 = HEAP32[$56>>2]|0;
        $__mptr2 = $57;
        $58 = $__mptr2;
        $59 = ((($58)) + -12|0);
        $3 = $59;
        $60 = $3;
        $code = $60;
       }
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L10;
      }
      }
      $cond_failed = 0;
      $61 = $cheat;
      $62 = ((($61)) + 12|0);
      $63 = ((($62)) + 4|0);
      $64 = HEAP32[$63>>2]|0;
      $__mptr3 = $64;
      $65 = $__mptr3;
      $66 = ((($65)) + -12|0);
      $4 = $66;
      $67 = $4;
      $code = $67;
      while(1) {
       $68 = $code;
       $69 = ((($68)) + 12|0);
       $70 = $cheat;
       $71 = ((($70)) + 12|0);
       $72 = ($69|0)!=($71|0);
       if (!($72)) {
        break L10;
       }
       $73 = $code;
       $74 = HEAP32[$73>>2]|0;
       $75 = $74 & -268435456;
       $76 = ($75|0)==(-805306368);
       do {
        if ($76) {
         $77 = $code;
         $78 = HEAP32[$77>>2]|0;
         $79 = $78 & -16777216;
         $80 = ($79|0)==(-671088640);
         if ($80) {
          label = 21;
         } else {
          $81 = $code;
          $82 = HEAP32[$81>>2]|0;
          $83 = $82 & -16777216;
          $84 = ($83|0)==(-654311424);
          if ($84) {
           label = 21;
          } else {
           $85 = $code;
           $86 = HEAP32[$85>>2]|0;
           $87 = $86 & -16777216;
           $88 = ($87|0)==(-637534208);
           if ($88) {
            label = 21;
           } else {
            $89 = $code;
            $90 = HEAP32[$89>>2]|0;
            $91 = $90 & -16777216;
            $92 = ($91|0)==(-620756992);
            if ($92) {
             label = 21;
            }
           }
          }
         }
         if ((label|0) == 21) {
          label = 0;
          $93 = (_event_gameshark_active()|0);
          $94 = ($93|0)!=(0);
          if (!($94)) {
           $cond_failed = 1;
          }
         }
         $95 = $code;
         $96 = HEAP32[$95>>2]|0;
         $97 = $code;
         $98 = ((($97)) + 4|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = $99&65535;
         $101 = (_execute_cheat($96,$100,0)|0);
         $102 = ($101|0)!=(0);
         if (!($102)) {
          $cond_failed = 1;
         }
        } else {
         $103 = $cond_failed;
         $104 = ($103|0)!=(0);
         if ($104) {
          $cond_failed = 0;
          break;
         }
         $105 = $code;
         $106 = HEAP32[$105>>2]|0;
         $107 = $106 & -16777216;
         $switch$split2D = ($107|0)<(-1476395008);
         L39: do {
          if ($switch$split2D) {
           $switch$split92D = ($107|0)<(-1996488704);
           if ($switch$split92D) {
            switch ($107|0) {
            case -2013265920:  {
             label = 28;
             break L39;
             break;
            }
            default: {
             label = 30;
             break L39;
            }
            }
           } else {
            switch ($107|0) {
            case -1996488704:  {
             label = 28;
             break L39;
             break;
            }
            default: {
             label = 30;
             break L39;
            }
            }
           }
          } else {
           $switch$split122D = ($107|0)<(-1459617792);
           if ($switch$split122D) {
            switch ($107|0) {
            case -1476395008:  {
             label = 28;
             break L39;
             break;
            }
            default: {
             label = 30;
             break L39;
            }
            }
           } else {
            switch ($107|0) {
            case -1459617792:  {
             label = 28;
             break L39;
             break;
            }
            default: {
             label = 30;
             break L39;
            }
            }
           }
          }
         } while(0);
         if ((label|0) == 28) {
          label = 0;
          $108 = (_event_gameshark_active()|0);
          $109 = ($108|0)!=(0);
          if (!($109)) {
           break;
          }
          $110 = $code;
          $111 = HEAP32[$110>>2]|0;
          $112 = $code;
          $113 = ((($112)) + 4|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = $114&65535;
          (_execute_cheat($111,$115,0)|0);
          break;
         }
         else if ((label|0) == 30) {
          label = 0;
          $116 = $code;
          $117 = HEAP32[$116>>2]|0;
          $118 = $117 & -268435456;
          $119 = ($118|0)!=(-268435456);
          if (!($119)) {
           break;
          }
          $120 = $code;
          $121 = HEAP32[$120>>2]|0;
          $122 = $code;
          $123 = ((($122)) + 4|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = $124&65535;
          $126 = $code;
          $127 = ((($126)) + 8|0);
          (_execute_cheat($121,$125,$127)|0);
          break;
         }
        }
       } while(0);
       $128 = $code;
       $129 = ((($128)) + 12|0);
       $130 = ((($129)) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $__mptr4 = $131;
       $132 = $__mptr4;
       $133 = ((($132)) + -12|0);
       $5 = $133;
       $134 = $5;
       $code = $134;
      }
     } else {
      $135 = HEAP32[$28>>2]|0;
      $136 = ($135|0)!=(0);
      if ($136) {
       $137 = $cheat;
       $138 = ((($137)) + 8|0);
       HEAP32[$138>>2] = 0;
       $139 = $0;
       $cond = ($139|0)==(1);
       if ($cond) {
        $140 = $cheat;
        $141 = ((($140)) + 12|0);
        $142 = ((($141)) + 4|0);
        $143 = HEAP32[$142>>2]|0;
        $__mptr5 = $143;
        $144 = $__mptr5;
        $145 = ((($144)) + -12|0);
        $6 = $145;
        $146 = $6;
        $code = $146;
        while(1) {
         $147 = $code;
         $148 = ((($147)) + 12|0);
         $149 = $cheat;
         $150 = ((($149)) + 12|0);
         $151 = ($148|0)!=($150|0);
         if (!($151)) {
          break L10;
         }
         $152 = $code;
         $153 = ((($152)) + 8|0);
         $154 = HEAP32[$153>>2]|0;
         $155 = ($154|0)!=(-559087616);
         if ($155) {
          $156 = $code;
          $157 = HEAP32[$156>>2]|0;
          $158 = $code;
          $159 = ((($158)) + 8|0);
          $160 = HEAP32[$159>>2]|0;
          $161 = $160&65535;
          (_execute_cheat($157,$161,0)|0);
          $162 = $code;
          $163 = ((($162)) + 8|0);
          HEAP32[$163>>2] = -559087616;
         }
         $164 = $code;
         $165 = ((($164)) + 12|0);
         $166 = ((($165)) + 4|0);
         $167 = HEAP32[$166>>2]|0;
         $__mptr6 = $167;
         $168 = $__mptr6;
         $169 = ((($168)) + -12|0);
         $7 = $169;
         $170 = $7;
         $code = $170;
        }
       }
      }
     }
    } while(0);
    $171 = $cheat;
    $172 = ((($171)) + 20|0);
    $173 = ((($172)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $__mptr7 = $174;
    $175 = $__mptr7;
    $176 = ((($175)) + -20|0);
    $8 = $176;
    $177 = $8;
    $cheat = $177;
   }
   $178 = HEAP32[(gb + (8421928) | 0)>>2]|0;
   (_SDL_UnlockMutex(($178|0))|0);
   STACKTOP = sp;return;
  }
 }
 _DebugMessage(1,(gb + (11158) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _cheat_delete_all() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__mptr = 0, $__mptr1 = 0, $__mptr2 = 0, $__mptr3 = 0, $__mptr4 = 0, $__mptr5 = 0, $cheat = 0, $code = 0, $safe_cheat = 0;
 var $safe_code = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $6 = (_list_empty((gb + (240) | 0))|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[(gb + (8421928) | 0)>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[(gb + (8421928) | 0)>>2]|0;
  $11 = (_SDL_LockMutex(($10|0))|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = HEAP32[((((gb + (240) | 0)) + 4|0))>>2]|0;
   $__mptr = $13;
   $14 = $__mptr;
   $15 = ((($14)) + -20|0);
   $0 = $15;
   $16 = $0;
   $cheat = $16;
   $17 = $cheat;
   $18 = ((($17)) + 20|0);
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $__mptr1 = $20;
   $21 = $__mptr1;
   $22 = ((($21)) + -20|0);
   $1 = $22;
   $23 = $1;
   $safe_cheat = $23;
   while(1) {
    $24 = $cheat;
    $25 = ((($24)) + 20|0);
    $26 = ($25|0)!=((gb + (240) | 0)|0);
    if (!($26)) {
     break;
    }
    $27 = $cheat;
    $28 = HEAP32[$27>>2]|0;
    _free(($28|0));
    $29 = $cheat;
    $30 = ((($29)) + 12|0);
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $__mptr2 = $32;
    $33 = $__mptr2;
    $34 = ((($33)) + -12|0);
    $2 = $34;
    $35 = $2;
    $code = $35;
    $36 = $code;
    $37 = ((($36)) + 12|0);
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $__mptr3 = $39;
    $40 = $__mptr3;
    $41 = ((($40)) + -12|0);
    $3 = $41;
    $42 = $3;
    $safe_code = $42;
    while(1) {
     $43 = $code;
     $44 = ((($43)) + 12|0);
     $45 = $cheat;
     $46 = ((($45)) + 12|0);
     $47 = ($44|0)!=($46|0);
     if (!($47)) {
      break;
     }
     $48 = $code;
     $49 = ((($48)) + 12|0);
     _list_del($49);
     $50 = $code;
     _free(($50|0));
     $51 = $safe_code;
     $code = $51;
     $52 = $safe_code;
     $53 = ((($52)) + 12|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $__mptr4 = $55;
     $56 = $__mptr4;
     $57 = ((($56)) + -12|0);
     $4 = $57;
     $58 = $4;
     $safe_code = $58;
    }
    $59 = $cheat;
    $60 = ((($59)) + 20|0);
    _list_del($60);
    $61 = $cheat;
    _free(($61|0));
    $62 = $safe_cheat;
    $cheat = $62;
    $63 = $safe_cheat;
    $64 = ((($63)) + 20|0);
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $__mptr5 = $66;
    $67 = $__mptr5;
    $68 = ((($67)) + -20|0);
    $5 = $68;
    $69 = $5;
    $safe_cheat = $69;
   }
   $70 = HEAP32[(gb + (8421928) | 0)>>2]|0;
   (_SDL_UnlockMutex(($70|0))|0);
   STACKTOP = sp;return;
  }
 }
 _DebugMessage(1,(gb + (11219) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _cheat_set_enabled($name,$enabled) {
 $name = $name|0;
 $enabled = $enabled|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mptr = 0, $__mptr1 = 0, $cheat = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $enabled;
 $cheat = 0;
 $5 = (_list_empty((gb + (240) | 0))|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $7 = HEAP32[(gb + (8421928) | 0)>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = HEAP32[(gb + (8421928) | 0)>>2]|0;
  $10 = (_SDL_LockMutex(($9|0))|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = HEAP32[((((gb + (240) | 0)) + 4|0))>>2]|0;
   $__mptr = $12;
   $13 = $__mptr;
   $14 = ((($13)) + -20|0);
   $3 = $14;
   $15 = $3;
   $cheat = $15;
   while(1) {
    $16 = $cheat;
    $17 = ((($16)) + 20|0);
    $18 = ($17|0)!=((gb + (240) | 0)|0);
    if (!($18)) {
     label = 11;
     break;
    }
    $19 = $1;
    $20 = $cheat;
    $21 = HEAP32[$20>>2]|0;
    $22 = (_strcmp(($19|0),($21|0))|0);
    $23 = ($22|0)==(0);
    if ($23) {
     label = 9;
     break;
    }
    $28 = $cheat;
    $29 = ((($28)) + 20|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $__mptr1 = $31;
    $32 = $__mptr1;
    $33 = ((($32)) + -20|0);
    $4 = $33;
    $34 = $4;
    $cheat = $34;
   }
   if ((label|0) == 9) {
    $24 = $2;
    $25 = $cheat;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = $24;
    $27 = HEAP32[(gb + (8421928) | 0)>>2]|0;
    (_SDL_UnlockMutex(($27|0))|0);
    $0 = 1;
    $36 = $0;
    STACKTOP = sp;return ($36|0);
   }
   else if ((label|0) == 11) {
    $35 = HEAP32[(gb + (8421928) | 0)>>2]|0;
    (_SDL_UnlockMutex(($35|0))|0);
    $0 = 0;
    $36 = $0;
    STACKTOP = sp;return ($36|0);
   }
  }
 }
 _DebugMessage(1,(gb + (11278) | 0),$vararg_buffer);
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _cheat_add_new($name,$code_list,$num_codes) {
 $name = $name|0;
 $code_list = $code_list|0;
 $num_codes = $num_codes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cheat = 0, $code = 0, $code1 = 0, $code_count = 0, $cur_addr = 0, $cur_value = 0, $i = 0, $incr_addr = 0, $incr_value = 0, $j = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $code_list;
 $3 = $num_codes;
 $4 = HEAP32[(gb + (8421928) | 0)>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[(gb + (8421928) | 0)>>2]|0;
  $7 = (_SDL_LockMutex(($6|0))|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = $1;
   $10 = (_find_or_create_cheat($9)|0);
   $cheat = $10;
   $11 = $cheat;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = HEAP32[(gb + (8421928) | 0)>>2]|0;
    (_SDL_UnlockMutex(($13|0))|0);
    $0 = 0;
    $103 = $0;
    STACKTOP = sp;return ($103|0);
   }
   $14 = $cheat;
   $15 = ((($14)) + 4|0);
   HEAP32[$15>>2] = 1;
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = $3;
    $18 = ($16|0)<($17|0);
    if (!($18)) {
     break;
    }
    $19 = $i;
    $20 = $2;
    $21 = (($20) + ($19<<3)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 & -65536;
    $24 = ($23|0)==(1342177280);
    L11: do {
     if ($24) {
      $25 = $i;
      $26 = $3;
      $27 = (($26) - 1)|0;
      $28 = ($25|0)<($27|0);
      if ($28) {
       $29 = $i;
       $30 = $2;
       $31 = (($30) + ($29<<3)|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = $32 & 65280;
       $34 = $33 >>> 8;
       $code_count = $34;
       $35 = $i;
       $36 = $2;
       $37 = (($36) + ($35<<3)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 & 255;
       $incr_addr = $39;
       $40 = $i;
       $41 = $2;
       $42 = (($41) + ($40<<3)|0);
       $43 = ((($42)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $incr_value = $44;
       $45 = $i;
       $46 = (($45) + 1)|0;
       $47 = $2;
       $48 = (($47) + ($46<<3)|0);
       $49 = HEAP32[$48>>2]|0;
       $cur_addr = $49;
       $50 = $i;
       $51 = (($50) + 1)|0;
       $52 = $2;
       $53 = (($52) + ($51<<3)|0);
       $54 = ((($53)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $cur_value = $55;
       $56 = $i;
       $57 = (($56) + 1)|0;
       $i = $57;
       $j = 0;
       while(1) {
        $58 = $j;
        $59 = $code_count;
        $60 = ($58|0)<($59|0);
        if (!($60)) {
         break L11;
        }
        $61 = (_malloc(20)|0);
        $code = $61;
        $62 = $cur_addr;
        $63 = $code;
        HEAP32[$63>>2] = $62;
        $64 = $cur_value;
        $65 = $code;
        $66 = ((($65)) + 4|0);
        HEAP32[$66>>2] = $64;
        $67 = $code;
        $68 = ((($67)) + 8|0);
        HEAP32[$68>>2] = -559087616;
        $69 = $code;
        $70 = ((($69)) + 12|0);
        $71 = $cheat;
        $72 = ((($71)) + 12|0);
        _list_add_tail($70,$72);
        $73 = $incr_addr;
        $74 = $cur_addr;
        $75 = (($74) + ($73))|0;
        $cur_addr = $75;
        $76 = $incr_value;
        $77 = $cur_value;
        $78 = (($77) + ($76))|0;
        $cur_value = $78;
        $79 = $j;
        $80 = (($79) + 1)|0;
        $j = $80;
       }
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
    } while(0);
    if ((label|0) == 13) {
     label = 0;
     $81 = (_malloc(20)|0);
     $code1 = $81;
     $82 = $i;
     $83 = $2;
     $84 = (($83) + ($82<<3)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $code1;
     HEAP32[$86>>2] = $85;
     $87 = $i;
     $88 = $2;
     $89 = (($88) + ($87<<3)|0);
     $90 = ((($89)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $code1;
     $93 = ((($92)) + 4|0);
     HEAP32[$93>>2] = $91;
     $94 = $code1;
     $95 = ((($94)) + 8|0);
     HEAP32[$95>>2] = -559087616;
     $96 = $code1;
     $97 = ((($96)) + 12|0);
     $98 = $cheat;
     $99 = ((($98)) + 12|0);
     _list_add_tail($97,$99);
    }
    $100 = $i;
    $101 = (($100) + 1)|0;
    $i = $101;
   }
   $102 = HEAP32[(gb + (8421928) | 0)>>2]|0;
   (_SDL_UnlockMutex(($102|0))|0);
   $0 = 1;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
 }
 _DebugMessage(1,(gb + (11338) | 0),$vararg_buffer);
 $0 = 0;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function _cheat_add_hacks() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cheat_raw = 0, $cheatname = 0, $hack = 0, $i = 0, $input = 0, $num_codes = 0, $saveptr = 0, $token = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $saveptr = sp + 24|0;
 $cheatname = sp + 40|0;
 $hack = sp + 4|0;
 $cheat_raw = 0;
 HEAP32[$saveptr>>2] = 0;
 $i = 0;
 $1 = HEAP32[(gb + (8422180) | 0)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $3 = HEAP32[(gb + (8422180) | 0)>>2]|0;
 $4 = (_strdup(($3|0))|0);
 $cheat_raw = $4;
 $5 = $cheat_raw;
 $6 = ($5|0)!=(0|0);
 L5: do {
  if ($6) {
   $7 = $cheat_raw;
   $input = $7;
   while(1) {
    $8 = $input;
    $9 = (_strtok_compat($8,(gb + (15180) | 0),$saveptr)|0);
    $token = $9;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break L5;
    }
    $input = 0;
    $11 = $i;
    HEAP32[$vararg_buffer>>2] = $11;
    (_snprintf(($cheatname|0),32,((gb + (11394) | 0)|0),($vararg_buffer|0))|0);
    $12 = ((($cheatname)) + 31|0);
    HEAP8[$12>>0] = 0;
    $13 = $token;
    $14 = (_cheat_parse_hacks_code($13,$hack)|0);
    $num_codes = $14;
    $15 = $num_codes;
    $16 = ($15|0)<=(0);
    if ($16) {
     continue;
    }
    $17 = HEAP32[$hack>>2]|0;
    $18 = $num_codes;
    (_cheat_add_new($cheatname,$17,$18)|0);
    $19 = HEAP32[$hack>>2]|0;
    _free(($19|0));
    $20 = $i;
    $21 = (($20) + 1)|0;
    $i = $21;
   }
  }
 } while(0);
 $22 = $cheat_raw;
 _free(($22|0));
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _list_empty($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ($3|0)==($4|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _execute_cheat($address,$value,$old_value) {
 $address = $address|0;
 $value = $value|0;
 $old_value = $old_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split102D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0;
 var $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split522D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $address;
 $2 = $value;
 $3 = $old_value;
 $4 = $1;
 $5 = $4 & -16777216;
 $switch$split2D = ($5|0)<(-788529152);
 L1: do {
  if ($switch$split2D) {
   $switch$split42D = ($5|0)<(-1610612736);
   if ($switch$split42D) {
    $switch$split102D = ($5|0)<(-2013265920);
    if ($switch$split102D) {
     $switch$split222D = ($5|0)<(-2130706432);
     if ($switch$split222D) {
      switch ($5|0) {
      case -2147483648:  {
       label = 2;
       break L1;
       break;
      }
      default: {
       label = 15;
       break L1;
      }
      }
     } else {
      switch ($5|0) {
      case -2130706432:  {
       label = 6;
       break L1;
       break;
      }
      default: {
       label = 15;
       break L1;
      }
      }
     }
    } else {
     $switch$split252D = ($5|0)<(-1996488704);
     if ($switch$split252D) {
      switch ($5|0) {
      case -2013265920:  {
       label = 2;
       break L1;
       break;
      }
      default: {
       label = 15;
       break L1;
      }
      }
     } else {
      switch ($5|0) {
      case -1996488704:  {
       label = 6;
       break L1;
       break;
      }
      default: {
       label = 15;
       break L1;
      }
      }
     }
    }
   }
   $switch$split132D = ($5|0)<(-1476395008);
   if ($switch$split132D) {
    $switch$split282D = ($5|0)<(-1593835520);
    if ($switch$split282D) {
     switch ($5|0) {
     case -1610612736:  {
      label = 2;
      break L1;
      break;
     }
     default: {
      label = 15;
      break L1;
     }
     }
    } else {
     switch ($5|0) {
     case -1593835520:  {
      label = 6;
      break L1;
      break;
     }
     default: {
      label = 15;
      break L1;
     }
     }
    }
   }
   $switch$split312D = ($5|0)<(-1459617792);
   if ($switch$split312D) {
    switch ($5|0) {
    case -1476395008:  {
     label = 2;
     break L1;
     break;
    }
    default: {
     label = 15;
     break L1;
    }
    }
   }
   $switch$split462D = ($5|0)<(-805306368);
   if ($switch$split462D) {
    switch ($5|0) {
    case -1459617792:  {
     label = 6;
     break L1;
     break;
    }
    default: {
     label = 15;
     break L1;
    }
    }
   } else {
    switch ($5|0) {
    case -805306368:  {
     label = 10;
     break L1;
     break;
    }
    default: {
     label = 15;
     break L1;
    }
    }
   }
  } else {
   $switch$split72D = ($5|0)<(-637534208);
   L28: do {
    if ($switch$split72D) {
     $switch$split162D = ($5|0)<(-754974720);
     L30: do {
      if ($switch$split162D) {
       $switch$split342D = ($5|0)<(-771751936);
       if ($switch$split342D) {
        switch ($5|0) {
        case -788529152:  {
         break L30;
         break;
        }
        default: {
         label = 15;
         break L1;
        }
        }
       } else {
        switch ($5|0) {
        case -771751936:  {
         label = 12;
         break L28;
         break;
        }
        default: {
         label = 15;
         break L1;
        }
        }
       }
      } else {
       $switch$split372D = ($5|0)<(-671088640);
       if ($switch$split372D) {
        switch ($5|0) {
        case -754974720:  {
         label = 13;
         break L28;
         break;
        }
        default: {
         label = 15;
         break L1;
        }
        }
       }
       $switch$split492D = ($5|0)<(-654311424);
       if ($switch$split492D) {
        switch ($5|0) {
        case -671088640:  {
         label = 10;
         break L1;
         break;
        }
        default: {
         label = 15;
         break L1;
        }
        }
       } else {
        switch ($5|0) {
        case -654311424:  {
         break L30;
         break;
        }
        default: {
         label = 15;
         break L1;
        }
        }
       }
      }
     } while(0);
     $33 = $1;
     $34 = $2;
     $35 = (_address_equal_to_16bit($33,$34)|0);
     $0 = $35;
     $49 = $0;
     STACKTOP = sp;return ($49|0);
    } else {
     $switch$split192D = ($5|0)<(-301989888);
     if ($switch$split192D) {
      $switch$split402D = ($5|0)<(-620756992);
      if ($switch$split402D) {
       switch ($5|0) {
       case -637534208:  {
        label = 13;
        break L28;
        break;
       }
       default: {
        label = 15;
        break L1;
       }
       }
      } else {
       switch ($5|0) {
       case -620756992:  {
        label = 12;
        break L28;
        break;
       }
       default: {
        label = 15;
        break L1;
       }
       }
      }
     }
     $switch$split432D = ($5|0)<(-268435456);
     if ($switch$split432D) {
      switch ($5|0) {
      case -301989888:  {
       break;
      }
      default: {
       label = 15;
       break L1;
      }
      }
      (_execute_cheat(-251657448,64,0)|0);
      (_execute_cheat(-251657446,0,0)|0);
      $0 = 1;
      $49 = $0;
      STACKTOP = sp;return ($49|0);
     } else {
      $switch$split522D = ($5|0)<(-251658240);
      if ($switch$split522D) {
       switch ($5|0) {
       case -268435456:  {
        label = 2;
        break L1;
        break;
       }
       default: {
        label = 15;
        break L1;
       }
       }
      } else {
       switch ($5|0) {
       case -251658240:  {
        label = 6;
        break L1;
        break;
       }
       default: {
        label = 15;
        break L1;
       }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 12) {
    $36 = $1;
    $37 = $2;
    $38 = $37&255;
    $39 = (_address_equal_to_8bit($36,$38)|0);
    $40 = ($39|0)!=(0);
    $41 = $40 ^ 1;
    $42 = $41&1;
    $0 = $42;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
   else if ((label|0) == 13) {
    $43 = $1;
    $44 = $2;
    $45 = (_address_equal_to_16bit($43,$44)|0);
    $46 = ($45|0)!=(0);
    $47 = $46 ^ 1;
    $48 = $47&1;
    $0 = $48;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  }
 } while(0);
 if ((label|0) == 2) {
  $6 = $3;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $3;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(-559087616);
   if ($10) {
    $11 = $1;
    $12 = (_read_address_8bit($11)|0);
    $13 = $12&255;
    $14 = $3;
    HEAP32[$14>>2] = $13;
   }
  }
  $15 = $1;
  $16 = $2;
  $17 = $16&255;
  _update_address_8bit($15,$17);
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 6) {
  $18 = $3;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(-559087616);
   if ($22) {
    $23 = $1;
    $24 = (_read_address_16bit($23)|0);
    $25 = $24&65535;
    $26 = $3;
    HEAP32[$26>>2] = $25;
   }
  }
  $27 = $1;
  $28 = $2;
  _update_address_16bit($27,$28);
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 10) {
  $29 = $1;
  $30 = $2;
  $31 = $30&255;
  $32 = (_address_equal_to_8bit($29,$31)|0);
  $0 = $32;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 15) {
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _list_del($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $next = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $prev = $5;
 $6 = $prev;
 $7 = $next;
 HEAP32[$7>>2] = $6;
 $8 = $next;
 $9 = $prev;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _find_or_create_cheat($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__mptr = 0, $__mptr1 = 0, $__mptr2 = 0, $__mptr3 = 0, $__mptr4 = 0, $cheat = 0;
 var $code = 0, $found = 0, $safe = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $found = 0;
 $6 = HEAP32[((((gb + (240) | 0)) + 4|0))>>2]|0;
 $__mptr = $6;
 $7 = $__mptr;
 $8 = ((($7)) + -20|0);
 $1 = $8;
 $9 = $1;
 $cheat = $9;
 while(1) {
  $10 = $cheat;
  $11 = ((($10)) + 20|0);
  $12 = ($11|0)!=((gb + (240) | 0)|0);
  if (!($12)) {
   break;
  }
  $13 = $cheat;
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = (_strcmp(($14|0),($15|0))|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 4;
   break;
  }
  $18 = $cheat;
  $19 = ((($18)) + 20|0);
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $__mptr1 = $21;
  $22 = $__mptr1;
  $23 = ((($22)) + -20|0);
  $2 = $23;
  $24 = $2;
  $cheat = $24;
 }
 if ((label|0) == 4) {
  $found = 1;
 }
 $25 = $found;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $61 = (_malloc(28)|0);
  $cheat = $61;
  $62 = $0;
  $63 = (_strdup(($62|0))|0);
  $64 = $cheat;
  HEAP32[$64>>2] = $63;
  $65 = $cheat;
  $66 = ((($65)) + 4|0);
  HEAP32[$66>>2] = 0;
  $67 = $cheat;
  $68 = ((($67)) + 8|0);
  HEAP32[$68>>2] = 0;
  $69 = $cheat;
  $70 = ((($69)) + 12|0);
  _INIT_LIST_HEAD($70);
  $71 = $cheat;
  $72 = ((($71)) + 20|0);
  _list_add_tail($72,(gb + (240) | 0));
  $73 = $cheat;
  STACKTOP = sp;return ($73|0);
 }
 $27 = $cheat;
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $__mptr2 = $30;
 $31 = $__mptr2;
 $32 = ((($31)) + -12|0);
 $3 = $32;
 $33 = $3;
 $code = $33;
 $34 = $code;
 $35 = ((($34)) + 12|0);
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $__mptr3 = $37;
 $38 = $__mptr3;
 $39 = ((($38)) + -12|0);
 $4 = $39;
 $40 = $4;
 $safe = $40;
 while(1) {
  $41 = $code;
  $42 = ((($41)) + 12|0);
  $43 = $cheat;
  $44 = ((($43)) + 12|0);
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $46 = $code;
  $47 = ((($46)) + 12|0);
  _list_del($47);
  $48 = $code;
  _free(($48|0));
  $49 = $safe;
  $code = $49;
  $50 = $safe;
  $51 = ((($50)) + 12|0);
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $__mptr4 = $53;
  $54 = $__mptr4;
  $55 = ((($54)) + -12|0);
  $5 = $55;
  $56 = $5;
  $safe = $56;
 }
 $57 = $cheat;
 $58 = ((($57)) + 4|0);
 HEAP32[$58>>2] = 0;
 $59 = $cheat;
 $60 = ((($59)) + 8|0);
 HEAP32[$60>>2] = 0;
 $73 = $cheat;
 STACKTOP = sp;return ($73|0);
}
function _list_add_tail($new_item,$head) {
 $new_item = $new_item|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $new_item;
 $1 = $head;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $prev = $3;
 $4 = $0;
 $5 = $prev;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $prev;
 $11 = $0;
 HEAP32[$11>>2] = $10;
 $12 = $0;
 $13 = $1;
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _strtok_compat($str,$delim,$saveptr) {
 $str = $str|0;
 $delim = $delim|0;
 $saveptr = $saveptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = $delim;
 $3 = $saveptr;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $3;
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
 }
 $8 = $1;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $10 = $1;
 $11 = $2;
 $12 = (_strspn(($10|0),($11|0))|0);
 $13 = $1;
 $14 = (($13) + ($12)|0);
 $1 = $14;
 $15 = $1;
 $16 = $2;
 $17 = (_strpbrk(($15|0),($16|0))|0);
 $p = $17;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $p;
  $20 = ((($19)) + 1|0);
  $21 = $3;
  HEAP32[$21>>2] = $20;
  $22 = $p;
  HEAP8[$22>>0] = 0;
 } else {
  $23 = $3;
  HEAP32[$23>>2] = 0;
 }
 $24 = $1;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _cheat_parse_hacks_code($code,$hack) {
 $code = $code|0;
 $hack = $hack|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $hackbuf = 0, $input = 0, $num_codes = 0, $ret = 0, $saveptr = 0, $token = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $saveptr = sp + 28|0;
 $1 = $code;
 $2 = $hack;
 HEAP32[$saveptr>>2] = 0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $input = $4;
 $num_codes = 0;
 while(1) {
  $5 = $input;
  $6 = (_strchr(($5|0),44)|0);
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $input;
  $9 = ((($8)) + 1|0);
  $input = $9;
  $10 = $num_codes;
  $11 = (($10) + 1)|0;
  $num_codes = $11;
 }
 $12 = $num_codes;
 $13 = (($12) + 1)|0;
 $num_codes = $13;
 $14 = $num_codes;
 $15 = $14<<3;
 $16 = (_malloc(($15|0))|0);
 $hackbuf = $16;
 $17 = $hackbuf;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $19 = $1;
 $input = $19;
 $num_codes = 0;
 while(1) {
  $20 = $input;
  $21 = (_strtok_compat($20,(gb + (11562) | 0),$saveptr)|0);
  $token = $21;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $input = 0;
  $23 = $token;
  $24 = $num_codes;
  $25 = $hackbuf;
  $26 = (($25) + ($24<<3)|0);
  $27 = $num_codes;
  $28 = $hackbuf;
  $29 = (($28) + ($27<<3)|0);
  $30 = ((($29)) + 4|0);
  HEAP32[$vararg_buffer>>2] = $26;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $30;
  $31 = (_sscanf(($23|0),((gb + (11401) | 0)|0),($vararg_buffer|0))|0);
  $ret = $31;
  $32 = $ret;
  $33 = ($32|0)==(2);
  if (!($33)) {
   continue;
  }
  $34 = $num_codes;
  $35 = (($34) + 1)|0;
  $num_codes = $35;
 }
 $36 = $num_codes;
 $37 = ($36|0)==(0);
 $38 = $hackbuf;
 if ($37) {
  _free(($38|0));
 } else {
  $39 = $2;
  HEAP32[$39>>2] = $38;
 }
 $40 = $num_codes;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _INIT_LIST_HEAD($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = $0;
 $5 = $0;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _read_address_8bit($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 16777215;
 $3 = $2 ^ 3;
 $4 = ((gb + (21216) | 0) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 STACKTOP = sp;return ($5|0);
}
function _update_address_8bit($address,$new_value) {
 $address = $address|0;
 $new_value = $new_value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $new_value;
 $2 = $1;
 $3 = $0;
 $4 = $3 & 16777215;
 $5 = $4 ^ 3;
 $6 = ((gb + (21216) | 0) + ($5)|0);
 HEAP8[$6>>0] = $2;
 $7 = $0;
 _invalidate_r4300_cached_code($7,1);
 STACKTOP = sp;return;
}
function _read_address_16bit($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 16777215;
 $3 = $2 ^ 2;
 $4 = ((gb + (21216) | 0) + ($3)|0);
 $5 = HEAP16[$4>>1]|0;
 STACKTOP = sp;return ($5|0);
}
function _update_address_16bit($address,$new_value) {
 $address = $address|0;
 $new_value = $new_value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $new_value;
 $2 = $1;
 $3 = $0;
 $4 = $3 & 16777215;
 $5 = $4 ^ 2;
 $6 = ((gb + (21216) | 0) + ($5)|0);
 HEAP16[$6>>1] = $2;
 $7 = $0;
 $8 = $7 & -16777217;
 $0 = $8;
 $9 = $0;
 _invalidate_r4300_cached_code($9,2);
 STACKTOP = sp;return;
}
function _address_equal_to_8bit($address,$value) {
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $value;
 $2 = $0;
 $3 = $2 & 16777215;
 $4 = $3 ^ 3;
 $5 = ((gb + (21216) | 0) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $value_read = $6;
 $7 = $value_read;
 $8 = $7&255;
 $9 = $1;
 $10 = $9&255;
 $11 = ($8|0)==($10|0);
 $12 = $11&1;
 STACKTOP = sp;return ($12|0);
}
function _address_equal_to_16bit($address,$value) {
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $value;
 $2 = $0;
 $3 = $2 & 16777215;
 $4 = $3 ^ 2;
 $5 = ((gb + (21216) | 0) + ($4)|0);
 $6 = HEAP16[$5>>1]|0;
 $value_read = $6;
 $7 = $value_read;
 $8 = $7&65535;
 $9 = $1;
 $10 = $9&65535;
 $11 = ($8|0)==($10|0);
 $12 = $11&1;
 STACKTOP = sp;return ($12|0);
}
function _open_eep_file($eep,$filename) {
 $eep = $eep|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $eep;
 $1 = $filename;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 2048|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = ((($5)) + 2048|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (_read_from_file($7,$8,2048)|0);
 switch ($9|0) {
 case 1:  {
  $10 = $0;
  $11 = ((($10)) + 2048|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(5,(gb + (11411) | 0),$vararg_buffer);
  $13 = $0;
  _format_eeprom($13,2048);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $14 = $0;
  $15 = ((($14)) + 2048|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  _DebugMessage(2,(gb + (11454) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _close_eep_file($eep) {
 $eep = $eep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eep;
 $1 = $0;
 $2 = ((($1)) + 2048|0);
 $3 = HEAP32[$2>>2]|0;
 _free(($3|0));
 STACKTOP = sp;return;
}
function _eep_file_ptr($eep) {
 $eep = $eep|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eep;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _save_eep_file($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eep = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $opaque;
 $1 = $0;
 $eep = $1;
 $2 = $eep;
 $3 = ((($2)) + 2048|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $eep;
 $6 = (_write_to_file($4,$5,2048)|0);
 switch ($6|0) {
 case 1:  {
  $7 = $eep;
  $8 = ((($7)) + 2048|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _DebugMessage(2,(gb + (11486) | 0),$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $10 = $eep;
  $11 = ((($10)) + 2048|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  _DebugMessage(2,(gb + (11529) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _event_initialize() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $NumJoysticks = 0, $device = 0, $i = 0, $j = 0, $joy_max = 0, $joy_min = 0, $multi_event_str = 0, $phrase_str = 0, $thisJoy = 0, $tokenized_event_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tokenized_event_str = sp + 40|0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(12);
  if (!($1)) {
   break;
  }
  $j = 0;
  while(1) {
   $2 = $j;
   $3 = ($2|0)<(2);
   if (!($3)) {
    break;
   }
   $4 = $j;
   $5 = $i;
   $6 = ((gb + (8421972) | 0) + ($5<<3)|0);
   $7 = (($6) + ($4<<2)|0);
   HEAP32[$7>>2] = 0;
   $8 = $j;
   $9 = (($8) + 1)|0;
   $j = $9;
  }
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = (_SDL_NumJoysticks()|0);
 $NumJoysticks = $12;
 $13 = $NumJoysticks;
 $14 = ($13|0)>(0);
 if (!($14)) {
  _SDL_SetEventFilter(((fb + (515) | 0)|0),(0|0));
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(12);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[(gb + (8422100) | 0)>>2]|0;
  $18 = $i;
  $19 = ((gb + (248) | 0) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_ConfigGetParamString($17,$20)|0);
  $multi_event_str = $21;
  $22 = $multi_event_str;
  $23 = ($22|0)==(0|0);
  L15: do {
   if (!($23)) {
    $24 = $multi_event_str;
    $25 = (_strlen(($24|0))|0);
    $26 = ($25>>>0)<(4);
    if (!($26)) {
     $27 = $multi_event_str;
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = ($29|0)!=(74);
     if (!($30)) {
      $31 = $multi_event_str;
      (_strncpy(($tokenized_event_str|0),($31|0),127)|0);
      $32 = ((($tokenized_event_str)) + 127|0);
      HEAP8[$32>>0] = 0;
      $33 = (_strtok(($tokenized_event_str|0),((gb + (11562) | 0)|0))|0);
      $phrase_str = $33;
      L19: while(1) {
       $34 = $phrase_str;
       $35 = ($34|0)!=(0|0);
       if (!($35)) {
        break L15;
       }
       $36 = $phrase_str;
       $37 = (_strlen(($36|0))|0);
       $38 = ($37>>>0)<(4);
       if (!($38)) {
        $39 = $phrase_str;
        $40 = HEAP8[$39>>0]|0;
        $41 = $40 << 24 >> 24;
        $42 = ($41|0)!=(74);
        if (!($42)) {
         $44 = $phrase_str;
         $45 = ((($44)) + 1|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = $46 << 24 >> 24;
         $48 = ($47|0)==(42);
         do {
          if ($48) {
           $joy_min = 0;
           $49 = $NumJoysticks;
           $joy_max = $49;
          } else {
           $50 = $phrase_str;
           $51 = ((($50)) + 1|0);
           $52 = HEAP8[$51>>0]|0;
           $53 = $52 << 24 >> 24;
           $54 = ($53|0)>=(48);
           if ($54) {
            $55 = $phrase_str;
            $56 = ((($55)) + 1|0);
            $57 = HEAP8[$56>>0]|0;
            $58 = $57 << 24 >> 24;
            $59 = ($58|0)<=(57);
            if ($59) {
             $60 = $phrase_str;
             $61 = ((($60)) + 1|0);
             $62 = HEAP8[$61>>0]|0;
             $63 = $62 << 24 >> 24;
             $64 = (($63) - 48)|0;
             $joy_max = $64;
             $joy_min = $64;
             break;
            }
           }
           $65 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
           $phrase_str = $65;
           continue L19;
          }
         } while(0);
         $66 = $joy_min;
         $device = $66;
         while(1) {
          $67 = $device;
          $68 = $joy_max;
          $69 = ($67|0)<=($68|0);
          if (!($69)) {
           break;
          }
          $70 = (_SDL_WasInit(512)|0);
          $71 = ($70|0)!=(0);
          if (!($71)) {
           (_SDL_InitSubSystem(512)|0);
          }
          $72 = $device;
          $73 = (_SDL_JoystickOpen(($72|0))|0);
          $thisJoy = $73;
          $74 = $thisJoy;
          $75 = (_SDL_JoystickInstanceID(($74|0))|0);
          $76 = $device;
          $77 = ((gb + (8421932) | 0) + ($76<<2)|0);
          HEAP32[$77>>2] = $75;
          $78 = $device;
          $79 = (($78) + 1)|0;
          $device = $79;
         }
         $80 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
         $phrase_str = $80;
         continue;
        }
       }
       $43 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
       $phrase_str = $43;
      }
     }
    }
   }
  } while(0);
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 _SDL_SetEventFilter(((fb + (515) | 0)|0),(0|0));
 STACKTOP = sp;return;
}
function _event_set_core_defaults() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $bSaveConfig = 0, $fConfigParamsVersion = 0, $fVersion = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $fConfigParamsVersion = sp + 48|0;
 $fVersion = sp + 40|0;
 $bSaveConfig = 0;
 $1 = (_ConfigOpenSection((gb + (11564) | 0),(gb + (8422100) | 0))|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $4 = ($3|0)==(0|0);
 $or$cond = $2 | $4;
 if ($or$cond) {
  _DebugMessage(1,(gb + (11575) | 0),$vararg_buffer);
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 $5 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $6 = (_ConfigGetParameter($5,(gb + (11617) | 0),2,$fConfigParamsVersion,4)|0);
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   _DebugMessage(2,(gb + (11625) | 0),$vararg_buffer2);
   (_ConfigDeleteSection((gb + (11564) | 0))|0);
   (_ConfigOpenSection((gb + (11564) | 0),(gb + (8422100) | 0))|0);
   $bSaveConfig = 1;
  } else {
   $8 = +HEAPF32[$fConfigParamsVersion>>2];
   $9 = (~~(($8)));
   $10 = ($9|0)!=(1);
   $11 = +HEAPF32[$fConfigParamsVersion>>2];
   $12 = $11;
   if ($10) {
    HEAPF64[$vararg_buffer4>>3] = $12;
    $vararg_ptr6 = ((($vararg_buffer4)) + 8|0);
    HEAPF64[$vararg_ptr6>>3] = 1.0;
    _DebugMessage(2,(gb + (11693) | 0),$vararg_buffer4);
    (_ConfigDeleteSection((gb + (11564) | 0))|0);
    (_ConfigOpenSection((gb + (11564) | 0),(gb + (8422100) | 0))|0);
    $bSaveConfig = 1;
    break;
   }
   $13 = 1.0 - $12;
   $14 = $13 >= 9.9999997473787516E-5;
   if ($14) {
    HEAPF32[$fVersion>>2] = 1.0;
    $15 = HEAP32[(gb + (8422100) | 0)>>2]|0;
    (_ConfigSetParameter($15,(gb + (11617) | 0),2,$fVersion)|0);
    $16 = +HEAPF32[$fVersion>>2];
    $17 = $16;
    HEAPF64[$vararg_buffer7>>3] = $17;
    _DebugMessage(3,(gb + (11786) | 0),$vararg_buffer7);
    $bSaveConfig = 1;
   }
  }
 } while(0);
 $18 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 (_ConfigSetDefaultFloat($18,(gb + (11617) | 0),1.0,(gb + (11856) | 0))|0);
 $19 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $20 = (_sdl_native2keysym(41)|0);
 $21 = $20&65535;
 (_ConfigSetDefaultInt($19,(gb + (11958) | 0),$21,(gb + (11975) | 0))|0);
 $22 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $23 = (_sdl_native2keysym(512)|0);
 $24 = $23&65535;
 (_ConfigSetDefaultInt($22,(gb + (12012) | 0),$24,(gb + (12035) | 0))|0);
 $25 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $26 = (_sdl_native2keysym(62)|0);
 $27 = $26&65535;
 (_ConfigSetDefaultInt($25,(gb + (12094) | 0),$27,(gb + (12117) | 0))|0);
 $28 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $29 = (_sdl_native2keysym(64)|0);
 $30 = $29&65535;
 (_ConfigSetDefaultInt($28,(gb + (12158) | 0),$30,(gb + (12181) | 0))|0);
 $31 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $32 = (_sdl_native2keysym(0)|0);
 $33 = $32&65535;
 (_ConfigSetDefaultInt($31,(gb + (12223) | 0),$33,(gb + (12250) | 0))|0);
 $34 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $35 = (_sdl_native2keysym(66)|0);
 $36 = $35&65535;
 (_ConfigSetDefaultInt($34,(gb + (12295) | 0),$36,(gb + (12313) | 0))|0);
 $37 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $38 = (_sdl_native2keysym(67)|0);
 $39 = $38&65535;
 (_ConfigSetDefaultInt($37,(gb + (12351) | 0),$39,(gb + (12374) | 0))|0);
 $40 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $41 = (_sdl_native2keysym(68)|0);
 $42 = $41&65535;
 (_ConfigSetDefaultInt($40,(gb + (12415) | 0),$42,(gb + (12436) | 0))|0);
 $43 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $44 = (_sdl_native2keysym(69)|0);
 $45 = $44&65535;
 (_ConfigSetDefaultInt($43,(gb + (12476) | 0),$45,(gb + (12499) | 0))|0);
 $46 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $47 = (_sdl_native2keysym(19)|0);
 $48 = $47&65535;
 (_ConfigSetDefaultInt($46,(gb + (12534) | 0),$48,(gb + (12552) | 0))|0);
 $49 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $50 = (_sdl_native2keysym(16)|0);
 $51 = $50&65535;
 (_ConfigSetDefaultInt($49,(gb + (12588) | 0),$51,(gb + (12605) | 0))|0);
 $52 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $53 = (_sdl_native2keysym(48)|0);
 $54 = $53&65535;
 (_ConfigSetDefaultInt($52,(gb + (12646) | 0),$54,(gb + (12674) | 0))|0);
 $55 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $56 = (_sdl_native2keysym(47)|0);
 $57 = $56&65535;
 (_ConfigSetDefaultInt($55,(gb + (12711) | 0),$57,(gb + (12739) | 0))|0);
 $58 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $59 = (_sdl_native2keysym(9)|0);
 $60 = $59&65535;
 (_ConfigSetDefaultInt($58,(gb + (12776) | 0),$60,(gb + (12801) | 0))|0);
 $61 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $62 = (_sdl_native2keysym(56)|0);
 $63 = $62&65535;
 (_ConfigSetDefaultInt($61,(gb + (12846) | 0),$63,(gb + (12872) | 0))|0);
 $64 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $65 = (_sdl_native2keysym(10)|0);
 $66 = $65&65535;
 (_ConfigSetDefaultInt($64,(gb + (12922) | 0),$66,(gb + (12944) | 0))|0);
 $67 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $68 = HEAP32[((((gb + (248) | 0)) + 4|0))>>2]|0;
 (_ConfigSetDefaultString($67,$68,(gb + (23109844) | 0),(gb + (12990) | 0))|0);
 $69 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $70 = HEAP32[(gb + (248) | 0)>>2]|0;
 (_ConfigSetDefaultString($69,$70,(gb + (23109844) | 0),(gb + (13038) | 0))|0);
 $71 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $72 = HEAP32[((((gb + (248) | 0)) + 12|0))>>2]|0;
 (_ConfigSetDefaultString($71,$72,(gb + (23109844) | 0),(gb + (13108) | 0))|0);
 $73 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $74 = HEAP32[((((gb + (248) | 0)) + 16|0))>>2]|0;
 (_ConfigSetDefaultString($73,$74,(gb + (23109844) | 0),(gb + (13160) | 0))|0);
 $75 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $76 = HEAP32[((((gb + (248) | 0)) + 20|0))>>2]|0;
 (_ConfigSetDefaultString($75,$76,(gb + (23109844) | 0),(gb + (13213) | 0))|0);
 $77 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $78 = HEAP32[((((gb + (248) | 0)) + 24|0))>>2]|0;
 (_ConfigSetDefaultString($77,$78,(gb + (23109844) | 0),(gb + (13269) | 0))|0);
 $79 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $80 = HEAP32[((((gb + (248) | 0)) + 8|0))>>2]|0;
 (_ConfigSetDefaultString($79,$80,(gb + (23109844) | 0),(gb + (13315) | 0))|0);
 $81 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $82 = HEAP32[((((gb + (248) | 0)) + 28|0))>>2]|0;
 (_ConfigSetDefaultString($81,$82,(gb + (23109844) | 0),(gb + (13362) | 0))|0);
 $83 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $84 = HEAP32[((((gb + (248) | 0)) + 32|0))>>2]|0;
 (_ConfigSetDefaultString($83,$84,(gb + (23109844) | 0),(gb + (13414) | 0))|0);
 $85 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $86 = HEAP32[((((gb + (248) | 0)) + 36|0))>>2]|0;
 (_ConfigSetDefaultString($85,$86,(gb + (23109844) | 0),(gb + (13462) | 0))|0);
 $87 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $88 = HEAP32[((((gb + (248) | 0)) + 40|0))>>2]|0;
 (_ConfigSetDefaultString($87,$88,(gb + (23109844) | 0),(gb + (13510) | 0))|0);
 $89 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $90 = HEAP32[((((gb + (248) | 0)) + 44|0))>>2]|0;
 (_ConfigSetDefaultString($89,$90,(gb + (23109844) | 0),(gb + (13549) | 0))|0);
 $91 = $bSaveConfig;
 $92 = ($91|0)!=(0);
 if ($92) {
  (_ConfigSaveSection((gb + (11564) | 0))|0);
 }
 $0 = 1;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _event_sdl_keydown($keysym,$keymod) {
 $keysym = $keysym|0;
 $keymod = $keymod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $slot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $keysym;
 $1 = $keymod;
 $2 = $0;
 $3 = ($2|0)==(40);
 if ($3) {
  $4 = $1;
  $5 = $4 & 768;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2]|0;
   mftCall_v($7|0);
   STACKTOP = sp;return;
  }
 }
 $8 = $0;
 $9 = (_get_saveslot_from_keysym($8)|0);
 $slot = $9;
 $10 = ($9|0)>=(0);
 if ($10) {
  $11 = $slot;
  _main_state_set_slot($11);
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $14 = (_ConfigGetParamInt($13,(gb + (11958) | 0))|0);
 $15 = $14&65535;
 $16 = (_sdl_keysym2native($15)|0);
 $17 = $16&65535;
 $18 = ($12|0)==($17|0);
 if ($18) {
  _main_stop();
  STACKTOP = sp;return;
 }
 $19 = $0;
 $20 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $21 = (_ConfigGetParamInt($20,(gb + (12012) | 0))|0);
 $22 = $21&65535;
 $23 = (_sdl_keysym2native($22)|0);
 $24 = $23&65535;
 $25 = ($19|0)==($24|0);
 if ($25) {
  $26 = HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2]|0;
  mftCall_v($26|0);
  STACKTOP = sp;return;
 }
 $27 = $0;
 $28 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $29 = (_ConfigGetParamInt($28,(gb + (12094) | 0))|0);
 $30 = $29&65535;
 $31 = (_sdl_keysym2native($30)|0);
 $32 = $31&65535;
 $33 = ($27|0)==($32|0);
 if ($33) {
  _main_state_save(0,0);
  STACKTOP = sp;return;
 }
 $34 = $0;
 $35 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $36 = (_ConfigGetParamInt($35,(gb + (12158) | 0))|0);
 $37 = $36&65535;
 $38 = (_sdl_keysym2native($37)|0);
 $39 = $38&65535;
 $40 = ($34|0)==($39|0);
 if ($40) {
  _main_state_load(0);
  STACKTOP = sp;return;
 }
 $41 = $0;
 $42 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $43 = (_ConfigGetParamInt($42,(gb + (12223) | 0))|0);
 $44 = $43&65535;
 $45 = (_sdl_keysym2native($44)|0);
 $46 = $45&65535;
 $47 = ($41|0)==($46|0);
 if ($47) {
  _main_state_inc_slot();
  STACKTOP = sp;return;
 }
 $48 = $0;
 $49 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $50 = (_ConfigGetParamInt($49,(gb + (12295) | 0))|0);
 $51 = $50&65535;
 $52 = (_sdl_keysym2native($51)|0);
 $53 = $52&65535;
 $54 = ($48|0)==($53|0);
 if ($54) {
  _reset_soft();
  STACKTOP = sp;return;
 }
 $55 = $0;
 $56 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $57 = (_ConfigGetParamInt($56,(gb + (12351) | 0))|0);
 $58 = $57&65535;
 $59 = (_sdl_keysym2native($58)|0);
 $60 = $59&65535;
 $61 = ($55|0)==($60|0);
 if ($61) {
  _main_speeddown(5);
  STACKTOP = sp;return;
 }
 $62 = $0;
 $63 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $64 = (_ConfigGetParamInt($63,(gb + (12415) | 0))|0);
 $65 = $64&65535;
 $66 = (_sdl_keysym2native($65)|0);
 $67 = $66&65535;
 $68 = ($62|0)==($67|0);
 if ($68) {
  _main_speedup(5);
  STACKTOP = sp;return;
 }
 $69 = $0;
 $70 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $71 = (_ConfigGetParamInt($70,(gb + (12476) | 0))|0);
 $72 = $71&65535;
 $73 = (_sdl_keysym2native($72)|0);
 $74 = $73&65535;
 $75 = ($69|0)==($74|0);
 if ($75) {
  _main_take_next_screenshot();
  STACKTOP = sp;return;
 }
 $76 = $0;
 $77 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $78 = (_ConfigGetParamInt($77,(gb + (12534) | 0))|0);
 $79 = $78&65535;
 $80 = (_sdl_keysym2native($79)|0);
 $81 = $80&65535;
 $82 = ($76|0)==($81|0);
 if ($82) {
  _main_toggle_pause();
  STACKTOP = sp;return;
 }
 $83 = $0;
 $84 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $85 = (_ConfigGetParamInt($84,(gb + (12588) | 0))|0);
 $86 = $85&65535;
 $87 = (_sdl_keysym2native($86)|0);
 $88 = $87&65535;
 $89 = ($83|0)==($88|0);
 if ($89) {
  (_main_volume_mute()|0);
  STACKTOP = sp;return;
 }
 $90 = $0;
 $91 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $92 = (_ConfigGetParamInt($91,(gb + (12646) | 0))|0);
 $93 = $92&65535;
 $94 = (_sdl_keysym2native($93)|0);
 $95 = $94&65535;
 $96 = ($90|0)==($95|0);
 if ($96) {
  (_main_volume_up()|0);
  STACKTOP = sp;return;
 }
 $97 = $0;
 $98 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $99 = (_ConfigGetParamInt($98,(gb + (12711) | 0))|0);
 $100 = $99&65535;
 $101 = (_sdl_keysym2native($100)|0);
 $102 = $101&65535;
 $103 = ($97|0)==($102|0);
 if ($103) {
  (_main_volume_down()|0);
  STACKTOP = sp;return;
 }
 $104 = $0;
 $105 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $106 = (_ConfigGetParamInt($105,(gb + (12776) | 0))|0);
 $107 = $106&65535;
 $108 = (_sdl_keysym2native($107)|0);
 $109 = $108&65535;
 $110 = ($104|0)==($109|0);
 if ($110) {
  _main_set_fastforward(1);
  STACKTOP = sp;return;
 }
 $111 = $0;
 $112 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $113 = (_ConfigGetParamInt($112,(gb + (12846) | 0))|0);
 $114 = $113&65535;
 $115 = (_sdl_keysym2native($114)|0);
 $116 = $115&65535;
 $117 = ($111|0)==($116|0);
 if ($117) {
  _main_advance_one();
  STACKTOP = sp;return;
 }
 $118 = $0;
 $119 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $120 = (_ConfigGetParamInt($119,(gb + (12922) | 0))|0);
 $121 = $120&65535;
 $122 = (_sdl_keysym2native($121)|0);
 $123 = $122&65535;
 $124 = ($118|0)==($123|0);
 if ($124) {
  _event_set_gameshark(1);
  STACKTOP = sp;return;
 } else {
  $125 = HEAP32[((((gb + (10521668) | 0)) + 28|0))>>2]|0;
  $126 = $1;
  $127 = $0;
  mftCall_vii($125|0,($126|0),($127|0));
  STACKTOP = sp;return;
 }
}
function _event_set_gameshark($active) {
 $active = $active|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $active;
 $1 = $0;
 $2 = ($1|0)!=(0);
 $3 = $2 ^ 1;
 $4 = $3&1;
 $5 = HEAP32[(gb + (8422104) | 0)>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = $6 ^ 1;
 $8 = $7&1;
 $9 = ($4|0)==($8|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = ($10|0)!=(0);
 $12 = $11 ? 1 : 0;
 HEAP32[(gb + (8422104) | 0)>>2] = $12;
 $13 = HEAP32[(gb + (8422104) | 0)>>2]|0;
 _StateChanged(9,$13);
 STACKTOP = sp;return;
}
function _event_sdl_keyup($keysym,$keymod) {
 $keysym = $keysym|0;
 $keymod = $keymod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $keysym;
 $1 = $keymod;
 $2 = $0;
 $3 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $4 = (_ConfigGetParamInt($3,(gb + (11958) | 0))|0);
 $5 = $4&65535;
 $6 = (_sdl_keysym2native($5)|0);
 $7 = $6&65535;
 $8 = ($2|0)==($7|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $11 = (_ConfigGetParamInt($10,(gb + (12776) | 0))|0);
 $12 = $11&65535;
 $13 = (_sdl_keysym2native($12)|0);
 $14 = $13&65535;
 $15 = ($9|0)==($14|0);
 if ($15) {
  _main_set_fastforward(0);
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $18 = (_ConfigGetParamInt($17,(gb + (12922) | 0))|0);
 $19 = $18&65535;
 $20 = (_sdl_keysym2native($19)|0);
 $21 = $20&65535;
 $22 = ($16|0)==($21|0);
 if ($22) {
  _event_set_gameshark(0);
  STACKTOP = sp;return;
 } else {
  $23 = HEAP32[((((gb + (10521668) | 0)) + 32|0))>>2]|0;
  $24 = $1;
  $25 = $0;
  mftCall_vii($23|0,($24|0),($25|0));
  STACKTOP = sp;return;
 }
}
function _event_gameshark_active() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8422104) | 0)>>2]|0;
 return ($0|0);
}
function _event_sdl_filter($userdata,$event) {
 $userdata = $userdata|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $action = 0, $cmd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $userdata;
 $2 = $event;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 256:  {
   _main_stop();
   break;
  }
  case 768:  {
   $5 = $2;
   $6 = ((($5)) + 13|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)!=(0);
   if ($8) {
    $0 = 0;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
   } else {
    $9 = $2;
    $10 = ((($9)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $2;
    $13 = ((($12)) + 16|0);
    $14 = ((($13)) + 8|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15&65535;
    _event_sdl_keydown($11,$16);
    $0 = 0;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
   }
   break;
  }
  case 769:  {
   $17 = $2;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $2;
   $21 = ((($20)) + 16|0);
   $22 = ((($21)) + 8|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   _event_sdl_keyup($19,$24);
   $0 = 0;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
   break;
  }
  case 512:  {
   $25 = $2;
   $26 = ((($25)) + 12|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   switch ($28|0) {
   case 5:  {
    $29 = HEAP32[((((gb + (10521540) | 0)) + 56|0))>>2]|0;
    $30 = $2;
    $31 = ((($30)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $2;
    $34 = ((($33)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    mftCall_vii($29|0,($32|0),($35|0));
    $0 = 0;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
    break;
   }
   case 4:  {
    $36 = HEAP32[((((gb + (10521540) | 0)) + 12|0))>>2]|0;
    $37 = $2;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $2;
    $41 = ((($40)) + 20|0);
    $42 = HEAP32[$41>>2]|0;
    mftCall_vii($36|0,($39|0),($42|0));
    $0 = 0;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 1538: case 1540: case 1539: case 1536:  {
   $cmd = 0;
   while(1) {
    $43 = $cmd;
    $44 = ($43|0)<(12);
    if (!($44)) {
     break;
    }
    $45 = $2;
    $46 = $cmd;
    $47 = (_MatchJoyCommand($45,$46)|0);
    $action = $47;
    $48 = $action;
    $49 = ($48|0)==(1);
    do {
     if ($49) {
      $50 = $cmd;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2]|0;
       mftCall_v($52|0);
       break;
      }
      $53 = $cmd;
      $54 = ($53|0)==(1);
      if ($54) {
       _main_stop();
       break;
      }
      $55 = $cmd;
      $56 = ($55|0)==(2);
      if ($56) {
       _main_toggle_pause();
       break;
      }
      $57 = $cmd;
      $58 = ($57|0)==(3);
      if ($58) {
       _main_state_save(1,0);
       break;
      }
      $59 = $cmd;
      $60 = ($59|0)==(4);
      if ($60) {
       _main_state_load(0);
       break;
      }
      $61 = $cmd;
      $62 = ($61|0)==(5);
      if ($62) {
       _main_state_inc_slot();
       break;
      }
      $63 = $cmd;
      $64 = ($63|0)==(6);
      if ($64) {
       _main_take_next_screenshot();
       break;
      }
      $65 = $cmd;
      $66 = ($65|0)==(7);
      if ($66) {
       (_main_volume_mute()|0);
       break;
      }
      $67 = $cmd;
      $68 = ($67|0)==(9);
      if ($68) {
       (_main_volume_down()|0);
       break;
      }
      $69 = $cmd;
      $70 = ($69|0)==(8);
      if ($70) {
       (_main_volume_up()|0);
       break;
      }
      $71 = $cmd;
      $72 = ($71|0)==(10);
      if ($72) {
       _main_set_fastforward(1);
       break;
      }
      $73 = $cmd;
      $74 = ($73|0)==(11);
      if ($74) {
       _event_set_gameshark(1);
      }
     } else {
      $75 = $action;
      $76 = ($75|0)==(-1);
      if ($76) {
       $77 = $cmd;
       $78 = ($77|0)==(10);
       if ($78) {
        _main_set_fastforward(0);
        break;
       }
       $79 = $cmd;
       $80 = ($79|0)==(11);
       if ($80) {
        _event_set_gameshark(0);
       }
      }
     }
    } while(0);
    $81 = $cmd;
    $82 = (($81) + 1)|0;
    $cmd = $82;
   }
   $0 = 0;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $0 = 1;
 $83 = $0;
 STACKTOP = sp;return ($83|0);
}
function _sdl_native2keysym($native) {
 $native = $native|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $native;
 $1 = $0;
 $2 = (_sdl_scancode2keysym($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _get_saveslot_from_keysym($keysym) {
 $keysym = $keysym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $keysym;
 $2 = $1;
 do {
  switch ($2|0) {
  case 39:  {
   $0 = 0;
   break;
  }
  case 30:  {
   $0 = 1;
   break;
  }
  case 31:  {
   $0 = 2;
   break;
  }
  case 32:  {
   $0 = 3;
   break;
  }
  case 33:  {
   $0 = 4;
   break;
  }
  case 34:  {
   $0 = 5;
   break;
  }
  case 35:  {
   $0 = 6;
   break;
  }
  case 36:  {
   $0 = 7;
   break;
  }
  case 37:  {
   $0 = 8;
   break;
  }
  case 38:  {
   $0 = 9;
   break;
  }
  default: {
   $0 = -1;
  }
  }
 } while(0);
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _sdl_keysym2native($keysym) {
 $keysym = $keysym|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $keysym;
 $1 = $0;
 $2 = (_sdl_keysym2scancode($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _MatchJoyCommand($event,$cmd) {
 $event = $event|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $action_str = 0, $active_mask = 0, $axis_direction = 0, $dev_number = 0;
 var $has_hotkey = 0, $hotkey_str = 0, $iHotkey = 0, $input_number = 0, $input_value = 0, $multi_event_str = 0, $new_cmd_value = 0, $orig_cmd_value = 0, $phrase_str = 0, $tokenized_event_str = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $input_number = sp + 52|0;
 $input_value = sp + 48|0;
 $axis_direction = sp + 208|0;
 $tokenized_event_str = sp + 80|0;
 $1 = $event;
 $2 = $cmd;
 $3 = HEAP32[(gb + (8422100) | 0)>>2]|0;
 $4 = $2;
 $5 = ((gb + (248) | 0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_ConfigGetParamString($3,$6)|0);
 $multi_event_str = $7;
 $8 = $2;
 $9 = ((gb + (8421972) | 0) + ($8<<3)|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 1;
 $13 = $2;
 $14 = ((gb + (8421972) | 0) + ($13<<3)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $12 | $15;
 $orig_cmd_value = $16;
 $17 = $multi_event_str;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = $multi_event_str;
  $20 = (_strlen(($19|0))|0);
  $21 = ($20>>>0)<(4);
  if (!($21)) {
   $22 = $multi_event_str;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(74);
   if (!($25)) {
    $26 = $multi_event_str;
    (_strncpy(($tokenized_event_str|0),($26|0),127)|0);
    $27 = ((($tokenized_event_str)) + 127|0);
    HEAP8[$27>>0] = 0;
    $28 = (_strtok(($tokenized_event_str|0),((gb + (11562) | 0)|0))|0);
    $phrase_str = $28;
    L5: while(1) {
     $29 = $phrase_str;
     $30 = ($29|0)!=(0|0);
     if (!($30)) {
      label = 66;
      break;
     }
     $has_hotkey = 0;
     $31 = $phrase_str;
     $32 = (_strlen(($31|0))|0);
     $33 = ($32>>>0)<(4);
     if (!($33)) {
      $34 = $phrase_str;
      $35 = HEAP8[$34>>0]|0;
      $36 = $35 << 24 >> 24;
      $37 = ($36|0)!=(74);
      if (!($37)) {
       $39 = $phrase_str;
       $40 = ((($39)) + 1|0);
       $41 = HEAP8[$40>>0]|0;
       $42 = $41 << 24 >> 24;
       $43 = ($42|0)==(42);
       do {
        if ($43) {
         $dev_number = -1;
        } else {
         $44 = $phrase_str;
         $45 = ((($44)) + 1|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = $46 << 24 >> 24;
         $48 = ($47|0)>=(48);
         if ($48) {
          $49 = $phrase_str;
          $50 = ((($49)) + 1|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = $51 << 24 >> 24;
          $53 = ($52|0)<=(57);
          if ($53) {
           $54 = $phrase_str;
           $55 = ((($54)) + 1|0);
           $56 = HEAP8[$55>>0]|0;
           $57 = $56 << 24 >> 24;
           $58 = (($57) - 48)|0;
           $dev_number = $58;
           $59 = $dev_number;
           $60 = ((gb + (8421932) | 0) + ($59<<2)|0);
           $61 = HEAP32[$60>>2]|0;
           $dev_number = $61;
           break;
          }
         }
         $62 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
         $phrase_str = $62;
         continue L5;
        }
       } while(0);
       $iHotkey = 0;
       while(1) {
        $63 = $iHotkey;
        $64 = ($63|0)<(2);
        if (!($64)) {
         break;
        }
        $action_str = 0;
        $65 = $iHotkey;
        $66 = ($65|0)==(0);
        $67 = $phrase_str;
        if ($66) {
         $68 = ((($67)) + 2|0);
         $action_str = $68;
        } else {
         $69 = (_strchr(($67|0),47)|0);
         $hotkey_str = $69;
         $70 = $hotkey_str;
         $71 = ($70|0)==(0|0);
         if ($71) {
          break;
         }
         $72 = $hotkey_str;
         $73 = (_strlen(($72|0))|0);
         $74 = ($73>>>0)<(3);
         if ($74) {
          break;
         }
         $75 = $hotkey_str;
         $76 = ((($75)) + 1|0);
         $action_str = $76;
         $has_hotkey = 1;
        }
        $77 = $action_str;
        $78 = HEAP8[$77>>0]|0;
        $79 = $78 << 24 >> 24;
        L28: do {
         switch ($79|0) {
         case 65:  {
          $80 = $1;
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)!=(1536);
          if (!($82)) {
           $83 = $action_str;
           HEAP32[$vararg_buffer>>2] = $input_number;
           $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
           HEAP32[$vararg_ptr1>>2] = $axis_direction;
           $84 = (_sscanf(($83|0),((gb + (13606) | 0)|0),($vararg_buffer|0))|0);
           $85 = ($84|0)!=(2);
           if (!($85)) {
            $86 = $dev_number;
            $87 = ($86|0)!=(1);
            if ($87) {
             $88 = $dev_number;
             $89 = $1;
             $90 = ((($89)) + 8|0);
             $91 = HEAP32[$90>>2]|0;
             $92 = ($88|0)!=($91|0);
             if ($92) {
              break L28;
             }
            }
            $93 = HEAP32[$input_number>>2]|0;
            $94 = $1;
            $95 = ((($94)) + 12|0);
            $96 = HEAP8[$95>>0]|0;
            $97 = $96&255;
            $98 = ($93|0)!=($97|0);
            if (!($98)) {
             $99 = HEAP8[$axis_direction>>0]|0;
             $100 = $99 << 24 >> 24;
             $101 = ($100|0)==(43);
             if ($101) {
              $102 = $1;
              $103 = ((($102)) + 16|0);
              $104 = HEAP16[$103>>1]|0;
              $105 = $104 << 16 >> 16;
              $106 = ($105|0)>=(15000);
              if ($106) {
               $107 = $iHotkey;
               $108 = $2;
               $109 = ((gb + (8421972) | 0) + ($108<<3)|0);
               $110 = (($109) + ($107<<2)|0);
               HEAP32[$110>>2] = 1;
               break L28;
              }
              $111 = $1;
              $112 = ((($111)) + 16|0);
              $113 = HEAP16[$112>>1]|0;
              $114 = $113 << 16 >> 16;
              $115 = ($114|0)<=(8000);
              if (!($115)) {
               break L28;
              }
              $116 = $iHotkey;
              $117 = $2;
              $118 = ((gb + (8421972) | 0) + ($117<<3)|0);
              $119 = (($118) + ($116<<2)|0);
              HEAP32[$119>>2] = 0;
              break L28;
             }
             $120 = HEAP8[$axis_direction>>0]|0;
             $121 = $120 << 24 >> 24;
             $122 = ($121|0)==(45);
             if ($122) {
              $123 = $1;
              $124 = ((($123)) + 16|0);
              $125 = HEAP16[$124>>1]|0;
              $126 = $125 << 16 >> 16;
              $127 = ($126|0)<=(-15000);
              if ($127) {
               $128 = $iHotkey;
               $129 = $2;
               $130 = ((gb + (8421972) | 0) + ($129<<3)|0);
               $131 = (($130) + ($128<<2)|0);
               HEAP32[$131>>2] = 1;
               break L28;
              }
              $132 = $1;
              $133 = ((($132)) + 16|0);
              $134 = HEAP16[$133>>1]|0;
              $135 = $134 << 16 >> 16;
              $136 = ($135|0)>=(-8000);
              if (!($136)) {
               break L28;
              }
              $137 = $iHotkey;
              $138 = $2;
              $139 = ((gb + (8421972) | 0) + ($138<<3)|0);
              $140 = (($139) + ($137<<2)|0);
              HEAP32[$140>>2] = 0;
             }
            }
           }
          }
          break;
         }
         case 72:  {
          $141 = $1;
          $142 = HEAP32[$141>>2]|0;
          $143 = ($142|0)!=(1538);
          if (!($143)) {
           $144 = $action_str;
           HEAP32[$vararg_buffer2>>2] = $input_number;
           $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
           HEAP32[$vararg_ptr5>>2] = $input_value;
           $145 = (_sscanf(($144|0),((gb + (13612) | 0)|0),($vararg_buffer2|0))|0);
           $146 = ($145|0)!=(2);
           if (!($146)) {
            $147 = $dev_number;
            $148 = ($147|0)!=(-1);
            if ($148) {
             $149 = $dev_number;
             $150 = $1;
             $151 = ((($150)) + 8|0);
             $152 = HEAP32[$151>>2]|0;
             $153 = ($149|0)!=($152|0);
             if ($153) {
              break L28;
             }
            }
            $154 = HEAP32[$input_number>>2]|0;
            $155 = $1;
            $156 = ((($155)) + 12|0);
            $157 = HEAP8[$156>>0]|0;
            $158 = $157&255;
            $159 = ($154|0)!=($158|0);
            if (!($159)) {
             $160 = $1;
             $161 = ((($160)) + 13|0);
             $162 = HEAP8[$161>>0]|0;
             $163 = $162&255;
             $164 = HEAP32[$input_value>>2]|0;
             $165 = $163 & $164;
             $166 = HEAP32[$input_value>>2]|0;
             $167 = ($165|0)==($166|0);
             if ($167) {
              $168 = $iHotkey;
              $169 = $2;
              $170 = ((gb + (8421972) | 0) + ($169<<3)|0);
              $171 = (($170) + ($168<<2)|0);
              HEAP32[$171>>2] = 1;
              break L28;
             }
             $172 = $1;
             $173 = ((($172)) + 13|0);
             $174 = HEAP8[$173>>0]|0;
             $175 = $174&255;
             $176 = HEAP32[$input_value>>2]|0;
             $177 = $175 & $176;
             $178 = HEAP32[$input_value>>2]|0;
             $179 = ($177|0)!=($178|0);
             if ($179) {
              $180 = $iHotkey;
              $181 = $2;
              $182 = ((gb + (8421972) | 0) + ($181<<3)|0);
              $183 = (($182) + ($180<<2)|0);
              HEAP32[$183>>2] = 0;
             }
            }
           }
          }
          break;
         }
         case 66:  {
          $184 = $1;
          $185 = HEAP32[$184>>2]|0;
          $186 = ($185|0)!=(1539);
          if ($186) {
           $187 = $1;
           $188 = HEAP32[$187>>2]|0;
           $189 = ($188|0)!=(1540);
           if ($189) {
            break L28;
           }
          }
          $190 = $action_str;
          HEAP32[$vararg_buffer6>>2] = $input_number;
          $191 = (_sscanf(($190|0),((gb + (13619) | 0)|0),($vararg_buffer6|0))|0);
          $192 = ($191|0)!=(1);
          if (!($192)) {
           $193 = $dev_number;
           $194 = ($193|0)!=(-1);
           if ($194) {
            $195 = $dev_number;
            $196 = $1;
            $197 = ((($196)) + 8|0);
            $198 = HEAP32[$197>>2]|0;
            $199 = ($195|0)!=($198|0);
            if ($199) {
             break L28;
            }
           }
           $200 = HEAP32[$input_number>>2]|0;
           $201 = $1;
           $202 = ((($201)) + 12|0);
           $203 = HEAP8[$202>>0]|0;
           $204 = $203&255;
           $205 = ($200|0)!=($204|0);
           if (!($205)) {
            $206 = $1;
            $207 = HEAP32[$206>>2]|0;
            $208 = ($207|0)==(1539);
            if ($208) {
             $209 = $iHotkey;
             $210 = $2;
             $211 = ((gb + (8421972) | 0) + ($210<<3)|0);
             $212 = (($211) + ($209<<2)|0);
             HEAP32[$212>>2] = 1;
             break L28;
            }
            $213 = $1;
            $214 = HEAP32[$213>>2]|0;
            $215 = ($214|0)==(1540);
            if ($215) {
             $216 = $iHotkey;
             $217 = $2;
             $218 = ((gb + (8421972) | 0) + ($217<<3)|0);
             $219 = (($218) + ($216<<2)|0);
             HEAP32[$219>>2] = 0;
            }
           }
          }
          break;
         }
         default: {
         }
         }
        } while(0);
        $220 = $iHotkey;
        $221 = (($220) + 1)|0;
        $iHotkey = $221;
       }
       $222 = $2;
       $223 = ((gb + (8421972) | 0) + ($222<<3)|0);
       $224 = ((($223)) + 4|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = $225 << 1;
       $227 = $2;
       $228 = ((gb + (8421972) | 0) + ($227<<3)|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = $226 | $229;
       $new_cmd_value = $230;
       $231 = $has_hotkey;
       $232 = ($231|0)!=(0);
       $233 = $232 ? 3 : 1;
       $active_mask = $233;
       $234 = $orig_cmd_value;
       $235 = $active_mask;
       $236 = $234 & $235;
       $237 = $active_mask;
       $238 = ($236|0)!=($237|0);
       if ($238) {
        $239 = $new_cmd_value;
        $240 = $active_mask;
        $241 = $239 & $240;
        $242 = $active_mask;
        $243 = ($241|0)==($242|0);
        if ($243) {
         label = 61;
         break;
        }
       }
       $244 = $orig_cmd_value;
       $245 = $active_mask;
       $246 = $244 & $245;
       $247 = $active_mask;
       $248 = ($246|0)==($247|0);
       if ($248) {
        $249 = $new_cmd_value;
        $250 = $active_mask;
        $251 = $249 & $250;
        $252 = $active_mask;
        $253 = ($251|0)!=($252|0);
        if ($253) {
         label = 64;
         break;
        }
       }
       $254 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
       $phrase_str = $254;
       continue;
      }
     }
     $38 = (_strtok((0|0),((gb + (11562) | 0)|0))|0);
     $phrase_str = $38;
    }
    if ((label|0) == 61) {
     $0 = 1;
     $255 = $0;
     STACKTOP = sp;return ($255|0);
    }
    else if ((label|0) == 64) {
     $0 = -1;
     $255 = $0;
     STACKTOP = sp;return ($255|0);
    }
    else if ((label|0) == 66) {
     $0 = 0;
     $255 = $0;
     STACKTOP = sp;return ($255|0);
    }
   }
  }
 }
 $0 = 0;
 $255 = $0;
 STACKTOP = sp;return ($255|0);
}
function _open_fla_file($fla,$filename) {
 $fla = $fla|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $fla;
 $1 = $filename;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 131072|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = ((($5)) + 131072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (_read_from_file($7,$8,131072)|0);
 switch ($9|0) {
 case 1:  {
  $10 = $0;
  $11 = ((($10)) + 131072|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(5,(gb + (16454) | 0),$vararg_buffer);
  $13 = $0;
  _format_flashram($13);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $14 = $0;
  $15 = ((($14)) + 131072|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  _DebugMessage(2,(gb + (13897) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _close_fla_file($fla) {
 $fla = $fla|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fla;
 $1 = $0;
 $2 = ((($1)) + 131072|0);
 $3 = HEAP32[$2>>2]|0;
 _free(($3|0));
 STACKTOP = sp;return;
}
function _fla_file_ptr($fla) {
 $fla = $fla|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fla;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _save_fla_file($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fla = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $opaque;
 $1 = $0;
 $fla = $1;
 $2 = $fla;
 $3 = ((($2)) + 131072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $fla;
 $6 = (_write_to_file($4,$5,131072)|0);
 switch ($6|0) {
 case 1:  {
  $7 = $fla;
  $8 = ((($7)) + 131072|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _DebugMessage(2,(gb + (13931) | 0),$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $10 = $fla;
  $11 = ((($10)) + 131072|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  _DebugMessage(2,(gb + (13976) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _md5_init($pms) {
 $pms = $pms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pms;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 1732584193;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = -271733879;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = -1732584194;
 $12 = $0;
 $13 = ((($12)) + 8|0);
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = 271733878;
 STACKTOP = sp;return;
}
function _md5_append($pms,$data,$nbytes) {
 $pms = $pms|0;
 $data = $data|0;
 $nbytes = $nbytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $copy = 0, $left = 0, $nbits = 0, $offset = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pms;
 $1 = $data;
 $2 = $nbytes;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $left = $4;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 3;
 $8 = $7 & 63;
 $offset = $8;
 $9 = $2;
 $10 = $9 << 3;
 $nbits = $10;
 $11 = $2;
 $12 = ($11|0)<=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $13 >> 29;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14))|0;
 HEAP32[$16>>2] = $18;
 $19 = $nbits;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19))|0;
 HEAP32[$20>>2] = $22;
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $nbits;
 $26 = ($24>>>0)<($25>>>0);
 if ($26) {
  $27 = $0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
 }
 $31 = $offset;
 $32 = ($31|0)!=(0);
 do {
  if ($32) {
   $33 = $offset;
   $34 = $2;
   $35 = (($33) + ($34))|0;
   $36 = ($35|0)>(64);
   $37 = $offset;
   $38 = (64 - ($37))|0;
   $39 = $2;
   $40 = $36 ? $38 : $39;
   $copy = $40;
   $41 = $0;
   $42 = ((($41)) + 24|0);
   $43 = $offset;
   $44 = (($42) + ($43)|0);
   $45 = $p;
   $46 = $copy;
   _memcpy(($44|0),($45|0),($46|0))|0;
   $47 = $offset;
   $48 = $copy;
   $49 = (($47) + ($48))|0;
   $50 = ($49|0)<(64);
   if ($50) {
    STACKTOP = sp;return;
   } else {
    $51 = $copy;
    $52 = $p;
    $53 = (($52) + ($51)|0);
    $p = $53;
    $54 = $copy;
    $55 = $left;
    $56 = (($55) - ($54))|0;
    $left = $56;
    $57 = $0;
    $58 = $0;
    $59 = ((($58)) + 24|0);
    _md5_process($57,$59);
    break;
   }
  }
 } while(0);
 while(1) {
  $60 = $left;
  $61 = ($60|0)>=(64);
  if (!($61)) {
   break;
  }
  $62 = $0;
  $63 = $p;
  _md5_process($62,$63);
  $64 = $p;
  $65 = ((($64)) + 64|0);
  $p = $65;
  $66 = $left;
  $67 = (($66) - 64)|0;
  $left = $67;
 }
 $68 = $left;
 $69 = ($68|0)!=(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $0;
 $71 = ((($70)) + 24|0);
 $72 = $p;
 $73 = $left;
 _memcpy(($71|0),($72|0),($73|0))|0;
 STACKTOP = sp;return;
}
function _md5_finish($pms,$digest) {
 $pms = $pms|0;
 $digest = $digest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 16|0;
 $0 = $pms;
 $1 = $digest;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(8);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $4 >> 2;
  $6 = $0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = $9 & 3;
  $11 = $10 << 3;
  $12 = $8 >>> $11;
  $13 = $12&255;
  $14 = $i;
  $15 = (($data) + ($14)|0);
  HEAP8[$15>>0] = $13;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $0;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 3;
 $22 = (55 - ($21))|0;
 $23 = $22 & 63;
 $24 = (($23) + 1)|0;
 _md5_append($18,(gb + (14011) | 0),$24);
 $25 = $0;
 _md5_append($25,$data,8);
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(16);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = $28 >> 2;
  $30 = $0;
  $31 = ((($30)) + 8|0);
  $32 = (($31) + ($29<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $i;
  $35 = $34 & 3;
  $36 = $35 << 3;
  $37 = $33 >>> $36;
  $38 = $37&255;
  $39 = $i;
  $40 = $1;
  $41 = (($40) + ($39)|0);
  HEAP8[$41>>0] = $38;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function _md5_process($pms,$data) {
 $pms = $pms|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $X = 0, $a = 0, $b = 0, $c = 0, $d = 0, $i = 0, $t = 0, $xbuf = 0, $xp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xbuf = sp + 16|0;
 $0 = $pms;
 $1 = $data;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $b = $8;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $c = $12;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $d = $16;
 $17 = HEAP8[(gb + (296) | 0)>>0]|0;
 $18 = ($17<<24>>24)!=(0);
 $19 = $1;
 L1: do {
  if ($18) {
   $20 = $19;
   $21 = (($20) - 0)|0;
   $22 = $21 & 3;
   $23 = ($22|0)!=(0);
   if ($23) {
    $25 = $1;
    dest=$xbuf; src=$25; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $X = $xbuf;
    break;
   } else {
    $24 = $1;
    $X = $24;
    break;
   }
  } else {
   $xp = $19;
   $X = $xbuf;
   $i = 0;
   while(1) {
    $26 = $i;
    $27 = ($26|0)<(16);
    if (!($27)) {
     break L1;
    }
    $28 = $xp;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $xp;
    $32 = ((($31)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $34 << 8;
    $36 = (($30) + ($35))|0;
    $37 = $xp;
    $38 = ((($37)) + 2|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $40 << 16;
    $42 = (($36) + ($41))|0;
    $43 = $xp;
    $44 = ((($43)) + 3|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $46 << 24;
    $48 = (($42) + ($47))|0;
    $49 = $i;
    $50 = (($xbuf) + ($49<<2)|0);
    HEAP32[$50>>2] = $48;
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i = $52;
    $53 = $xp;
    $54 = ((($53)) + 4|0);
    $xp = $54;
   }
  }
 } while(0);
 $55 = $a;
 $56 = $b;
 $57 = $c;
 $58 = $56 & $57;
 $59 = $b;
 $60 = $59 ^ -1;
 $61 = $d;
 $62 = $60 & $61;
 $63 = $58 | $62;
 $64 = (($55) + ($63))|0;
 $65 = $X;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + ($66))|0;
 $68 = (($67) + -680876936)|0;
 $t = $68;
 $69 = $t;
 $70 = $69 << 7;
 $71 = $t;
 $72 = $71 >>> 25;
 $73 = $70 | $72;
 $74 = $b;
 $75 = (($73) + ($74))|0;
 $a = $75;
 $76 = $d;
 $77 = $a;
 $78 = $b;
 $79 = $77 & $78;
 $80 = $a;
 $81 = $80 ^ -1;
 $82 = $c;
 $83 = $81 & $82;
 $84 = $79 | $83;
 $85 = (($76) + ($84))|0;
 $86 = $X;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($85) + ($88))|0;
 $90 = (($89) + -389564586)|0;
 $t = $90;
 $91 = $t;
 $92 = $91 << 12;
 $93 = $t;
 $94 = $93 >>> 20;
 $95 = $92 | $94;
 $96 = $a;
 $97 = (($95) + ($96))|0;
 $d = $97;
 $98 = $c;
 $99 = $d;
 $100 = $a;
 $101 = $99 & $100;
 $102 = $d;
 $103 = $102 ^ -1;
 $104 = $b;
 $105 = $103 & $104;
 $106 = $101 | $105;
 $107 = (($98) + ($106))|0;
 $108 = $X;
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($107) + ($110))|0;
 $112 = (($111) + 606105819)|0;
 $t = $112;
 $113 = $t;
 $114 = $113 << 17;
 $115 = $t;
 $116 = $115 >>> 15;
 $117 = $114 | $116;
 $118 = $d;
 $119 = (($117) + ($118))|0;
 $c = $119;
 $120 = $b;
 $121 = $c;
 $122 = $d;
 $123 = $121 & $122;
 $124 = $c;
 $125 = $124 ^ -1;
 $126 = $a;
 $127 = $125 & $126;
 $128 = $123 | $127;
 $129 = (($120) + ($128))|0;
 $130 = $X;
 $131 = ((($130)) + 12|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($129) + ($132))|0;
 $134 = (($133) + -1044525330)|0;
 $t = $134;
 $135 = $t;
 $136 = $135 << 22;
 $137 = $t;
 $138 = $137 >>> 10;
 $139 = $136 | $138;
 $140 = $c;
 $141 = (($139) + ($140))|0;
 $b = $141;
 $142 = $a;
 $143 = $b;
 $144 = $c;
 $145 = $143 & $144;
 $146 = $b;
 $147 = $146 ^ -1;
 $148 = $d;
 $149 = $147 & $148;
 $150 = $145 | $149;
 $151 = (($142) + ($150))|0;
 $152 = $X;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($151) + ($154))|0;
 $156 = (($155) + -176418897)|0;
 $t = $156;
 $157 = $t;
 $158 = $157 << 7;
 $159 = $t;
 $160 = $159 >>> 25;
 $161 = $158 | $160;
 $162 = $b;
 $163 = (($161) + ($162))|0;
 $a = $163;
 $164 = $d;
 $165 = $a;
 $166 = $b;
 $167 = $165 & $166;
 $168 = $a;
 $169 = $168 ^ -1;
 $170 = $c;
 $171 = $169 & $170;
 $172 = $167 | $171;
 $173 = (($164) + ($172))|0;
 $174 = $X;
 $175 = ((($174)) + 20|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($173) + ($176))|0;
 $178 = (($177) + 1200080426)|0;
 $t = $178;
 $179 = $t;
 $180 = $179 << 12;
 $181 = $t;
 $182 = $181 >>> 20;
 $183 = $180 | $182;
 $184 = $a;
 $185 = (($183) + ($184))|0;
 $d = $185;
 $186 = $c;
 $187 = $d;
 $188 = $a;
 $189 = $187 & $188;
 $190 = $d;
 $191 = $190 ^ -1;
 $192 = $b;
 $193 = $191 & $192;
 $194 = $189 | $193;
 $195 = (($186) + ($194))|0;
 $196 = $X;
 $197 = ((($196)) + 24|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($195) + ($198))|0;
 $200 = (($199) + -1473231341)|0;
 $t = $200;
 $201 = $t;
 $202 = $201 << 17;
 $203 = $t;
 $204 = $203 >>> 15;
 $205 = $202 | $204;
 $206 = $d;
 $207 = (($205) + ($206))|0;
 $c = $207;
 $208 = $b;
 $209 = $c;
 $210 = $d;
 $211 = $209 & $210;
 $212 = $c;
 $213 = $212 ^ -1;
 $214 = $a;
 $215 = $213 & $214;
 $216 = $211 | $215;
 $217 = (($208) + ($216))|0;
 $218 = $X;
 $219 = ((($218)) + 28|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = (($217) + ($220))|0;
 $222 = (($221) + -45705983)|0;
 $t = $222;
 $223 = $t;
 $224 = $223 << 22;
 $225 = $t;
 $226 = $225 >>> 10;
 $227 = $224 | $226;
 $228 = $c;
 $229 = (($227) + ($228))|0;
 $b = $229;
 $230 = $a;
 $231 = $b;
 $232 = $c;
 $233 = $231 & $232;
 $234 = $b;
 $235 = $234 ^ -1;
 $236 = $d;
 $237 = $235 & $236;
 $238 = $233 | $237;
 $239 = (($230) + ($238))|0;
 $240 = $X;
 $241 = ((($240)) + 32|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = (($239) + ($242))|0;
 $244 = (($243) + 1770035416)|0;
 $t = $244;
 $245 = $t;
 $246 = $245 << 7;
 $247 = $t;
 $248 = $247 >>> 25;
 $249 = $246 | $248;
 $250 = $b;
 $251 = (($249) + ($250))|0;
 $a = $251;
 $252 = $d;
 $253 = $a;
 $254 = $b;
 $255 = $253 & $254;
 $256 = $a;
 $257 = $256 ^ -1;
 $258 = $c;
 $259 = $257 & $258;
 $260 = $255 | $259;
 $261 = (($252) + ($260))|0;
 $262 = $X;
 $263 = ((($262)) + 36|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = (($261) + ($264))|0;
 $266 = (($265) + -1958414417)|0;
 $t = $266;
 $267 = $t;
 $268 = $267 << 12;
 $269 = $t;
 $270 = $269 >>> 20;
 $271 = $268 | $270;
 $272 = $a;
 $273 = (($271) + ($272))|0;
 $d = $273;
 $274 = $c;
 $275 = $d;
 $276 = $a;
 $277 = $275 & $276;
 $278 = $d;
 $279 = $278 ^ -1;
 $280 = $b;
 $281 = $279 & $280;
 $282 = $277 | $281;
 $283 = (($274) + ($282))|0;
 $284 = $X;
 $285 = ((($284)) + 40|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = (($283) + ($286))|0;
 $288 = (($287) + -42063)|0;
 $t = $288;
 $289 = $t;
 $290 = $289 << 17;
 $291 = $t;
 $292 = $291 >>> 15;
 $293 = $290 | $292;
 $294 = $d;
 $295 = (($293) + ($294))|0;
 $c = $295;
 $296 = $b;
 $297 = $c;
 $298 = $d;
 $299 = $297 & $298;
 $300 = $c;
 $301 = $300 ^ -1;
 $302 = $a;
 $303 = $301 & $302;
 $304 = $299 | $303;
 $305 = (($296) + ($304))|0;
 $306 = $X;
 $307 = ((($306)) + 44|0);
 $308 = HEAP32[$307>>2]|0;
 $309 = (($305) + ($308))|0;
 $310 = (($309) + -1990404162)|0;
 $t = $310;
 $311 = $t;
 $312 = $311 << 22;
 $313 = $t;
 $314 = $313 >>> 10;
 $315 = $312 | $314;
 $316 = $c;
 $317 = (($315) + ($316))|0;
 $b = $317;
 $318 = $a;
 $319 = $b;
 $320 = $c;
 $321 = $319 & $320;
 $322 = $b;
 $323 = $322 ^ -1;
 $324 = $d;
 $325 = $323 & $324;
 $326 = $321 | $325;
 $327 = (($318) + ($326))|0;
 $328 = $X;
 $329 = ((($328)) + 48|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (($327) + ($330))|0;
 $332 = (($331) + 1804603682)|0;
 $t = $332;
 $333 = $t;
 $334 = $333 << 7;
 $335 = $t;
 $336 = $335 >>> 25;
 $337 = $334 | $336;
 $338 = $b;
 $339 = (($337) + ($338))|0;
 $a = $339;
 $340 = $d;
 $341 = $a;
 $342 = $b;
 $343 = $341 & $342;
 $344 = $a;
 $345 = $344 ^ -1;
 $346 = $c;
 $347 = $345 & $346;
 $348 = $343 | $347;
 $349 = (($340) + ($348))|0;
 $350 = $X;
 $351 = ((($350)) + 52|0);
 $352 = HEAP32[$351>>2]|0;
 $353 = (($349) + ($352))|0;
 $354 = (($353) + -40341101)|0;
 $t = $354;
 $355 = $t;
 $356 = $355 << 12;
 $357 = $t;
 $358 = $357 >>> 20;
 $359 = $356 | $358;
 $360 = $a;
 $361 = (($359) + ($360))|0;
 $d = $361;
 $362 = $c;
 $363 = $d;
 $364 = $a;
 $365 = $363 & $364;
 $366 = $d;
 $367 = $366 ^ -1;
 $368 = $b;
 $369 = $367 & $368;
 $370 = $365 | $369;
 $371 = (($362) + ($370))|0;
 $372 = $X;
 $373 = ((($372)) + 56|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = (($371) + ($374))|0;
 $376 = (($375) + -1502002290)|0;
 $t = $376;
 $377 = $t;
 $378 = $377 << 17;
 $379 = $t;
 $380 = $379 >>> 15;
 $381 = $378 | $380;
 $382 = $d;
 $383 = (($381) + ($382))|0;
 $c = $383;
 $384 = $b;
 $385 = $c;
 $386 = $d;
 $387 = $385 & $386;
 $388 = $c;
 $389 = $388 ^ -1;
 $390 = $a;
 $391 = $389 & $390;
 $392 = $387 | $391;
 $393 = (($384) + ($392))|0;
 $394 = $X;
 $395 = ((($394)) + 60|0);
 $396 = HEAP32[$395>>2]|0;
 $397 = (($393) + ($396))|0;
 $398 = (($397) + 1236535329)|0;
 $t = $398;
 $399 = $t;
 $400 = $399 << 22;
 $401 = $t;
 $402 = $401 >>> 10;
 $403 = $400 | $402;
 $404 = $c;
 $405 = (($403) + ($404))|0;
 $b = $405;
 $406 = $a;
 $407 = $b;
 $408 = $d;
 $409 = $407 & $408;
 $410 = $c;
 $411 = $d;
 $412 = $411 ^ -1;
 $413 = $410 & $412;
 $414 = $409 | $413;
 $415 = (($406) + ($414))|0;
 $416 = $X;
 $417 = ((($416)) + 4|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = (($415) + ($418))|0;
 $420 = (($419) + -165796510)|0;
 $t = $420;
 $421 = $t;
 $422 = $421 << 5;
 $423 = $t;
 $424 = $423 >>> 27;
 $425 = $422 | $424;
 $426 = $b;
 $427 = (($425) + ($426))|0;
 $a = $427;
 $428 = $d;
 $429 = $a;
 $430 = $c;
 $431 = $429 & $430;
 $432 = $b;
 $433 = $c;
 $434 = $433 ^ -1;
 $435 = $432 & $434;
 $436 = $431 | $435;
 $437 = (($428) + ($436))|0;
 $438 = $X;
 $439 = ((($438)) + 24|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = (($437) + ($440))|0;
 $442 = (($441) + -1069501632)|0;
 $t = $442;
 $443 = $t;
 $444 = $443 << 9;
 $445 = $t;
 $446 = $445 >>> 23;
 $447 = $444 | $446;
 $448 = $a;
 $449 = (($447) + ($448))|0;
 $d = $449;
 $450 = $c;
 $451 = $d;
 $452 = $b;
 $453 = $451 & $452;
 $454 = $a;
 $455 = $b;
 $456 = $455 ^ -1;
 $457 = $454 & $456;
 $458 = $453 | $457;
 $459 = (($450) + ($458))|0;
 $460 = $X;
 $461 = ((($460)) + 44|0);
 $462 = HEAP32[$461>>2]|0;
 $463 = (($459) + ($462))|0;
 $464 = (($463) + 643717713)|0;
 $t = $464;
 $465 = $t;
 $466 = $465 << 14;
 $467 = $t;
 $468 = $467 >>> 18;
 $469 = $466 | $468;
 $470 = $d;
 $471 = (($469) + ($470))|0;
 $c = $471;
 $472 = $b;
 $473 = $c;
 $474 = $a;
 $475 = $473 & $474;
 $476 = $d;
 $477 = $a;
 $478 = $477 ^ -1;
 $479 = $476 & $478;
 $480 = $475 | $479;
 $481 = (($472) + ($480))|0;
 $482 = $X;
 $483 = HEAP32[$482>>2]|0;
 $484 = (($481) + ($483))|0;
 $485 = (($484) + -373897302)|0;
 $t = $485;
 $486 = $t;
 $487 = $486 << 20;
 $488 = $t;
 $489 = $488 >>> 12;
 $490 = $487 | $489;
 $491 = $c;
 $492 = (($490) + ($491))|0;
 $b = $492;
 $493 = $a;
 $494 = $b;
 $495 = $d;
 $496 = $494 & $495;
 $497 = $c;
 $498 = $d;
 $499 = $498 ^ -1;
 $500 = $497 & $499;
 $501 = $496 | $500;
 $502 = (($493) + ($501))|0;
 $503 = $X;
 $504 = ((($503)) + 20|0);
 $505 = HEAP32[$504>>2]|0;
 $506 = (($502) + ($505))|0;
 $507 = (($506) + -701558691)|0;
 $t = $507;
 $508 = $t;
 $509 = $508 << 5;
 $510 = $t;
 $511 = $510 >>> 27;
 $512 = $509 | $511;
 $513 = $b;
 $514 = (($512) + ($513))|0;
 $a = $514;
 $515 = $d;
 $516 = $a;
 $517 = $c;
 $518 = $516 & $517;
 $519 = $b;
 $520 = $c;
 $521 = $520 ^ -1;
 $522 = $519 & $521;
 $523 = $518 | $522;
 $524 = (($515) + ($523))|0;
 $525 = $X;
 $526 = ((($525)) + 40|0);
 $527 = HEAP32[$526>>2]|0;
 $528 = (($524) + ($527))|0;
 $529 = (($528) + 38016083)|0;
 $t = $529;
 $530 = $t;
 $531 = $530 << 9;
 $532 = $t;
 $533 = $532 >>> 23;
 $534 = $531 | $533;
 $535 = $a;
 $536 = (($534) + ($535))|0;
 $d = $536;
 $537 = $c;
 $538 = $d;
 $539 = $b;
 $540 = $538 & $539;
 $541 = $a;
 $542 = $b;
 $543 = $542 ^ -1;
 $544 = $541 & $543;
 $545 = $540 | $544;
 $546 = (($537) + ($545))|0;
 $547 = $X;
 $548 = ((($547)) + 60|0);
 $549 = HEAP32[$548>>2]|0;
 $550 = (($546) + ($549))|0;
 $551 = (($550) + -660478335)|0;
 $t = $551;
 $552 = $t;
 $553 = $552 << 14;
 $554 = $t;
 $555 = $554 >>> 18;
 $556 = $553 | $555;
 $557 = $d;
 $558 = (($556) + ($557))|0;
 $c = $558;
 $559 = $b;
 $560 = $c;
 $561 = $a;
 $562 = $560 & $561;
 $563 = $d;
 $564 = $a;
 $565 = $564 ^ -1;
 $566 = $563 & $565;
 $567 = $562 | $566;
 $568 = (($559) + ($567))|0;
 $569 = $X;
 $570 = ((($569)) + 16|0);
 $571 = HEAP32[$570>>2]|0;
 $572 = (($568) + ($571))|0;
 $573 = (($572) + -405537848)|0;
 $t = $573;
 $574 = $t;
 $575 = $574 << 20;
 $576 = $t;
 $577 = $576 >>> 12;
 $578 = $575 | $577;
 $579 = $c;
 $580 = (($578) + ($579))|0;
 $b = $580;
 $581 = $a;
 $582 = $b;
 $583 = $d;
 $584 = $582 & $583;
 $585 = $c;
 $586 = $d;
 $587 = $586 ^ -1;
 $588 = $585 & $587;
 $589 = $584 | $588;
 $590 = (($581) + ($589))|0;
 $591 = $X;
 $592 = ((($591)) + 36|0);
 $593 = HEAP32[$592>>2]|0;
 $594 = (($590) + ($593))|0;
 $595 = (($594) + 568446438)|0;
 $t = $595;
 $596 = $t;
 $597 = $596 << 5;
 $598 = $t;
 $599 = $598 >>> 27;
 $600 = $597 | $599;
 $601 = $b;
 $602 = (($600) + ($601))|0;
 $a = $602;
 $603 = $d;
 $604 = $a;
 $605 = $c;
 $606 = $604 & $605;
 $607 = $b;
 $608 = $c;
 $609 = $608 ^ -1;
 $610 = $607 & $609;
 $611 = $606 | $610;
 $612 = (($603) + ($611))|0;
 $613 = $X;
 $614 = ((($613)) + 56|0);
 $615 = HEAP32[$614>>2]|0;
 $616 = (($612) + ($615))|0;
 $617 = (($616) + -1019803690)|0;
 $t = $617;
 $618 = $t;
 $619 = $618 << 9;
 $620 = $t;
 $621 = $620 >>> 23;
 $622 = $619 | $621;
 $623 = $a;
 $624 = (($622) + ($623))|0;
 $d = $624;
 $625 = $c;
 $626 = $d;
 $627 = $b;
 $628 = $626 & $627;
 $629 = $a;
 $630 = $b;
 $631 = $630 ^ -1;
 $632 = $629 & $631;
 $633 = $628 | $632;
 $634 = (($625) + ($633))|0;
 $635 = $X;
 $636 = ((($635)) + 12|0);
 $637 = HEAP32[$636>>2]|0;
 $638 = (($634) + ($637))|0;
 $639 = (($638) + -187363961)|0;
 $t = $639;
 $640 = $t;
 $641 = $640 << 14;
 $642 = $t;
 $643 = $642 >>> 18;
 $644 = $641 | $643;
 $645 = $d;
 $646 = (($644) + ($645))|0;
 $c = $646;
 $647 = $b;
 $648 = $c;
 $649 = $a;
 $650 = $648 & $649;
 $651 = $d;
 $652 = $a;
 $653 = $652 ^ -1;
 $654 = $651 & $653;
 $655 = $650 | $654;
 $656 = (($647) + ($655))|0;
 $657 = $X;
 $658 = ((($657)) + 32|0);
 $659 = HEAP32[$658>>2]|0;
 $660 = (($656) + ($659))|0;
 $661 = (($660) + 1163531501)|0;
 $t = $661;
 $662 = $t;
 $663 = $662 << 20;
 $664 = $t;
 $665 = $664 >>> 12;
 $666 = $663 | $665;
 $667 = $c;
 $668 = (($666) + ($667))|0;
 $b = $668;
 $669 = $a;
 $670 = $b;
 $671 = $d;
 $672 = $670 & $671;
 $673 = $c;
 $674 = $d;
 $675 = $674 ^ -1;
 $676 = $673 & $675;
 $677 = $672 | $676;
 $678 = (($669) + ($677))|0;
 $679 = $X;
 $680 = ((($679)) + 52|0);
 $681 = HEAP32[$680>>2]|0;
 $682 = (($678) + ($681))|0;
 $683 = (($682) + -1444681467)|0;
 $t = $683;
 $684 = $t;
 $685 = $684 << 5;
 $686 = $t;
 $687 = $686 >>> 27;
 $688 = $685 | $687;
 $689 = $b;
 $690 = (($688) + ($689))|0;
 $a = $690;
 $691 = $d;
 $692 = $a;
 $693 = $c;
 $694 = $692 & $693;
 $695 = $b;
 $696 = $c;
 $697 = $696 ^ -1;
 $698 = $695 & $697;
 $699 = $694 | $698;
 $700 = (($691) + ($699))|0;
 $701 = $X;
 $702 = ((($701)) + 8|0);
 $703 = HEAP32[$702>>2]|0;
 $704 = (($700) + ($703))|0;
 $705 = (($704) + -51403784)|0;
 $t = $705;
 $706 = $t;
 $707 = $706 << 9;
 $708 = $t;
 $709 = $708 >>> 23;
 $710 = $707 | $709;
 $711 = $a;
 $712 = (($710) + ($711))|0;
 $d = $712;
 $713 = $c;
 $714 = $d;
 $715 = $b;
 $716 = $714 & $715;
 $717 = $a;
 $718 = $b;
 $719 = $718 ^ -1;
 $720 = $717 & $719;
 $721 = $716 | $720;
 $722 = (($713) + ($721))|0;
 $723 = $X;
 $724 = ((($723)) + 28|0);
 $725 = HEAP32[$724>>2]|0;
 $726 = (($722) + ($725))|0;
 $727 = (($726) + 1735328473)|0;
 $t = $727;
 $728 = $t;
 $729 = $728 << 14;
 $730 = $t;
 $731 = $730 >>> 18;
 $732 = $729 | $731;
 $733 = $d;
 $734 = (($732) + ($733))|0;
 $c = $734;
 $735 = $b;
 $736 = $c;
 $737 = $a;
 $738 = $736 & $737;
 $739 = $d;
 $740 = $a;
 $741 = $740 ^ -1;
 $742 = $739 & $741;
 $743 = $738 | $742;
 $744 = (($735) + ($743))|0;
 $745 = $X;
 $746 = ((($745)) + 48|0);
 $747 = HEAP32[$746>>2]|0;
 $748 = (($744) + ($747))|0;
 $749 = (($748) + -1926607734)|0;
 $t = $749;
 $750 = $t;
 $751 = $750 << 20;
 $752 = $t;
 $753 = $752 >>> 12;
 $754 = $751 | $753;
 $755 = $c;
 $756 = (($754) + ($755))|0;
 $b = $756;
 $757 = $a;
 $758 = $b;
 $759 = $c;
 $760 = $758 ^ $759;
 $761 = $d;
 $762 = $760 ^ $761;
 $763 = (($757) + ($762))|0;
 $764 = $X;
 $765 = ((($764)) + 20|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = (($763) + ($766))|0;
 $768 = (($767) + -378558)|0;
 $t = $768;
 $769 = $t;
 $770 = $769 << 4;
 $771 = $t;
 $772 = $771 >>> 28;
 $773 = $770 | $772;
 $774 = $b;
 $775 = (($773) + ($774))|0;
 $a = $775;
 $776 = $d;
 $777 = $a;
 $778 = $b;
 $779 = $777 ^ $778;
 $780 = $c;
 $781 = $779 ^ $780;
 $782 = (($776) + ($781))|0;
 $783 = $X;
 $784 = ((($783)) + 32|0);
 $785 = HEAP32[$784>>2]|0;
 $786 = (($782) + ($785))|0;
 $787 = (($786) + -2022574463)|0;
 $t = $787;
 $788 = $t;
 $789 = $788 << 11;
 $790 = $t;
 $791 = $790 >>> 21;
 $792 = $789 | $791;
 $793 = $a;
 $794 = (($792) + ($793))|0;
 $d = $794;
 $795 = $c;
 $796 = $d;
 $797 = $a;
 $798 = $796 ^ $797;
 $799 = $b;
 $800 = $798 ^ $799;
 $801 = (($795) + ($800))|0;
 $802 = $X;
 $803 = ((($802)) + 44|0);
 $804 = HEAP32[$803>>2]|0;
 $805 = (($801) + ($804))|0;
 $806 = (($805) + 1839030562)|0;
 $t = $806;
 $807 = $t;
 $808 = $807 << 16;
 $809 = $t;
 $810 = $809 >>> 16;
 $811 = $808 | $810;
 $812 = $d;
 $813 = (($811) + ($812))|0;
 $c = $813;
 $814 = $b;
 $815 = $c;
 $816 = $d;
 $817 = $815 ^ $816;
 $818 = $a;
 $819 = $817 ^ $818;
 $820 = (($814) + ($819))|0;
 $821 = $X;
 $822 = ((($821)) + 56|0);
 $823 = HEAP32[$822>>2]|0;
 $824 = (($820) + ($823))|0;
 $825 = (($824) + -35309556)|0;
 $t = $825;
 $826 = $t;
 $827 = $826 << 23;
 $828 = $t;
 $829 = $828 >>> 9;
 $830 = $827 | $829;
 $831 = $c;
 $832 = (($830) + ($831))|0;
 $b = $832;
 $833 = $a;
 $834 = $b;
 $835 = $c;
 $836 = $834 ^ $835;
 $837 = $d;
 $838 = $836 ^ $837;
 $839 = (($833) + ($838))|0;
 $840 = $X;
 $841 = ((($840)) + 4|0);
 $842 = HEAP32[$841>>2]|0;
 $843 = (($839) + ($842))|0;
 $844 = (($843) + -1530992060)|0;
 $t = $844;
 $845 = $t;
 $846 = $845 << 4;
 $847 = $t;
 $848 = $847 >>> 28;
 $849 = $846 | $848;
 $850 = $b;
 $851 = (($849) + ($850))|0;
 $a = $851;
 $852 = $d;
 $853 = $a;
 $854 = $b;
 $855 = $853 ^ $854;
 $856 = $c;
 $857 = $855 ^ $856;
 $858 = (($852) + ($857))|0;
 $859 = $X;
 $860 = ((($859)) + 16|0);
 $861 = HEAP32[$860>>2]|0;
 $862 = (($858) + ($861))|0;
 $863 = (($862) + 1272893353)|0;
 $t = $863;
 $864 = $t;
 $865 = $864 << 11;
 $866 = $t;
 $867 = $866 >>> 21;
 $868 = $865 | $867;
 $869 = $a;
 $870 = (($868) + ($869))|0;
 $d = $870;
 $871 = $c;
 $872 = $d;
 $873 = $a;
 $874 = $872 ^ $873;
 $875 = $b;
 $876 = $874 ^ $875;
 $877 = (($871) + ($876))|0;
 $878 = $X;
 $879 = ((($878)) + 28|0);
 $880 = HEAP32[$879>>2]|0;
 $881 = (($877) + ($880))|0;
 $882 = (($881) + -155497632)|0;
 $t = $882;
 $883 = $t;
 $884 = $883 << 16;
 $885 = $t;
 $886 = $885 >>> 16;
 $887 = $884 | $886;
 $888 = $d;
 $889 = (($887) + ($888))|0;
 $c = $889;
 $890 = $b;
 $891 = $c;
 $892 = $d;
 $893 = $891 ^ $892;
 $894 = $a;
 $895 = $893 ^ $894;
 $896 = (($890) + ($895))|0;
 $897 = $X;
 $898 = ((($897)) + 40|0);
 $899 = HEAP32[$898>>2]|0;
 $900 = (($896) + ($899))|0;
 $901 = (($900) + -1094730640)|0;
 $t = $901;
 $902 = $t;
 $903 = $902 << 23;
 $904 = $t;
 $905 = $904 >>> 9;
 $906 = $903 | $905;
 $907 = $c;
 $908 = (($906) + ($907))|0;
 $b = $908;
 $909 = $a;
 $910 = $b;
 $911 = $c;
 $912 = $910 ^ $911;
 $913 = $d;
 $914 = $912 ^ $913;
 $915 = (($909) + ($914))|0;
 $916 = $X;
 $917 = ((($916)) + 52|0);
 $918 = HEAP32[$917>>2]|0;
 $919 = (($915) + ($918))|0;
 $920 = (($919) + 681279174)|0;
 $t = $920;
 $921 = $t;
 $922 = $921 << 4;
 $923 = $t;
 $924 = $923 >>> 28;
 $925 = $922 | $924;
 $926 = $b;
 $927 = (($925) + ($926))|0;
 $a = $927;
 $928 = $d;
 $929 = $a;
 $930 = $b;
 $931 = $929 ^ $930;
 $932 = $c;
 $933 = $931 ^ $932;
 $934 = (($928) + ($933))|0;
 $935 = $X;
 $936 = HEAP32[$935>>2]|0;
 $937 = (($934) + ($936))|0;
 $938 = (($937) + -358537222)|0;
 $t = $938;
 $939 = $t;
 $940 = $939 << 11;
 $941 = $t;
 $942 = $941 >>> 21;
 $943 = $940 | $942;
 $944 = $a;
 $945 = (($943) + ($944))|0;
 $d = $945;
 $946 = $c;
 $947 = $d;
 $948 = $a;
 $949 = $947 ^ $948;
 $950 = $b;
 $951 = $949 ^ $950;
 $952 = (($946) + ($951))|0;
 $953 = $X;
 $954 = ((($953)) + 12|0);
 $955 = HEAP32[$954>>2]|0;
 $956 = (($952) + ($955))|0;
 $957 = (($956) + -722521979)|0;
 $t = $957;
 $958 = $t;
 $959 = $958 << 16;
 $960 = $t;
 $961 = $960 >>> 16;
 $962 = $959 | $961;
 $963 = $d;
 $964 = (($962) + ($963))|0;
 $c = $964;
 $965 = $b;
 $966 = $c;
 $967 = $d;
 $968 = $966 ^ $967;
 $969 = $a;
 $970 = $968 ^ $969;
 $971 = (($965) + ($970))|0;
 $972 = $X;
 $973 = ((($972)) + 24|0);
 $974 = HEAP32[$973>>2]|0;
 $975 = (($971) + ($974))|0;
 $976 = (($975) + 76029189)|0;
 $t = $976;
 $977 = $t;
 $978 = $977 << 23;
 $979 = $t;
 $980 = $979 >>> 9;
 $981 = $978 | $980;
 $982 = $c;
 $983 = (($981) + ($982))|0;
 $b = $983;
 $984 = $a;
 $985 = $b;
 $986 = $c;
 $987 = $985 ^ $986;
 $988 = $d;
 $989 = $987 ^ $988;
 $990 = (($984) + ($989))|0;
 $991 = $X;
 $992 = ((($991)) + 36|0);
 $993 = HEAP32[$992>>2]|0;
 $994 = (($990) + ($993))|0;
 $995 = (($994) + -640364487)|0;
 $t = $995;
 $996 = $t;
 $997 = $996 << 4;
 $998 = $t;
 $999 = $998 >>> 28;
 $1000 = $997 | $999;
 $1001 = $b;
 $1002 = (($1000) + ($1001))|0;
 $a = $1002;
 $1003 = $d;
 $1004 = $a;
 $1005 = $b;
 $1006 = $1004 ^ $1005;
 $1007 = $c;
 $1008 = $1006 ^ $1007;
 $1009 = (($1003) + ($1008))|0;
 $1010 = $X;
 $1011 = ((($1010)) + 48|0);
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (($1009) + ($1012))|0;
 $1014 = (($1013) + -421815835)|0;
 $t = $1014;
 $1015 = $t;
 $1016 = $1015 << 11;
 $1017 = $t;
 $1018 = $1017 >>> 21;
 $1019 = $1016 | $1018;
 $1020 = $a;
 $1021 = (($1019) + ($1020))|0;
 $d = $1021;
 $1022 = $c;
 $1023 = $d;
 $1024 = $a;
 $1025 = $1023 ^ $1024;
 $1026 = $b;
 $1027 = $1025 ^ $1026;
 $1028 = (($1022) + ($1027))|0;
 $1029 = $X;
 $1030 = ((($1029)) + 60|0);
 $1031 = HEAP32[$1030>>2]|0;
 $1032 = (($1028) + ($1031))|0;
 $1033 = (($1032) + 530742520)|0;
 $t = $1033;
 $1034 = $t;
 $1035 = $1034 << 16;
 $1036 = $t;
 $1037 = $1036 >>> 16;
 $1038 = $1035 | $1037;
 $1039 = $d;
 $1040 = (($1038) + ($1039))|0;
 $c = $1040;
 $1041 = $b;
 $1042 = $c;
 $1043 = $d;
 $1044 = $1042 ^ $1043;
 $1045 = $a;
 $1046 = $1044 ^ $1045;
 $1047 = (($1041) + ($1046))|0;
 $1048 = $X;
 $1049 = ((($1048)) + 8|0);
 $1050 = HEAP32[$1049>>2]|0;
 $1051 = (($1047) + ($1050))|0;
 $1052 = (($1051) + -995338651)|0;
 $t = $1052;
 $1053 = $t;
 $1054 = $1053 << 23;
 $1055 = $t;
 $1056 = $1055 >>> 9;
 $1057 = $1054 | $1056;
 $1058 = $c;
 $1059 = (($1057) + ($1058))|0;
 $b = $1059;
 $1060 = $a;
 $1061 = $c;
 $1062 = $b;
 $1063 = $d;
 $1064 = $1063 ^ -1;
 $1065 = $1062 | $1064;
 $1066 = $1061 ^ $1065;
 $1067 = (($1060) + ($1066))|0;
 $1068 = $X;
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1067) + ($1069))|0;
 $1071 = (($1070) + -198630844)|0;
 $t = $1071;
 $1072 = $t;
 $1073 = $1072 << 6;
 $1074 = $t;
 $1075 = $1074 >>> 26;
 $1076 = $1073 | $1075;
 $1077 = $b;
 $1078 = (($1076) + ($1077))|0;
 $a = $1078;
 $1079 = $d;
 $1080 = $b;
 $1081 = $a;
 $1082 = $c;
 $1083 = $1082 ^ -1;
 $1084 = $1081 | $1083;
 $1085 = $1080 ^ $1084;
 $1086 = (($1079) + ($1085))|0;
 $1087 = $X;
 $1088 = ((($1087)) + 28|0);
 $1089 = HEAP32[$1088>>2]|0;
 $1090 = (($1086) + ($1089))|0;
 $1091 = (($1090) + 1126891415)|0;
 $t = $1091;
 $1092 = $t;
 $1093 = $1092 << 10;
 $1094 = $t;
 $1095 = $1094 >>> 22;
 $1096 = $1093 | $1095;
 $1097 = $a;
 $1098 = (($1096) + ($1097))|0;
 $d = $1098;
 $1099 = $c;
 $1100 = $a;
 $1101 = $d;
 $1102 = $b;
 $1103 = $1102 ^ -1;
 $1104 = $1101 | $1103;
 $1105 = $1100 ^ $1104;
 $1106 = (($1099) + ($1105))|0;
 $1107 = $X;
 $1108 = ((($1107)) + 56|0);
 $1109 = HEAP32[$1108>>2]|0;
 $1110 = (($1106) + ($1109))|0;
 $1111 = (($1110) + -1416354905)|0;
 $t = $1111;
 $1112 = $t;
 $1113 = $1112 << 15;
 $1114 = $t;
 $1115 = $1114 >>> 17;
 $1116 = $1113 | $1115;
 $1117 = $d;
 $1118 = (($1116) + ($1117))|0;
 $c = $1118;
 $1119 = $b;
 $1120 = $d;
 $1121 = $c;
 $1122 = $a;
 $1123 = $1122 ^ -1;
 $1124 = $1121 | $1123;
 $1125 = $1120 ^ $1124;
 $1126 = (($1119) + ($1125))|0;
 $1127 = $X;
 $1128 = ((($1127)) + 20|0);
 $1129 = HEAP32[$1128>>2]|0;
 $1130 = (($1126) + ($1129))|0;
 $1131 = (($1130) + -57434055)|0;
 $t = $1131;
 $1132 = $t;
 $1133 = $1132 << 21;
 $1134 = $t;
 $1135 = $1134 >>> 11;
 $1136 = $1133 | $1135;
 $1137 = $c;
 $1138 = (($1136) + ($1137))|0;
 $b = $1138;
 $1139 = $a;
 $1140 = $c;
 $1141 = $b;
 $1142 = $d;
 $1143 = $1142 ^ -1;
 $1144 = $1141 | $1143;
 $1145 = $1140 ^ $1144;
 $1146 = (($1139) + ($1145))|0;
 $1147 = $X;
 $1148 = ((($1147)) + 48|0);
 $1149 = HEAP32[$1148>>2]|0;
 $1150 = (($1146) + ($1149))|0;
 $1151 = (($1150) + 1700485571)|0;
 $t = $1151;
 $1152 = $t;
 $1153 = $1152 << 6;
 $1154 = $t;
 $1155 = $1154 >>> 26;
 $1156 = $1153 | $1155;
 $1157 = $b;
 $1158 = (($1156) + ($1157))|0;
 $a = $1158;
 $1159 = $d;
 $1160 = $b;
 $1161 = $a;
 $1162 = $c;
 $1163 = $1162 ^ -1;
 $1164 = $1161 | $1163;
 $1165 = $1160 ^ $1164;
 $1166 = (($1159) + ($1165))|0;
 $1167 = $X;
 $1168 = ((($1167)) + 12|0);
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = (($1166) + ($1169))|0;
 $1171 = (($1170) + -1894986606)|0;
 $t = $1171;
 $1172 = $t;
 $1173 = $1172 << 10;
 $1174 = $t;
 $1175 = $1174 >>> 22;
 $1176 = $1173 | $1175;
 $1177 = $a;
 $1178 = (($1176) + ($1177))|0;
 $d = $1178;
 $1179 = $c;
 $1180 = $a;
 $1181 = $d;
 $1182 = $b;
 $1183 = $1182 ^ -1;
 $1184 = $1181 | $1183;
 $1185 = $1180 ^ $1184;
 $1186 = (($1179) + ($1185))|0;
 $1187 = $X;
 $1188 = ((($1187)) + 40|0);
 $1189 = HEAP32[$1188>>2]|0;
 $1190 = (($1186) + ($1189))|0;
 $1191 = (($1190) + -1051523)|0;
 $t = $1191;
 $1192 = $t;
 $1193 = $1192 << 15;
 $1194 = $t;
 $1195 = $1194 >>> 17;
 $1196 = $1193 | $1195;
 $1197 = $d;
 $1198 = (($1196) + ($1197))|0;
 $c = $1198;
 $1199 = $b;
 $1200 = $d;
 $1201 = $c;
 $1202 = $a;
 $1203 = $1202 ^ -1;
 $1204 = $1201 | $1203;
 $1205 = $1200 ^ $1204;
 $1206 = (($1199) + ($1205))|0;
 $1207 = $X;
 $1208 = ((($1207)) + 4|0);
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1206) + ($1209))|0;
 $1211 = (($1210) + -2054922799)|0;
 $t = $1211;
 $1212 = $t;
 $1213 = $1212 << 21;
 $1214 = $t;
 $1215 = $1214 >>> 11;
 $1216 = $1213 | $1215;
 $1217 = $c;
 $1218 = (($1216) + ($1217))|0;
 $b = $1218;
 $1219 = $a;
 $1220 = $c;
 $1221 = $b;
 $1222 = $d;
 $1223 = $1222 ^ -1;
 $1224 = $1221 | $1223;
 $1225 = $1220 ^ $1224;
 $1226 = (($1219) + ($1225))|0;
 $1227 = $X;
 $1228 = ((($1227)) + 32|0);
 $1229 = HEAP32[$1228>>2]|0;
 $1230 = (($1226) + ($1229))|0;
 $1231 = (($1230) + 1873313359)|0;
 $t = $1231;
 $1232 = $t;
 $1233 = $1232 << 6;
 $1234 = $t;
 $1235 = $1234 >>> 26;
 $1236 = $1233 | $1235;
 $1237 = $b;
 $1238 = (($1236) + ($1237))|0;
 $a = $1238;
 $1239 = $d;
 $1240 = $b;
 $1241 = $a;
 $1242 = $c;
 $1243 = $1242 ^ -1;
 $1244 = $1241 | $1243;
 $1245 = $1240 ^ $1244;
 $1246 = (($1239) + ($1245))|0;
 $1247 = $X;
 $1248 = ((($1247)) + 60|0);
 $1249 = HEAP32[$1248>>2]|0;
 $1250 = (($1246) + ($1249))|0;
 $1251 = (($1250) + -30611744)|0;
 $t = $1251;
 $1252 = $t;
 $1253 = $1252 << 10;
 $1254 = $t;
 $1255 = $1254 >>> 22;
 $1256 = $1253 | $1255;
 $1257 = $a;
 $1258 = (($1256) + ($1257))|0;
 $d = $1258;
 $1259 = $c;
 $1260 = $a;
 $1261 = $d;
 $1262 = $b;
 $1263 = $1262 ^ -1;
 $1264 = $1261 | $1263;
 $1265 = $1260 ^ $1264;
 $1266 = (($1259) + ($1265))|0;
 $1267 = $X;
 $1268 = ((($1267)) + 24|0);
 $1269 = HEAP32[$1268>>2]|0;
 $1270 = (($1266) + ($1269))|0;
 $1271 = (($1270) + -1560198380)|0;
 $t = $1271;
 $1272 = $t;
 $1273 = $1272 << 15;
 $1274 = $t;
 $1275 = $1274 >>> 17;
 $1276 = $1273 | $1275;
 $1277 = $d;
 $1278 = (($1276) + ($1277))|0;
 $c = $1278;
 $1279 = $b;
 $1280 = $d;
 $1281 = $c;
 $1282 = $a;
 $1283 = $1282 ^ -1;
 $1284 = $1281 | $1283;
 $1285 = $1280 ^ $1284;
 $1286 = (($1279) + ($1285))|0;
 $1287 = $X;
 $1288 = ((($1287)) + 52|0);
 $1289 = HEAP32[$1288>>2]|0;
 $1290 = (($1286) + ($1289))|0;
 $1291 = (($1290) + 1309151649)|0;
 $t = $1291;
 $1292 = $t;
 $1293 = $1292 << 21;
 $1294 = $t;
 $1295 = $1294 >>> 11;
 $1296 = $1293 | $1295;
 $1297 = $c;
 $1298 = (($1296) + ($1297))|0;
 $b = $1298;
 $1299 = $a;
 $1300 = $c;
 $1301 = $b;
 $1302 = $d;
 $1303 = $1302 ^ -1;
 $1304 = $1301 | $1303;
 $1305 = $1300 ^ $1304;
 $1306 = (($1299) + ($1305))|0;
 $1307 = $X;
 $1308 = ((($1307)) + 16|0);
 $1309 = HEAP32[$1308>>2]|0;
 $1310 = (($1306) + ($1309))|0;
 $1311 = (($1310) + -145523070)|0;
 $t = $1311;
 $1312 = $t;
 $1313 = $1312 << 6;
 $1314 = $t;
 $1315 = $1314 >>> 26;
 $1316 = $1313 | $1315;
 $1317 = $b;
 $1318 = (($1316) + ($1317))|0;
 $a = $1318;
 $1319 = $d;
 $1320 = $b;
 $1321 = $a;
 $1322 = $c;
 $1323 = $1322 ^ -1;
 $1324 = $1321 | $1323;
 $1325 = $1320 ^ $1324;
 $1326 = (($1319) + ($1325))|0;
 $1327 = $X;
 $1328 = ((($1327)) + 44|0);
 $1329 = HEAP32[$1328>>2]|0;
 $1330 = (($1326) + ($1329))|0;
 $1331 = (($1330) + -1120210379)|0;
 $t = $1331;
 $1332 = $t;
 $1333 = $1332 << 10;
 $1334 = $t;
 $1335 = $1334 >>> 22;
 $1336 = $1333 | $1335;
 $1337 = $a;
 $1338 = (($1336) + ($1337))|0;
 $d = $1338;
 $1339 = $c;
 $1340 = $a;
 $1341 = $d;
 $1342 = $b;
 $1343 = $1342 ^ -1;
 $1344 = $1341 | $1343;
 $1345 = $1340 ^ $1344;
 $1346 = (($1339) + ($1345))|0;
 $1347 = $X;
 $1348 = ((($1347)) + 8|0);
 $1349 = HEAP32[$1348>>2]|0;
 $1350 = (($1346) + ($1349))|0;
 $1351 = (($1350) + 718787259)|0;
 $t = $1351;
 $1352 = $t;
 $1353 = $1352 << 15;
 $1354 = $t;
 $1355 = $1354 >>> 17;
 $1356 = $1353 | $1355;
 $1357 = $d;
 $1358 = (($1356) + ($1357))|0;
 $c = $1358;
 $1359 = $b;
 $1360 = $d;
 $1361 = $c;
 $1362 = $a;
 $1363 = $1362 ^ -1;
 $1364 = $1361 | $1363;
 $1365 = $1360 ^ $1364;
 $1366 = (($1359) + ($1365))|0;
 $1367 = $X;
 $1368 = ((($1367)) + 36|0);
 $1369 = HEAP32[$1368>>2]|0;
 $1370 = (($1366) + ($1369))|0;
 $1371 = (($1370) + -343485551)|0;
 $t = $1371;
 $1372 = $t;
 $1373 = $1372 << 21;
 $1374 = $t;
 $1375 = $1374 >>> 11;
 $1376 = $1373 | $1375;
 $1377 = $c;
 $1378 = (($1376) + ($1377))|0;
 $b = $1378;
 $1379 = $a;
 $1380 = $0;
 $1381 = ((($1380)) + 8|0);
 $1382 = HEAP32[$1381>>2]|0;
 $1383 = (($1382) + ($1379))|0;
 HEAP32[$1381>>2] = $1383;
 $1384 = $b;
 $1385 = $0;
 $1386 = ((($1385)) + 8|0);
 $1387 = ((($1386)) + 4|0);
 $1388 = HEAP32[$1387>>2]|0;
 $1389 = (($1388) + ($1384))|0;
 HEAP32[$1387>>2] = $1389;
 $1390 = $c;
 $1391 = $0;
 $1392 = ((($1391)) + 8|0);
 $1393 = ((($1392)) + 8|0);
 $1394 = HEAP32[$1393>>2]|0;
 $1395 = (($1394) + ($1390))|0;
 HEAP32[$1393>>2] = $1395;
 $1396 = $d;
 $1397 = $0;
 $1398 = ((($1397)) + 8|0);
 $1399 = ((($1398)) + 12|0);
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = (($1400) + ($1396))|0;
 HEAP32[$1399>>2] = $1401;
 STACKTOP = sp;return;
}
function _open_mpk_file($mpk,$filename) {
 $mpk = $mpk|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mpk;
 $1 = $filename;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 131072|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = ((($5)) + 131072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (_read_from_file($7,$8,131072)|0);
 switch ($9|0) {
 case 1:  {
  $10 = $0;
  $11 = ((($10)) + 131072|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(5,(gb + (14075) | 0),$vararg_buffer);
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = ($13>>>0)<(4);
   if (!($14)) {
    break;
   }
   $15 = $i;
   $16 = $0;
   $17 = (($16) + ($15<<15)|0);
   _format_mempak($17);
   $18 = $i;
   $19 = (($18) + 1)|0;
   $i = $19;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $20 = $0;
  $21 = ((($20)) + 131072|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $22;
  _DebugMessage(2,(gb + (14119) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _close_mpk_file($mpk) {
 $mpk = $mpk|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk;
 $1 = $0;
 $2 = ((($1)) + 131072|0);
 $3 = HEAP32[$2>>2]|0;
 _free(($3|0));
 STACKTOP = sp;return;
}
function _mpk_file_ptr($mpk,$controller_idx) {
 $mpk = $mpk|0;
 $controller_idx = $controller_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk;
 $1 = $controller_idx;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + ($2<<15)|0);
 STACKTOP = sp;return ($4|0);
}
function _save_mpk_file($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mpk = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $opaque;
 $1 = $0;
 $mpk = $1;
 $2 = $mpk;
 $3 = ((($2)) + 131072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $mpk;
 $6 = (_write_to_file($4,$5,131072)|0);
 switch ($6|0) {
 case 1:  {
  $7 = $mpk;
  $8 = ((($7)) + 131072|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _DebugMessage(2,(gb + (14152) | 0),$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $10 = $mpk;
  $11 = ((($10)) + 131072|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  _DebugMessage(2,(gb + (14196) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _open_rom($romimage,$size) {
 $romimage = $romimage|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $digest = 0, $entry = 0, $i = 0;
 var $imagetype = 0, $state = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr24 = 0, $vararg_ptr25 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $state = sp + 152|0;
 $digest = sp + 512|0;
 $buffer = sp + 256|0;
 $imagetype = sp + 252|0;
 $1 = $romimage;
 $2 = $size;
 $3 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  _DebugMessage(1,(gb + (14230) | 0),$vararg_buffer);
  $0 = 9;
  $215 = $0;
  STACKTOP = sp;return ($215|0);
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $1;
  $8 = (_is_valid_rom($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   HEAP32[(gb + (8410656) | 0)>>2] = 0;
   $10 = $2;
   HEAP32[(gb + (8422112) | 0)>>2] = $10;
   $11 = $2;
   $12 = (_malloc(($11|0))|0);
   HEAP32[(gb + (8422108) | 0)>>2] = $12;
   $13 = HEAP32[(gb + (8422108) | 0)>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $0 = 7;
    $215 = $0;
    STACKTOP = sp;return ($215|0);
   }
   $15 = HEAP32[(gb + (8422108) | 0)>>2]|0;
   $16 = $1;
   $17 = $2;
   _swap_copy_rom($15,$16,$17,$imagetype);
   $18 = HEAP32[(gb + (8422108) | 0)>>2]|0;
   dest=(gb + (8422116) | 0); src=$18; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   _md5_init($state);
   $19 = HEAP32[(gb + (8422108) | 0)>>2]|0;
   $20 = HEAP32[(gb + (8422112) | 0)>>2]|0;
   _md5_append($state,$19,$20);
   _md5_finish($state,$digest);
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = ($21|0)<(16);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $23<<1;
    $25 = (($buffer) + ($24)|0);
    $26 = $i;
    $27 = (($digest) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    HEAP32[$vararg_buffer3>>2] = $29;
    (_sprintf(($25|0),((gb + (14309) | 0)|0),($vararg_buffer3|0))|0);
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($buffer)) + 32|0);
   HEAP8[$32>>0] = 0;
   (_strcpy((((((gb + (23109551) | 0)) + 256|0))|0),($buffer|0))|0);
   $33 = HEAP16[((((gb + (8422116) | 0)) + 62|0))>>1]|0;
   $34 = (_rom_country_code_to_system_type($33)|0);
   HEAP32[((((gb + (8422180) | 0)) + 4|0))>>2] = $34;
   $35 = HEAP32[((((gb + (8422180) | 0)) + 4|0))>>2]|0;
   $36 = (_rom_system_type_to_vi_limit($35)|0);
   HEAP32[((((gb + (8422180) | 0)) + 8|0))>>2] = $36;
   $37 = HEAP32[((((gb + (8422180) | 0)) + 4|0))>>2]|0;
   $38 = (_rom_system_type_to_ai_dac_rate($37)|0);
   HEAP32[((((gb + (8422180) | 0)) + 12|0))>>2] = $38;
   HEAP8[((((gb + (8422180) | 0)) + 37|0))>>0] = 2;
   HEAP32[(gb + (8422180) | 0)>>2] = 0;
   ;HEAP32[((((gb + (8422180) | 0)) + 16|0))>>2]=HEAP32[((((gb + (8422116) | 0)) + 32|0))>>2]|0;HEAP32[((((gb + (8422180) | 0)) + 16|0))+4>>2]=HEAP32[((((gb + (8422116) | 0)) + 32|0))+4>>2]|0;HEAP32[((((gb + (8422180) | 0)) + 16|0))+8>>2]=HEAP32[((((gb + (8422116) | 0)) + 32|0))+8>>2]|0;HEAP32[((((gb + (8422180) | 0)) + 16|0))+12>>2]=HEAP32[((((gb + (8422116) | 0)) + 32|0))+12>>2]|0;HEAP32[((((gb + (8422180) | 0)) + 16|0))+16>>2]=HEAP32[((((gb + (8422116) | 0)) + 32|0))+16>>2]|0;
   HEAP8[((((gb + (8422180) | 0)) + 36|0))>>0] = 0;
   (_trim(((((gb + (8422180) | 0)) + 16|0)))|0);
   $39 = (_ini_search_by_md5($digest)|0);
   $entry = $39;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    label = 13;
   } else {
    $41 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
    $42 = $41 & 255;
    $43 = $42 << 24;
    $44 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
    $45 = $44 & 65280;
    $46 = $45 << 8;
    $47 = $43 | $46;
    $48 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
    $49 = $48 & 16711680;
    $50 = $49 >>> 8;
    $51 = $47 | $50;
    $52 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
    $53 = $52 & -16777216;
    $54 = $53 >>> 24;
    $55 = $51 | $54;
    $56 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
    $57 = $56 & 255;
    $58 = $57 << 24;
    $59 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
    $60 = $59 & 65280;
    $61 = $60 << 8;
    $62 = $58 | $61;
    $63 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
    $64 = $63 & 16711680;
    $65 = $64 >>> 8;
    $66 = $62 | $65;
    $67 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
    $68 = $67 & -16777216;
    $69 = $68 >>> 24;
    $70 = $66 | $69;
    $71 = (_ini_search_by_crc($55,$70)|0);
    $entry = $71;
    $72 = ($71|0)!=(0|0);
    if ($72) {
     label = 13;
    } else {
     (_strcpy(((gb + (23109551) | 0)|0),(((((gb + (8422180) | 0)) + 16|0))|0))|0);
     (_strcat(((gb + (23109551) | 0)|0),((gb + (14314) | 0)|0))|0);
     HEAP8[((((gb + (23109551) | 0)) + 289|0))>>0] = 5;
     HEAP8[((((gb + (23109551) | 0)) + 290|0))>>0] = 0;
     HEAP8[((((gb + (23109551) | 0)) + 291|0))>>0] = 0;
     HEAP8[((((gb + (23109551) | 0)) + 292|0))>>0] = 0;
     HEAP8[((((gb + (8422180) | 0)) + 37|0))>>0] = 2;
     HEAP32[(gb + (8422180) | 0)>>2] = 0;
    }
   }
   if ((label|0) == 13) {
    $73 = $entry;
    $74 = HEAP32[$73>>2]|0;
    (_strncpy(((gb + (23109551) | 0)|0),($74|0),255)|0);
    HEAP8[((((gb + (23109551) | 0)) + 255|0))>>0] = 0;
    $75 = $entry;
    $76 = ((($75)) + 37|0);
    $77 = HEAP8[$76>>0]|0;
    HEAP8[((((gb + (23109551) | 0)) + 289|0))>>0] = $77;
    $78 = $entry;
    $79 = ((($78)) + 36|0);
    $80 = HEAP8[$79>>0]|0;
    HEAP8[((((gb + (23109551) | 0)) + 290|0))>>0] = $80;
    $81 = $entry;
    $82 = ((($81)) + 38|0);
    $83 = HEAP8[$82>>0]|0;
    HEAP8[((((gb + (23109551) | 0)) + 291|0))>>0] = $83;
    $84 = $entry;
    $85 = ((($84)) + 39|0);
    $86 = HEAP8[$85>>0]|0;
    HEAP8[((((gb + (23109551) | 0)) + 292|0))>>0] = $86;
    $87 = $entry;
    $88 = ((($87)) + 40|0);
    $89 = HEAP8[$88>>0]|0;
    HEAP8[((((gb + (8422180) | 0)) + 37|0))>>0] = $89;
    $90 = $entry;
    $91 = ((($90)) + 24|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[(gb + (8422180) | 0)>>2] = $92;
   }
   HEAP32[$vararg_buffer5>>2] = (gb + (23109551) | 0);
   _DebugMessage(3,(gb + (14329) | 0),$vararg_buffer5);
   HEAP32[$vararg_buffer8>>2] = ((((gb + (8422116) | 0)) + 32|0));
   _DebugMessage(3,(gb + (14342) | 0),$vararg_buffer8);
   $93 = HEAP8[$imagetype>>0]|0;
   _imagestring($93,$buffer);
   HEAP32[$vararg_buffer11>>2] = ((((gb + (23109551) | 0)) + 256|0));
   _DebugMessage(3,(gb + (14351) | 0),$vararg_buffer11);
   $94 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
   $95 = $94 & 255;
   $96 = $95 << 24;
   $97 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
   $98 = $97 & 65280;
   $99 = $98 << 8;
   $100 = $96 | $99;
   $101 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
   $102 = $101 & 16711680;
   $103 = $102 >>> 8;
   $104 = $100 | $103;
   $105 = HEAP32[((((gb + (8422116) | 0)) + 16|0))>>2]|0;
   $106 = $105 & -16777216;
   $107 = $106 >>> 24;
   $108 = $104 | $107;
   $109 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
   $110 = $109 & 255;
   $111 = $110 << 24;
   $112 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
   $113 = $112 & 65280;
   $114 = $113 << 8;
   $115 = $111 | $114;
   $116 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
   $117 = $116 & 16711680;
   $118 = $117 >>> 8;
   $119 = $115 | $118;
   $120 = HEAP32[((((gb + (8422116) | 0)) + 20|0))>>2]|0;
   $121 = $120 & -16777216;
   $122 = $121 >>> 24;
   $123 = $119 | $122;
   HEAP32[$vararg_buffer14>>2] = $108;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $123;
   _DebugMessage(3,(gb + (14359) | 0),$vararg_buffer14);
   HEAP32[$vararg_buffer18>>2] = $buffer;
   _DebugMessage(3,(gb + (14370) | 0),$vararg_buffer18);
   $124 = HEAP32[(gb + (8422112) | 0)>>2]|0;
   $125 = HEAP32[(gb + (8422112) | 0)>>2]|0;
   $126 = (($125|0) / 1024)&-1;
   $127 = (($126|0) / 1024)&-1;
   $128 = HEAP32[(gb + (8422112) | 0)>>2]|0;
   $129 = (($128|0) / 1024)&-1;
   $130 = (($129|0) / 1024)&-1;
   $131 = $130<<3;
   HEAP32[$vararg_buffer21>>2] = $124;
   $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
   HEAP32[$vararg_ptr24>>2] = $127;
   $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
   HEAP32[$vararg_ptr25>>2] = $131;
   _DebugMessage(3,(gb + (14384) | 0),$vararg_buffer21);
   $132 = HEAP32[((((gb + (8422116) | 0)) + 4|0))>>2]|0;
   $133 = $132 & 255;
   $134 = $133 << 24;
   $135 = HEAP32[((((gb + (8422116) | 0)) + 4|0))>>2]|0;
   $136 = $135 & 65280;
   $137 = $136 << 8;
   $138 = $134 | $137;
   $139 = HEAP32[((((gb + (8422116) | 0)) + 4|0))>>2]|0;
   $140 = $139 & 16711680;
   $141 = $140 >>> 8;
   $142 = $138 | $141;
   $143 = HEAP32[((((gb + (8422116) | 0)) + 4|0))>>2]|0;
   $144 = $143 & -16777216;
   $145 = $144 >>> 24;
   $146 = $142 | $145;
   HEAP32[$vararg_buffer26>>2] = $146;
   _DebugMessage(5,(gb + (14429) | 0),$vararg_buffer26);
   $147 = HEAP32[((((gb + (8422116) | 0)) + 12|0))>>2]|0;
   $148 = $147 & 255;
   $149 = $148 << 24;
   $150 = HEAP32[((((gb + (8422116) | 0)) + 12|0))>>2]|0;
   $151 = $150 & 65280;
   $152 = $151 << 8;
   $153 = $149 | $152;
   $154 = HEAP32[((((gb + (8422116) | 0)) + 12|0))>>2]|0;
   $155 = $154 & 16711680;
   $156 = $155 >>> 8;
   $157 = $153 | $156;
   $158 = HEAP32[((((gb + (8422116) | 0)) + 12|0))>>2]|0;
   $159 = $158 & -16777216;
   $160 = $159 >>> 24;
   $161 = $157 | $160;
   HEAP32[$vararg_buffer29>>2] = $161;
   _DebugMessage(3,(gb + (14444) | 0),$vararg_buffer29);
   $162 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
   $163 = $162 & 255;
   $164 = $163 << 24;
   $165 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
   $166 = $165 & 65280;
   $167 = $166 << 8;
   $168 = $164 | $167;
   $169 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
   $170 = $169 & 16711680;
   $171 = $170 >>> 8;
   $172 = $168 | $171;
   $173 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
   $174 = $173 & -16777216;
   $175 = $174 >>> 24;
   $176 = $172 | $175;
   $177 = ($176|0)==(78);
   if ($177) {
    _DebugMessage(3,(gb + (14456) | 0),$vararg_buffer32);
   } else {
    $178 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
    $179 = $178 & 255;
    $180 = $179 << 24;
    $181 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
    $182 = $181 & 65280;
    $183 = $182 << 8;
    $184 = $180 | $183;
    $185 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
    $186 = $185 & 16711680;
    $187 = $186 >>> 8;
    $188 = $184 | $187;
    $189 = HEAP32[((((gb + (8422116) | 0)) + 56|0))>>2]|0;
    $190 = $189 & -16777216;
    $191 = $190 >>> 24;
    $192 = $188 | $191;
    HEAP32[$vararg_buffer34>>2] = $192;
    _DebugMessage(3,(gb + (14479) | 0),$vararg_buffer34);
   }
   $193 = HEAP16[((((gb + (8422116) | 0)) + 60|0))>>1]|0;
   $194 = $193&65535;
   HEAP32[$vararg_buffer37>>2] = $194;
   _DebugMessage(5,(gb + (14496) | 0),$vararg_buffer37);
   $195 = HEAP16[((((gb + (8422116) | 0)) + 62|0))>>1]|0;
   _countrycodestring($195,$buffer);
   HEAP32[$vararg_buffer40>>2] = $buffer;
   _DebugMessage(3,(gb + (14513) | 0),$vararg_buffer40);
   $196 = HEAP32[((((gb + (8422116) | 0)) + 8|0))>>2]|0;
   $197 = $196 & 255;
   $198 = $197 << 24;
   $199 = HEAP32[((((gb + (8422116) | 0)) + 8|0))>>2]|0;
   $200 = $199 & 65280;
   $201 = $200 << 8;
   $202 = $198 | $201;
   $203 = HEAP32[((((gb + (8422116) | 0)) + 8|0))>>2]|0;
   $204 = $203 & 16711680;
   $205 = $204 >>> 8;
   $206 = $202 | $205;
   $207 = HEAP32[((((gb + (8422116) | 0)) + 8|0))>>2]|0;
   $208 = $207 & -16777216;
   $209 = $208 >>> 24;
   $210 = $206 | $209;
   HEAP32[$vararg_buffer43>>2] = $210;
   _DebugMessage(5,(gb + (14525) | 0),$vararg_buffer43);
   $211 = HEAP8[((((gb + (23109551) | 0)) + 289|0))>>0]|0;
   $212 = $211&255;
   HEAP32[$vararg_buffer46>>2] = $212;
   _DebugMessage(5,(gb + (14533) | 0),$vararg_buffer46);
   HEAP8[(gb + (23109550) | 0)>>0] = 0;
   $213 = (_strcmp((((((gb + (8422180) | 0)) + 16|0))|0),((gb + (14547) | 0)|0))|0);
   $214 = ($213|0)==(0);
   if ($214) {
    HEAP8[(gb + (23109550) | 0)>>0] = 1;
   }
   $0 = 0;
   $215 = $0;
   STACKTOP = sp;return ($215|0);
  }
 }
 _DebugMessage(1,(gb + (14275) | 0),$vararg_buffer1);
 $0 = 5;
 $215 = $0;
 STACKTOP = sp;return ($215|0);
}
function _ini_search_by_crc($crc1,$crc2) {
 $crc1 = $crc1|0;
 $crc2 = $crc2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $search = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $crc1;
 $2 = $crc2;
 $3 = HEAP32[(gb + (8422220) | 0)>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $5 = $1;
 $6 = $5 >>> 24;
 $7 = $6 & 255;
 $8 = (((((gb + (8422220) | 0)) + 4|0)) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $search = $9;
 while(1) {
  $10 = $search;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $search;
   $13 = ((($12)) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = ($14|0)!=($15|0);
   if ($16) {
    $17 = $search;
    $18 = ((($17)) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $2;
    $21 = ($19|0)!=($20|0);
    $28 = $21;
   } else {
    $28 = 0;
   }
  } else {
   $28 = 0;
  }
  $22 = $search;
  if (!($28)) {
   break;
  }
  $23 = ((($22)) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $search = $24;
 }
 $25 = ($22|0)==(0|0);
 if ($25) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = $search;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _close_rom() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $0 = 10;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 } else {
  $3 = HEAP32[(gb + (8422108) | 0)>>2]|0;
  _free(($3|0));
  HEAP32[(gb + (8422108) | 0)>>2] = 0;
  HEAP32[(gb + (8410656) | 0)>>2] = 0;
  _DebugMessage(4,(gb + (14557) | 0),$vararg_buffer);
  $0 = 0;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _romdatabase_open() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $counter = 0, $fPtr = 0, $garbage_sweeper = 0, $index = 0;
 var $l = 0, $len1 = 0, $len2 = 0, $line = 0, $lineno = 0, $md5 = 0, $md51 = 0, $newcheat = 0, $next_search = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pathname = 0, $search = 0, $value = 0;
 var $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 104|0;
 $vararg_buffer48 = sp + 96|0;
 $vararg_buffer45 = sp + 88|0;
 $vararg_buffer42 = sp + 80|0;
 $vararg_buffer39 = sp + 72|0;
 $vararg_buffer36 = sp + 64|0;
 $vararg_buffer33 = sp + 56|0;
 $vararg_buffer30 = sp + 48|0;
 $vararg_buffer27 = sp + 40|0;
 $vararg_buffer22 = sp + 24|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 216|0;
 $value = sp + 144|0;
 $line = sp + 132|0;
 $l = sp + 120|0;
 $md5 = sp + 192|0;
 $garbage_sweeper = sp + 184|0;
 $md51 = sp + 168|0;
 $search = 0;
 $0 = (_ConfigGetSharedDataFilepath((gb + (14569) | 0))|0);
 $pathname = $0;
 $1 = HEAP32[(gb + (8422220) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $pathname;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $pathname;
  $6 = (_fopen(($5|0),((gb + (20660) | 0)|0))|0);
  $fPtr = $6;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   HEAP32[(gb + (8422220) | 0)>>2] = 1;
   $counter = 0;
   while(1) {
    $9 = $counter;
    $10 = ($9|0)<(255);
    if (!($10)) {
     break;
    }
    $11 = $counter;
    $12 = (((((gb + (8422220) | 0)) + 4|0)) + ($11<<2)|0);
    HEAP32[$12>>2] = 0;
    $13 = $counter;
    $14 = (($13) + 1)|0;
    $counter = $14;
   }
   $counter = 0;
   while(1) {
    $15 = $counter;
    $16 = ($15|0)<(255);
    if (!($16)) {
     break;
    }
    $17 = $counter;
    $18 = (((((gb + (8422220) | 0)) + 1028|0)) + ($17<<2)|0);
    HEAP32[$18>>2] = 0;
    $19 = $counter;
    $20 = (($19) + 1)|0;
    $counter = $20;
   }
   HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2] = 0;
   $next_search = ((((gb + (8422220) | 0)) + 2052|0));
   $lineno = 1;
   while(1) {
    $21 = $fPtr;
    $22 = (_fgets(($buffer|0),255,($21|0))|0);
    $23 = ($22|0)!=(0|0);
    if (!($23)) {
     break;
    }
    HEAP32[$line>>2] = $buffer;
    _ini_parse_line($l,$line);
    $24 = HEAP32[$l>>2]|0;
    L18: do {
     switch ($24|0) {
     case 2:  {
      $25 = ((($l)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_parse_hex($26,$md5,16)|0);
      $28 = ($27|0)!=(0);
      if ($28) {
       $30 = (_malloc(60)|0);
       $31 = $next_search;
       HEAP32[$31>>2] = $30;
       $32 = $next_search;
       $33 = HEAP32[$32>>2]|0;
       $search = $33;
       $34 = $search;
       $35 = ((($34)) + 48|0);
       $next_search = $35;
       $36 = $search;
       HEAP32[$36>>2] = 0;
       $37 = $search;
       $38 = ((($37)) + 4|0);
       dest=$38; src=$md5; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $39 = $search;
       $40 = ((($39)) + 20|0);
       HEAP32[$40>>2] = 0;
       $41 = $search;
       $42 = ((($41)) + 28|0);
       HEAP32[$42>>2] = 0;
       $43 = $search;
       $44 = ((($43)) + 32|0);
       HEAP32[$44>>2] = 0;
       $45 = $search;
       $46 = ((($45)) + 36|0);
       HEAP8[$46>>0] = 0;
       $47 = $search;
       $48 = ((($47)) + 37|0);
       HEAP8[$48>>0] = 16;
       $49 = $search;
       $50 = ((($49)) + 38|0);
       HEAP8[$50>>0] = 16;
       $51 = $search;
       $52 = ((($51)) + 39|0);
       HEAP8[$52>>0] = 16;
       $53 = $search;
       $54 = ((($53)) + 40|0);
       HEAP8[$54>>0] = 2;
       $55 = $search;
       $56 = ((($55)) + 24|0);
       HEAP32[$56>>2] = 0;
       $57 = $search;
       $58 = ((($57)) + 44|0);
       HEAP32[$58>>2] = 0;
       $59 = $search;
       $60 = ((($59)) + 48|0);
       HEAP32[$60>>2] = 0;
       $61 = $search;
       $62 = ((($61)) + 52|0);
       HEAP32[$62>>2] = 0;
       $63 = $search;
       $64 = ((($63)) + 4|0);
       $65 = HEAP8[$64>>0]|0;
       $index = $65;
       $66 = $index;
       $67 = $66&255;
       $68 = (((((gb + (8422220) | 0)) + 1028|0)) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = $search;
       $71 = ((($70)) + 56|0);
       HEAP32[$71>>2] = $69;
       $72 = $search;
       $73 = $index;
       $74 = $73&255;
       $75 = (((((gb + (8422220) | 0)) + 1028|0)) + ($74<<2)|0);
       HEAP32[$75>>2] = $72;
       break L18;
      } else {
       $29 = $lineno;
       HEAP32[$vararg_buffer16>>2] = $29;
       _DebugMessage(2,(gb + (14624) | 0),$vararg_buffer16);
       $search = 0;
       break L18;
      }
      break;
     }
     case 3:  {
      $76 = $search;
      $77 = ($76|0)==(0|0);
      if ($77) {
       $78 = $lineno;
       HEAP32[$vararg_buffer19>>2] = $78;
       _DebugMessage(2,(gb + (14661) | 0),$vararg_buffer19);
       break L18;
      }
      $79 = ((($l)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (_strcmp(($80|0),((gb + (14704) | 0)|0))|0);
      $82 = ($81|0)!=(0);
      if (!($82)) {
       $83 = ((($l)) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (_strdup(($84|0))|0);
       $86 = $search;
       HEAP32[$86>>2] = $85;
       $87 = $search;
       $88 = ((($87)) + 44|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $89 | 1;
       HEAP32[$88>>2] = $90;
       break L18;
      }
      $91 = ((($l)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (_strcmp(($92|0),((gb + (14713) | 0)|0))|0);
      $94 = ($93|0)!=(0);
      if (!($94)) {
       $95 = ((($l)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = $search;
       $98 = ((($97)) + 28|0);
       $99 = $search;
       $100 = ((($99)) + 32|0);
       HEAP32[$vararg_buffer22>>2] = $98;
       $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
       HEAP32[$vararg_ptr25>>2] = $100;
       $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
       HEAP32[$vararg_ptr26>>2] = $garbage_sweeper;
       $101 = (_sscanf(($96|0),((gb + (14717) | 0)|0),($vararg_buffer22|0))|0);
       $102 = ($101|0)==(2);
       $103 = $search;
       if ($102) {
        $104 = ((($103)) + 28|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = $105 >>> 24;
        $107 = $106&255;
        $index = $107;
        $108 = $index;
        $109 = $108&255;
        $110 = (((((gb + (8422220) | 0)) + 4|0)) + ($109<<2)|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = $search;
        $113 = ((($112)) + 52|0);
        HEAP32[$113>>2] = $111;
        $114 = $search;
        $115 = $index;
        $116 = $115&255;
        $117 = (((((gb + (8422220) | 0)) + 4|0)) + ($116<<2)|0);
        HEAP32[$117>>2] = $114;
        $118 = $search;
        $119 = ((($118)) + 44|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = $120 | 2;
        HEAP32[$119>>2] = $121;
        break L18;
       } else {
        $122 = ((($103)) + 32|0);
        HEAP32[$122>>2] = 0;
        $123 = $search;
        $124 = ((($123)) + 28|0);
        HEAP32[$124>>2] = 0;
        $125 = $lineno;
        HEAP32[$vararg_buffer27>>2] = $125;
        _DebugMessage(2,(gb + (14725) | 0),$vararg_buffer27);
        break L18;
       }
      }
      $126 = ((($l)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (_strcmp(($127|0),((gb + (14762) | 0)|0))|0);
      $129 = ($128|0)!=(0);
      if (!($129)) {
       $130 = ((($l)) + 8|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (_parse_hex($131,$md51,16)|0);
       $133 = ($132|0)!=(0);
       if ($133) {
        $134 = (_malloc(16)|0);
        $135 = $search;
        $136 = ((($135)) + 20|0);
        HEAP32[$136>>2] = $134;
        $137 = $search;
        $138 = ((($137)) + 20|0);
        $139 = HEAP32[$138>>2]|0;
        dest=$139; src=$md51; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        break L18;
       } else {
        $140 = $lineno;
        HEAP32[$vararg_buffer30>>2] = $140;
        _DebugMessage(2,(gb + (14769) | 0),$vararg_buffer30);
        break L18;
       }
      }
      $141 = ((($l)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (_strcmp(($142|0),((gb + (14809) | 0)|0))|0);
      $144 = ($143|0)!=(0);
      if (!($144)) {
       $145 = ((($l)) + 8|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (_strcmp(($146|0),((gb + (14818) | 0)|0))|0);
       $148 = ($147|0)!=(0);
       if (!($148)) {
        $149 = $search;
        $150 = ((($149)) + 37|0);
        HEAP8[$150>>0] = 0;
        $151 = $search;
        $152 = ((($151)) + 44|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = $153 | 8;
        HEAP32[$152>>2] = $154;
        break L18;
       }
       $155 = ((($l)) + 8|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (_strcmp(($156|0),((gb + (14829) | 0)|0))|0);
       $158 = ($157|0)!=(0);
       if (!($158)) {
        $159 = $search;
        $160 = ((($159)) + 37|0);
        HEAP8[$160>>0] = 1;
        $161 = $search;
        $162 = ((($161)) + 44|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = $163 | 8;
        HEAP32[$162>>2] = $164;
        break L18;
       }
       $165 = ((($l)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (_strcmp(($166|0),((gb + (14841) | 0)|0))|0);
       $168 = ($167|0)!=(0);
       if (!($168)) {
        $169 = $search;
        $170 = ((($169)) + 37|0);
        HEAP8[$170>>0] = 2;
        $171 = $search;
        $172 = ((($171)) + 44|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = $173 | 8;
        HEAP32[$172>>2] = $174;
        break L18;
       }
       $175 = ((($l)) + 8|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (_strcmp(($176|0),((gb + (14846) | 0)|0))|0);
       $178 = ($177|0)!=(0);
       if (!($178)) {
        $179 = $search;
        $180 = ((($179)) + 37|0);
        HEAP8[$180>>0] = 3;
        $181 = $search;
        $182 = ((($181)) + 44|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = $183 | 8;
        HEAP32[$182>>2] = $184;
        break L18;
       }
       $185 = ((($l)) + 8|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = (_strcmp(($186|0),((gb + (14856) | 0)|0))|0);
       $188 = ($187|0)!=(0);
       if (!($188)) {
        $189 = $search;
        $190 = ((($189)) + 37|0);
        HEAP8[$190>>0] = 4;
        $191 = $search;
        $192 = ((($191)) + 44|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = $193 | 8;
        HEAP32[$192>>2] = $194;
        break L18;
       }
       $195 = ((($l)) + 8|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (_strcmp(($196|0),((gb + (14872) | 0)|0))|0);
       $198 = ($197|0)!=(0);
       if ($198) {
        $205 = $lineno;
        HEAP32[$vararg_buffer33>>2] = $205;
        _DebugMessage(2,(gb + (14877) | 0),$vararg_buffer33);
        break L18;
       } else {
        $199 = $search;
        $200 = ((($199)) + 37|0);
        HEAP8[$200>>0] = 5;
        $201 = $search;
        $202 = ((($201)) + 44|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = $203 | 8;
        HEAP32[$202>>2] = $204;
        break L18;
       }
      }
      $206 = ((($l)) + 4|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (_strcmp(($207|0),((gb + (14920) | 0)|0))|0);
      $209 = ($208|0)!=(0);
      if (!($209)) {
       $210 = ((($l)) + 8|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = (_string_to_int($211,$value)|0);
       $213 = ($212|0)!=(0);
       $214 = HEAP32[$value>>2]|0;
       $215 = ($214|0)>=(0);
       $or$cond = $213 & $215;
       $216 = HEAP32[$value>>2]|0;
       $217 = ($216|0)<(6);
       $or$cond3 = $or$cond & $217;
       if ($or$cond3) {
        $218 = HEAP32[$value>>2]|0;
        $219 = $218&255;
        $220 = $search;
        $221 = ((($220)) + 36|0);
        HEAP8[$221>>0] = $219;
        $222 = $search;
        $223 = ((($222)) + 44|0);
        $224 = HEAP32[$223>>2]|0;
        $225 = $224 | 4;
        HEAP32[$223>>2] = $225;
        break L18;
       } else {
        $226 = $lineno;
        HEAP32[$vararg_buffer36>>2] = $226;
        _DebugMessage(2,(gb + (14927) | 0),$vararg_buffer36);
        break L18;
       }
      }
      $227 = ((($l)) + 4|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (_strcmp(($228|0),((gb + (14967) | 0)|0))|0);
      $230 = ($229|0)!=(0);
      if (!($230)) {
       $231 = ((($l)) + 8|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (_string_to_int($232,$value)|0);
       $234 = ($233|0)!=(0);
       $235 = HEAP32[$value>>2]|0;
       $236 = ($235|0)>=(0);
       $or$cond5 = $234 & $236;
       $237 = HEAP32[$value>>2]|0;
       $238 = ($237|0)<(8);
       $or$cond7 = $or$cond5 & $238;
       if ($or$cond7) {
        $239 = HEAP32[$value>>2]|0;
        $240 = $239&255;
        $241 = $search;
        $242 = ((($241)) + 38|0);
        HEAP8[$242>>0] = $240;
        $243 = $search;
        $244 = ((($243)) + 44|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = $245 | 16;
        HEAP32[$244>>2] = $246;
        break L18;
       } else {
        $247 = $lineno;
        HEAP32[$vararg_buffer39>>2] = $247;
        _DebugMessage(2,(gb + (14975) | 0),$vararg_buffer39);
        break L18;
       }
      }
      $248 = ((($l)) + 4|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (_strcmp(($249|0),((gb + (15021) | 0)|0))|0);
      $251 = ($250|0)!=(0);
      if (!($251)) {
       $252 = ((($l)) + 8|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = (_strcmp(($253|0),((gb + (15028) | 0)|0))|0);
       $255 = ($254|0)!=(0);
       if (!($255)) {
        $256 = $search;
        $257 = ((($256)) + 39|0);
        HEAP8[$257>>0] = 1;
        $258 = $search;
        $259 = ((($258)) + 44|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 | 32;
        HEAP32[$259>>2] = $261;
        break L18;
       }
       $262 = ((($l)) + 8|0);
       $263 = HEAP32[$262>>2]|0;
       $264 = (_strcmp(($263|0),((gb + (15032) | 0)|0))|0);
       $265 = ($264|0)!=(0);
       if ($265) {
        $272 = $lineno;
        HEAP32[$vararg_buffer42>>2] = $272;
        _DebugMessage(2,(gb + (15035) | 0),$vararg_buffer42);
        break L18;
       } else {
        $266 = $search;
        $267 = ((($266)) + 39|0);
        HEAP8[$267>>0] = 0;
        $268 = $search;
        $269 = ((($268)) + 44|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = $270 | 32;
        HEAP32[$269>>2] = $271;
        break L18;
       }
      }
      $273 = ((($l)) + 4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = (_strcmp(($274|0),((gb + (15082) | 0)|0))|0);
      $276 = ($275|0)!=(0);
      if (!($276)) {
       $277 = ((($l)) + 8|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (_string_to_int($278,$value)|0);
       $280 = ($279|0)!=(0);
       $281 = HEAP32[$value>>2]|0;
       $282 = ($281|0)>(0);
       $or$cond9 = $280 & $282;
       $283 = HEAP32[$value>>2]|0;
       $284 = ($283|0)<=(4);
       $or$cond11 = $or$cond9 & $284;
       if ($or$cond11) {
        $285 = HEAP32[$value>>2]|0;
        $286 = $285&255;
        $287 = $search;
        $288 = ((($287)) + 40|0);
        HEAP8[$288>>0] = $286;
        $289 = $search;
        $290 = ((($289)) + 44|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $291 | 64;
        HEAP32[$290>>2] = $292;
        break L18;
       } else {
        $293 = $lineno;
        HEAP32[$vararg_buffer45>>2] = $293;
        _DebugMessage(2,(gb + (15093) | 0),$vararg_buffer45);
        break L18;
       }
      }
      $294 = ((($l)) + 4|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = (_strncmp(($295|0),((gb + (15137) | 0)|0),5)|0);
      $297 = ($296|0)!=(0);
      if ($297) {
       $351 = $lineno;
       HEAP32[$vararg_buffer50>>2] = $351;
       _DebugMessage(2,(gb + (15182) | 0),$vararg_buffer50);
       break L18;
      }
      $len1 = 0;
      $len2 = 0;
      $298 = $search;
      $299 = ((($298)) + 24|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ($300|0)!=(0|0);
      if ($301) {
       $302 = $search;
       $303 = ((($302)) + 24|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = (_strlen(($304|0))|0);
       $len1 = $305;
      }
      $306 = ((($l)) + 8|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ($307|0)!=(0|0);
      if ($308) {
       $309 = ((($l)) + 8|0);
       $310 = HEAP32[$309>>2]|0;
       $311 = (_strlen(($310|0))|0);
       $len2 = $311;
      }
      $312 = $len1;
      $313 = ($312|0)==(0);
      $314 = $len2;
      $315 = ($314>>>0)>(0);
      $or$cond13 = $313 & $315;
      if ($or$cond13) {
       $316 = ((($l)) + 8|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = (_strdup(($317|0))|0);
       $319 = $search;
       $320 = ((($319)) + 24|0);
       HEAP32[$320>>2] = $318;
      }
      $321 = $len1;
      $322 = ($321|0)!=(0);
      $323 = $len2;
      $324 = ($323>>>0)>(0);
      $or$cond15 = $322 & $324;
      do {
       if ($or$cond15) {
        $325 = $len1;
        $326 = (($325) + 1)|0;
        $327 = $len2;
        $328 = (($326) + ($327))|0;
        $329 = (($328) + 1)|0;
        $330 = (_malloc(($329|0))|0);
        $newcheat = $330;
        $331 = $newcheat;
        $332 = ($331|0)!=(0|0);
        if ($332) {
         $333 = $newcheat;
         $334 = $search;
         $335 = ((($334)) + 24|0);
         $336 = HEAP32[$335>>2]|0;
         (_strcpy(($333|0),($336|0))|0);
         $337 = $newcheat;
         (_strcat(($337|0),((gb + (15180) | 0)|0))|0);
         $338 = $newcheat;
         $339 = ((($l)) + 8|0);
         $340 = HEAP32[$339>>2]|0;
         (_strcat(($338|0),($340|0))|0);
         $341 = $search;
         $342 = ((($341)) + 24|0);
         $343 = HEAP32[$342>>2]|0;
         _free(($343|0));
         $344 = $newcheat;
         $345 = $search;
         $346 = ((($345)) + 24|0);
         HEAP32[$346>>2] = $344;
         break;
        } else {
         _DebugMessage(2,(gb + (15143) | 0),$vararg_buffer48);
         break;
        }
       }
      } while(0);
      $347 = $search;
      $348 = ((($347)) + 44|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = $349 | 128;
      HEAP32[$348>>2] = $350;
      break;
     }
     default: {
     }
     }
    } while(0);
    $352 = $lineno;
    $353 = (($352) + 1)|0;
    $lineno = $353;
   }
   $354 = $fPtr;
   (_fclose(($354|0))|0);
   _romdatabase_resolve();
   STACKTOP = sp;return;
  }
 }
 $8 = $pathname;
 HEAP32[$vararg_buffer>>2] = $8;
 _DebugMessage(1,(gb + (14585) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _romdatabase_close() {
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $search = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (8422220) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 $2 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
 $3 = ($2|0)!=(0|0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $search = $6;
  $7 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   _free(($11|0));
  }
  $12 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   _free(($18|0));
  }
  $19 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  _free(($21|0));
  $22 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  _free(($22|0));
  $23 = $search;
  HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2] = $23;
  $$old = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
  $$old1 = ($$old|0)!=(0|0);
  if (!($$old1)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _is_valid_rom($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buffer;
 $2 = $1;
 $3 = (_memcmp(($2|0),((gb + (15314) | 0)|0),4)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = $1;
  $6 = (_memcmp(($5|0),((gb + (15306) | 0)|0),4)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = $1;
   $9 = (_memcmp(($8|0),((gb + (15310) | 0)|0),4)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $0 = 0;
    $11 = $0;
    STACKTOP = sp;return ($11|0);
   }
  }
 }
 $0 = 1;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _swap_copy_rom($dst,$src,$len,$imagetype) {
 $dst = $dst|0;
 $src = $src|0;
 $len = $len|0;
 $imagetype = $imagetype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dst16 = 0, $dst32 = 0, $i = 0, $i1 = 0, $src16 = 0, $src32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $src;
 $2 = $len;
 $3 = $imagetype;
 $4 = $1;
 $5 = (_memcmp(($4|0),((gb + (15306) | 0)|0),4)|0);
 $6 = ($5|0)==(0);
 $7 = $1;
 if ($6) {
  $src16 = $7;
  $8 = $0;
  $dst16 = $8;
  $9 = $3;
  HEAP8[$9>>0] = 1;
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = $2;
   $12 = ($10>>>0)<($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $src16;
   $14 = ((($13)) + 2|0);
   $src16 = $14;
   $15 = HEAP16[$13>>1]|0;
   $16 = (_m64p_swap16_398($15)|0);
   $17 = $dst16;
   $18 = ((($17)) + 2|0);
   $dst16 = $18;
   HEAP16[$17>>1] = $16;
   $19 = $i;
   $20 = (($19) + 2)|0;
   $i = $20;
  }
  STACKTOP = sp;return;
 }
 $21 = (_memcmp(($7|0),((gb + (15310) | 0)|0),4)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $37 = $3;
  HEAP8[$37>>0] = 0;
  $38 = $0;
  $39 = $1;
  $40 = $2;
  _memcpy(($38|0),($39|0),($40|0))|0;
  STACKTOP = sp;return;
 }
 $23 = $1;
 $src32 = $23;
 $24 = $0;
 $dst32 = $24;
 $25 = $3;
 HEAP8[$25>>0] = 2;
 $i1 = 0;
 while(1) {
  $26 = $i1;
  $27 = $2;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $src32;
  $30 = ((($29)) + 4|0);
  $src32 = $30;
  $31 = HEAP32[$29>>2]|0;
  $32 = (_m64p_swap32_399($31)|0);
  $33 = $dst32;
  $34 = ((($33)) + 4|0);
  $dst32 = $34;
  HEAP32[$33>>2] = $32;
  $35 = $i1;
  $36 = (($35) + 4)|0;
  $i1 = $36;
 }
 STACKTOP = sp;return;
}
function _rom_country_code_to_system_type($country_code) {
 $country_code = $country_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $country_code;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 & 255;
 switch ($4|0) {
 case 89: case 88: case 85: case 83: case 80: case 73: case 70: case 68:  {
  $0 = 1;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _rom_system_type_to_vi_limit($system_type) {
 $system_type = $system_type|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $system_type;
 $2 = $1;
 $$off = (($2) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $0 = 50;
 } else {
  $0 = 60;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _rom_system_type_to_ai_dac_rate($system_type) {
 $system_type = $system_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $system_type;
 $2 = $1;
 switch ($2|0) {
 case 1:  {
  $0 = 49656530;
  break;
 }
 case 2:  {
  $0 = 48628316;
  break;
 }
 default: {
  $0 = 48681812;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _ini_search_by_md5($md5) {
 $md5 = $md5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $search = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $md5;
 $2 = HEAP32[(gb + (8422220) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (((((gb + (8422220) | 0)) + 1028|0)) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $search = $8;
 while(1) {
  $9 = $search;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $search;
   $12 = ((($11)) + 4|0);
   $13 = $1;
   $14 = (_memcmp(($12|0),($13|0),16)|0);
   $15 = ($14|0)!=(0);
   $22 = $15;
  } else {
   $22 = 0;
  }
  $16 = $search;
  if (!($22)) {
   break;
  }
  $17 = ((($16)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $search = $18;
 }
 $19 = ($16|0)==(0|0);
 if ($19) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $20 = $search;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _romdatabase_resolve() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $last_skipped = 0, $skipped = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $last_skipped = -1;
 while(1) {
  $0 = (_romdatabase_resolve_round()|0);
  $skipped = $0;
  $1 = $skipped;
  $2 = $last_skipped;
  $3 = ($1|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $skipped;
  $last_skipped = $4;
  $5 = $skipped;
  $6 = ($5>>>0)>(0);
  if (!($6)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 _DebugMessage(1,(gb + (15224) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _romdatabase_resolve_round() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_bitmask = 0, $_bitmask1 = 0, $_bitmask10 = 0, $_bitmask11 = 0, $_bitmask12 = 0, $_bitmask13 = 0, $_bitmask14 = 0, $_bitmask15 = 0, $_bitmask2 = 0, $_bitmask3 = 0, $_bitmask4 = 0, $_bitmask5 = 0;
 var $_bitmask6 = 0, $_bitmask7 = 0, $_bitmask8 = 0, $_bitmask9 = 0, $entry = 0, $ref = 0, $skipped = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $skipped = 0;
 $16 = HEAP32[((((gb + (8422220) | 0)) + 2052|0))>>2]|0;
 $entry = $16;
 while(1) {
  $17 = $entry;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $entry;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  do {
   if ($22) {
    $23 = $entry;
    $24 = ((($23)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_ini_search_by_md5($25)|0);
    $ref = $26;
    $27 = $ref;
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     _DebugMessage(2,(gb + (15270) | 0),$vararg_buffer);
     break;
    }
    $29 = $ref;
    $30 = ((($29)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     $33 = $skipped;
     $34 = (($33) + 1)|0;
     $skipped = $34;
     break;
    }
    $_bitmask = 1;
    $35 = $_bitmask;
    $36 = $entry;
    $37 = ((($36)) + 44|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $35 & $38;
    $40 = $_bitmask;
    $41 = ($39|0)==($40|0);
    $42 = $41&1;
    $0 = $42;
    $43 = $0;
    $44 = ($43|0)!=(0);
    if (!($44)) {
     $_bitmask1 = 1;
     $45 = $_bitmask1;
     $46 = $ref;
     $47 = ((($46)) + 44|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $45 & $48;
     $50 = $_bitmask1;
     $51 = ($49|0)==($50|0);
     $52 = $51&1;
     $1 = $52;
     $53 = $1;
     $54 = ($53|0)!=(0);
     if ($54) {
      $55 = $ref;
      $56 = HEAP32[$55>>2]|0;
      $57 = (_strdup(($56|0))|0);
      $58 = $entry;
      HEAP32[$58>>2] = $57;
      $59 = $entry;
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)!=(0|0);
      if ($61) {
       $62 = $entry;
       $63 = ((($62)) + 44|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $64 | 1;
       HEAP32[$63>>2] = $65;
      }
     }
    }
    $_bitmask2 = 2;
    $66 = $_bitmask2;
    $67 = $entry;
    $68 = ((($67)) + 44|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $66 & $69;
    $71 = $_bitmask2;
    $72 = ($70|0)==($71|0);
    $73 = $72&1;
    $2 = $73;
    $74 = $2;
    $75 = ($74|0)!=(0);
    if (!($75)) {
     $_bitmask3 = 2;
     $76 = $_bitmask3;
     $77 = $ref;
     $78 = ((($77)) + 44|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $76 & $79;
     $81 = $_bitmask3;
     $82 = ($80|0)==($81|0);
     $83 = $82&1;
     $3 = $83;
     $84 = $3;
     $85 = ($84|0)!=(0);
     if ($85) {
      $86 = $ref;
      $87 = ((($86)) + 28|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $entry;
      $90 = ((($89)) + 28|0);
      HEAP32[$90>>2] = $88;
      $91 = $ref;
      $92 = ((($91)) + 32|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $entry;
      $95 = ((($94)) + 32|0);
      HEAP32[$95>>2] = $93;
      $96 = $entry;
      $97 = ((($96)) + 44|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = $98 | 2;
      HEAP32[$97>>2] = $99;
     }
    }
    $_bitmask4 = 4;
    $100 = $_bitmask4;
    $101 = $entry;
    $102 = ((($101)) + 44|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $100 & $103;
    $105 = $_bitmask4;
    $106 = ($104|0)==($105|0);
    $107 = $106&1;
    $4 = $107;
    $108 = $4;
    $109 = ($108|0)!=(0);
    if (!($109)) {
     $_bitmask5 = 4;
     $110 = $_bitmask5;
     $111 = $ref;
     $112 = ((($111)) + 44|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $110 & $113;
     $115 = $_bitmask5;
     $116 = ($114|0)==($115|0);
     $117 = $116&1;
     $5 = $117;
     $118 = $5;
     $119 = ($118|0)!=(0);
     if ($119) {
      $120 = $ref;
      $121 = ((($120)) + 36|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = $entry;
      $124 = ((($123)) + 36|0);
      HEAP8[$124>>0] = $122;
      $125 = $entry;
      $126 = ((($125)) + 44|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $127 | 4;
      HEAP32[$126>>2] = $128;
     }
    }
    $_bitmask6 = 8;
    $129 = $_bitmask6;
    $130 = $entry;
    $131 = ((($130)) + 44|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $129 & $132;
    $134 = $_bitmask6;
    $135 = ($133|0)==($134|0);
    $136 = $135&1;
    $6 = $136;
    $137 = $6;
    $138 = ($137|0)!=(0);
    if (!($138)) {
     $_bitmask7 = 8;
     $139 = $_bitmask7;
     $140 = $ref;
     $141 = ((($140)) + 44|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $139 & $142;
     $144 = $_bitmask7;
     $145 = ($143|0)==($144|0);
     $146 = $145&1;
     $7 = $146;
     $147 = $7;
     $148 = ($147|0)!=(0);
     if ($148) {
      $149 = $ref;
      $150 = ((($149)) + 37|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $entry;
      $153 = ((($152)) + 37|0);
      HEAP8[$153>>0] = $151;
      $154 = $entry;
      $155 = ((($154)) + 44|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $156 | 8;
      HEAP32[$155>>2] = $157;
     }
    }
    $_bitmask8 = 16;
    $158 = $_bitmask8;
    $159 = $entry;
    $160 = ((($159)) + 44|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $158 & $161;
    $163 = $_bitmask8;
    $164 = ($162|0)==($163|0);
    $165 = $164&1;
    $8 = $165;
    $166 = $8;
    $167 = ($166|0)!=(0);
    if (!($167)) {
     $_bitmask9 = 16;
     $168 = $_bitmask9;
     $169 = $ref;
     $170 = ((($169)) + 44|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $168 & $171;
     $173 = $_bitmask9;
     $174 = ($172|0)==($173|0);
     $175 = $174&1;
     $9 = $175;
     $176 = $9;
     $177 = ($176|0)!=(0);
     if ($177) {
      $178 = $ref;
      $179 = ((($178)) + 38|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $entry;
      $182 = ((($181)) + 38|0);
      HEAP8[$182>>0] = $180;
      $183 = $entry;
      $184 = ((($183)) + 44|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = $185 | 16;
      HEAP32[$184>>2] = $186;
     }
    }
    $_bitmask10 = 32;
    $187 = $_bitmask10;
    $188 = $entry;
    $189 = ((($188)) + 44|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $187 & $190;
    $192 = $_bitmask10;
    $193 = ($191|0)==($192|0);
    $194 = $193&1;
    $10 = $194;
    $195 = $10;
    $196 = ($195|0)!=(0);
    if (!($196)) {
     $_bitmask11 = 32;
     $197 = $_bitmask11;
     $198 = $ref;
     $199 = ((($198)) + 44|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $197 & $200;
     $202 = $_bitmask11;
     $203 = ($201|0)==($202|0);
     $204 = $203&1;
     $11 = $204;
     $205 = $11;
     $206 = ($205|0)!=(0);
     if ($206) {
      $207 = $ref;
      $208 = ((($207)) + 39|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = $entry;
      $211 = ((($210)) + 39|0);
      HEAP8[$211>>0] = $209;
      $212 = $entry;
      $213 = ((($212)) + 44|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = $214 | 32;
      HEAP32[$213>>2] = $215;
     }
    }
    $_bitmask12 = 64;
    $216 = $_bitmask12;
    $217 = $entry;
    $218 = ((($217)) + 44|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $216 & $219;
    $221 = $_bitmask12;
    $222 = ($220|0)==($221|0);
    $223 = $222&1;
    $12 = $223;
    $224 = $12;
    $225 = ($224|0)!=(0);
    if (!($225)) {
     $_bitmask13 = 64;
     $226 = $_bitmask13;
     $227 = $ref;
     $228 = ((($227)) + 44|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $226 & $229;
     $231 = $_bitmask13;
     $232 = ($230|0)==($231|0);
     $233 = $232&1;
     $13 = $233;
     $234 = $13;
     $235 = ($234|0)!=(0);
     if ($235) {
      $236 = $ref;
      $237 = ((($236)) + 40|0);
      $238 = HEAP8[$237>>0]|0;
      $239 = $entry;
      $240 = ((($239)) + 40|0);
      HEAP8[$240>>0] = $238;
      $241 = $entry;
      $242 = ((($241)) + 44|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $243 | 64;
      HEAP32[$242>>2] = $244;
     }
    }
    $_bitmask14 = 128;
    $245 = $_bitmask14;
    $246 = $entry;
    $247 = ((($246)) + 44|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $245 & $248;
    $250 = $_bitmask14;
    $251 = ($249|0)==($250|0);
    $252 = $251&1;
    $14 = $252;
    $253 = $14;
    $254 = ($253|0)!=(0);
    if (!($254)) {
     $_bitmask15 = 128;
     $255 = $_bitmask15;
     $256 = $ref;
     $257 = ((($256)) + 44|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $255 & $258;
     $260 = $_bitmask15;
     $261 = ($259|0)==($260|0);
     $262 = $261&1;
     $15 = $262;
     $263 = $15;
     $264 = ($263|0)!=(0);
     if ($264) {
      $265 = $ref;
      $266 = ((($265)) + 24|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ($267|0)!=(0|0);
      if ($268) {
       $269 = $ref;
       $270 = ((($269)) + 24|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = (_strdup(($271|0))|0);
       $273 = $entry;
       $274 = ((($273)) + 24|0);
       HEAP32[$274>>2] = $272;
      }
      $275 = $entry;
      $276 = ((($275)) + 44|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $277 | 128;
      HEAP32[$276>>2] = $278;
     }
    }
    $279 = $entry;
    $280 = ((($279)) + 20|0);
    $281 = HEAP32[$280>>2]|0;
    _free(($281|0));
    $282 = $entry;
    $283 = ((($282)) + 20|0);
    HEAP32[$283>>2] = 0;
   }
  } while(0);
  $284 = $entry;
  $285 = ((($284)) + 48|0);
  $286 = HEAP32[$285>>2]|0;
  $entry = $286;
 }
 $287 = $skipped;
 STACKTOP = sp;return ($287|0);
}
function _m64p_swap16_398($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 255;
 $4 = $3 << 8;
 $5 = $0;
 $6 = $5&65535;
 $7 = $6 & 65280;
 $8 = $7 >> 8;
 $9 = $4 | $8;
 $10 = $9&65535;
 STACKTOP = sp;return ($10|0);
}
function _m64p_swap32_399($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 << 24;
 $4 = $0;
 $5 = $4 & 65280;
 $6 = $5 << 8;
 $7 = $3 | $6;
 $8 = $0;
 $9 = $8 & 16711680;
 $10 = $9 >>> 8;
 $11 = $7 | $10;
 $12 = $0;
 $13 = $12 & -16777216;
 $14 = $13 >>> 24;
 $15 = $11 | $14;
 STACKTOP = sp;return ($15|0);
}
function _savestates_select_slot($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(9);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 HEAP32[(gb + (8424276) | 0)>>2] = $6;
 $7 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 (_ConfigSetParameter($7,(gb + (15318) | 0),1,$0)|0);
 $8 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 _StateChanged(3,$8);
 $9 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 _main_message(4,6,(gb + (15335) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _savestates_get_slot() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 return ($0|0);
}
function _savestates_set_autoinc_slot($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $0;
 HEAP32[(gb + (8424280) | 0)>>2] = $1;
 STACKTOP = sp;return;
}
function _savestates_inc_slot() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(gb + (8424276) | 0)>>2] = $1;
 $2 = ($1>>>0)>(9);
 $$ = $2 ? 0 : $1;
 HEAP32[(gb + (8424276) | 0)>>2] = $$;
 $3 = HEAP32[(gb + (8424276) | 0)>>2]|0;
 _StateChanged(3,$3);
 return;
}
function _savestates_get_job() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424284) | 0)>>2]|0;
 return ($0|0);
}
function _savestates_set_job($j,$t,$fn) {
 $j = $j|0;
 $t = $t|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $t;
 $2 = $fn;
 $3 = HEAP32[(gb + (8424288) | 0)>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[(gb + (8424288) | 0)>>2]|0;
  _free(($5|0));
  HEAP32[(gb + (8424288) | 0)>>2] = 0;
 }
 $6 = $0;
 HEAP32[(gb + (8424284) | 0)>>2] = $6;
 $7 = $1;
 HEAP32[(gb + (8424292) | 0)>>2] = $7;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = (_strdup(($10|0))|0);
 HEAP32[(gb + (8424288) | 0)>>2] = $11;
 STACKTOP = sp;return;
}
function _savestates_load() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fPtr = 0, $filepath = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fPtr = 0;
 $filepath = 0;
 $ret = 0;
 $0 = HEAP32[(gb + (8424288) | 0)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[(gb + (8424292) | 0)>>2] = 1;
  $2 = HEAP32[(gb + (8424292) | 0)>>2]|0;
  $3 = (_savestates_generate_path($2)|0);
  $filepath = $3;
  $4 = $filepath;
  $5 = (_fopen(($4|0),((gb + (20660) | 0)|0))|0);
  $fPtr = $5;
  $6 = $fPtr;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = $filepath;
   _free(($8|0));
   HEAP32[(gb + (8424292) | 0)>>2] = 2;
   $9 = HEAP32[(gb + (8424292) | 0)>>2]|0;
   $10 = (_savestates_generate_path($9)|0);
   $filepath = $10;
   $11 = $filepath;
   $12 = (_fopen(($11|0),((gb + (20660) | 0)|0))|0);
   $fPtr = $12;
   $13 = $fPtr;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $filepath;
    _free(($15|0));
    HEAP32[(gb + (8424292) | 0)>>2] = 3;
    $16 = HEAP32[(gb + (8424292) | 0)>>2]|0;
    $17 = (_savestates_generate_path($16)|0);
    $filepath = $17;
    $18 = $filepath;
    $19 = (_fopen(($18|0),((gb + (20660) | 0)|0))|0);
    $fPtr = $19;
    $20 = $fPtr;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $22 = $filepath;
     _free(($22|0));
     $filepath = 0;
     $23 = HEAP32[(gb + (8424276) | 0)>>2]|0;
     HEAP32[$vararg_buffer>>2] = $23;
     _main_message(4,6,(gb + (15359) | 0),$vararg_buffer);
     HEAP32[(gb + (8424292) | 0)>>2] = 0;
    }
   }
  }
 } else {
  $24 = HEAP32[(gb + (8424292) | 0)>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[(gb + (8424288) | 0)>>2]|0;
   $27 = (_savestates_detect_type($26)|0);
   HEAP32[(gb + (8424292) | 0)>>2] = $27;
  }
  $28 = HEAP32[(gb + (8424292) | 0)>>2]|0;
  $29 = (_savestates_generate_path($28)|0);
  $filepath = $29;
  $30 = $filepath;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $filepath;
   $33 = (_fopen(($32|0),((gb + (20660) | 0)|0))|0);
   $fPtr = $33;
  }
  $34 = $fPtr;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $36 = $filepath;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $filepath;
    _free(($38|0));
   }
   $filepath = 0;
   $39 = $filepath;
   HEAP32[$vararg_buffer1>>2] = $39;
   _main_message(4,6,(gb + (15408) | 0),$vararg_buffer1);
  }
 }
 $40 = $fPtr;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $fPtr;
  (_fclose(($42|0))|0);
 }
 $43 = $filepath;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  $53 = $ret;
  _StateChanged(10,$53);
  _savestates_clear_job();
  $54 = $ret;
  STACKTOP = sp;return ($54|0);
 }
 $45 = HEAP32[(gb + (8424292) | 0)>>2]|0;
 switch ($45|0) {
 case 1:  {
  $46 = $filepath;
  $47 = (_savestates_load_m64p($46)|0);
  $ret = $47;
  break;
 }
 case 2:  {
  $48 = $filepath;
  $49 = (_savestates_load_pj64_zip($48)|0);
  $ret = $49;
  break;
 }
 case 3:  {
  $50 = $filepath;
  $51 = (_savestates_load_pj64_unc($50)|0);
  $ret = $51;
  break;
 }
 default: {
  $ret = 0;
 }
 }
 $52 = $filepath;
 _free(($52|0));
 $filepath = 0;
 $53 = $ret;
 _StateChanged(10,$53);
 _savestates_clear_job();
 $54 = $ret;
 STACKTOP = sp;return ($54|0);
}
function _savestates_save() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filepath = 0, $or$cond = 0, $or$cond3 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = 0;
 $1 = HEAP32[(gb + (8424292) | 0)>>2]|0;
 $2 = ($1|0)==(2);
 $3 = HEAP32[(gb + (8424292) | 0)>>2]|0;
 $4 = ($3|0)==(3);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $5 = (_get_next_event_type()|0);
  $6 = ($5|0)>(2);
  if ($6) {
   $0 = 0;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $7 = HEAP32[(gb + (8424288) | 0)>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[(gb + (8424292) | 0)>>2]|0;
 $10 = ($9|0)==(0);
 $or$cond3 = $8 & $10;
 if ($or$cond3) {
  HEAP32[(gb + (8424292) | 0)>>2] = 1;
 } else {
  $11 = HEAP32[(gb + (8424288) | 0)>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   HEAP32[(gb + (8424292) | 0)>>2] = 1;
  }
 }
 $13 = HEAP32[(gb + (8424292) | 0)>>2]|0;
 $14 = (_savestates_generate_path($13)|0);
 $filepath = $14;
 $15 = $filepath;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[(gb + (8424292) | 0)>>2]|0;
  switch ($17|0) {
  case 1:  {
   $18 = $filepath;
   $19 = (_savestates_save_m64p($18)|0);
   $ret = $19;
   break;
  }
  case 2:  {
   $20 = $filepath;
   $21 = (_savestates_save_pj64_zip($20)|0);
   $ret = $21;
   break;
  }
  case 3:  {
   $22 = $filepath;
   $23 = (_savestates_save_pj64_unc($22)|0);
   $ret = $23;
   break;
  }
  default: {
   $ret = 0;
  }
  }
  $24 = $filepath;
  _free(($24|0));
 }
 $25 = $ret;
 _StateChanged(11,$25);
 _savestates_clear_job();
 $26 = $ret;
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _savestates_init() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_SDL_CreateMutex()|0);
 HEAP32[(gb + (8424296) | 0)>>2] = $0;
 $1 = HEAP32[(gb + (8424296) | 0)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _DebugMessage(1,(gb + (15441) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _savestates_deinit() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424296) | 0)>>2]|0;
 _SDL_DestroyMutex(($0|0));
 _savestates_clear_job();
 return;
}
function _savestates_generate_path($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $filename = 0, $filepath = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $type;
 $2 = HEAP32[(gb + (8424288) | 0)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(gb + (8424288) | 0)>>2]|0;
  $5 = (_strdup(($4|0))|0);
  $0 = $5;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $6 = $1;
 switch ($6|0) {
 case 1:  {
  $7 = HEAP32[(gb + (8424276) | 0)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (gb + (23109551) | 0);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $8 = (_formatstr((gb + (16421) | 0),$vararg_buffer)|0);
  $filename = $8;
  break;
 }
 case 2:  {
  $9 = HEAP32[(gb + (8424276) | 0)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = ((((gb + (8422180) | 0)) + 16|0));
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $9;
  $10 = (_formatstr((gb + (16429) | 0),$vararg_buffer2)|0);
  $filename = $10;
  break;
 }
 case 3:  {
  $11 = HEAP32[(gb + (8424276) | 0)>>2]|0;
  HEAP32[$vararg_buffer6>>2] = ((((gb + (8422180) | 0)) + 16|0));
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $11;
  $12 = (_formatstr((gb + (16441) | 0),$vararg_buffer6)|0);
  $filename = $12;
  break;
 }
 default: {
  $filename = 0;
 }
 }
 $13 = $filename;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = (_get_savestatepath()|0);
  $16 = $filename;
  HEAP32[$vararg_buffer10>>2] = $15;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $16;
  $17 = (_formatstr((gb + (16449) | 0),$vararg_buffer10)|0);
  $filepath = $17;
  $18 = $filename;
  _free(($18|0));
  $19 = $filepath;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _savestates_detect_type($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $magic = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $magic = sp + 32|0;
 $1 = $filepath;
 $2 = $1;
 $3 = (_fopen(($2|0),((gb + (20660) | 0)|0))|0);
 $f = $3;
 $4 = $f;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = $1;
   HEAP32[$vararg_buffer>>2] = $6;
   _DebugMessage(4,(gb + (16323) | 0),$vararg_buffer);
   $0 = 0;
  } else {
   $7 = $f;
   $8 = (_fread(($magic|0),1,4,($7|0))|0);
   $9 = ($8|0)!=(4);
   $10 = $f;
   (_fclose(($10|0))|0);
   if ($9) {
    $11 = $1;
    HEAP32[$vararg_buffer1>>2] = $11;
    _DebugMessage(4,(gb + (16353) | 0),$vararg_buffer1);
    $0 = 0;
    break;
   }
   $12 = HEAP8[$magic>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)==(31);
   if ($14) {
    $15 = ((($magic)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = ($17|0)==(139);
    if ($18) {
     $0 = 1;
     break;
    }
   }
   $19 = (_memcmp(($magic|0),((gb + (16388) | 0)|0),4)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $0 = 2;
    break;
   }
   $21 = (_memcmp(($magic|0),((gb + (15570) | 0)|0),4)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $0 = 3;
    break;
   } else {
    $23 = $1;
    HEAP32[$vararg_buffer4>>2] = $23;
    _DebugMessage(4,(gb + (16393) | 0),$vararg_buffer4);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _savestates_load_m64p($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $98 = 0, $99 = 0, $FCR31 = 0, $cp0_regs = 0, $curr = 0, $f = 0;
 var $header = 0, $i = 0, $queue = 0, $savestateData = 0, $savestateSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $version = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 1128|0;
 $queue = sp + 104|0;
 $1 = $filepath;
 $2 = (_r4300_cp0_regs()|0);
 $cp0_regs = $2;
 $3 = HEAP32[(gb + (8424296) | 0)>>2]|0;
 (_SDL_LockMutex(($3|0))|0);
 $4 = $1;
 $5 = (_gzopen(($4|0),((gb + (20660) | 0)|0))|0);
 $f = $5;
 $6 = $f;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  _main_message(4,6,(gb + (15665) | 0),$vararg_buffer);
  $9 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($9|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $10 = $f;
 $11 = (_gzread(($10|0),($header|0),44)|0);
 $12 = ($11|0)!=(44);
 if ($12) {
  $13 = $1;
  HEAP32[$vararg_buffer1>>2] = $13;
  _main_message(4,6,(gb + (16071) | 0),$vararg_buffer1);
  $14 = $f;
  (_gzclose(($14|0))|0);
  $15 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($15|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $curr = $header;
 $16 = $curr;
 $17 = HEAP32[(gb + (300) | 0)>>2]|0;
 $18 = (_strncmp(($16|0),($17|0),8)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  HEAP32[$vararg_buffer4>>2] = $20;
  _main_message(4,6,(gb + (16112) | 0),$vararg_buffer4);
  $21 = $f;
  (_gzclose(($21|0))|0);
  $22 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($22|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $23 = $curr;
 $24 = ((($23)) + 8|0);
 $curr = $24;
 $25 = $curr;
 $26 = ((($25)) + 1|0);
 $curr = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $version = $28;
 $29 = $version;
 $30 = $29 << 8;
 $31 = $curr;
 $32 = ((($31)) + 1|0);
 $curr = $32;
 $33 = HEAP8[$31>>0]|0;
 $34 = $33&255;
 $35 = $30 | $34;
 $version = $35;
 $36 = $version;
 $37 = $36 << 8;
 $38 = $curr;
 $39 = ((($38)) + 1|0);
 $curr = $39;
 $40 = HEAP8[$38>>0]|0;
 $41 = $40&255;
 $42 = $37 | $41;
 $version = $42;
 $43 = $version;
 $44 = $43 << 8;
 $45 = $curr;
 $46 = ((($45)) + 1|0);
 $curr = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $44 | $48;
 $version = $49;
 $50 = $version;
 $51 = ($50|0)!=(65536);
 if ($51) {
  $52 = $version;
  HEAP32[$vararg_buffer7>>2] = $52;
  _main_message(4,6,(gb + (16165) | 0),$vararg_buffer7);
  $53 = $f;
  (_gzclose(($53|0))|0);
  $54 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($54|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $55 = $curr;
 $56 = (_memcmp(($55|0),(((((gb + (23109551) | 0)) + 256|0))|0),32)|0);
 $57 = ($56|0)!=(0);
 if ($57) {
  _main_message(4,6,(gb + (16231) | 0),$vararg_buffer10);
  $58 = $f;
  (_gzclose(($58|0))|0);
  $59 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($59|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $60 = $curr;
 $61 = ((($60)) + 32|0);
 $curr = $61;
 $savestateSize = 16788244;
 $62 = $savestateSize;
 $63 = (_malloc(($62|0))|0);
 $curr = $63;
 $savestateData = $63;
 $64 = $savestateData;
 $65 = ($64|0)==(0|0);
 if ($65) {
  _main_message(4,6,(gb + (15892) | 0),$vararg_buffer12);
  $66 = $f;
  (_gzclose(($66|0))|0);
  $67 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($67|0))|0);
  $0 = 0;
  $975 = $0;
  STACKTOP = sp;return ($975|0);
 }
 $68 = $f;
 $69 = $savestateData;
 $70 = $savestateSize;
 $71 = (_gzread(($68|0),($69|0),($70|0))|0);
 $72 = $savestateSize;
 $73 = ($71|0)!=($72|0);
 if (!($73)) {
  $74 = $f;
  $75 = (_gzread(($74|0),($queue|0),1024)|0);
  $76 = (($75|0) % 4)&-1;
  $77 = ($76|0)!=(0);
  if (!($77)) {
   $82 = $f;
   (_gzclose(($82|0))|0);
   $83 = HEAP32[(gb + (8424296) | 0)>>2]|0;
   (_SDL_UnlockMutex(($83|0))|0);
   $84 = $curr;
   _to_little_endian_buffer($84,4,1);
   $85 = $curr;
   $86 = ((($85)) + 4|0);
   $curr = $86;
   $87 = $curr;
   $88 = ((($87)) + -4|0);
   $89 = HEAP32[$88>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 32|0))>>2] = $89;
   $90 = $curr;
   _to_little_endian_buffer($90,4,1);
   $91 = $curr;
   $92 = ((($91)) + 4|0);
   $curr = $92;
   $93 = $curr;
   $94 = ((($93)) + -4|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 36|0))>>2] = $95;
   $96 = $curr;
   _to_little_endian_buffer($96,4,1);
   $97 = $curr;
   $98 = ((($97)) + 4|0);
   $curr = $98;
   $99 = $curr;
   $100 = ((($99)) + -4|0);
   $101 = HEAP32[$100>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 40|0))>>2] = $101;
   $102 = $curr;
   _to_little_endian_buffer($102,4,1);
   $103 = $curr;
   $104 = ((($103)) + 4|0);
   $curr = $104;
   $105 = $curr;
   $106 = ((($105)) + -4|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 44|0))>>2] = $107;
   $108 = $curr;
   _to_little_endian_buffer($108,4,1);
   $109 = $curr;
   $110 = ((($109)) + 4|0);
   $curr = $110;
   $111 = $curr;
   $112 = ((($111)) + -4|0);
   $113 = HEAP32[$112>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 48|0))>>2] = $113;
   $114 = $curr;
   _to_little_endian_buffer($114,4,1);
   $115 = $curr;
   $116 = ((($115)) + 4|0);
   $curr = $116;
   $117 = $curr;
   $118 = ((($117)) + -4|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 52|0))>>2] = $119;
   $120 = $curr;
   _to_little_endian_buffer($120,4,1);
   $121 = $curr;
   $122 = ((($121)) + 4|0);
   $curr = $122;
   $123 = $curr;
   $124 = ((($123)) + -4|0);
   $125 = HEAP32[$124>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 56|0))>>2] = $125;
   $126 = $curr;
   _to_little_endian_buffer($126,4,1);
   $127 = $curr;
   $128 = ((($127)) + 4|0);
   $curr = $128;
   $129 = $curr;
   $130 = ((($129)) + -4|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 60|0))>>2] = $131;
   $132 = $curr;
   _to_little_endian_buffer($132,4,1);
   $133 = $curr;
   $134 = ((($133)) + 4|0);
   $curr = $134;
   $135 = $curr;
   $136 = ((($135)) + -4|0);
   $137 = HEAP32[$136>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 64|0))>>2] = $137;
   $138 = $curr;
   _to_little_endian_buffer($138,4,1);
   $139 = $curr;
   $140 = ((($139)) + 4|0);
   $curr = $140;
   $141 = $curr;
   $142 = ((($141)) + -4|0);
   $143 = HEAP32[$142>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 68|0))>>2] = $143;
   $144 = $curr;
   $145 = ((($144)) + 4|0);
   $curr = $145;
   $146 = $curr;
   _to_little_endian_buffer($146,4,1);
   $147 = $curr;
   $148 = ((($147)) + 4|0);
   $curr = $148;
   $149 = $curr;
   $150 = ((($149)) + -4|0);
   $151 = HEAP32[$150>>2]|0;
   HEAP32[(gb + (8410936) | 0)>>2] = $151;
   $152 = $curr;
   $153 = ((($152)) + 4|0);
   $curr = $153;
   $154 = $curr;
   _to_little_endian_buffer($154,4,1);
   $155 = $curr;
   $156 = ((($155)) + 4|0);
   $curr = $156;
   $157 = $curr;
   $158 = ((($157)) + -4|0);
   $159 = HEAP32[$158>>2]|0;
   HEAP32[((((gb + (8410936) | 0)) + 4|0))>>2] = $159;
   $160 = $curr;
   _to_little_endian_buffer($160,4,1);
   $161 = $curr;
   $162 = ((($161)) + 4|0);
   $curr = $162;
   $163 = $curr;
   $164 = ((($163)) + -4|0);
   $165 = HEAP32[$164>>2]|0;
   HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2] = $165;
   $166 = $curr;
   _to_little_endian_buffer($166,4,1);
   $167 = $curr;
   $168 = ((($167)) + 4|0);
   $curr = $168;
   $169 = $curr;
   $170 = ((($169)) + -4|0);
   $171 = HEAP32[$170>>2]|0;
   HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2] = $171;
   $172 = $curr;
   $173 = ((($172)) + 4|0);
   $curr = $173;
   $174 = $curr;
   $175 = ((($174)) + 8|0);
   $curr = $175;
   $176 = $curr;
   _to_little_endian_buffer($176,4,1);
   $177 = $curr;
   $178 = ((($177)) + 4|0);
   $curr = $178;
   $179 = $curr;
   $180 = ((($179)) + -4|0);
   $181 = HEAP32[$180>>2]|0;
   HEAP32[(gb + (8409824) | 0)>>2] = $181;
   $182 = $curr;
   _to_little_endian_buffer($182,4,1);
   $183 = $curr;
   $184 = ((($183)) + 4|0);
   $curr = $184;
   $185 = $curr;
   $186 = ((($185)) + -4|0);
   $187 = HEAP32[$186>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 4|0))>>2] = $187;
   $188 = $curr;
   _to_little_endian_buffer($188,4,1);
   $189 = $curr;
   $190 = ((($189)) + 4|0);
   $curr = $190;
   $191 = $curr;
   $192 = ((($191)) + -4|0);
   $193 = HEAP32[$192>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 8|0))>>2] = $193;
   $194 = $curr;
   _to_little_endian_buffer($194,4,1);
   $195 = $curr;
   $196 = ((($195)) + 4|0);
   $curr = $196;
   $197 = $curr;
   $198 = ((($197)) + -4|0);
   $199 = HEAP32[$198>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 12|0))>>2] = $199;
   $200 = $curr;
   _to_little_endian_buffer($200,4,1);
   $201 = $curr;
   $202 = ((($201)) + 4|0);
   $curr = $202;
   $203 = $curr;
   $204 = ((($203)) + -4|0);
   $205 = HEAP32[$204>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 16|0))>>2] = $205;
   $206 = $curr;
   _to_little_endian_buffer($206,4,1);
   $207 = $curr;
   $208 = ((($207)) + 4|0);
   $curr = $208;
   $209 = $curr;
   $210 = ((($209)) + -4|0);
   $211 = HEAP32[$210>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 20|0))>>2] = $211;
   $212 = $curr;
   _to_little_endian_buffer($212,4,1);
   $213 = $curr;
   $214 = ((($213)) + 4|0);
   $curr = $214;
   $215 = $curr;
   $216 = ((($215)) + -4|0);
   $217 = HEAP32[$216>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 24|0))>>2] = $217;
   $218 = $curr;
   _to_little_endian_buffer($218,4,1);
   $219 = $curr;
   $220 = ((($219)) + 4|0);
   $curr = $220;
   $221 = $curr;
   $222 = ((($221)) + -4|0);
   $223 = HEAP32[$222>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 28|0))>>2] = $223;
   $224 = $curr;
   _to_little_endian_buffer($224,4,1);
   $225 = $curr;
   $226 = ((($225)) + 4|0);
   $curr = $226;
   $227 = $curr;
   $228 = ((($227)) + -4|0);
   $229 = HEAP32[$228>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 32|0))>>2] = $229;
   $230 = $curr;
   _to_little_endian_buffer($230,4,1);
   $231 = $curr;
   $232 = ((($231)) + 4|0);
   $curr = $232;
   $233 = $curr;
   $234 = ((($233)) + -4|0);
   $235 = HEAP32[$234>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 36|0))>>2] = $235;
   $236 = $curr;
   _to_little_endian_buffer($236,4,1);
   $237 = $curr;
   $238 = ((($237)) + 4|0);
   $curr = $238;
   $239 = $curr;
   $240 = ((($239)) + -4|0);
   $241 = HEAP32[$240>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 40|0))>>2] = $241;
   $242 = $curr;
   _to_little_endian_buffer($242,4,1);
   $243 = $curr;
   $244 = ((($243)) + 4|0);
   $curr = $244;
   $245 = $curr;
   $246 = ((($245)) + -4|0);
   $247 = HEAP32[$246>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 44|0))>>2] = $247;
   $248 = $curr;
   _to_little_endian_buffer($248,4,1);
   $249 = $curr;
   $250 = ((($249)) + 4|0);
   $curr = $250;
   $251 = $curr;
   $252 = ((($251)) + -4|0);
   $253 = HEAP32[$252>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 48|0))>>2] = $253;
   $254 = $curr;
   _to_little_endian_buffer($254,4,1);
   $255 = $curr;
   $256 = ((($255)) + 4|0);
   $curr = $256;
   $257 = $curr;
   $258 = ((($257)) + -4|0);
   $259 = HEAP32[$258>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8192|0))>>2] = $259;
   $260 = $curr;
   _to_little_endian_buffer($260,4,1);
   $261 = $curr;
   $262 = ((($261)) + 4|0);
   $curr = $262;
   $263 = $curr;
   $264 = ((($263)) + -4|0);
   $265 = HEAP32[$264>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8196|0))>>2] = $265;
   $266 = $curr;
   _to_little_endian_buffer($266,4,1);
   $267 = $curr;
   $268 = ((($267)) + 4|0);
   $curr = $268;
   $269 = $curr;
   $270 = ((($269)) + -4|0);
   $271 = HEAP32[$270>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8200|0))>>2] = $271;
   $272 = $curr;
   _to_little_endian_buffer($272,4,1);
   $273 = $curr;
   $274 = ((($273)) + 4|0);
   $curr = $274;
   $275 = $curr;
   $276 = ((($275)) + -4|0);
   $277 = HEAP32[$276>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8204|0))>>2] = $277;
   $278 = $curr;
   $279 = ((($278)) + 4|0);
   $curr = $279;
   $280 = $curr;
   _to_little_endian_buffer($280,4,1);
   $281 = $curr;
   $282 = ((($281)) + 4|0);
   $curr = $282;
   $283 = $curr;
   $284 = ((($283)) + -4|0);
   $285 = HEAP32[$284>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2] = $285;
   $286 = $curr;
   $287 = ((($286)) + 16|0);
   $curr = $287;
   $288 = $curr;
   _to_little_endian_buffer($288,4,1);
   $289 = $curr;
   $290 = ((($289)) + 4|0);
   $curr = $290;
   $291 = $curr;
   $292 = ((($291)) + -4|0);
   $293 = HEAP32[$292>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8212|0))>>2] = $293;
   $294 = $curr;
   _to_little_endian_buffer($294,4,1);
   $295 = $curr;
   $296 = ((($295)) + 4|0);
   $curr = $296;
   $297 = $curr;
   $298 = ((($297)) + -4|0);
   $299 = HEAP32[$298>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8216|0))>>2] = $299;
   $300 = $curr;
   _to_little_endian_buffer($300,4,1);
   $301 = $curr;
   $302 = ((($301)) + 4|0);
   $curr = $302;
   $303 = $curr;
   $304 = ((($303)) + -4|0);
   $305 = HEAP32[$304>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8220|0))>>2] = $305;
   $306 = $curr;
   _to_little_endian_buffer($306,4,1);
   $307 = $curr;
   $308 = ((($307)) + 4|0);
   $curr = $308;
   $309 = $curr;
   $310 = ((($309)) + -4|0);
   $311 = HEAP32[$310>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8224|0))>>2] = $311;
   $312 = $curr;
   _to_little_endian_buffer($312,4,1);
   $313 = $curr;
   $314 = ((($313)) + 4|0);
   $curr = $314;
   $315 = $curr;
   $316 = ((($315)) + -4|0);
   $317 = HEAP32[$316>>2]|0;
   HEAP32[((((gb + (8413160) | 0)) + 8228|0))>>2] = $317;
   $318 = $curr;
   _to_little_endian_buffer($318,4,1);
   $319 = $curr;
   $320 = ((($319)) + 4|0);
   $curr = $320;
   $321 = $curr;
   $322 = ((($321)) + -4|0);
   $323 = HEAP32[$322>>2]|0;
   HEAP32[(gb + (8410672) | 0)>>2] = $323;
   $324 = $curr;
   _to_little_endian_buffer($324,4,1);
   $325 = $curr;
   $326 = ((($325)) + 4|0);
   $curr = $326;
   $327 = $curr;
   $328 = ((($327)) + -4|0);
   $329 = HEAP32[$328>>2]|0;
   HEAP32[((((gb + (8410672) | 0)) + 4|0))>>2] = $329;
   $330 = $curr;
   _to_little_endian_buffer($330,4,1);
   $331 = $curr;
   $332 = ((($331)) + 4|0);
   $curr = $332;
   $333 = $curr;
   $334 = ((($333)) + -4|0);
   $335 = HEAP32[$334>>2]|0;
   HEAP32[((((gb + (8410672) | 0)) + 16|0))>>2] = $335;
   $336 = $curr;
   _to_little_endian_buffer($336,4,1);
   $337 = $curr;
   $338 = ((($337)) + 4|0);
   $curr = $338;
   $339 = $curr;
   $340 = ((($339)) + -4|0);
   $341 = HEAP32[$340>>2]|0;
   HEAP32[((((gb + (8410672) | 0)) + 24|0))>>2] = $341;
   $342 = $curr;
   _to_little_endian_buffer($342,4,1);
   $343 = $curr;
   $344 = ((($343)) + 4|0);
   $curr = $344;
   $345 = $curr;
   $346 = ((($345)) + -4|0);
   $347 = HEAP32[$346>>2]|0;
   HEAP32[(gb + (8421560) | 0)>>2] = $347;
   $348 = $curr;
   _to_little_endian_buffer($348,4,1);
   $349 = $curr;
   $350 = ((($349)) + 4|0);
   $curr = $350;
   $351 = $curr;
   $352 = ((($351)) + -4|0);
   $353 = HEAP32[$352>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 4|0))>>2] = $353;
   $354 = $curr;
   _to_little_endian_buffer($354,4,1);
   $355 = $curr;
   $356 = ((($355)) + 4|0);
   $curr = $356;
   $357 = $curr;
   $358 = ((($357)) + -4|0);
   $359 = HEAP32[$358>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 8|0))>>2] = $359;
   $360 = $curr;
   _to_little_endian_buffer($360,4,1);
   $361 = $curr;
   $362 = ((($361)) + 4|0);
   $curr = $362;
   $363 = $curr;
   $364 = ((($363)) + -4|0);
   $365 = HEAP32[$364>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 12|0))>>2] = $365;
   $366 = $curr;
   _to_little_endian_buffer($366,4,1);
   $367 = $curr;
   $368 = ((($367)) + 4|0);
   $curr = $368;
   $369 = $curr;
   $370 = ((($369)) + -4|0);
   $371 = HEAP32[$370>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 16|0))>>2] = $371;
   $372 = $curr;
   _to_little_endian_buffer($372,4,1);
   $373 = $curr;
   $374 = ((($373)) + 4|0);
   $curr = $374;
   $375 = $curr;
   $376 = ((($375)) + -4|0);
   $377 = HEAP32[$376>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 20|0))>>2] = $377;
   $378 = $curr;
   _to_little_endian_buffer($378,4,1);
   $379 = $curr;
   $380 = ((($379)) + 4|0);
   $curr = $380;
   $381 = $curr;
   $382 = ((($381)) + -4|0);
   $383 = HEAP32[$382>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 24|0))>>2] = $383;
   $384 = $curr;
   _to_little_endian_buffer($384,4,1);
   $385 = $curr;
   $386 = ((($385)) + 4|0);
   $curr = $386;
   $387 = $curr;
   $388 = ((($387)) + -4|0);
   $389 = HEAP32[$388>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 28|0))>>2] = $389;
   $390 = $curr;
   _to_little_endian_buffer($390,4,1);
   $391 = $curr;
   $392 = ((($391)) + 4|0);
   $curr = $392;
   $393 = $curr;
   $394 = ((($393)) + -4|0);
   $395 = HEAP32[$394>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 32|0))>>2] = $395;
   $396 = $curr;
   _to_little_endian_buffer($396,4,1);
   $397 = $curr;
   $398 = ((($397)) + 4|0);
   $curr = $398;
   $399 = $curr;
   $400 = ((($399)) + -4|0);
   $401 = HEAP32[$400>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 36|0))>>2] = $401;
   $402 = $curr;
   _to_little_endian_buffer($402,4,1);
   $403 = $curr;
   $404 = ((($403)) + 4|0);
   $curr = $404;
   $405 = $curr;
   $406 = ((($405)) + -4|0);
   $407 = HEAP32[$406>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 40|0))>>2] = $407;
   $408 = $curr;
   _to_little_endian_buffer($408,4,1);
   $409 = $curr;
   $410 = ((($409)) + 4|0);
   $curr = $410;
   $411 = $curr;
   $412 = ((($411)) + -4|0);
   $413 = HEAP32[$412>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 44|0))>>2] = $413;
   $414 = $curr;
   _to_little_endian_buffer($414,4,1);
   $415 = $curr;
   $416 = ((($415)) + 4|0);
   $curr = $416;
   $417 = $curr;
   $418 = ((($417)) + -4|0);
   $419 = HEAP32[$418>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 48|0))>>2] = $419;
   $420 = $curr;
   _to_little_endian_buffer($420,4,1);
   $421 = $curr;
   $422 = ((($421)) + 4|0);
   $curr = $422;
   $423 = $curr;
   $424 = ((($423)) + -4|0);
   $425 = HEAP32[$424>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 52|0))>>2] = $425;
   $426 = $curr;
   _to_little_endian_buffer($426,4,1);
   $427 = $curr;
   $428 = ((($427)) + 4|0);
   $curr = $428;
   $429 = $curr;
   $430 = ((($429)) + -4|0);
   $431 = HEAP32[$430>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 60|0))>>2] = $431;
   $432 = HEAP32[((((gb + (10521540) | 0)) + 40|0))>>2]|0;
   mftCall_v($432|0);
   $433 = HEAP32[((((gb + (10521540) | 0)) + 44|0))>>2]|0;
   mftCall_v($433|0);
   $434 = $curr;
   _to_little_endian_buffer($434,4,1);
   $435 = $curr;
   $436 = ((($435)) + 4|0);
   $curr = $436;
   $437 = $curr;
   $438 = ((($437)) + -4|0);
   $439 = HEAP32[$438>>2]|0;
   HEAP32[(gb + (8421480) | 0)>>2] = $439;
   $440 = $curr;
   _to_little_endian_buffer($440,4,1);
   $441 = $curr;
   $442 = ((($441)) + 4|0);
   $curr = $442;
   $443 = $curr;
   $444 = ((($443)) + -4|0);
   $445 = HEAP32[$444>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 4|0))>>2] = $445;
   $446 = $curr;
   _to_little_endian_buffer($446,4,1);
   $447 = $curr;
   $448 = ((($447)) + 4|0);
   $curr = $448;
   $449 = $curr;
   $450 = ((($449)) + -4|0);
   $451 = HEAP32[$450>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 8|0))>>2] = $451;
   $452 = $curr;
   _to_little_endian_buffer($452,4,1);
   $453 = $curr;
   $454 = ((($453)) + 4|0);
   $curr = $454;
   $455 = $curr;
   $456 = ((($455)) + -4|0);
   $457 = HEAP32[$456>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 12|0))>>2] = $457;
   $458 = $curr;
   _to_little_endian_buffer($458,4,1);
   $459 = $curr;
   $460 = ((($459)) + 4|0);
   $curr = $460;
   $461 = $curr;
   $462 = ((($461)) + -4|0);
   $463 = HEAP32[$462>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 16|0))>>2] = $463;
   $464 = $curr;
   _to_little_endian_buffer($464,4,1);
   $465 = $curr;
   $466 = ((($465)) + 4|0);
   $curr = $466;
   $467 = $curr;
   $468 = ((($467)) + -4|0);
   $469 = HEAP32[$468>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 20|0))>>2] = $469;
   $470 = $curr;
   _to_little_endian_buffer($470,4,1);
   $471 = $curr;
   $472 = ((($471)) + 4|0);
   $curr = $472;
   $473 = $curr;
   $474 = ((($473)) + -4|0);
   $475 = HEAP32[$474>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 24|0))>>2] = $475;
   $476 = $curr;
   _to_little_endian_buffer($476,4,1);
   $477 = $curr;
   $478 = ((($477)) + 4|0);
   $curr = $478;
   $479 = $curr;
   $480 = ((($479)) + -4|0);
   $481 = HEAP32[$480>>2]|0;
   HEAP32[((((gb + (8421480) | 0)) + 28|0))>>2] = $481;
   $482 = $curr;
   _to_little_endian_buffer($482,4,1);
   $483 = $curr;
   $484 = ((($483)) + 4|0);
   $curr = $484;
   $485 = $curr;
   $486 = ((($485)) + -4|0);
   $487 = HEAP32[$486>>2]|0;
   HEAP32[(gb + (8421404) | 0)>>2] = $487;
   $488 = $curr;
   _to_little_endian_buffer($488,4,1);
   $489 = $curr;
   $490 = ((($489)) + 4|0);
   $curr = $490;
   $491 = $curr;
   $492 = ((($491)) + -4|0);
   $493 = HEAP32[$492>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 4|0))>>2] = $493;
   $494 = $curr;
   _to_little_endian_buffer($494,4,1);
   $495 = $curr;
   $496 = ((($495)) + 4|0);
   $curr = $496;
   $497 = $curr;
   $498 = ((($497)) + -4|0);
   $499 = HEAP32[$498>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 8|0))>>2] = $499;
   $500 = $curr;
   _to_little_endian_buffer($500,4,1);
   $501 = $curr;
   $502 = ((($501)) + 4|0);
   $curr = $502;
   $503 = $curr;
   $504 = ((($503)) + -4|0);
   $505 = HEAP32[$504>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 12|0))>>2] = $505;
   $506 = $curr;
   _to_little_endian_buffer($506,4,1);
   $507 = $curr;
   $508 = ((($507)) + 4|0);
   $curr = $508;
   $509 = $curr;
   $510 = ((($509)) + -4|0);
   $511 = HEAP32[$510>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 16|0))>>2] = $511;
   $512 = $curr;
   _to_little_endian_buffer($512,4,1);
   $513 = $curr;
   $514 = ((($513)) + 4|0);
   $curr = $514;
   $515 = $curr;
   $516 = ((($515)) + -4|0);
   $517 = HEAP32[$516>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 20|0))>>2] = $517;
   $518 = $curr;
   _to_little_endian_buffer($518,4,1);
   $519 = $curr;
   $520 = ((($519)) + 4|0);
   $curr = $520;
   $521 = $curr;
   $522 = ((($521)) + -4|0);
   $523 = HEAP32[$522>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 44|0))>>2] = $523;
   $524 = $curr;
   _to_little_endian_buffer($524,4,1);
   $525 = $curr;
   $526 = ((($525)) + 4|0);
   $curr = $526;
   $527 = $curr;
   $528 = ((($527)) + -4|0);
   $529 = HEAP32[$528>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 40|0))>>2] = $529;
   $530 = $curr;
   _to_little_endian_buffer($530,4,1);
   $531 = $curr;
   $532 = ((($531)) + 4|0);
   $curr = $532;
   $533 = $curr;
   $534 = ((($533)) + -4|0);
   $535 = HEAP32[$534>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 32|0))>>2] = $535;
   $536 = $curr;
   _to_little_endian_buffer($536,4,1);
   $537 = $curr;
   $538 = ((($537)) + 4|0);
   $curr = $538;
   $539 = $curr;
   $540 = ((($539)) + -4|0);
   $541 = HEAP32[$540>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 28|0))>>2] = $541;
   $542 = HEAP32[(gb + (8421404) | 0)>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 24|0))>>2] = $542;
   $543 = HEAP32[(gb + (8421404) | 0)>>2]|0;
   HEAP32[((((gb + (8421404) | 0)) + 36|0))>>2] = $543;
   HEAP32[((((gb + (8421404) | 0)) + 48|0))>>2] = 1;
   $544 = $curr;
   _to_little_endian_buffer($544,4,1);
   $545 = $curr;
   $546 = ((($545)) + 4|0);
   $curr = $546;
   $547 = $curr;
   $548 = ((($547)) + -4|0);
   $549 = HEAP32[$548>>2]|0;
   HEAP32[(gb + (8410952) | 0)>>2] = $549;
   $550 = $curr;
   _to_little_endian_buffer($550,4,1);
   $551 = $curr;
   $552 = ((($551)) + 4|0);
   $curr = $552;
   $553 = $curr;
   $554 = ((($553)) + -4|0);
   $555 = HEAP32[$554>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 4|0))>>2] = $555;
   $556 = $curr;
   _to_little_endian_buffer($556,4,1);
   $557 = $curr;
   $558 = ((($557)) + 4|0);
   $curr = $558;
   $559 = $curr;
   $560 = ((($559)) + -4|0);
   $561 = HEAP32[$560>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 8|0))>>2] = $561;
   $562 = $curr;
   $563 = ((($562)) + 4|0);
   $curr = $563;
   $564 = $curr;
   _to_little_endian_buffer($564,4,1);
   $565 = $curr;
   $566 = ((($565)) + 4|0);
   $curr = $566;
   $567 = $curr;
   $568 = ((($567)) + -4|0);
   $569 = HEAP32[$568>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2] = $569;
   $570 = $curr;
   $571 = ((($570)) + 12|0);
   $curr = $571;
   $572 = $curr;
   _to_little_endian_buffer($572,4,1);
   $573 = $curr;
   $574 = ((($573)) + 4|0);
   $curr = $574;
   $575 = $curr;
   $576 = ((($575)) + -4|0);
   $577 = HEAP32[$576>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 16|0))>>2] = $577;
   $578 = $curr;
   _to_little_endian_buffer($578,4,1);
   $579 = $curr;
   $580 = ((($579)) + 4|0);
   $curr = $580;
   $581 = $curr;
   $582 = ((($581)) + -4|0);
   $583 = HEAP32[$582>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 20|0))>>2] = $583;
   $584 = $curr;
   _to_little_endian_buffer($584,4,1);
   $585 = $curr;
   $586 = ((($585)) + 4|0);
   $curr = $586;
   $587 = $curr;
   $588 = ((($587)) + -4|0);
   $589 = HEAP32[$588>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 24|0))>>2] = $589;
   $590 = $curr;
   _to_little_endian_buffer($590,4,1);
   $591 = $curr;
   $592 = ((($591)) + 4|0);
   $curr = $592;
   $593 = $curr;
   $594 = ((($593)) + -4|0);
   $595 = HEAP32[$594>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 28|0))>>2] = $595;
   $596 = $curr;
   _to_little_endian_buffer($596,4,1);
   $597 = $curr;
   $598 = ((($597)) + 4|0);
   $curr = $598;
   $599 = $curr;
   $600 = ((($599)) + -4|0);
   $601 = HEAP32[$600>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 32|0))>>2] = $601;
   $602 = $curr;
   _to_little_endian_buffer($602,4,1);
   $603 = $curr;
   $604 = ((($603)) + 4|0);
   $curr = $604;
   $605 = $curr;
   $606 = ((($605)) + -4|0);
   $607 = HEAP32[$606>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 36|0))>>2] = $607;
   $608 = $curr;
   _to_little_endian_buffer($608,4,1);
   $609 = $curr;
   $610 = ((($609)) + 4|0);
   $curr = $610;
   $611 = $curr;
   $612 = ((($611)) + -4|0);
   $613 = HEAP32[$612>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 40|0))>>2] = $613;
   $614 = $curr;
   _to_little_endian_buffer($614,4,1);
   $615 = $curr;
   $616 = ((($615)) + 4|0);
   $curr = $616;
   $617 = $curr;
   $618 = ((($617)) + -4|0);
   $619 = HEAP32[$618>>2]|0;
   HEAP32[((((gb + (8410952) | 0)) + 44|0))>>2] = $619;
   $620 = $curr;
   _to_little_endian_buffer($620,4,2097152);
   $621 = $curr;
   $622 = ((($621)) + 8388608|0);
   $curr = $622;
   $623 = $curr;
   $624 = ((($623)) + -8388608|0);
   _memcpy(((gb + (21216) | 0)|0),($624|0),8388608)|0;
   $625 = $curr;
   _to_little_endian_buffer($625,4,2048);
   $626 = $curr;
   $627 = ((($626)) + 8192|0);
   $curr = $627;
   $628 = $curr;
   $629 = ((($628)) + -8192|0);
   _memcpy(((gb + (8413160) | 0)|0),($629|0),8192)|0;
   $630 = $curr;
   _to_little_endian_buffer($630,1,64);
   $631 = $curr;
   $632 = ((($631)) + 64|0);
   $curr = $632;
   $633 = $curr;
   $634 = ((($633)) + -64|0);
   dest=((((gb + (8410672) | 0)) + 28|0)); src=$634; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $635 = $curr;
   _to_little_endian_buffer($635,4,1);
   $636 = $curr;
   $637 = ((($636)) + 4|0);
   $curr = $637;
   $638 = $curr;
   $639 = ((($638)) + -4|0);
   $640 = HEAP32[$639>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 108|0))>>2] = $640;
   $641 = $curr;
   _to_little_endian_buffer($641,4,1);
   $642 = $curr;
   $643 = ((($642)) + 4|0);
   $curr = $643;
   $644 = $curr;
   $645 = ((($644)) + -4|0);
   $646 = HEAP32[$645>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 76|0))>>2] = $646;
   $647 = $curr;
   _to_little_endian_buffer($647,8,1);
   $648 = $curr;
   $649 = ((($648)) + 8|0);
   $curr = $649;
   $650 = $curr;
   $651 = ((($650)) + -8|0);
   $652 = $651;
   $653 = $652;
   $654 = HEAP32[$653>>2]|0;
   $655 = (($652) + 4)|0;
   $656 = $655;
   $657 = HEAP32[$656>>2]|0;
   $658 = ((((gb + (8409824) | 0)) + 80|0));
   $659 = $658;
   HEAP32[$659>>2] = $654;
   $660 = (($658) + 4)|0;
   $661 = $660;
   HEAP32[$661>>2] = $657;
   $662 = $curr;
   _to_little_endian_buffer($662,4,1);
   $663 = $curr;
   $664 = ((($663)) + 4|0);
   $curr = $664;
   $665 = $curr;
   $666 = ((($665)) + -4|0);
   $667 = HEAP32[$666>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 88|0))>>2] = $667;
   $668 = $curr;
   _to_little_endian_buffer($668,4,1);
   $669 = $curr;
   $670 = ((($669)) + 4|0);
   $curr = $670;
   $671 = $curr;
   $672 = ((($671)) + -4|0);
   $673 = HEAP32[$672>>2]|0;
   HEAP32[((((gb + (8409824) | 0)) + 92|0))>>2] = $673;
   $674 = $curr;
   _to_little_endian_buffer($674,4,1048576);
   $675 = $curr;
   $676 = ((($675)) + 4194304|0);
   $curr = $676;
   $677 = $curr;
   $678 = ((($677)) + -4194304|0);
   _memcpy(((gb + (14718184) | 0)|0),($678|0),4194304)|0;
   $679 = $curr;
   _to_little_endian_buffer($679,4,1048576);
   $680 = $curr;
   $681 = ((($680)) + 4194304|0);
   $curr = $681;
   $682 = $curr;
   $683 = ((($682)) + -4194304|0);
   _memcpy(((gb + (18912488) | 0)|0),($683|0),4194304)|0;
   $684 = $curr;
   _to_little_endian_buffer($684,4,1);
   $685 = $curr;
   $686 = ((($685)) + 4|0);
   $curr = $686;
   $687 = $curr;
   $688 = ((($687)) + -4|0);
   $689 = HEAP32[$688>>2]|0;
   $690 = (_r4300_llbit()|0);
   HEAP32[$690>>2] = $689;
   $691 = (_r4300_regs()|0);
   $692 = $curr;
   _to_little_endian_buffer($692,8,32);
   $693 = $curr;
   $694 = ((($693)) + 256|0);
   $curr = $694;
   $695 = $curr;
   $696 = ((($695)) + -256|0);
   _memcpy(($691|0),($696|0),256)|0;
   $697 = $cp0_regs;
   $698 = $curr;
   _to_little_endian_buffer($698,4,32);
   $699 = $curr;
   $700 = ((($699)) + 128|0);
   $curr = $700;
   $701 = $curr;
   $702 = ((($701)) + -128|0);
   dest=$697; src=$702; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $703 = $cp0_regs;
   $704 = ((($703)) + 48|0);
   $705 = HEAP32[$704>>2]|0;
   _set_fpr_pointers($705);
   $706 = $curr;
   _to_little_endian_buffer($706,8,1);
   $707 = $curr;
   $708 = ((($707)) + 8|0);
   $curr = $708;
   $709 = $curr;
   $710 = ((($709)) + -8|0);
   $711 = $710;
   $712 = $711;
   $713 = HEAP32[$712>>2]|0;
   $714 = (($711) + 4)|0;
   $715 = $714;
   $716 = HEAP32[$715>>2]|0;
   $717 = (_r4300_mult_lo()|0);
   $718 = $717;
   $719 = $718;
   HEAP32[$719>>2] = $713;
   $720 = (($718) + 4)|0;
   $721 = $720;
   HEAP32[$721>>2] = $716;
   $722 = $curr;
   _to_little_endian_buffer($722,8,1);
   $723 = $curr;
   $724 = ((($723)) + 8|0);
   $curr = $724;
   $725 = $curr;
   $726 = ((($725)) + -8|0);
   $727 = $726;
   $728 = $727;
   $729 = HEAP32[$728>>2]|0;
   $730 = (($727) + 4)|0;
   $731 = $730;
   $732 = HEAP32[$731>>2]|0;
   $733 = (_r4300_mult_hi()|0);
   $734 = $733;
   $735 = $734;
   HEAP32[$735>>2] = $729;
   $736 = (($734) + 4)|0;
   $737 = $736;
   HEAP32[$737>>2] = $732;
   $738 = (_r4300_cp1_regs()|0);
   $739 = $curr;
   _to_little_endian_buffer($739,8,32);
   $740 = $curr;
   $741 = ((($740)) + 256|0);
   $curr = $741;
   $742 = $curr;
   $743 = ((($742)) + -256|0);
   _memcpy(($738|0),($743|0),256)|0;
   $744 = $cp0_regs;
   $745 = ((($744)) + 48|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = $746 & 67108864;
   $748 = ($747|0)==(0);
   if ($748) {
    _shuffle_fpr_data(67108864,0);
   }
   $749 = $curr;
   _to_little_endian_buffer($749,4,1);
   $750 = $curr;
   $751 = ((($750)) + 4|0);
   $curr = $751;
   $752 = $curr;
   $753 = ((($752)) + -4|0);
   $754 = HEAP32[$753>>2]|0;
   $755 = (_r4300_cp1_fcr0()|0);
   HEAP32[$755>>2] = $754;
   $756 = $curr;
   _to_little_endian_buffer($756,4,1);
   $757 = $curr;
   $758 = ((($757)) + 4|0);
   $curr = $758;
   $759 = $curr;
   $760 = ((($759)) + -4|0);
   $761 = HEAP32[$760>>2]|0;
   $FCR31 = $761;
   $762 = $FCR31;
   $763 = (_r4300_cp1_fcr31()|0);
   HEAP32[$763>>2] = $762;
   $764 = $FCR31;
   _update_x86_rounding_mode($764);
   $i = 0;
   while(1) {
    $765 = $i;
    $766 = ($765|0)<(32);
    $767 = $curr;
    if (!($766)) {
     break;
    }
    _to_little_endian_buffer($767,2,1);
    $768 = $curr;
    $769 = ((($768)) + 2|0);
    $curr = $769;
    $770 = $curr;
    $771 = ((($770)) + -2|0);
    $772 = HEAP16[$771>>1]|0;
    $773 = $i;
    $774 = ((gb + (23106792) | 0) + (($773*52)|0)|0);
    HEAP16[$774>>1] = $772;
    $775 = $curr;
    $776 = ((($775)) + 2|0);
    $curr = $776;
    $777 = $curr;
    _to_little_endian_buffer($777,4,1);
    $778 = $curr;
    $779 = ((($778)) + 4|0);
    $curr = $779;
    $780 = $curr;
    $781 = ((($780)) + -4|0);
    $782 = HEAP32[$781>>2]|0;
    $783 = $i;
    $784 = ((gb + (23106792) | 0) + (($783*52)|0)|0);
    $785 = ((($784)) + 4|0);
    HEAP32[$785>>2] = $782;
    $786 = $curr;
    _to_little_endian_buffer($786,1,1);
    $787 = $curr;
    $788 = ((($787)) + 1|0);
    $curr = $788;
    $789 = $curr;
    $790 = ((($789)) + -1|0);
    $791 = HEAP8[$790>>0]|0;
    $792 = $i;
    $793 = ((gb + (23106792) | 0) + (($792*52)|0)|0);
    $794 = ((($793)) + 8|0);
    HEAP8[$794>>0] = $791;
    $795 = $curr;
    _to_little_endian_buffer($795,1,1);
    $796 = $curr;
    $797 = ((($796)) + 1|0);
    $curr = $797;
    $798 = $curr;
    $799 = ((($798)) + -1|0);
    $800 = HEAP8[$799>>0]|0;
    $801 = $i;
    $802 = ((gb + (23106792) | 0) + (($801*52)|0)|0);
    $803 = ((($802)) + 9|0);
    HEAP8[$803>>0] = $800;
    $804 = $curr;
    $805 = ((($804)) + 2|0);
    $curr = $805;
    $806 = $curr;
    _to_little_endian_buffer($806,4,1);
    $807 = $curr;
    $808 = ((($807)) + 4|0);
    $curr = $808;
    $809 = $curr;
    $810 = ((($809)) + -4|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = $i;
    $813 = ((gb + (23106792) | 0) + (($812*52)|0)|0);
    $814 = ((($813)) + 12|0);
    HEAP32[$814>>2] = $811;
    $815 = $curr;
    _to_little_endian_buffer($815,1,1);
    $816 = $curr;
    $817 = ((($816)) + 1|0);
    $curr = $817;
    $818 = $curr;
    $819 = ((($818)) + -1|0);
    $820 = HEAP8[$819>>0]|0;
    $821 = $i;
    $822 = ((gb + (23106792) | 0) + (($821*52)|0)|0);
    $823 = ((($822)) + 16|0);
    HEAP8[$823>>0] = $820;
    $824 = $curr;
    _to_little_endian_buffer($824,1,1);
    $825 = $curr;
    $826 = ((($825)) + 1|0);
    $curr = $826;
    $827 = $curr;
    $828 = ((($827)) + -1|0);
    $829 = HEAP8[$828>>0]|0;
    $830 = $i;
    $831 = ((gb + (23106792) | 0) + (($830*52)|0)|0);
    $832 = ((($831)) + 17|0);
    HEAP8[$832>>0] = $829;
    $833 = $curr;
    _to_little_endian_buffer($833,1,1);
    $834 = $curr;
    $835 = ((($834)) + 1|0);
    $curr = $835;
    $836 = $curr;
    $837 = ((($836)) + -1|0);
    $838 = HEAP8[$837>>0]|0;
    $839 = $i;
    $840 = ((gb + (23106792) | 0) + (($839*52)|0)|0);
    $841 = ((($840)) + 18|0);
    HEAP8[$841>>0] = $838;
    $842 = $curr;
    $843 = ((($842)) + 1|0);
    $curr = $843;
    $844 = $curr;
    _to_little_endian_buffer($844,4,1);
    $845 = $curr;
    $846 = ((($845)) + 4|0);
    $curr = $846;
    $847 = $curr;
    $848 = ((($847)) + -4|0);
    $849 = HEAP32[$848>>2]|0;
    $850 = $i;
    $851 = ((gb + (23106792) | 0) + (($850*52)|0)|0);
    $852 = ((($851)) + 20|0);
    HEAP32[$852>>2] = $849;
    $853 = $curr;
    _to_little_endian_buffer($853,1,1);
    $854 = $curr;
    $855 = ((($854)) + 1|0);
    $curr = $855;
    $856 = $curr;
    $857 = ((($856)) + -1|0);
    $858 = HEAP8[$857>>0]|0;
    $859 = $i;
    $860 = ((gb + (23106792) | 0) + (($859*52)|0)|0);
    $861 = ((($860)) + 24|0);
    HEAP8[$861>>0] = $858;
    $862 = $curr;
    _to_little_endian_buffer($862,1,1);
    $863 = $curr;
    $864 = ((($863)) + 1|0);
    $curr = $864;
    $865 = $curr;
    $866 = ((($865)) + -1|0);
    $867 = HEAP8[$866>>0]|0;
    $868 = $i;
    $869 = ((gb + (23106792) | 0) + (($868*52)|0)|0);
    $870 = ((($869)) + 25|0);
    HEAP8[$870>>0] = $867;
    $871 = $curr;
    _to_little_endian_buffer($871,1,1);
    $872 = $curr;
    $873 = ((($872)) + 1|0);
    $curr = $873;
    $874 = $curr;
    $875 = ((($874)) + -1|0);
    $876 = HEAP8[$875>>0]|0;
    $877 = $i;
    $878 = ((gb + (23106792) | 0) + (($877*52)|0)|0);
    $879 = ((($878)) + 26|0);
    HEAP8[$879>>0] = $876;
    $880 = $curr;
    _to_little_endian_buffer($880,1,1);
    $881 = $curr;
    $882 = ((($881)) + 1|0);
    $curr = $882;
    $883 = $curr;
    $884 = ((($883)) + -1|0);
    $885 = HEAP8[$884>>0]|0;
    $886 = $i;
    $887 = ((gb + (23106792) | 0) + (($886*52)|0)|0);
    $888 = ((($887)) + 27|0);
    HEAP8[$888>>0] = $885;
    $889 = $curr;
    _to_little_endian_buffer($889,4,1);
    $890 = $curr;
    $891 = ((($890)) + 4|0);
    $curr = $891;
    $892 = $curr;
    $893 = ((($892)) + -4|0);
    $894 = HEAP32[$893>>2]|0;
    $895 = $i;
    $896 = ((gb + (23106792) | 0) + (($895*52)|0)|0);
    $897 = ((($896)) + 28|0);
    HEAP32[$897>>2] = $894;
    $898 = $curr;
    _to_little_endian_buffer($898,4,1);
    $899 = $curr;
    $900 = ((($899)) + 4|0);
    $curr = $900;
    $901 = $curr;
    $902 = ((($901)) + -4|0);
    $903 = HEAP32[$902>>2]|0;
    $904 = $i;
    $905 = ((gb + (23106792) | 0) + (($904*52)|0)|0);
    $906 = ((($905)) + 32|0);
    HEAP32[$906>>2] = $903;
    $907 = $curr;
    _to_little_endian_buffer($907,4,1);
    $908 = $curr;
    $909 = ((($908)) + 4|0);
    $curr = $909;
    $910 = $curr;
    $911 = ((($910)) + -4|0);
    $912 = HEAP32[$911>>2]|0;
    $913 = $i;
    $914 = ((gb + (23106792) | 0) + (($913*52)|0)|0);
    $915 = ((($914)) + 36|0);
    HEAP32[$915>>2] = $912;
    $916 = $curr;
    _to_little_endian_buffer($916,4,1);
    $917 = $curr;
    $918 = ((($917)) + 4|0);
    $curr = $918;
    $919 = $curr;
    $920 = ((($919)) + -4|0);
    $921 = HEAP32[$920>>2]|0;
    $922 = $i;
    $923 = ((gb + (23106792) | 0) + (($922*52)|0)|0);
    $924 = ((($923)) + 40|0);
    HEAP32[$924>>2] = $921;
    $925 = $curr;
    _to_little_endian_buffer($925,4,1);
    $926 = $curr;
    $927 = ((($926)) + 4|0);
    $curr = $927;
    $928 = $curr;
    $929 = ((($928)) + -4|0);
    $930 = HEAP32[$929>>2]|0;
    $931 = $i;
    $932 = ((gb + (23106792) | 0) + (($931*52)|0)|0);
    $933 = ((($932)) + 44|0);
    HEAP32[$933>>2] = $930;
    $934 = $curr;
    _to_little_endian_buffer($934,4,1);
    $935 = $curr;
    $936 = ((($935)) + 4|0);
    $curr = $936;
    $937 = $curr;
    $938 = ((($937)) + -4|0);
    $939 = HEAP32[$938>>2]|0;
    $940 = $i;
    $941 = ((gb + (23106792) | 0) + (($940*52)|0)|0);
    $942 = ((($941)) + 48|0);
    HEAP32[$942>>2] = $939;
    $943 = $i;
    $944 = (($943) + 1)|0;
    $i = $944;
   }
   _to_little_endian_buffer($767,4,1);
   $945 = $curr;
   $946 = ((($945)) + 4|0);
   $curr = $946;
   $947 = $curr;
   $948 = ((($947)) + -4|0);
   $949 = HEAP32[$948>>2]|0;
   _savestates_load_set_pc($949);
   $950 = $curr;
   _to_little_endian_buffer($950,4,1);
   $951 = $curr;
   $952 = ((($951)) + 4|0);
   $curr = $952;
   $953 = $curr;
   $954 = ((($953)) + -4|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = (_r4300_next_interrupt()|0);
   HEAP32[$956>>2] = $955;
   $957 = $curr;
   _to_little_endian_buffer($957,4,1);
   $958 = $curr;
   $959 = ((($958)) + 4|0);
   $curr = $959;
   $960 = $curr;
   $961 = ((($960)) + -4|0);
   $962 = HEAP32[$961>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 64|0))>>2] = $962;
   $963 = $curr;
   _to_little_endian_buffer($963,4,1);
   $964 = $curr;
   $965 = ((($964)) + 4|0);
   $curr = $965;
   $966 = $curr;
   $967 = ((($966)) + -4|0);
   $968 = HEAP32[$967>>2]|0;
   HEAP32[((((gb + (8421560) | 0)) + 56|0))>>2] = $968;
   _to_little_endian_buffer($queue,4,256);
   _load_eventqueue_infos($queue);
   $969 = (_r4300_pc()|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = (_r4300_last_addr()|0);
   HEAP32[$971>>2] = $970;
   $972 = $savestateData;
   _free(($972|0));
   $973 = $1;
   $974 = (_namefrompath($973)|0);
   HEAP32[$vararg_buffer17>>2] = $974;
   _main_message(4,6,(gb + (15743) | 0),$vararg_buffer17);
   $0 = 1;
   $975 = $0;
   STACKTOP = sp;return ($975|0);
  }
 }
 $78 = $1;
 HEAP32[$vararg_buffer14>>2] = $78;
 _main_message(4,6,(gb + (16273) | 0),$vararg_buffer14);
 $79 = $savestateData;
 _free(($79|0));
 $80 = $f;
 (_gzclose(($80|0))|0);
 $81 = HEAP32[(gb + (8424296) | 0)>>2]|0;
 (_SDL_UnlockMutex(($81|0))|0);
 $0 = 0;
 $975 = $0;
 STACKTOP = sp;return ($975|0);
}
function _savestates_load_pj64_zip($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fileinfo = 0, $ret = 0, $szComment = 0, $szExtraField = 0, $szFileName = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zipstatefile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $szFileName = sp + 616|0;
 $szExtraField = sp + 360|0;
 $szComment = sp + 104|0;
 $fileinfo = sp + 16|0;
 $0 = $filepath;
 $zipstatefile = 0;
 $ret = 0;
 $1 = $0;
 $2 = (_unzOpen($1)|0);
 $zipstatefile = $2;
 $3 = $zipstatefile;
 $4 = ($3|0)==(0|0);
 if ($4) {
  label = 5;
 } else {
  $5 = $zipstatefile;
  $6 = (_unzGoToFirstFile($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   label = 5;
  } else {
   $8 = $zipstatefile;
   $9 = (_unzGetCurrentFileInfo($8,$fileinfo,$szFileName,255,$szExtraField,255,$szComment,255)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    label = 5;
   } else {
    $11 = $zipstatefile;
    $12 = (_unzOpenCurrentFile($11)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     label = 5;
    } else {
     $15 = $0;
     $16 = $zipstatefile;
     $17 = (_savestates_load_pj64($15,$16,(fb + (516) | 0))|0);
     $18 = ($17|0)!=(0);
     if ($18) {
      $19 = $0;
      $20 = (_namefrompath($19)|0);
      HEAP32[$vararg_buffer1>>2] = $20;
      _main_message(4,6,(gb + (15743) | 0),$vararg_buffer1);
      $ret = 1;
     }
    }
   }
  }
 }
 if ((label|0) == 5) {
  $14 = $0;
  HEAP32[$vararg_buffer>>2] = $14;
  _main_message(4,6,(gb + (16030) | 0),$vararg_buffer);
 }
 $21 = $zipstatefile;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $24 = $ret;
  STACKTOP = sp;return ($24|0);
 }
 $23 = $zipstatefile;
 (_unzClose($23)|0);
 $24 = $ret;
 STACKTOP = sp;return ($24|0);
}
function _savestates_load_pj64_unc($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $filepath;
 $2 = $1;
 $3 = (_fopen(($2|0),((gb + (20660) | 0)|0))|0);
 $f = $3;
 $4 = $f;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 if ($5) {
  HEAP32[$vararg_buffer>>2] = $6;
  _main_message(4,6,(gb + (15665) | 0),$vararg_buffer);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $7 = $f;
 $8 = (_savestates_load_pj64($6,$7,(fb + (517) | 0))|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $11 = $1;
  $12 = (_namefrompath($11)|0);
  HEAP32[$vararg_buffer1>>2] = $12;
  _main_message(4,6,(gb + (15743) | 0),$vararg_buffer1);
  $13 = $f;
  (_fclose(($13|0))|0);
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $f;
  (_fclose(($10|0))|0);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _savestates_clear_job() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _savestates_set_job(0,0,0);
 return;
}
function _savestates_save_m64p($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cp0_regs = 0, $curr = 0, $i = 0;
 var $outbuf = 0, $queue = 0, $queuelength = 0, $save = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x = 0, $x1 = 0, $x10 = 0, $x100 = 0, $x101 = 0, $x102 = 0, $x103 = 0, $x104 = 0, $x105 = 0, $x106 = 0, $x107 = 0, $x108 = 0, $x109 = 0, $x11 = 0;
 var $x110 = 0, $x111 = 0, $x112 = 0, $x113 = 0, $x114 = 0, $x115 = 0, $x116 = 0, $x117 = 0, $x118 = 0, $x119 = 0, $x12 = 0, $x120 = 0, $x121 = 0, $x122 = 0, $x123 = 0, $x124 = 0, $x125 = 0, $x126 = 0, $x127 = 0, $x128 = 0;
 var $x129 = 0, $x13 = 0, $x130 = 0, $x131 = 0, $x132 = 0, $x133 = 0, $x134 = 0, $x135 = 0, $x136 = 0, $x137 = 0, $x138 = 0, $x139 = 0, $x14 = 0, $x140 = 0, $x141 = 0, $x142 = 0, $x143 = 0, $x144 = 0, $x145 = 0, $x146 = 0;
 var $x147 = 0, $x148 = 0, $x149 = 0, $x15 = 0, $x150 = 0, $x151 = 0, $x152 = 0, $x153 = 0, $x154 = 0, $x155 = 0, $x156 = 0, $x157 = 0, $x158 = 0, $x159 = 0, $x16 = 0, $x160 = 0, $x161 = 0, $x162 = 0, $x163 = 0, $x164 = 0;
 var $x17 = 0, $x18 = 0, $x19 = 0, $x2 = 0, $x20 = 0, $x21 = 0, $x22 = 0, $x23 = 0, $x24 = 0, $x25 = 0, $x26 = 0, $x27 = 0, $x28 = 0, $x29 = 0, $x3 = 0, $x30 = 0, $x31 = 0, $x32 = 0, $x33 = 0, $x34 = 0;
 var $x35 = 0, $x36 = 0, $x37 = 0, $x38 = 0, $x39 = 0, $x4 = 0, $x40 = 0, $x41 = 0, $x42 = 0, $x43 = 0, $x44 = 0, $x45 = 0, $x46 = 0, $x47 = 0, $x48 = 0, $x49 = 0, $x5 = 0, $x50 = 0, $x51 = 0, $x52 = 0;
 var $x53 = 0, $x54 = 0, $x55 = 0, $x56 = 0, $x57 = 0, $x58 = 0, $x59 = 0, $x6 = 0, $x60 = 0, $x61 = 0, $x62 = 0, $x63 = 0, $x64 = 0, $x65 = 0, $x66 = 0, $x67 = 0, $x68 = 0, $x69 = 0, $x7 = 0, $x70 = 0;
 var $x71 = 0, $x72 = 0, $x73 = 0, $x74 = 0, $x75 = 0, $x76 = 0, $x77 = 0, $x78 = 0, $x79 = 0, $x8 = 0, $x80 = 0, $x81 = 0, $x82 = 0, $x83 = 0, $x84 = 0, $x85 = 0, $x86 = 0, $x87 = 0, $x88 = 0, $x89 = 0;
 var $x9 = 0, $x90 = 0, $x91 = 0, $x92 = 0, $x93 = 0, $x94 = 0, $x95 = 0, $x96 = 0, $x97 = 0, $x98 = 0, $x99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $outbuf = sp + 1584|0;
 $queue = sp + 560|0;
 $x = sp + 472|0;
 $x1 = sp + 468|0;
 $x2 = sp + 464|0;
 $x3 = sp + 460|0;
 $x4 = sp + 456|0;
 $x5 = sp + 452|0;
 $x6 = sp + 448|0;
 $x7 = sp + 444|0;
 $x8 = sp + 440|0;
 $x9 = sp + 436|0;
 $x10 = sp + 432|0;
 $x11 = sp + 428|0;
 $x12 = sp + 559|0;
 $x13 = sp + 558|0;
 $x14 = sp + 557|0;
 $x15 = sp + 556|0;
 $x16 = sp + 424|0;
 $x17 = sp + 420|0;
 $x18 = sp + 416|0;
 $x19 = sp + 412|0;
 $x20 = sp + 555|0;
 $x21 = sp + 554|0;
 $x22 = sp + 553|0;
 $x23 = sp + 552|0;
 $x24 = sp + 551|0;
 $x25 = sp + 550|0;
 $x26 = sp + 510|0;
 $x27 = sp + 408|0;
 $x28 = sp + 404|0;
 $x29 = sp + 400|0;
 $x30 = sp + 396|0;
 $x31 = sp + 392|0;
 $x32 = sp + 388|0;
 $x33 = sp + 384|0;
 $x34 = sp + 380|0;
 $x35 = sp + 376|0;
 $x36 = sp + 372|0;
 $x37 = sp + 368|0;
 $x38 = sp + 364|0;
 $x39 = sp + 360|0;
 $x40 = sp + 356|0;
 $x41 = sp + 352|0;
 $x42 = sp + 348|0;
 $x43 = sp + 344|0;
 $x44 = sp + 340|0;
 $x45 = sp + 336|0;
 $x46 = sp + 549|0;
 $x47 = sp + 548|0;
 $x48 = sp + 547|0;
 $x49 = sp + 546|0;
 $x50 = sp + 545|0;
 $x51 = sp + 544|0;
 $x52 = sp + 543|0;
 $x53 = sp + 542|0;
 $x54 = sp + 541|0;
 $x55 = sp + 540|0;
 $x56 = sp + 539|0;
 $x57 = sp + 538|0;
 $x58 = sp + 537|0;
 $x59 = sp + 536|0;
 $x60 = sp + 535|0;
 $x61 = sp + 534|0;
 $x62 = sp + 332|0;
 $x63 = sp + 328|0;
 $x64 = sp + 324|0;
 $x65 = sp + 320|0;
 $x66 = sp + 316|0;
 $x67 = sp + 312|0;
 $x68 = sp + 308|0;
 $x69 = sp + 304|0;
 $x70 = sp + 300|0;
 $x71 = sp + 296|0;
 $x72 = sp + 292|0;
 $x73 = sp + 288|0;
 $x74 = sp + 284|0;
 $x75 = sp + 280|0;
 $x76 = sp + 276|0;
 $x77 = sp + 272|0;
 $x78 = sp + 268|0;
 $x79 = sp + 264|0;
 $x80 = sp + 260|0;
 $x81 = sp + 256|0;
 $x82 = sp + 252|0;
 $x83 = sp + 248|0;
 $x84 = sp + 244|0;
 $x85 = sp + 240|0;
 $x86 = sp + 236|0;
 $x87 = sp + 232|0;
 $x88 = sp + 228|0;
 $x89 = sp + 224|0;
 $x90 = sp + 220|0;
 $x91 = sp + 216|0;
 $x92 = sp + 212|0;
 $x93 = sp + 208|0;
 $x94 = sp + 204|0;
 $x95 = sp + 200|0;
 $x96 = sp + 196|0;
 $x97 = sp + 192|0;
 $x98 = sp + 188|0;
 $x99 = sp + 184|0;
 $x100 = sp + 180|0;
 $x101 = sp + 176|0;
 $x102 = sp + 172|0;
 $x103 = sp + 168|0;
 $x104 = sp + 164|0;
 $x105 = sp + 160|0;
 $x106 = sp + 156|0;
 $x107 = sp + 152|0;
 $x108 = sp + 148|0;
 $x109 = sp + 533|0;
 $x110 = sp + 532|0;
 $x111 = sp + 531|0;
 $x112 = sp + 530|0;
 $x113 = sp + 529|0;
 $x114 = sp + 528|0;
 $x115 = sp + 527|0;
 $x116 = sp + 526|0;
 $x117 = sp + 525|0;
 $x118 = sp + 524|0;
 $x119 = sp + 523|0;
 $x120 = sp + 522|0;
 $x121 = sp + 144|0;
 $x122 = sp + 140|0;
 $x123 = sp + 136|0;
 $x124 = sp + 132|0;
 $x125 = sp + 128|0;
 $x126 = sp + 124|0;
 $x127 = sp + 120|0;
 $x128 = sp + 116|0;
 $x129 = sp + 112|0;
 $x130 = sp + 108|0;
 $x131 = sp + 16|0;
 $x132 = sp + 104|0;
 $x133 = sp + 100|0;
 $x134 = sp + 96|0;
 $x135 = sp + 8|0;
 $x136 = sp;
 $x137 = sp + 92|0;
 $x138 = sp + 88|0;
 $x139 = sp + 508|0;
 $x140 = sp + 506|0;
 $x141 = sp + 84|0;
 $x142 = sp + 521|0;
 $x143 = sp + 520|0;
 $x144 = sp + 504|0;
 $x145 = sp + 80|0;
 $x146 = sp + 519|0;
 $x147 = sp + 518|0;
 $x148 = sp + 517|0;
 $x149 = sp + 516|0;
 $x150 = sp + 76|0;
 $x151 = sp + 515|0;
 $x152 = sp + 514|0;
 $x153 = sp + 513|0;
 $x154 = sp + 512|0;
 $x155 = sp + 72|0;
 $x156 = sp + 68|0;
 $x157 = sp + 64|0;
 $x158 = sp + 60|0;
 $x159 = sp + 56|0;
 $x160 = sp + 52|0;
 $x161 = sp + 48|0;
 $x162 = sp + 44|0;
 $x163 = sp + 40|0;
 $x164 = sp + 36|0;
 $1 = $filepath;
 $2 = (_r4300_cp0_regs()|0);
 $cp0_regs = $2;
 $3 = (_malloc(24)|0);
 $save = $3;
 $4 = $save;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _main_message(4,6,(gb + (15535) | 0),$vararg_buffer);
  $0 = 0;
  $1156 = $0;
  STACKTOP = sp;return ($1156|0);
 }
 $6 = $1;
 $7 = (_strdup(($6|0))|0);
 $8 = $save;
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[(gb + (8424280) | 0)>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  _savestates_inc_slot();
 }
 $11 = (_save_eventqueue_infos($queue)|0);
 $queuelength = $11;
 $12 = $queuelength;
 $13 = (16788288 + ($12))|0;
 $14 = $save;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $save;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_malloc(($18|0))|0);
 $curr = $19;
 $20 = $save;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $save;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = $save;
  $27 = HEAP32[$26>>2]|0;
  _free(($27|0));
  $28 = $save;
  _free(($28|0));
  _main_message(4,6,(gb + (15535) | 0),$vararg_buffer1);
  $0 = 0;
  $1156 = $0;
  STACKTOP = sp;return ($1156|0);
 }
 $29 = $curr;
 $30 = HEAP32[(gb + (300) | 0)>>2]|0;
 ;HEAP8[$29>>0]=HEAP8[$30>>0]|0;HEAP8[$29+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$30+3>>0]|0;HEAP8[$29+4>>0]=HEAP8[$30+4>>0]|0;HEAP8[$29+5>>0]=HEAP8[$30+5>>0]|0;HEAP8[$29+6>>0]=HEAP8[$30+6>>0]|0;HEAP8[$29+7>>0]=HEAP8[$30+7>>0]|0;
 $31 = $curr;
 _to_little_endian_buffer($31,1,8);
 $32 = $curr;
 $33 = ((($32)) + 8|0);
 $curr = $33;
 HEAP8[$outbuf>>0] = 0;
 $34 = ((($outbuf)) + 1|0);
 HEAP8[$34>>0] = 1;
 $35 = ((($outbuf)) + 2|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($outbuf)) + 3|0);
 HEAP8[$36>>0] = 0;
 $37 = $curr;
 ;HEAP8[$37>>0]=HEAP8[$outbuf>>0]|0;HEAP8[$37+1>>0]=HEAP8[$outbuf+1>>0]|0;HEAP8[$37+2>>0]=HEAP8[$outbuf+2>>0]|0;HEAP8[$37+3>>0]=HEAP8[$outbuf+3>>0]|0;
 $38 = $curr;
 _to_little_endian_buffer($38,1,4);
 $39 = $curr;
 $40 = ((($39)) + 4|0);
 $curr = $40;
 $41 = $curr;
 dest=$41; src=((((gb + (23109551) | 0)) + 256|0)); stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $42 = $curr;
 _to_little_endian_buffer($42,1,32);
 $43 = $curr;
 $44 = ((($43)) + 32|0);
 $curr = $44;
 $45 = HEAP32[((((gb + (8421480) | 0)) + 32|0))>>2]|0;
 HEAP32[$x>>2] = $45;
 $46 = $curr;
 ;HEAP8[$46>>0]=HEAP8[$x>>0]|0;HEAP8[$46+1>>0]=HEAP8[$x+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$x+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$x+3>>0]|0;
 $47 = $curr;
 _to_little_endian_buffer($47,4,1);
 $48 = $curr;
 $49 = ((($48)) + 4|0);
 $curr = $49;
 $50 = HEAP32[((((gb + (8421480) | 0)) + 36|0))>>2]|0;
 HEAP32[$x1>>2] = $50;
 $51 = $curr;
 ;HEAP8[$51>>0]=HEAP8[$x1>>0]|0;HEAP8[$51+1>>0]=HEAP8[$x1+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$x1+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$x1+3>>0]|0;
 $52 = $curr;
 _to_little_endian_buffer($52,4,1);
 $53 = $curr;
 $54 = ((($53)) + 4|0);
 $curr = $54;
 $55 = HEAP32[((((gb + (8421480) | 0)) + 40|0))>>2]|0;
 HEAP32[$x2>>2] = $55;
 $56 = $curr;
 ;HEAP8[$56>>0]=HEAP8[$x2>>0]|0;HEAP8[$56+1>>0]=HEAP8[$x2+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$x2+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$x2+3>>0]|0;
 $57 = $curr;
 _to_little_endian_buffer($57,4,1);
 $58 = $curr;
 $59 = ((($58)) + 4|0);
 $curr = $59;
 $60 = HEAP32[((((gb + (8421480) | 0)) + 44|0))>>2]|0;
 HEAP32[$x3>>2] = $60;
 $61 = $curr;
 ;HEAP8[$61>>0]=HEAP8[$x3>>0]|0;HEAP8[$61+1>>0]=HEAP8[$x3+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$x3+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$x3+3>>0]|0;
 $62 = $curr;
 _to_little_endian_buffer($62,4,1);
 $63 = $curr;
 $64 = ((($63)) + 4|0);
 $curr = $64;
 $65 = HEAP32[((((gb + (8421480) | 0)) + 48|0))>>2]|0;
 HEAP32[$x4>>2] = $65;
 $66 = $curr;
 ;HEAP8[$66>>0]=HEAP8[$x4>>0]|0;HEAP8[$66+1>>0]=HEAP8[$x4+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$x4+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$x4+3>>0]|0;
 $67 = $curr;
 _to_little_endian_buffer($67,4,1);
 $68 = $curr;
 $69 = ((($68)) + 4|0);
 $curr = $69;
 $70 = HEAP32[((((gb + (8421480) | 0)) + 52|0))>>2]|0;
 HEAP32[$x5>>2] = $70;
 $71 = $curr;
 ;HEAP8[$71>>0]=HEAP8[$x5>>0]|0;HEAP8[$71+1>>0]=HEAP8[$x5+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$x5+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$x5+3>>0]|0;
 $72 = $curr;
 _to_little_endian_buffer($72,4,1);
 $73 = $curr;
 $74 = ((($73)) + 4|0);
 $curr = $74;
 $75 = HEAP32[((((gb + (8421480) | 0)) + 56|0))>>2]|0;
 HEAP32[$x6>>2] = $75;
 $76 = $curr;
 ;HEAP8[$76>>0]=HEAP8[$x6>>0]|0;HEAP8[$76+1>>0]=HEAP8[$x6+1>>0]|0;HEAP8[$76+2>>0]=HEAP8[$x6+2>>0]|0;HEAP8[$76+3>>0]=HEAP8[$x6+3>>0]|0;
 $77 = $curr;
 _to_little_endian_buffer($77,4,1);
 $78 = $curr;
 $79 = ((($78)) + 4|0);
 $curr = $79;
 $80 = HEAP32[((((gb + (8421480) | 0)) + 60|0))>>2]|0;
 HEAP32[$x7>>2] = $80;
 $81 = $curr;
 ;HEAP8[$81>>0]=HEAP8[$x7>>0]|0;HEAP8[$81+1>>0]=HEAP8[$x7+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$x7+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$x7+3>>0]|0;
 $82 = $curr;
 _to_little_endian_buffer($82,4,1);
 $83 = $curr;
 $84 = ((($83)) + 4|0);
 $curr = $84;
 $85 = HEAP32[((((gb + (8421480) | 0)) + 64|0))>>2]|0;
 HEAP32[$x8>>2] = $85;
 $86 = $curr;
 ;HEAP8[$86>>0]=HEAP8[$x8>>0]|0;HEAP8[$86+1>>0]=HEAP8[$x8+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$x8+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$x8+3>>0]|0;
 $87 = $curr;
 _to_little_endian_buffer($87,4,1);
 $88 = $curr;
 $89 = ((($88)) + 4|0);
 $curr = $89;
 $90 = HEAP32[((((gb + (8421480) | 0)) + 68|0))>>2]|0;
 HEAP32[$x9>>2] = $90;
 $91 = $curr;
 ;HEAP8[$91>>0]=HEAP8[$x9>>0]|0;HEAP8[$91+1>>0]=HEAP8[$x9+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$x9+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$x9+3>>0]|0;
 $92 = $curr;
 _to_little_endian_buffer($92,4,1);
 $93 = $curr;
 $94 = ((($93)) + 4|0);
 $curr = $94;
 HEAP32[$x10>>2] = 0;
 $95 = $curr;
 ;HEAP8[$95>>0]=HEAP8[$x10>>0]|0;HEAP8[$95+1>>0]=HEAP8[$x10+1>>0]|0;HEAP8[$95+2>>0]=HEAP8[$x10+2>>0]|0;HEAP8[$95+3>>0]=HEAP8[$x10+3>>0]|0;
 $96 = $curr;
 _to_little_endian_buffer($96,4,1);
 $97 = $curr;
 $98 = ((($97)) + 4|0);
 $curr = $98;
 $99 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 HEAP32[$x11>>2] = $99;
 $100 = $curr;
 ;HEAP8[$100>>0]=HEAP8[$x11>>0]|0;HEAP8[$100+1>>0]=HEAP8[$x11+1>>0]|0;HEAP8[$100+2>>0]=HEAP8[$x11+2>>0]|0;HEAP8[$100+3>>0]=HEAP8[$x11+3>>0]|0;
 $101 = $curr;
 _to_little_endian_buffer($101,4,1);
 $102 = $curr;
 $103 = ((($102)) + 4|0);
 $curr = $103;
 $104 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 $105 = $104 & 127;
 $106 = $105&255;
 HEAP8[$x12>>0] = $106;
 $107 = $curr;
 ;HEAP8[$107>>0]=HEAP8[$x12>>0]|0;
 $108 = $curr;
 _to_little_endian_buffer($108,1,1);
 $109 = $curr;
 $110 = ((($109)) + 1|0);
 $curr = $110;
 $111 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 $112 = $111 & 128;
 $113 = ($112|0)!=(0);
 $114 = $113&1;
 $115 = $114&255;
 HEAP8[$x13>>0] = $115;
 $116 = $curr;
 ;HEAP8[$116>>0]=HEAP8[$x13>>0]|0;
 $117 = $curr;
 _to_little_endian_buffer($117,1,1);
 $118 = $curr;
 $119 = ((($118)) + 1|0);
 $curr = $119;
 $120 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 $121 = $120 & 256;
 $122 = ($121|0)!=(0);
 $123 = $122&1;
 $124 = $123&255;
 HEAP8[$x14>>0] = $124;
 $125 = $curr;
 ;HEAP8[$125>>0]=HEAP8[$x14>>0]|0;
 $126 = $curr;
 _to_little_endian_buffer($126,1,1);
 $127 = $curr;
 $128 = ((($127)) + 1|0);
 $curr = $128;
 $129 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 $130 = $129 & 512;
 $131 = ($130|0)!=(0);
 $132 = $131&1;
 $133 = $132&255;
 HEAP8[$x15>>0] = $133;
 $134 = $curr;
 ;HEAP8[$134>>0]=HEAP8[$x15>>0]|0;
 $135 = $curr;
 _to_little_endian_buffer($135,1,1);
 $136 = $curr;
 $137 = ((($136)) + 1|0);
 $curr = $137;
 $138 = HEAP32[((((gb + (8410936) | 0)) + 4|0))>>2]|0;
 HEAP32[$x16>>2] = $138;
 $139 = $curr;
 ;HEAP8[$139>>0]=HEAP8[$x16>>0]|0;HEAP8[$139+1>>0]=HEAP8[$x16+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$x16+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$x16+3>>0]|0;
 $140 = $curr;
 _to_little_endian_buffer($140,4,1);
 $141 = $curr;
 $142 = ((($141)) + 4|0);
 $curr = $142;
 $143 = HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2]|0;
 HEAP32[$x17>>2] = $143;
 $144 = $curr;
 ;HEAP8[$144>>0]=HEAP8[$x17>>0]|0;HEAP8[$144+1>>0]=HEAP8[$x17+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$x17+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$x17+3>>0]|0;
 $145 = $curr;
 _to_little_endian_buffer($145,4,1);
 $146 = $curr;
 $147 = ((($146)) + 4|0);
 $curr = $147;
 $148 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 HEAP32[$x18>>2] = $148;
 $149 = $curr;
 ;HEAP8[$149>>0]=HEAP8[$x18>>0]|0;HEAP8[$149+1>>0]=HEAP8[$x18+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$x18+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$x18+3>>0]|0;
 $150 = $curr;
 _to_little_endian_buffer($150,4,1);
 $151 = $curr;
 $152 = ((($151)) + 4|0);
 $curr = $152;
 HEAP32[$x19>>2] = 0;
 $153 = $curr;
 ;HEAP8[$153>>0]=HEAP8[$x19>>0]|0;HEAP8[$153+1>>0]=HEAP8[$x19+1>>0]|0;HEAP8[$153+2>>0]=HEAP8[$x19+2>>0]|0;HEAP8[$153+3>>0]=HEAP8[$x19+3>>0]|0;
 $154 = $curr;
 _to_little_endian_buffer($154,4,1);
 $155 = $curr;
 $156 = ((($155)) + 4|0);
 $curr = $156;
 $157 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $158 = $157 & 1;
 $159 = ($158|0)!=(0);
 $160 = $159&1;
 $161 = $160&255;
 HEAP8[$x20>>0] = $161;
 $162 = $curr;
 ;HEAP8[$162>>0]=HEAP8[$x20>>0]|0;
 $163 = $curr;
 _to_little_endian_buffer($163,1,1);
 $164 = $curr;
 $165 = ((($164)) + 1|0);
 $curr = $165;
 $166 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $167 = $166 & 2;
 $168 = ($167|0)!=(0);
 $169 = $168&1;
 $170 = $169&255;
 HEAP8[$x21>>0] = $170;
 $171 = $curr;
 ;HEAP8[$171>>0]=HEAP8[$x21>>0]|0;
 $172 = $curr;
 _to_little_endian_buffer($172,1,1);
 $173 = $curr;
 $174 = ((($173)) + 1|0);
 $curr = $174;
 $175 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $176 = $175 & 4;
 $177 = ($176|0)!=(0);
 $178 = $177&1;
 $179 = $178&255;
 HEAP8[$x22>>0] = $179;
 $180 = $curr;
 ;HEAP8[$180>>0]=HEAP8[$x22>>0]|0;
 $181 = $curr;
 _to_little_endian_buffer($181,1,1);
 $182 = $curr;
 $183 = ((($182)) + 1|0);
 $curr = $183;
 $184 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $185 = $184 & 8;
 $186 = ($185|0)!=(0);
 $187 = $186&1;
 $188 = $187&255;
 HEAP8[$x23>>0] = $188;
 $189 = $curr;
 ;HEAP8[$189>>0]=HEAP8[$x23>>0]|0;
 $190 = $curr;
 _to_little_endian_buffer($190,1,1);
 $191 = $curr;
 $192 = ((($191)) + 1|0);
 $curr = $192;
 $193 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $194 = $193 & 16;
 $195 = ($194|0)!=(0);
 $196 = $195&1;
 $197 = $196&255;
 HEAP8[$x24>>0] = $197;
 $198 = $curr;
 ;HEAP8[$198>>0]=HEAP8[$x24>>0]|0;
 $199 = $curr;
 _to_little_endian_buffer($199,1,1);
 $200 = $curr;
 $201 = ((($200)) + 1|0);
 $curr = $201;
 $202 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $203 = $202 & 32;
 $204 = ($203|0)!=(0);
 $205 = $204&1;
 $206 = $205&255;
 HEAP8[$x25>>0] = $206;
 $207 = $curr;
 ;HEAP8[$207>>0]=HEAP8[$x25>>0]|0;
 $208 = $curr;
 _to_little_endian_buffer($208,1,1);
 $209 = $curr;
 $210 = ((($209)) + 1|0);
 $curr = $210;
 HEAP16[$x26>>1] = 0;
 $211 = $curr;
 ;HEAP8[$211>>0]=HEAP8[$x26>>0]|0;HEAP8[$211+1>>0]=HEAP8[$x26+1>>0]|0;
 $212 = $curr;
 _to_little_endian_buffer($212,2,1);
 $213 = $curr;
 $214 = ((($213)) + 2|0);
 $curr = $214;
 $215 = HEAP32[(gb + (8409824) | 0)>>2]|0;
 HEAP32[$x27>>2] = $215;
 $216 = $curr;
 ;HEAP8[$216>>0]=HEAP8[$x27>>0]|0;HEAP8[$216+1>>0]=HEAP8[$x27+1>>0]|0;HEAP8[$216+2>>0]=HEAP8[$x27+2>>0]|0;HEAP8[$216+3>>0]=HEAP8[$x27+3>>0]|0;
 $217 = $curr;
 _to_little_endian_buffer($217,4,1);
 $218 = $curr;
 $219 = ((($218)) + 4|0);
 $curr = $219;
 $220 = HEAP32[((((gb + (8409824) | 0)) + 4|0))>>2]|0;
 HEAP32[$x28>>2] = $220;
 $221 = $curr;
 ;HEAP8[$221>>0]=HEAP8[$x28>>0]|0;HEAP8[$221+1>>0]=HEAP8[$x28+1>>0]|0;HEAP8[$221+2>>0]=HEAP8[$x28+2>>0]|0;HEAP8[$221+3>>0]=HEAP8[$x28+3>>0]|0;
 $222 = $curr;
 _to_little_endian_buffer($222,4,1);
 $223 = $curr;
 $224 = ((($223)) + 4|0);
 $curr = $224;
 $225 = HEAP32[((((gb + (8409824) | 0)) + 8|0))>>2]|0;
 HEAP32[$x29>>2] = $225;
 $226 = $curr;
 ;HEAP8[$226>>0]=HEAP8[$x29>>0]|0;HEAP8[$226+1>>0]=HEAP8[$x29+1>>0]|0;HEAP8[$226+2>>0]=HEAP8[$x29+2>>0]|0;HEAP8[$226+3>>0]=HEAP8[$x29+3>>0]|0;
 $227 = $curr;
 _to_little_endian_buffer($227,4,1);
 $228 = $curr;
 $229 = ((($228)) + 4|0);
 $curr = $229;
 $230 = HEAP32[((((gb + (8409824) | 0)) + 12|0))>>2]|0;
 HEAP32[$x30>>2] = $230;
 $231 = $curr;
 ;HEAP8[$231>>0]=HEAP8[$x30>>0]|0;HEAP8[$231+1>>0]=HEAP8[$x30+1>>0]|0;HEAP8[$231+2>>0]=HEAP8[$x30+2>>0]|0;HEAP8[$231+3>>0]=HEAP8[$x30+3>>0]|0;
 $232 = $curr;
 _to_little_endian_buffer($232,4,1);
 $233 = $curr;
 $234 = ((($233)) + 4|0);
 $curr = $234;
 $235 = HEAP32[((((gb + (8409824) | 0)) + 16|0))>>2]|0;
 HEAP32[$x31>>2] = $235;
 $236 = $curr;
 ;HEAP8[$236>>0]=HEAP8[$x31>>0]|0;HEAP8[$236+1>>0]=HEAP8[$x31+1>>0]|0;HEAP8[$236+2>>0]=HEAP8[$x31+2>>0]|0;HEAP8[$236+3>>0]=HEAP8[$x31+3>>0]|0;
 $237 = $curr;
 _to_little_endian_buffer($237,4,1);
 $238 = $curr;
 $239 = ((($238)) + 4|0);
 $curr = $239;
 $240 = HEAP32[((((gb + (8409824) | 0)) + 20|0))>>2]|0;
 HEAP32[$x32>>2] = $240;
 $241 = $curr;
 ;HEAP8[$241>>0]=HEAP8[$x32>>0]|0;HEAP8[$241+1>>0]=HEAP8[$x32+1>>0]|0;HEAP8[$241+2>>0]=HEAP8[$x32+2>>0]|0;HEAP8[$241+3>>0]=HEAP8[$x32+3>>0]|0;
 $242 = $curr;
 _to_little_endian_buffer($242,4,1);
 $243 = $curr;
 $244 = ((($243)) + 4|0);
 $curr = $244;
 $245 = HEAP32[((((gb + (8409824) | 0)) + 24|0))>>2]|0;
 HEAP32[$x33>>2] = $245;
 $246 = $curr;
 ;HEAP8[$246>>0]=HEAP8[$x33>>0]|0;HEAP8[$246+1>>0]=HEAP8[$x33+1>>0]|0;HEAP8[$246+2>>0]=HEAP8[$x33+2>>0]|0;HEAP8[$246+3>>0]=HEAP8[$x33+3>>0]|0;
 $247 = $curr;
 _to_little_endian_buffer($247,4,1);
 $248 = $curr;
 $249 = ((($248)) + 4|0);
 $curr = $249;
 $250 = HEAP32[((((gb + (8409824) | 0)) + 28|0))>>2]|0;
 HEAP32[$x34>>2] = $250;
 $251 = $curr;
 ;HEAP8[$251>>0]=HEAP8[$x34>>0]|0;HEAP8[$251+1>>0]=HEAP8[$x34+1>>0]|0;HEAP8[$251+2>>0]=HEAP8[$x34+2>>0]|0;HEAP8[$251+3>>0]=HEAP8[$x34+3>>0]|0;
 $252 = $curr;
 _to_little_endian_buffer($252,4,1);
 $253 = $curr;
 $254 = ((($253)) + 4|0);
 $curr = $254;
 $255 = HEAP32[((((gb + (8409824) | 0)) + 32|0))>>2]|0;
 HEAP32[$x35>>2] = $255;
 $256 = $curr;
 ;HEAP8[$256>>0]=HEAP8[$x35>>0]|0;HEAP8[$256+1>>0]=HEAP8[$x35+1>>0]|0;HEAP8[$256+2>>0]=HEAP8[$x35+2>>0]|0;HEAP8[$256+3>>0]=HEAP8[$x35+3>>0]|0;
 $257 = $curr;
 _to_little_endian_buffer($257,4,1);
 $258 = $curr;
 $259 = ((($258)) + 4|0);
 $curr = $259;
 $260 = HEAP32[((((gb + (8409824) | 0)) + 36|0))>>2]|0;
 HEAP32[$x36>>2] = $260;
 $261 = $curr;
 ;HEAP8[$261>>0]=HEAP8[$x36>>0]|0;HEAP8[$261+1>>0]=HEAP8[$x36+1>>0]|0;HEAP8[$261+2>>0]=HEAP8[$x36+2>>0]|0;HEAP8[$261+3>>0]=HEAP8[$x36+3>>0]|0;
 $262 = $curr;
 _to_little_endian_buffer($262,4,1);
 $263 = $curr;
 $264 = ((($263)) + 4|0);
 $curr = $264;
 $265 = HEAP32[((((gb + (8409824) | 0)) + 40|0))>>2]|0;
 HEAP32[$x37>>2] = $265;
 $266 = $curr;
 ;HEAP8[$266>>0]=HEAP8[$x37>>0]|0;HEAP8[$266+1>>0]=HEAP8[$x37+1>>0]|0;HEAP8[$266+2>>0]=HEAP8[$x37+2>>0]|0;HEAP8[$266+3>>0]=HEAP8[$x37+3>>0]|0;
 $267 = $curr;
 _to_little_endian_buffer($267,4,1);
 $268 = $curr;
 $269 = ((($268)) + 4|0);
 $curr = $269;
 $270 = HEAP32[((((gb + (8409824) | 0)) + 44|0))>>2]|0;
 HEAP32[$x38>>2] = $270;
 $271 = $curr;
 ;HEAP8[$271>>0]=HEAP8[$x38>>0]|0;HEAP8[$271+1>>0]=HEAP8[$x38+1>>0]|0;HEAP8[$271+2>>0]=HEAP8[$x38+2>>0]|0;HEAP8[$271+3>>0]=HEAP8[$x38+3>>0]|0;
 $272 = $curr;
 _to_little_endian_buffer($272,4,1);
 $273 = $curr;
 $274 = ((($273)) + 4|0);
 $curr = $274;
 $275 = HEAP32[((((gb + (8409824) | 0)) + 48|0))>>2]|0;
 HEAP32[$x39>>2] = $275;
 $276 = $curr;
 ;HEAP8[$276>>0]=HEAP8[$x39>>0]|0;HEAP8[$276+1>>0]=HEAP8[$x39+1>>0]|0;HEAP8[$276+2>>0]=HEAP8[$x39+2>>0]|0;HEAP8[$276+3>>0]=HEAP8[$x39+3>>0]|0;
 $277 = $curr;
 _to_little_endian_buffer($277,4,1);
 $278 = $curr;
 $279 = ((($278)) + 4|0);
 $curr = $279;
 $280 = HEAP32[((((gb + (8413160) | 0)) + 8192|0))>>2]|0;
 HEAP32[$x40>>2] = $280;
 $281 = $curr;
 ;HEAP8[$281>>0]=HEAP8[$x40>>0]|0;HEAP8[$281+1>>0]=HEAP8[$x40+1>>0]|0;HEAP8[$281+2>>0]=HEAP8[$x40+2>>0]|0;HEAP8[$281+3>>0]=HEAP8[$x40+3>>0]|0;
 $282 = $curr;
 _to_little_endian_buffer($282,4,1);
 $283 = $curr;
 $284 = ((($283)) + 4|0);
 $curr = $284;
 $285 = HEAP32[((((gb + (8413160) | 0)) + 8196|0))>>2]|0;
 HEAP32[$x41>>2] = $285;
 $286 = $curr;
 ;HEAP8[$286>>0]=HEAP8[$x41>>0]|0;HEAP8[$286+1>>0]=HEAP8[$x41+1>>0]|0;HEAP8[$286+2>>0]=HEAP8[$x41+2>>0]|0;HEAP8[$286+3>>0]=HEAP8[$x41+3>>0]|0;
 $287 = $curr;
 _to_little_endian_buffer($287,4,1);
 $288 = $curr;
 $289 = ((($288)) + 4|0);
 $curr = $289;
 $290 = HEAP32[((((gb + (8413160) | 0)) + 8200|0))>>2]|0;
 HEAP32[$x42>>2] = $290;
 $291 = $curr;
 ;HEAP8[$291>>0]=HEAP8[$x42>>0]|0;HEAP8[$291+1>>0]=HEAP8[$x42+1>>0]|0;HEAP8[$291+2>>0]=HEAP8[$x42+2>>0]|0;HEAP8[$291+3>>0]=HEAP8[$x42+3>>0]|0;
 $292 = $curr;
 _to_little_endian_buffer($292,4,1);
 $293 = $curr;
 $294 = ((($293)) + 4|0);
 $curr = $294;
 $295 = HEAP32[((((gb + (8413160) | 0)) + 8204|0))>>2]|0;
 HEAP32[$x43>>2] = $295;
 $296 = $curr;
 ;HEAP8[$296>>0]=HEAP8[$x43>>0]|0;HEAP8[$296+1>>0]=HEAP8[$x43+1>>0]|0;HEAP8[$296+2>>0]=HEAP8[$x43+2>>0]|0;HEAP8[$296+3>>0]=HEAP8[$x43+3>>0]|0;
 $297 = $curr;
 _to_little_endian_buffer($297,4,1);
 $298 = $curr;
 $299 = ((($298)) + 4|0);
 $curr = $299;
 HEAP32[$x44>>2] = 0;
 $300 = $curr;
 ;HEAP8[$300>>0]=HEAP8[$x44>>0]|0;HEAP8[$300+1>>0]=HEAP8[$x44+1>>0]|0;HEAP8[$300+2>>0]=HEAP8[$x44+2>>0]|0;HEAP8[$300+3>>0]=HEAP8[$x44+3>>0]|0;
 $301 = $curr;
 _to_little_endian_buffer($301,4,1);
 $302 = $curr;
 $303 = ((($302)) + 4|0);
 $curr = $303;
 $304 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 HEAP32[$x45>>2] = $304;
 $305 = $curr;
 ;HEAP8[$305>>0]=HEAP8[$x45>>0]|0;HEAP8[$305+1>>0]=HEAP8[$x45+1>>0]|0;HEAP8[$305+2>>0]=HEAP8[$x45+2>>0]|0;HEAP8[$305+3>>0]=HEAP8[$x45+3>>0]|0;
 $306 = $curr;
 _to_little_endian_buffer($306,4,1);
 $307 = $curr;
 $308 = ((($307)) + 4|0);
 $curr = $308;
 $309 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $310 = $309 & 1;
 $311 = ($310|0)!=(0);
 $312 = $311&1;
 $313 = $312&255;
 HEAP8[$x46>>0] = $313;
 $314 = $curr;
 ;HEAP8[$314>>0]=HEAP8[$x46>>0]|0;
 $315 = $curr;
 _to_little_endian_buffer($315,1,1);
 $316 = $curr;
 $317 = ((($316)) + 1|0);
 $curr = $317;
 $318 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $319 = $318 & 2;
 $320 = ($319|0)!=(0);
 $321 = $320&1;
 $322 = $321&255;
 HEAP8[$x47>>0] = $322;
 $323 = $curr;
 ;HEAP8[$323>>0]=HEAP8[$x47>>0]|0;
 $324 = $curr;
 _to_little_endian_buffer($324,1,1);
 $325 = $curr;
 $326 = ((($325)) + 1|0);
 $curr = $326;
 $327 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $328 = $327 & 4;
 $329 = ($328|0)!=(0);
 $330 = $329&1;
 $331 = $330&255;
 HEAP8[$x48>>0] = $331;
 $332 = $curr;
 ;HEAP8[$332>>0]=HEAP8[$x48>>0]|0;
 $333 = $curr;
 _to_little_endian_buffer($333,1,1);
 $334 = $curr;
 $335 = ((($334)) + 1|0);
 $curr = $335;
 $336 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $337 = $336 & 8;
 $338 = ($337|0)!=(0);
 $339 = $338&1;
 $340 = $339&255;
 HEAP8[$x49>>0] = $340;
 $341 = $curr;
 ;HEAP8[$341>>0]=HEAP8[$x49>>0]|0;
 $342 = $curr;
 _to_little_endian_buffer($342,1,1);
 $343 = $curr;
 $344 = ((($343)) + 1|0);
 $curr = $344;
 $345 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $346 = $345 & 16;
 $347 = ($346|0)!=(0);
 $348 = $347&1;
 $349 = $348&255;
 HEAP8[$x50>>0] = $349;
 $350 = $curr;
 ;HEAP8[$350>>0]=HEAP8[$x50>>0]|0;
 $351 = $curr;
 _to_little_endian_buffer($351,1,1);
 $352 = $curr;
 $353 = ((($352)) + 1|0);
 $curr = $353;
 $354 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $355 = $354 & 32;
 $356 = ($355|0)!=(0);
 $357 = $356&1;
 $358 = $357&255;
 HEAP8[$x51>>0] = $358;
 $359 = $curr;
 ;HEAP8[$359>>0]=HEAP8[$x51>>0]|0;
 $360 = $curr;
 _to_little_endian_buffer($360,1,1);
 $361 = $curr;
 $362 = ((($361)) + 1|0);
 $curr = $362;
 $363 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $364 = $363 & 64;
 $365 = ($364|0)!=(0);
 $366 = $365&1;
 $367 = $366&255;
 HEAP8[$x52>>0] = $367;
 $368 = $curr;
 ;HEAP8[$368>>0]=HEAP8[$x52>>0]|0;
 $369 = $curr;
 _to_little_endian_buffer($369,1,1);
 $370 = $curr;
 $371 = ((($370)) + 1|0);
 $curr = $371;
 $372 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $373 = $372 & 128;
 $374 = ($373|0)!=(0);
 $375 = $374&1;
 $376 = $375&255;
 HEAP8[$x53>>0] = $376;
 $377 = $curr;
 ;HEAP8[$377>>0]=HEAP8[$x53>>0]|0;
 $378 = $curr;
 _to_little_endian_buffer($378,1,1);
 $379 = $curr;
 $380 = ((($379)) + 1|0);
 $curr = $380;
 $381 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $382 = $381 & 256;
 $383 = ($382|0)!=(0);
 $384 = $383&1;
 $385 = $384&255;
 HEAP8[$x54>>0] = $385;
 $386 = $curr;
 ;HEAP8[$386>>0]=HEAP8[$x54>>0]|0;
 $387 = $curr;
 _to_little_endian_buffer($387,1,1);
 $388 = $curr;
 $389 = ((($388)) + 1|0);
 $curr = $389;
 $390 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $391 = $390 & 512;
 $392 = ($391|0)!=(0);
 $393 = $392&1;
 $394 = $393&255;
 HEAP8[$x55>>0] = $394;
 $395 = $curr;
 ;HEAP8[$395>>0]=HEAP8[$x55>>0]|0;
 $396 = $curr;
 _to_little_endian_buffer($396,1,1);
 $397 = $curr;
 $398 = ((($397)) + 1|0);
 $curr = $398;
 $399 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $400 = $399 & 1024;
 $401 = ($400|0)!=(0);
 $402 = $401&1;
 $403 = $402&255;
 HEAP8[$x56>>0] = $403;
 $404 = $curr;
 ;HEAP8[$404>>0]=HEAP8[$x56>>0]|0;
 $405 = $curr;
 _to_little_endian_buffer($405,1,1);
 $406 = $curr;
 $407 = ((($406)) + 1|0);
 $curr = $407;
 $408 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $409 = $408 & 2048;
 $410 = ($409|0)!=(0);
 $411 = $410&1;
 $412 = $411&255;
 HEAP8[$x57>>0] = $412;
 $413 = $curr;
 ;HEAP8[$413>>0]=HEAP8[$x57>>0]|0;
 $414 = $curr;
 _to_little_endian_buffer($414,1,1);
 $415 = $curr;
 $416 = ((($415)) + 1|0);
 $curr = $416;
 $417 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $418 = $417 & 4096;
 $419 = ($418|0)!=(0);
 $420 = $419&1;
 $421 = $420&255;
 HEAP8[$x58>>0] = $421;
 $422 = $curr;
 ;HEAP8[$422>>0]=HEAP8[$x58>>0]|0;
 $423 = $curr;
 _to_little_endian_buffer($423,1,1);
 $424 = $curr;
 $425 = ((($424)) + 1|0);
 $curr = $425;
 $426 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $427 = $426 & 8192;
 $428 = ($427|0)!=(0);
 $429 = $428&1;
 $430 = $429&255;
 HEAP8[$x59>>0] = $430;
 $431 = $curr;
 ;HEAP8[$431>>0]=HEAP8[$x59>>0]|0;
 $432 = $curr;
 _to_little_endian_buffer($432,1,1);
 $433 = $curr;
 $434 = ((($433)) + 1|0);
 $curr = $434;
 $435 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 $436 = $435 & 16384;
 $437 = ($436|0)!=(0);
 $438 = $437&1;
 $439 = $438&255;
 HEAP8[$x60>>0] = $439;
 $440 = $curr;
 ;HEAP8[$440>>0]=HEAP8[$x60>>0]|0;
 $441 = $curr;
 _to_little_endian_buffer($441,1,1);
 $442 = $curr;
 $443 = ((($442)) + 1|0);
 $curr = $443;
 HEAP8[$x61>>0] = 0;
 $444 = $curr;
 ;HEAP8[$444>>0]=HEAP8[$x61>>0]|0;
 $445 = $curr;
 _to_little_endian_buffer($445,1,1);
 $446 = $curr;
 $447 = ((($446)) + 1|0);
 $curr = $447;
 $448 = HEAP32[((((gb + (8413160) | 0)) + 8212|0))>>2]|0;
 HEAP32[$x62>>2] = $448;
 $449 = $curr;
 ;HEAP8[$449>>0]=HEAP8[$x62>>0]|0;HEAP8[$449+1>>0]=HEAP8[$x62+1>>0]|0;HEAP8[$449+2>>0]=HEAP8[$x62+2>>0]|0;HEAP8[$449+3>>0]=HEAP8[$x62+3>>0]|0;
 $450 = $curr;
 _to_little_endian_buffer($450,4,1);
 $451 = $curr;
 $452 = ((($451)) + 4|0);
 $curr = $452;
 $453 = HEAP32[((((gb + (8413160) | 0)) + 8216|0))>>2]|0;
 HEAP32[$x63>>2] = $453;
 $454 = $curr;
 ;HEAP8[$454>>0]=HEAP8[$x63>>0]|0;HEAP8[$454+1>>0]=HEAP8[$x63+1>>0]|0;HEAP8[$454+2>>0]=HEAP8[$x63+2>>0]|0;HEAP8[$454+3>>0]=HEAP8[$x63+3>>0]|0;
 $455 = $curr;
 _to_little_endian_buffer($455,4,1);
 $456 = $curr;
 $457 = ((($456)) + 4|0);
 $curr = $457;
 $458 = HEAP32[((((gb + (8413160) | 0)) + 8220|0))>>2]|0;
 HEAP32[$x64>>2] = $458;
 $459 = $curr;
 ;HEAP8[$459>>0]=HEAP8[$x64>>0]|0;HEAP8[$459+1>>0]=HEAP8[$x64+1>>0]|0;HEAP8[$459+2>>0]=HEAP8[$x64+2>>0]|0;HEAP8[$459+3>>0]=HEAP8[$x64+3>>0]|0;
 $460 = $curr;
 _to_little_endian_buffer($460,4,1);
 $461 = $curr;
 $462 = ((($461)) + 4|0);
 $curr = $462;
 $463 = HEAP32[((((gb + (8413160) | 0)) + 8224|0))>>2]|0;
 HEAP32[$x65>>2] = $463;
 $464 = $curr;
 ;HEAP8[$464>>0]=HEAP8[$x65>>0]|0;HEAP8[$464+1>>0]=HEAP8[$x65+1>>0]|0;HEAP8[$464+2>>0]=HEAP8[$x65+2>>0]|0;HEAP8[$464+3>>0]=HEAP8[$x65+3>>0]|0;
 $465 = $curr;
 _to_little_endian_buffer($465,4,1);
 $466 = $curr;
 $467 = ((($466)) + 4|0);
 $curr = $467;
 $468 = HEAP32[((((gb + (8413160) | 0)) + 8228|0))>>2]|0;
 HEAP32[$x66>>2] = $468;
 $469 = $curr;
 ;HEAP8[$469>>0]=HEAP8[$x66>>0]|0;HEAP8[$469+1>>0]=HEAP8[$x66+1>>0]|0;HEAP8[$469+2>>0]=HEAP8[$x66+2>>0]|0;HEAP8[$469+3>>0]=HEAP8[$x66+3>>0]|0;
 $470 = $curr;
 _to_little_endian_buffer($470,4,1);
 $471 = $curr;
 $472 = ((($471)) + 4|0);
 $curr = $472;
 $473 = HEAP32[(gb + (8410672) | 0)>>2]|0;
 HEAP32[$x67>>2] = $473;
 $474 = $curr;
 ;HEAP8[$474>>0]=HEAP8[$x67>>0]|0;HEAP8[$474+1>>0]=HEAP8[$x67+1>>0]|0;HEAP8[$474+2>>0]=HEAP8[$x67+2>>0]|0;HEAP8[$474+3>>0]=HEAP8[$x67+3>>0]|0;
 $475 = $curr;
 _to_little_endian_buffer($475,4,1);
 $476 = $curr;
 $477 = ((($476)) + 4|0);
 $curr = $477;
 $478 = HEAP32[((((gb + (8410672) | 0)) + 4|0))>>2]|0;
 HEAP32[$x68>>2] = $478;
 $479 = $curr;
 ;HEAP8[$479>>0]=HEAP8[$x68>>0]|0;HEAP8[$479+1>>0]=HEAP8[$x68+1>>0]|0;HEAP8[$479+2>>0]=HEAP8[$x68+2>>0]|0;HEAP8[$479+3>>0]=HEAP8[$x68+3>>0]|0;
 $480 = $curr;
 _to_little_endian_buffer($480,4,1);
 $481 = $curr;
 $482 = ((($481)) + 4|0);
 $curr = $482;
 $483 = HEAP32[((((gb + (8410672) | 0)) + 16|0))>>2]|0;
 HEAP32[$x69>>2] = $483;
 $484 = $curr;
 ;HEAP8[$484>>0]=HEAP8[$x69>>0]|0;HEAP8[$484+1>>0]=HEAP8[$x69+1>>0]|0;HEAP8[$484+2>>0]=HEAP8[$x69+2>>0]|0;HEAP8[$484+3>>0]=HEAP8[$x69+3>>0]|0;
 $485 = $curr;
 _to_little_endian_buffer($485,4,1);
 $486 = $curr;
 $487 = ((($486)) + 4|0);
 $curr = $487;
 $488 = HEAP32[((((gb + (8410672) | 0)) + 24|0))>>2]|0;
 HEAP32[$x70>>2] = $488;
 $489 = $curr;
 ;HEAP8[$489>>0]=HEAP8[$x70>>0]|0;HEAP8[$489+1>>0]=HEAP8[$x70+1>>0]|0;HEAP8[$489+2>>0]=HEAP8[$x70+2>>0]|0;HEAP8[$489+3>>0]=HEAP8[$x70+3>>0]|0;
 $490 = $curr;
 _to_little_endian_buffer($490,4,1);
 $491 = $curr;
 $492 = ((($491)) + 4|0);
 $curr = $492;
 $493 = HEAP32[(gb + (8421560) | 0)>>2]|0;
 HEAP32[$x71>>2] = $493;
 $494 = $curr;
 ;HEAP8[$494>>0]=HEAP8[$x71>>0]|0;HEAP8[$494+1>>0]=HEAP8[$x71+1>>0]|0;HEAP8[$494+2>>0]=HEAP8[$x71+2>>0]|0;HEAP8[$494+3>>0]=HEAP8[$x71+3>>0]|0;
 $495 = $curr;
 _to_little_endian_buffer($495,4,1);
 $496 = $curr;
 $497 = ((($496)) + 4|0);
 $curr = $497;
 $498 = HEAP32[((((gb + (8421560) | 0)) + 4|0))>>2]|0;
 HEAP32[$x72>>2] = $498;
 $499 = $curr;
 ;HEAP8[$499>>0]=HEAP8[$x72>>0]|0;HEAP8[$499+1>>0]=HEAP8[$x72+1>>0]|0;HEAP8[$499+2>>0]=HEAP8[$x72+2>>0]|0;HEAP8[$499+3>>0]=HEAP8[$x72+3>>0]|0;
 $500 = $curr;
 _to_little_endian_buffer($500,4,1);
 $501 = $curr;
 $502 = ((($501)) + 4|0);
 $curr = $502;
 $503 = HEAP32[((((gb + (8421560) | 0)) + 8|0))>>2]|0;
 HEAP32[$x73>>2] = $503;
 $504 = $curr;
 ;HEAP8[$504>>0]=HEAP8[$x73>>0]|0;HEAP8[$504+1>>0]=HEAP8[$x73+1>>0]|0;HEAP8[$504+2>>0]=HEAP8[$x73+2>>0]|0;HEAP8[$504+3>>0]=HEAP8[$x73+3>>0]|0;
 $505 = $curr;
 _to_little_endian_buffer($505,4,1);
 $506 = $curr;
 $507 = ((($506)) + 4|0);
 $curr = $507;
 $508 = HEAP32[((((gb + (8421560) | 0)) + 12|0))>>2]|0;
 HEAP32[$x74>>2] = $508;
 $509 = $curr;
 ;HEAP8[$509>>0]=HEAP8[$x74>>0]|0;HEAP8[$509+1>>0]=HEAP8[$x74+1>>0]|0;HEAP8[$509+2>>0]=HEAP8[$x74+2>>0]|0;HEAP8[$509+3>>0]=HEAP8[$x74+3>>0]|0;
 $510 = $curr;
 _to_little_endian_buffer($510,4,1);
 $511 = $curr;
 $512 = ((($511)) + 4|0);
 $curr = $512;
 $513 = HEAP32[((((gb + (8421560) | 0)) + 16|0))>>2]|0;
 HEAP32[$x75>>2] = $513;
 $514 = $curr;
 ;HEAP8[$514>>0]=HEAP8[$x75>>0]|0;HEAP8[$514+1>>0]=HEAP8[$x75+1>>0]|0;HEAP8[$514+2>>0]=HEAP8[$x75+2>>0]|0;HEAP8[$514+3>>0]=HEAP8[$x75+3>>0]|0;
 $515 = $curr;
 _to_little_endian_buffer($515,4,1);
 $516 = $curr;
 $517 = ((($516)) + 4|0);
 $curr = $517;
 $518 = HEAP32[((((gb + (8421560) | 0)) + 20|0))>>2]|0;
 HEAP32[$x76>>2] = $518;
 $519 = $curr;
 ;HEAP8[$519>>0]=HEAP8[$x76>>0]|0;HEAP8[$519+1>>0]=HEAP8[$x76+1>>0]|0;HEAP8[$519+2>>0]=HEAP8[$x76+2>>0]|0;HEAP8[$519+3>>0]=HEAP8[$x76+3>>0]|0;
 $520 = $curr;
 _to_little_endian_buffer($520,4,1);
 $521 = $curr;
 $522 = ((($521)) + 4|0);
 $curr = $522;
 $523 = HEAP32[((((gb + (8421560) | 0)) + 24|0))>>2]|0;
 HEAP32[$x77>>2] = $523;
 $524 = $curr;
 ;HEAP8[$524>>0]=HEAP8[$x77>>0]|0;HEAP8[$524+1>>0]=HEAP8[$x77+1>>0]|0;HEAP8[$524+2>>0]=HEAP8[$x77+2>>0]|0;HEAP8[$524+3>>0]=HEAP8[$x77+3>>0]|0;
 $525 = $curr;
 _to_little_endian_buffer($525,4,1);
 $526 = $curr;
 $527 = ((($526)) + 4|0);
 $curr = $527;
 $528 = HEAP32[((((gb + (8421560) | 0)) + 28|0))>>2]|0;
 HEAP32[$x78>>2] = $528;
 $529 = $curr;
 ;HEAP8[$529>>0]=HEAP8[$x78>>0]|0;HEAP8[$529+1>>0]=HEAP8[$x78+1>>0]|0;HEAP8[$529+2>>0]=HEAP8[$x78+2>>0]|0;HEAP8[$529+3>>0]=HEAP8[$x78+3>>0]|0;
 $530 = $curr;
 _to_little_endian_buffer($530,4,1);
 $531 = $curr;
 $532 = ((($531)) + 4|0);
 $curr = $532;
 $533 = HEAP32[((((gb + (8421560) | 0)) + 32|0))>>2]|0;
 HEAP32[$x79>>2] = $533;
 $534 = $curr;
 ;HEAP8[$534>>0]=HEAP8[$x79>>0]|0;HEAP8[$534+1>>0]=HEAP8[$x79+1>>0]|0;HEAP8[$534+2>>0]=HEAP8[$x79+2>>0]|0;HEAP8[$534+3>>0]=HEAP8[$x79+3>>0]|0;
 $535 = $curr;
 _to_little_endian_buffer($535,4,1);
 $536 = $curr;
 $537 = ((($536)) + 4|0);
 $curr = $537;
 $538 = HEAP32[((((gb + (8421560) | 0)) + 36|0))>>2]|0;
 HEAP32[$x80>>2] = $538;
 $539 = $curr;
 ;HEAP8[$539>>0]=HEAP8[$x80>>0]|0;HEAP8[$539+1>>0]=HEAP8[$x80+1>>0]|0;HEAP8[$539+2>>0]=HEAP8[$x80+2>>0]|0;HEAP8[$539+3>>0]=HEAP8[$x80+3>>0]|0;
 $540 = $curr;
 _to_little_endian_buffer($540,4,1);
 $541 = $curr;
 $542 = ((($541)) + 4|0);
 $curr = $542;
 $543 = HEAP32[((((gb + (8421560) | 0)) + 40|0))>>2]|0;
 HEAP32[$x81>>2] = $543;
 $544 = $curr;
 ;HEAP8[$544>>0]=HEAP8[$x81>>0]|0;HEAP8[$544+1>>0]=HEAP8[$x81+1>>0]|0;HEAP8[$544+2>>0]=HEAP8[$x81+2>>0]|0;HEAP8[$544+3>>0]=HEAP8[$x81+3>>0]|0;
 $545 = $curr;
 _to_little_endian_buffer($545,4,1);
 $546 = $curr;
 $547 = ((($546)) + 4|0);
 $curr = $547;
 $548 = HEAP32[((((gb + (8421560) | 0)) + 44|0))>>2]|0;
 HEAP32[$x82>>2] = $548;
 $549 = $curr;
 ;HEAP8[$549>>0]=HEAP8[$x82>>0]|0;HEAP8[$549+1>>0]=HEAP8[$x82+1>>0]|0;HEAP8[$549+2>>0]=HEAP8[$x82+2>>0]|0;HEAP8[$549+3>>0]=HEAP8[$x82+3>>0]|0;
 $550 = $curr;
 _to_little_endian_buffer($550,4,1);
 $551 = $curr;
 $552 = ((($551)) + 4|0);
 $curr = $552;
 $553 = HEAP32[((((gb + (8421560) | 0)) + 48|0))>>2]|0;
 HEAP32[$x83>>2] = $553;
 $554 = $curr;
 ;HEAP8[$554>>0]=HEAP8[$x83>>0]|0;HEAP8[$554+1>>0]=HEAP8[$x83+1>>0]|0;HEAP8[$554+2>>0]=HEAP8[$x83+2>>0]|0;HEAP8[$554+3>>0]=HEAP8[$x83+3>>0]|0;
 $555 = $curr;
 _to_little_endian_buffer($555,4,1);
 $556 = $curr;
 $557 = ((($556)) + 4|0);
 $curr = $557;
 $558 = HEAP32[((((gb + (8421560) | 0)) + 52|0))>>2]|0;
 HEAP32[$x84>>2] = $558;
 $559 = $curr;
 ;HEAP8[$559>>0]=HEAP8[$x84>>0]|0;HEAP8[$559+1>>0]=HEAP8[$x84+1>>0]|0;HEAP8[$559+2>>0]=HEAP8[$x84+2>>0]|0;HEAP8[$559+3>>0]=HEAP8[$x84+3>>0]|0;
 $560 = $curr;
 _to_little_endian_buffer($560,4,1);
 $561 = $curr;
 $562 = ((($561)) + 4|0);
 $curr = $562;
 $563 = HEAP32[((((gb + (8421560) | 0)) + 60|0))>>2]|0;
 HEAP32[$x85>>2] = $563;
 $564 = $curr;
 ;HEAP8[$564>>0]=HEAP8[$x85>>0]|0;HEAP8[$564+1>>0]=HEAP8[$x85+1>>0]|0;HEAP8[$564+2>>0]=HEAP8[$x85+2>>0]|0;HEAP8[$564+3>>0]=HEAP8[$x85+3>>0]|0;
 $565 = $curr;
 _to_little_endian_buffer($565,4,1);
 $566 = $curr;
 $567 = ((($566)) + 4|0);
 $curr = $567;
 $568 = HEAP32[(gb + (8421480) | 0)>>2]|0;
 HEAP32[$x86>>2] = $568;
 $569 = $curr;
 ;HEAP8[$569>>0]=HEAP8[$x86>>0]|0;HEAP8[$569+1>>0]=HEAP8[$x86+1>>0]|0;HEAP8[$569+2>>0]=HEAP8[$x86+2>>0]|0;HEAP8[$569+3>>0]=HEAP8[$x86+3>>0]|0;
 $570 = $curr;
 _to_little_endian_buffer($570,4,1);
 $571 = $curr;
 $572 = ((($571)) + 4|0);
 $curr = $572;
 $573 = HEAP32[((((gb + (8421480) | 0)) + 4|0))>>2]|0;
 HEAP32[$x87>>2] = $573;
 $574 = $curr;
 ;HEAP8[$574>>0]=HEAP8[$x87>>0]|0;HEAP8[$574+1>>0]=HEAP8[$x87+1>>0]|0;HEAP8[$574+2>>0]=HEAP8[$x87+2>>0]|0;HEAP8[$574+3>>0]=HEAP8[$x87+3>>0]|0;
 $575 = $curr;
 _to_little_endian_buffer($575,4,1);
 $576 = $curr;
 $577 = ((($576)) + 4|0);
 $curr = $577;
 $578 = HEAP32[((((gb + (8421480) | 0)) + 8|0))>>2]|0;
 HEAP32[$x88>>2] = $578;
 $579 = $curr;
 ;HEAP8[$579>>0]=HEAP8[$x88>>0]|0;HEAP8[$579+1>>0]=HEAP8[$x88+1>>0]|0;HEAP8[$579+2>>0]=HEAP8[$x88+2>>0]|0;HEAP8[$579+3>>0]=HEAP8[$x88+3>>0]|0;
 $580 = $curr;
 _to_little_endian_buffer($580,4,1);
 $581 = $curr;
 $582 = ((($581)) + 4|0);
 $curr = $582;
 $583 = HEAP32[((((gb + (8421480) | 0)) + 12|0))>>2]|0;
 HEAP32[$x89>>2] = $583;
 $584 = $curr;
 ;HEAP8[$584>>0]=HEAP8[$x89>>0]|0;HEAP8[$584+1>>0]=HEAP8[$x89+1>>0]|0;HEAP8[$584+2>>0]=HEAP8[$x89+2>>0]|0;HEAP8[$584+3>>0]=HEAP8[$x89+3>>0]|0;
 $585 = $curr;
 _to_little_endian_buffer($585,4,1);
 $586 = $curr;
 $587 = ((($586)) + 4|0);
 $curr = $587;
 $588 = HEAP32[((((gb + (8421480) | 0)) + 16|0))>>2]|0;
 HEAP32[$x90>>2] = $588;
 $589 = $curr;
 ;HEAP8[$589>>0]=HEAP8[$x90>>0]|0;HEAP8[$589+1>>0]=HEAP8[$x90+1>>0]|0;HEAP8[$589+2>>0]=HEAP8[$x90+2>>0]|0;HEAP8[$589+3>>0]=HEAP8[$x90+3>>0]|0;
 $590 = $curr;
 _to_little_endian_buffer($590,4,1);
 $591 = $curr;
 $592 = ((($591)) + 4|0);
 $curr = $592;
 $593 = HEAP32[((((gb + (8421480) | 0)) + 20|0))>>2]|0;
 HEAP32[$x91>>2] = $593;
 $594 = $curr;
 ;HEAP8[$594>>0]=HEAP8[$x91>>0]|0;HEAP8[$594+1>>0]=HEAP8[$x91+1>>0]|0;HEAP8[$594+2>>0]=HEAP8[$x91+2>>0]|0;HEAP8[$594+3>>0]=HEAP8[$x91+3>>0]|0;
 $595 = $curr;
 _to_little_endian_buffer($595,4,1);
 $596 = $curr;
 $597 = ((($596)) + 4|0);
 $curr = $597;
 $598 = HEAP32[((((gb + (8421480) | 0)) + 24|0))>>2]|0;
 HEAP32[$x92>>2] = $598;
 $599 = $curr;
 ;HEAP8[$599>>0]=HEAP8[$x92>>0]|0;HEAP8[$599+1>>0]=HEAP8[$x92+1>>0]|0;HEAP8[$599+2>>0]=HEAP8[$x92+2>>0]|0;HEAP8[$599+3>>0]=HEAP8[$x92+3>>0]|0;
 $600 = $curr;
 _to_little_endian_buffer($600,4,1);
 $601 = $curr;
 $602 = ((($601)) + 4|0);
 $curr = $602;
 $603 = HEAP32[((((gb + (8421480) | 0)) + 28|0))>>2]|0;
 HEAP32[$x93>>2] = $603;
 $604 = $curr;
 ;HEAP8[$604>>0]=HEAP8[$x93>>0]|0;HEAP8[$604+1>>0]=HEAP8[$x93+1>>0]|0;HEAP8[$604+2>>0]=HEAP8[$x93+2>>0]|0;HEAP8[$604+3>>0]=HEAP8[$x93+3>>0]|0;
 $605 = $curr;
 _to_little_endian_buffer($605,4,1);
 $606 = $curr;
 $607 = ((($606)) + 4|0);
 $curr = $607;
 $608 = HEAP32[(gb + (8421404) | 0)>>2]|0;
 HEAP32[$x94>>2] = $608;
 $609 = $curr;
 ;HEAP8[$609>>0]=HEAP8[$x94>>0]|0;HEAP8[$609+1>>0]=HEAP8[$x94+1>>0]|0;HEAP8[$609+2>>0]=HEAP8[$x94+2>>0]|0;HEAP8[$609+3>>0]=HEAP8[$x94+3>>0]|0;
 $610 = $curr;
 _to_little_endian_buffer($610,4,1);
 $611 = $curr;
 $612 = ((($611)) + 4|0);
 $curr = $612;
 $613 = HEAP32[((((gb + (8421404) | 0)) + 4|0))>>2]|0;
 HEAP32[$x95>>2] = $613;
 $614 = $curr;
 ;HEAP8[$614>>0]=HEAP8[$x95>>0]|0;HEAP8[$614+1>>0]=HEAP8[$x95+1>>0]|0;HEAP8[$614+2>>0]=HEAP8[$x95+2>>0]|0;HEAP8[$614+3>>0]=HEAP8[$x95+3>>0]|0;
 $615 = $curr;
 _to_little_endian_buffer($615,4,1);
 $616 = $curr;
 $617 = ((($616)) + 4|0);
 $curr = $617;
 $618 = HEAP32[((((gb + (8421404) | 0)) + 8|0))>>2]|0;
 HEAP32[$x96>>2] = $618;
 $619 = $curr;
 ;HEAP8[$619>>0]=HEAP8[$x96>>0]|0;HEAP8[$619+1>>0]=HEAP8[$x96+1>>0]|0;HEAP8[$619+2>>0]=HEAP8[$x96+2>>0]|0;HEAP8[$619+3>>0]=HEAP8[$x96+3>>0]|0;
 $620 = $curr;
 _to_little_endian_buffer($620,4,1);
 $621 = $curr;
 $622 = ((($621)) + 4|0);
 $curr = $622;
 $623 = HEAP32[((((gb + (8421404) | 0)) + 12|0))>>2]|0;
 HEAP32[$x97>>2] = $623;
 $624 = $curr;
 ;HEAP8[$624>>0]=HEAP8[$x97>>0]|0;HEAP8[$624+1>>0]=HEAP8[$x97+1>>0]|0;HEAP8[$624+2>>0]=HEAP8[$x97+2>>0]|0;HEAP8[$624+3>>0]=HEAP8[$x97+3>>0]|0;
 $625 = $curr;
 _to_little_endian_buffer($625,4,1);
 $626 = $curr;
 $627 = ((($626)) + 4|0);
 $curr = $627;
 $628 = HEAP32[((((gb + (8421404) | 0)) + 16|0))>>2]|0;
 HEAP32[$x98>>2] = $628;
 $629 = $curr;
 ;HEAP8[$629>>0]=HEAP8[$x98>>0]|0;HEAP8[$629+1>>0]=HEAP8[$x98+1>>0]|0;HEAP8[$629+2>>0]=HEAP8[$x98+2>>0]|0;HEAP8[$629+3>>0]=HEAP8[$x98+3>>0]|0;
 $630 = $curr;
 _to_little_endian_buffer($630,4,1);
 $631 = $curr;
 $632 = ((($631)) + 4|0);
 $curr = $632;
 $633 = HEAP32[((((gb + (8421404) | 0)) + 20|0))>>2]|0;
 HEAP32[$x99>>2] = $633;
 $634 = $curr;
 ;HEAP8[$634>>0]=HEAP8[$x99>>0]|0;HEAP8[$634+1>>0]=HEAP8[$x99+1>>0]|0;HEAP8[$634+2>>0]=HEAP8[$x99+2>>0]|0;HEAP8[$634+3>>0]=HEAP8[$x99+3>>0]|0;
 $635 = $curr;
 _to_little_endian_buffer($635,4,1);
 $636 = $curr;
 $637 = ((($636)) + 4|0);
 $curr = $637;
 $638 = HEAP32[((((gb + (8421404) | 0)) + 44|0))>>2]|0;
 HEAP32[$x100>>2] = $638;
 $639 = $curr;
 ;HEAP8[$639>>0]=HEAP8[$x100>>0]|0;HEAP8[$639+1>>0]=HEAP8[$x100+1>>0]|0;HEAP8[$639+2>>0]=HEAP8[$x100+2>>0]|0;HEAP8[$639+3>>0]=HEAP8[$x100+3>>0]|0;
 $640 = $curr;
 _to_little_endian_buffer($640,4,1);
 $641 = $curr;
 $642 = ((($641)) + 4|0);
 $curr = $642;
 $643 = HEAP32[((((gb + (8421404) | 0)) + 40|0))>>2]|0;
 HEAP32[$x101>>2] = $643;
 $644 = $curr;
 ;HEAP8[$644>>0]=HEAP8[$x101>>0]|0;HEAP8[$644+1>>0]=HEAP8[$x101+1>>0]|0;HEAP8[$644+2>>0]=HEAP8[$x101+2>>0]|0;HEAP8[$644+3>>0]=HEAP8[$x101+3>>0]|0;
 $645 = $curr;
 _to_little_endian_buffer($645,4,1);
 $646 = $curr;
 $647 = ((($646)) + 4|0);
 $curr = $647;
 $648 = HEAP32[((((gb + (8421404) | 0)) + 32|0))>>2]|0;
 HEAP32[$x102>>2] = $648;
 $649 = $curr;
 ;HEAP8[$649>>0]=HEAP8[$x102>>0]|0;HEAP8[$649+1>>0]=HEAP8[$x102+1>>0]|0;HEAP8[$649+2>>0]=HEAP8[$x102+2>>0]|0;HEAP8[$649+3>>0]=HEAP8[$x102+3>>0]|0;
 $650 = $curr;
 _to_little_endian_buffer($650,4,1);
 $651 = $curr;
 $652 = ((($651)) + 4|0);
 $curr = $652;
 $653 = HEAP32[((((gb + (8421404) | 0)) + 28|0))>>2]|0;
 HEAP32[$x103>>2] = $653;
 $654 = $curr;
 ;HEAP8[$654>>0]=HEAP8[$x103>>0]|0;HEAP8[$654+1>>0]=HEAP8[$x103+1>>0]|0;HEAP8[$654+2>>0]=HEAP8[$x103+2>>0]|0;HEAP8[$654+3>>0]=HEAP8[$x103+3>>0]|0;
 $655 = $curr;
 _to_little_endian_buffer($655,4,1);
 $656 = $curr;
 $657 = ((($656)) + 4|0);
 $curr = $657;
 $658 = HEAP32[(gb + (8410952) | 0)>>2]|0;
 HEAP32[$x104>>2] = $658;
 $659 = $curr;
 ;HEAP8[$659>>0]=HEAP8[$x104>>0]|0;HEAP8[$659+1>>0]=HEAP8[$x104+1>>0]|0;HEAP8[$659+2>>0]=HEAP8[$x104+2>>0]|0;HEAP8[$659+3>>0]=HEAP8[$x104+3>>0]|0;
 $660 = $curr;
 _to_little_endian_buffer($660,4,1);
 $661 = $curr;
 $662 = ((($661)) + 4|0);
 $curr = $662;
 $663 = HEAP32[((((gb + (8410952) | 0)) + 4|0))>>2]|0;
 HEAP32[$x105>>2] = $663;
 $664 = $curr;
 ;HEAP8[$664>>0]=HEAP8[$x105>>0]|0;HEAP8[$664+1>>0]=HEAP8[$x105+1>>0]|0;HEAP8[$664+2>>0]=HEAP8[$x105+2>>0]|0;HEAP8[$664+3>>0]=HEAP8[$x105+3>>0]|0;
 $665 = $curr;
 _to_little_endian_buffer($665,4,1);
 $666 = $curr;
 $667 = ((($666)) + 4|0);
 $curr = $667;
 $668 = HEAP32[((((gb + (8410952) | 0)) + 8|0))>>2]|0;
 HEAP32[$x106>>2] = $668;
 $669 = $curr;
 ;HEAP8[$669>>0]=HEAP8[$x106>>0]|0;HEAP8[$669+1>>0]=HEAP8[$x106+1>>0]|0;HEAP8[$669+2>>0]=HEAP8[$x106+2>>0]|0;HEAP8[$669+3>>0]=HEAP8[$x106+3>>0]|0;
 $670 = $curr;
 _to_little_endian_buffer($670,4,1);
 $671 = $curr;
 $672 = ((($671)) + 4|0);
 $curr = $672;
 HEAP32[$x107>>2] = 0;
 $673 = $curr;
 ;HEAP8[$673>>0]=HEAP8[$x107>>0]|0;HEAP8[$673+1>>0]=HEAP8[$x107+1>>0]|0;HEAP8[$673+2>>0]=HEAP8[$x107+2>>0]|0;HEAP8[$673+3>>0]=HEAP8[$x107+3>>0]|0;
 $674 = $curr;
 _to_little_endian_buffer($674,4,1);
 $675 = $curr;
 $676 = ((($675)) + 4|0);
 $curr = $676;
 $677 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 HEAP32[$x108>>2] = $677;
 $678 = $curr;
 ;HEAP8[$678>>0]=HEAP8[$x108>>0]|0;HEAP8[$678+1>>0]=HEAP8[$x108+1>>0]|0;HEAP8[$678+2>>0]=HEAP8[$x108+2>>0]|0;HEAP8[$678+3>>0]=HEAP8[$x108+3>>0]|0;
 $679 = $curr;
 _to_little_endian_buffer($679,4,1);
 $680 = $curr;
 $681 = ((($680)) + 4|0);
 $curr = $681;
 $682 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $683 = $682 & 1;
 $684 = ($683|0)!=(0);
 $685 = $684&1;
 $686 = $685&255;
 HEAP8[$x109>>0] = $686;
 $687 = $curr;
 ;HEAP8[$687>>0]=HEAP8[$x109>>0]|0;
 $688 = $curr;
 _to_little_endian_buffer($688,1,1);
 $689 = $curr;
 $690 = ((($689)) + 1|0);
 $curr = $690;
 $691 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $692 = $691 & 2;
 $693 = ($692|0)!=(0);
 $694 = $693&1;
 $695 = $694&255;
 HEAP8[$x110>>0] = $695;
 $696 = $curr;
 ;HEAP8[$696>>0]=HEAP8[$x110>>0]|0;
 $697 = $curr;
 _to_little_endian_buffer($697,1,1);
 $698 = $curr;
 $699 = ((($698)) + 1|0);
 $curr = $699;
 $700 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $701 = $700 & 4;
 $702 = ($701|0)!=(0);
 $703 = $702&1;
 $704 = $703&255;
 HEAP8[$x111>>0] = $704;
 $705 = $curr;
 ;HEAP8[$705>>0]=HEAP8[$x111>>0]|0;
 $706 = $curr;
 _to_little_endian_buffer($706,1,1);
 $707 = $curr;
 $708 = ((($707)) + 1|0);
 $curr = $708;
 $709 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $710 = $709 & 8;
 $711 = ($710|0)!=(0);
 $712 = $711&1;
 $713 = $712&255;
 HEAP8[$x112>>0] = $713;
 $714 = $curr;
 ;HEAP8[$714>>0]=HEAP8[$x112>>0]|0;
 $715 = $curr;
 _to_little_endian_buffer($715,1,1);
 $716 = $curr;
 $717 = ((($716)) + 1|0);
 $curr = $717;
 $718 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $719 = $718 & 16;
 $720 = ($719|0)!=(0);
 $721 = $720&1;
 $722 = $721&255;
 HEAP8[$x113>>0] = $722;
 $723 = $curr;
 ;HEAP8[$723>>0]=HEAP8[$x113>>0]|0;
 $724 = $curr;
 _to_little_endian_buffer($724,1,1);
 $725 = $curr;
 $726 = ((($725)) + 1|0);
 $curr = $726;
 $727 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $728 = $727 & 32;
 $729 = ($728|0)!=(0);
 $730 = $729&1;
 $731 = $730&255;
 HEAP8[$x114>>0] = $731;
 $732 = $curr;
 ;HEAP8[$732>>0]=HEAP8[$x114>>0]|0;
 $733 = $curr;
 _to_little_endian_buffer($733,1,1);
 $734 = $curr;
 $735 = ((($734)) + 1|0);
 $curr = $735;
 $736 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $737 = $736 & 64;
 $738 = ($737|0)!=(0);
 $739 = $738&1;
 $740 = $739&255;
 HEAP8[$x115>>0] = $740;
 $741 = $curr;
 ;HEAP8[$741>>0]=HEAP8[$x115>>0]|0;
 $742 = $curr;
 _to_little_endian_buffer($742,1,1);
 $743 = $curr;
 $744 = ((($743)) + 1|0);
 $curr = $744;
 $745 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $746 = $745 & 128;
 $747 = ($746|0)!=(0);
 $748 = $747&1;
 $749 = $748&255;
 HEAP8[$x116>>0] = $749;
 $750 = $curr;
 ;HEAP8[$750>>0]=HEAP8[$x116>>0]|0;
 $751 = $curr;
 _to_little_endian_buffer($751,1,1);
 $752 = $curr;
 $753 = ((($752)) + 1|0);
 $curr = $753;
 $754 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $755 = $754 & 256;
 $756 = ($755|0)!=(0);
 $757 = $756&1;
 $758 = $757&255;
 HEAP8[$x117>>0] = $758;
 $759 = $curr;
 ;HEAP8[$759>>0]=HEAP8[$x117>>0]|0;
 $760 = $curr;
 _to_little_endian_buffer($760,1,1);
 $761 = $curr;
 $762 = ((($761)) + 1|0);
 $curr = $762;
 $763 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $764 = $763 & 512;
 $765 = ($764|0)!=(0);
 $766 = $765&1;
 $767 = $766&255;
 HEAP8[$x118>>0] = $767;
 $768 = $curr;
 ;HEAP8[$768>>0]=HEAP8[$x118>>0]|0;
 $769 = $curr;
 _to_little_endian_buffer($769,1,1);
 $770 = $curr;
 $771 = ((($770)) + 1|0);
 $curr = $771;
 $772 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 $773 = $772 & 1024;
 $774 = ($773|0)!=(0);
 $775 = $774&1;
 $776 = $775&255;
 HEAP8[$x119>>0] = $776;
 $777 = $curr;
 ;HEAP8[$777>>0]=HEAP8[$x119>>0]|0;
 $778 = $curr;
 _to_little_endian_buffer($778,1,1);
 $779 = $curr;
 $780 = ((($779)) + 1|0);
 $curr = $780;
 HEAP8[$x120>>0] = 0;
 $781 = $curr;
 ;HEAP8[$781>>0]=HEAP8[$x120>>0]|0;
 $782 = $curr;
 _to_little_endian_buffer($782,1,1);
 $783 = $curr;
 $784 = ((($783)) + 1|0);
 $curr = $784;
 $785 = HEAP32[((((gb + (8410952) | 0)) + 16|0))>>2]|0;
 HEAP32[$x121>>2] = $785;
 $786 = $curr;
 ;HEAP8[$786>>0]=HEAP8[$x121>>0]|0;HEAP8[$786+1>>0]=HEAP8[$x121+1>>0]|0;HEAP8[$786+2>>0]=HEAP8[$x121+2>>0]|0;HEAP8[$786+3>>0]=HEAP8[$x121+3>>0]|0;
 $787 = $curr;
 _to_little_endian_buffer($787,4,1);
 $788 = $curr;
 $789 = ((($788)) + 4|0);
 $curr = $789;
 $790 = HEAP32[((((gb + (8410952) | 0)) + 20|0))>>2]|0;
 HEAP32[$x122>>2] = $790;
 $791 = $curr;
 ;HEAP8[$791>>0]=HEAP8[$x122>>0]|0;HEAP8[$791+1>>0]=HEAP8[$x122+1>>0]|0;HEAP8[$791+2>>0]=HEAP8[$x122+2>>0]|0;HEAP8[$791+3>>0]=HEAP8[$x122+3>>0]|0;
 $792 = $curr;
 _to_little_endian_buffer($792,4,1);
 $793 = $curr;
 $794 = ((($793)) + 4|0);
 $curr = $794;
 $795 = HEAP32[((((gb + (8410952) | 0)) + 24|0))>>2]|0;
 HEAP32[$x123>>2] = $795;
 $796 = $curr;
 ;HEAP8[$796>>0]=HEAP8[$x123>>0]|0;HEAP8[$796+1>>0]=HEAP8[$x123+1>>0]|0;HEAP8[$796+2>>0]=HEAP8[$x123+2>>0]|0;HEAP8[$796+3>>0]=HEAP8[$x123+3>>0]|0;
 $797 = $curr;
 _to_little_endian_buffer($797,4,1);
 $798 = $curr;
 $799 = ((($798)) + 4|0);
 $curr = $799;
 $800 = HEAP32[((((gb + (8410952) | 0)) + 28|0))>>2]|0;
 HEAP32[$x124>>2] = $800;
 $801 = $curr;
 ;HEAP8[$801>>0]=HEAP8[$x124>>0]|0;HEAP8[$801+1>>0]=HEAP8[$x124+1>>0]|0;HEAP8[$801+2>>0]=HEAP8[$x124+2>>0]|0;HEAP8[$801+3>>0]=HEAP8[$x124+3>>0]|0;
 $802 = $curr;
 _to_little_endian_buffer($802,4,1);
 $803 = $curr;
 $804 = ((($803)) + 4|0);
 $curr = $804;
 $805 = HEAP32[((((gb + (8410952) | 0)) + 32|0))>>2]|0;
 HEAP32[$x125>>2] = $805;
 $806 = $curr;
 ;HEAP8[$806>>0]=HEAP8[$x125>>0]|0;HEAP8[$806+1>>0]=HEAP8[$x125+1>>0]|0;HEAP8[$806+2>>0]=HEAP8[$x125+2>>0]|0;HEAP8[$806+3>>0]=HEAP8[$x125+3>>0]|0;
 $807 = $curr;
 _to_little_endian_buffer($807,4,1);
 $808 = $curr;
 $809 = ((($808)) + 4|0);
 $curr = $809;
 $810 = HEAP32[((((gb + (8410952) | 0)) + 36|0))>>2]|0;
 HEAP32[$x126>>2] = $810;
 $811 = $curr;
 ;HEAP8[$811>>0]=HEAP8[$x126>>0]|0;HEAP8[$811+1>>0]=HEAP8[$x126+1>>0]|0;HEAP8[$811+2>>0]=HEAP8[$x126+2>>0]|0;HEAP8[$811+3>>0]=HEAP8[$x126+3>>0]|0;
 $812 = $curr;
 _to_little_endian_buffer($812,4,1);
 $813 = $curr;
 $814 = ((($813)) + 4|0);
 $curr = $814;
 $815 = HEAP32[((((gb + (8410952) | 0)) + 40|0))>>2]|0;
 HEAP32[$x127>>2] = $815;
 $816 = $curr;
 ;HEAP8[$816>>0]=HEAP8[$x127>>0]|0;HEAP8[$816+1>>0]=HEAP8[$x127+1>>0]|0;HEAP8[$816+2>>0]=HEAP8[$x127+2>>0]|0;HEAP8[$816+3>>0]=HEAP8[$x127+3>>0]|0;
 $817 = $curr;
 _to_little_endian_buffer($817,4,1);
 $818 = $curr;
 $819 = ((($818)) + 4|0);
 $curr = $819;
 $820 = HEAP32[((((gb + (8410952) | 0)) + 44|0))>>2]|0;
 HEAP32[$x128>>2] = $820;
 $821 = $curr;
 ;HEAP8[$821>>0]=HEAP8[$x128>>0]|0;HEAP8[$821+1>>0]=HEAP8[$x128+1>>0]|0;HEAP8[$821+2>>0]=HEAP8[$x128+2>>0]|0;HEAP8[$821+3>>0]=HEAP8[$x128+3>>0]|0;
 $822 = $curr;
 _to_little_endian_buffer($822,4,1);
 $823 = $curr;
 $824 = ((($823)) + 4|0);
 $curr = $824;
 $825 = $curr;
 _memcpy(($825|0),((gb + (21216) | 0)|0),8388608)|0;
 $826 = $curr;
 _to_little_endian_buffer($826,4,2097152);
 $827 = $curr;
 $828 = ((($827)) + 8388608|0);
 $curr = $828;
 $829 = $curr;
 _memcpy(($829|0),((gb + (8413160) | 0)|0),8192)|0;
 $830 = $curr;
 _to_little_endian_buffer($830,4,2048);
 $831 = $curr;
 $832 = ((($831)) + 8192|0);
 $curr = $832;
 $833 = $curr;
 dest=$833; src=((((gb + (8410672) | 0)) + 28|0)); stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $834 = $curr;
 _to_little_endian_buffer($834,1,64);
 $835 = $curr;
 $836 = ((($835)) + 64|0);
 $curr = $836;
 $837 = HEAP32[((((gb + (8409824) | 0)) + 108|0))>>2]|0;
 HEAP32[$x129>>2] = $837;
 $838 = $curr;
 ;HEAP8[$838>>0]=HEAP8[$x129>>0]|0;HEAP8[$838+1>>0]=HEAP8[$x129+1>>0]|0;HEAP8[$838+2>>0]=HEAP8[$x129+2>>0]|0;HEAP8[$838+3>>0]=HEAP8[$x129+3>>0]|0;
 $839 = $curr;
 _to_little_endian_buffer($839,4,1);
 $840 = $curr;
 $841 = ((($840)) + 4|0);
 $curr = $841;
 $842 = HEAP32[((((gb + (8409824) | 0)) + 76|0))>>2]|0;
 HEAP32[$x130>>2] = $842;
 $843 = $curr;
 ;HEAP8[$843>>0]=HEAP8[$x130>>0]|0;HEAP8[$843+1>>0]=HEAP8[$x130+1>>0]|0;HEAP8[$843+2>>0]=HEAP8[$x130+2>>0]|0;HEAP8[$843+3>>0]=HEAP8[$x130+3>>0]|0;
 $844 = $curr;
 _to_little_endian_buffer($844,4,1);
 $845 = $curr;
 $846 = ((($845)) + 4|0);
 $curr = $846;
 $847 = ((((gb + (8409824) | 0)) + 80|0));
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = $x131;
 $854 = $853;
 HEAP32[$854>>2] = $849;
 $855 = (($853) + 4)|0;
 $856 = $855;
 HEAP32[$856>>2] = $852;
 $857 = $curr;
 ;HEAP8[$857>>0]=HEAP8[$x131>>0]|0;HEAP8[$857+1>>0]=HEAP8[$x131+1>>0]|0;HEAP8[$857+2>>0]=HEAP8[$x131+2>>0]|0;HEAP8[$857+3>>0]=HEAP8[$x131+3>>0]|0;HEAP8[$857+4>>0]=HEAP8[$x131+4>>0]|0;HEAP8[$857+5>>0]=HEAP8[$x131+5>>0]|0;HEAP8[$857+6>>0]=HEAP8[$x131+6>>0]|0;HEAP8[$857+7>>0]=HEAP8[$x131+7>>0]|0;
 $858 = $curr;
 _to_little_endian_buffer($858,8,1);
 $859 = $curr;
 $860 = ((($859)) + 8|0);
 $curr = $860;
 $861 = HEAP32[((((gb + (8409824) | 0)) + 88|0))>>2]|0;
 HEAP32[$x132>>2] = $861;
 $862 = $curr;
 ;HEAP8[$862>>0]=HEAP8[$x132>>0]|0;HEAP8[$862+1>>0]=HEAP8[$x132+1>>0]|0;HEAP8[$862+2>>0]=HEAP8[$x132+2>>0]|0;HEAP8[$862+3>>0]=HEAP8[$x132+3>>0]|0;
 $863 = $curr;
 _to_little_endian_buffer($863,4,1);
 $864 = $curr;
 $865 = ((($864)) + 4|0);
 $curr = $865;
 $866 = HEAP32[((((gb + (8409824) | 0)) + 92|0))>>2]|0;
 HEAP32[$x133>>2] = $866;
 $867 = $curr;
 ;HEAP8[$867>>0]=HEAP8[$x133>>0]|0;HEAP8[$867+1>>0]=HEAP8[$x133+1>>0]|0;HEAP8[$867+2>>0]=HEAP8[$x133+2>>0]|0;HEAP8[$867+3>>0]=HEAP8[$x133+3>>0]|0;
 $868 = $curr;
 _to_little_endian_buffer($868,4,1);
 $869 = $curr;
 $870 = ((($869)) + 4|0);
 $curr = $870;
 $871 = $curr;
 _memcpy(($871|0),((gb + (14718184) | 0)|0),4194304)|0;
 $872 = $curr;
 _to_little_endian_buffer($872,4,1048576);
 $873 = $curr;
 $874 = ((($873)) + 4194304|0);
 $curr = $874;
 $875 = $curr;
 _memcpy(($875|0),((gb + (18912488) | 0)|0),4194304)|0;
 $876 = $curr;
 _to_little_endian_buffer($876,4,1048576);
 $877 = $curr;
 $878 = ((($877)) + 4194304|0);
 $curr = $878;
 $879 = (_r4300_llbit()|0);
 $880 = HEAP32[$879>>2]|0;
 HEAP32[$x134>>2] = $880;
 $881 = $curr;
 ;HEAP8[$881>>0]=HEAP8[$x134>>0]|0;HEAP8[$881+1>>0]=HEAP8[$x134+1>>0]|0;HEAP8[$881+2>>0]=HEAP8[$x134+2>>0]|0;HEAP8[$881+3>>0]=HEAP8[$x134+3>>0]|0;
 $882 = $curr;
 _to_little_endian_buffer($882,4,1);
 $883 = $curr;
 $884 = ((($883)) + 4|0);
 $curr = $884;
 $885 = $curr;
 $886 = (_r4300_regs()|0);
 _memcpy(($885|0),($886|0),256)|0;
 $887 = $curr;
 _to_little_endian_buffer($887,8,32);
 $888 = $curr;
 $889 = ((($888)) + 256|0);
 $curr = $889;
 $890 = $curr;
 $891 = $cp0_regs;
 dest=$890; src=$891; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $892 = $curr;
 _to_little_endian_buffer($892,4,32);
 $893 = $curr;
 $894 = ((($893)) + 128|0);
 $curr = $894;
 $895 = (_r4300_mult_lo()|0);
 $896 = $895;
 $897 = $896;
 $898 = HEAP32[$897>>2]|0;
 $899 = (($896) + 4)|0;
 $900 = $899;
 $901 = HEAP32[$900>>2]|0;
 $902 = $x135;
 $903 = $902;
 HEAP32[$903>>2] = $898;
 $904 = (($902) + 4)|0;
 $905 = $904;
 HEAP32[$905>>2] = $901;
 $906 = $curr;
 ;HEAP8[$906>>0]=HEAP8[$x135>>0]|0;HEAP8[$906+1>>0]=HEAP8[$x135+1>>0]|0;HEAP8[$906+2>>0]=HEAP8[$x135+2>>0]|0;HEAP8[$906+3>>0]=HEAP8[$x135+3>>0]|0;HEAP8[$906+4>>0]=HEAP8[$x135+4>>0]|0;HEAP8[$906+5>>0]=HEAP8[$x135+5>>0]|0;HEAP8[$906+6>>0]=HEAP8[$x135+6>>0]|0;HEAP8[$906+7>>0]=HEAP8[$x135+7>>0]|0;
 $907 = $curr;
 _to_little_endian_buffer($907,8,1);
 $908 = $curr;
 $909 = ((($908)) + 8|0);
 $curr = $909;
 $910 = (_r4300_mult_hi()|0);
 $911 = $910;
 $912 = $911;
 $913 = HEAP32[$912>>2]|0;
 $914 = (($911) + 4)|0;
 $915 = $914;
 $916 = HEAP32[$915>>2]|0;
 $917 = $x136;
 $918 = $917;
 HEAP32[$918>>2] = $913;
 $919 = (($917) + 4)|0;
 $920 = $919;
 HEAP32[$920>>2] = $916;
 $921 = $curr;
 ;HEAP8[$921>>0]=HEAP8[$x136>>0]|0;HEAP8[$921+1>>0]=HEAP8[$x136+1>>0]|0;HEAP8[$921+2>>0]=HEAP8[$x136+2>>0]|0;HEAP8[$921+3>>0]=HEAP8[$x136+3>>0]|0;HEAP8[$921+4>>0]=HEAP8[$x136+4>>0]|0;HEAP8[$921+5>>0]=HEAP8[$x136+5>>0]|0;HEAP8[$921+6>>0]=HEAP8[$x136+6>>0]|0;HEAP8[$921+7>>0]=HEAP8[$x136+7>>0]|0;
 $922 = $curr;
 _to_little_endian_buffer($922,8,1);
 $923 = $curr;
 $924 = ((($923)) + 8|0);
 $curr = $924;
 $925 = $cp0_regs;
 $926 = ((($925)) + 48|0);
 $927 = HEAP32[$926>>2]|0;
 $928 = $927 & 67108864;
 $929 = ($928|0)==(0);
 if ($929) {
  _shuffle_fpr_data(0,67108864);
 }
 $930 = $curr;
 $931 = (_r4300_cp1_regs()|0);
 _memcpy(($930|0),($931|0),256)|0;
 $932 = $curr;
 _to_little_endian_buffer($932,8,32);
 $933 = $curr;
 $934 = ((($933)) + 256|0);
 $curr = $934;
 $935 = $cp0_regs;
 $936 = ((($935)) + 48|0);
 $937 = HEAP32[$936>>2]|0;
 $938 = $937 & 67108864;
 $939 = ($938|0)==(0);
 if ($939) {
  _shuffle_fpr_data(67108864,0);
 }
 $940 = (_r4300_cp1_fcr0()|0);
 $941 = HEAP32[$940>>2]|0;
 HEAP32[$x137>>2] = $941;
 $942 = $curr;
 ;HEAP8[$942>>0]=HEAP8[$x137>>0]|0;HEAP8[$942+1>>0]=HEAP8[$x137+1>>0]|0;HEAP8[$942+2>>0]=HEAP8[$x137+2>>0]|0;HEAP8[$942+3>>0]=HEAP8[$x137+3>>0]|0;
 $943 = $curr;
 _to_little_endian_buffer($943,4,1);
 $944 = $curr;
 $945 = ((($944)) + 4|0);
 $curr = $945;
 $946 = (_r4300_cp1_fcr31()|0);
 $947 = HEAP32[$946>>2]|0;
 HEAP32[$x138>>2] = $947;
 $948 = $curr;
 ;HEAP8[$948>>0]=HEAP8[$x138>>0]|0;HEAP8[$948+1>>0]=HEAP8[$x138+1>>0]|0;HEAP8[$948+2>>0]=HEAP8[$x138+2>>0]|0;HEAP8[$948+3>>0]=HEAP8[$x138+3>>0]|0;
 $949 = $curr;
 _to_little_endian_buffer($949,4,1);
 $950 = $curr;
 $951 = ((($950)) + 4|0);
 $curr = $951;
 $i = 0;
 while(1) {
  $952 = $i;
  $953 = ($952|0)<(32);
  if (!($953)) {
   break;
  }
  $954 = $i;
  $955 = ((gb + (23106792) | 0) + (($954*52)|0)|0);
  $956 = HEAP16[$955>>1]|0;
  HEAP16[$x139>>1] = $956;
  $957 = $curr;
  ;HEAP8[$957>>0]=HEAP8[$x139>>0]|0;HEAP8[$957+1>>0]=HEAP8[$x139+1>>0]|0;
  $958 = $curr;
  _to_little_endian_buffer($958,2,1);
  $959 = $curr;
  $960 = ((($959)) + 2|0);
  $curr = $960;
  HEAP16[$x140>>1] = 0;
  $961 = $curr;
  ;HEAP8[$961>>0]=HEAP8[$x140>>0]|0;HEAP8[$961+1>>0]=HEAP8[$x140+1>>0]|0;
  $962 = $curr;
  _to_little_endian_buffer($962,2,1);
  $963 = $curr;
  $964 = ((($963)) + 2|0);
  $curr = $964;
  $965 = $i;
  $966 = ((gb + (23106792) | 0) + (($965*52)|0)|0);
  $967 = ((($966)) + 4|0);
  $968 = HEAP32[$967>>2]|0;
  HEAP32[$x141>>2] = $968;
  $969 = $curr;
  ;HEAP8[$969>>0]=HEAP8[$x141>>0]|0;HEAP8[$969+1>>0]=HEAP8[$x141+1>>0]|0;HEAP8[$969+2>>0]=HEAP8[$x141+2>>0]|0;HEAP8[$969+3>>0]=HEAP8[$x141+3>>0]|0;
  $970 = $curr;
  _to_little_endian_buffer($970,4,1);
  $971 = $curr;
  $972 = ((($971)) + 4|0);
  $curr = $972;
  $973 = $i;
  $974 = ((gb + (23106792) | 0) + (($973*52)|0)|0);
  $975 = ((($974)) + 8|0);
  $976 = HEAP8[$975>>0]|0;
  HEAP8[$x142>>0] = $976;
  $977 = $curr;
  ;HEAP8[$977>>0]=HEAP8[$x142>>0]|0;
  $978 = $curr;
  _to_little_endian_buffer($978,1,1);
  $979 = $curr;
  $980 = ((($979)) + 1|0);
  $curr = $980;
  $981 = $i;
  $982 = ((gb + (23106792) | 0) + (($981*52)|0)|0);
  $983 = ((($982)) + 9|0);
  $984 = HEAP8[$983>>0]|0;
  HEAP8[$x143>>0] = $984;
  $985 = $curr;
  ;HEAP8[$985>>0]=HEAP8[$x143>>0]|0;
  $986 = $curr;
  _to_little_endian_buffer($986,1,1);
  $987 = $curr;
  $988 = ((($987)) + 1|0);
  $curr = $988;
  HEAP16[$x144>>1] = 0;
  $989 = $curr;
  ;HEAP8[$989>>0]=HEAP8[$x144>>0]|0;HEAP8[$989+1>>0]=HEAP8[$x144+1>>0]|0;
  $990 = $curr;
  _to_little_endian_buffer($990,2,1);
  $991 = $curr;
  $992 = ((($991)) + 2|0);
  $curr = $992;
  $993 = $i;
  $994 = ((gb + (23106792) | 0) + (($993*52)|0)|0);
  $995 = ((($994)) + 12|0);
  $996 = HEAP32[$995>>2]|0;
  HEAP32[$x145>>2] = $996;
  $997 = $curr;
  ;HEAP8[$997>>0]=HEAP8[$x145>>0]|0;HEAP8[$997+1>>0]=HEAP8[$x145+1>>0]|0;HEAP8[$997+2>>0]=HEAP8[$x145+2>>0]|0;HEAP8[$997+3>>0]=HEAP8[$x145+3>>0]|0;
  $998 = $curr;
  _to_little_endian_buffer($998,4,1);
  $999 = $curr;
  $1000 = ((($999)) + 4|0);
  $curr = $1000;
  $1001 = $i;
  $1002 = ((gb + (23106792) | 0) + (($1001*52)|0)|0);
  $1003 = ((($1002)) + 16|0);
  $1004 = HEAP8[$1003>>0]|0;
  HEAP8[$x146>>0] = $1004;
  $1005 = $curr;
  ;HEAP8[$1005>>0]=HEAP8[$x146>>0]|0;
  $1006 = $curr;
  _to_little_endian_buffer($1006,1,1);
  $1007 = $curr;
  $1008 = ((($1007)) + 1|0);
  $curr = $1008;
  $1009 = $i;
  $1010 = ((gb + (23106792) | 0) + (($1009*52)|0)|0);
  $1011 = ((($1010)) + 17|0);
  $1012 = HEAP8[$1011>>0]|0;
  HEAP8[$x147>>0] = $1012;
  $1013 = $curr;
  ;HEAP8[$1013>>0]=HEAP8[$x147>>0]|0;
  $1014 = $curr;
  _to_little_endian_buffer($1014,1,1);
  $1015 = $curr;
  $1016 = ((($1015)) + 1|0);
  $curr = $1016;
  $1017 = $i;
  $1018 = ((gb + (23106792) | 0) + (($1017*52)|0)|0);
  $1019 = ((($1018)) + 18|0);
  $1020 = HEAP8[$1019>>0]|0;
  HEAP8[$x148>>0] = $1020;
  $1021 = $curr;
  ;HEAP8[$1021>>0]=HEAP8[$x148>>0]|0;
  $1022 = $curr;
  _to_little_endian_buffer($1022,1,1);
  $1023 = $curr;
  $1024 = ((($1023)) + 1|0);
  $curr = $1024;
  HEAP8[$x149>>0] = 0;
  $1025 = $curr;
  ;HEAP8[$1025>>0]=HEAP8[$x149>>0]|0;
  $1026 = $curr;
  _to_little_endian_buffer($1026,1,1);
  $1027 = $curr;
  $1028 = ((($1027)) + 1|0);
  $curr = $1028;
  $1029 = $i;
  $1030 = ((gb + (23106792) | 0) + (($1029*52)|0)|0);
  $1031 = ((($1030)) + 20|0);
  $1032 = HEAP32[$1031>>2]|0;
  HEAP32[$x150>>2] = $1032;
  $1033 = $curr;
  ;HEAP8[$1033>>0]=HEAP8[$x150>>0]|0;HEAP8[$1033+1>>0]=HEAP8[$x150+1>>0]|0;HEAP8[$1033+2>>0]=HEAP8[$x150+2>>0]|0;HEAP8[$1033+3>>0]=HEAP8[$x150+3>>0]|0;
  $1034 = $curr;
  _to_little_endian_buffer($1034,4,1);
  $1035 = $curr;
  $1036 = ((($1035)) + 4|0);
  $curr = $1036;
  $1037 = $i;
  $1038 = ((gb + (23106792) | 0) + (($1037*52)|0)|0);
  $1039 = ((($1038)) + 24|0);
  $1040 = HEAP8[$1039>>0]|0;
  HEAP8[$x151>>0] = $1040;
  $1041 = $curr;
  ;HEAP8[$1041>>0]=HEAP8[$x151>>0]|0;
  $1042 = $curr;
  _to_little_endian_buffer($1042,1,1);
  $1043 = $curr;
  $1044 = ((($1043)) + 1|0);
  $curr = $1044;
  $1045 = $i;
  $1046 = ((gb + (23106792) | 0) + (($1045*52)|0)|0);
  $1047 = ((($1046)) + 25|0);
  $1048 = HEAP8[$1047>>0]|0;
  HEAP8[$x152>>0] = $1048;
  $1049 = $curr;
  ;HEAP8[$1049>>0]=HEAP8[$x152>>0]|0;
  $1050 = $curr;
  _to_little_endian_buffer($1050,1,1);
  $1051 = $curr;
  $1052 = ((($1051)) + 1|0);
  $curr = $1052;
  $1053 = $i;
  $1054 = ((gb + (23106792) | 0) + (($1053*52)|0)|0);
  $1055 = ((($1054)) + 26|0);
  $1056 = HEAP8[$1055>>0]|0;
  HEAP8[$x153>>0] = $1056;
  $1057 = $curr;
  ;HEAP8[$1057>>0]=HEAP8[$x153>>0]|0;
  $1058 = $curr;
  _to_little_endian_buffer($1058,1,1);
  $1059 = $curr;
  $1060 = ((($1059)) + 1|0);
  $curr = $1060;
  $1061 = $i;
  $1062 = ((gb + (23106792) | 0) + (($1061*52)|0)|0);
  $1063 = ((($1062)) + 27|0);
  $1064 = HEAP8[$1063>>0]|0;
  HEAP8[$x154>>0] = $1064;
  $1065 = $curr;
  ;HEAP8[$1065>>0]=HEAP8[$x154>>0]|0;
  $1066 = $curr;
  _to_little_endian_buffer($1066,1,1);
  $1067 = $curr;
  $1068 = ((($1067)) + 1|0);
  $curr = $1068;
  $1069 = $i;
  $1070 = ((gb + (23106792) | 0) + (($1069*52)|0)|0);
  $1071 = ((($1070)) + 28|0);
  $1072 = HEAP32[$1071>>2]|0;
  HEAP32[$x155>>2] = $1072;
  $1073 = $curr;
  ;HEAP8[$1073>>0]=HEAP8[$x155>>0]|0;HEAP8[$1073+1>>0]=HEAP8[$x155+1>>0]|0;HEAP8[$1073+2>>0]=HEAP8[$x155+2>>0]|0;HEAP8[$1073+3>>0]=HEAP8[$x155+3>>0]|0;
  $1074 = $curr;
  _to_little_endian_buffer($1074,4,1);
  $1075 = $curr;
  $1076 = ((($1075)) + 4|0);
  $curr = $1076;
  $1077 = $i;
  $1078 = ((gb + (23106792) | 0) + (($1077*52)|0)|0);
  $1079 = ((($1078)) + 32|0);
  $1080 = HEAP32[$1079>>2]|0;
  HEAP32[$x156>>2] = $1080;
  $1081 = $curr;
  ;HEAP8[$1081>>0]=HEAP8[$x156>>0]|0;HEAP8[$1081+1>>0]=HEAP8[$x156+1>>0]|0;HEAP8[$1081+2>>0]=HEAP8[$x156+2>>0]|0;HEAP8[$1081+3>>0]=HEAP8[$x156+3>>0]|0;
  $1082 = $curr;
  _to_little_endian_buffer($1082,4,1);
  $1083 = $curr;
  $1084 = ((($1083)) + 4|0);
  $curr = $1084;
  $1085 = $i;
  $1086 = ((gb + (23106792) | 0) + (($1085*52)|0)|0);
  $1087 = ((($1086)) + 36|0);
  $1088 = HEAP32[$1087>>2]|0;
  HEAP32[$x157>>2] = $1088;
  $1089 = $curr;
  ;HEAP8[$1089>>0]=HEAP8[$x157>>0]|0;HEAP8[$1089+1>>0]=HEAP8[$x157+1>>0]|0;HEAP8[$1089+2>>0]=HEAP8[$x157+2>>0]|0;HEAP8[$1089+3>>0]=HEAP8[$x157+3>>0]|0;
  $1090 = $curr;
  _to_little_endian_buffer($1090,4,1);
  $1091 = $curr;
  $1092 = ((($1091)) + 4|0);
  $curr = $1092;
  $1093 = $i;
  $1094 = ((gb + (23106792) | 0) + (($1093*52)|0)|0);
  $1095 = ((($1094)) + 40|0);
  $1096 = HEAP32[$1095>>2]|0;
  HEAP32[$x158>>2] = $1096;
  $1097 = $curr;
  ;HEAP8[$1097>>0]=HEAP8[$x158>>0]|0;HEAP8[$1097+1>>0]=HEAP8[$x158+1>>0]|0;HEAP8[$1097+2>>0]=HEAP8[$x158+2>>0]|0;HEAP8[$1097+3>>0]=HEAP8[$x158+3>>0]|0;
  $1098 = $curr;
  _to_little_endian_buffer($1098,4,1);
  $1099 = $curr;
  $1100 = ((($1099)) + 4|0);
  $curr = $1100;
  $1101 = $i;
  $1102 = ((gb + (23106792) | 0) + (($1101*52)|0)|0);
  $1103 = ((($1102)) + 44|0);
  $1104 = HEAP32[$1103>>2]|0;
  HEAP32[$x159>>2] = $1104;
  $1105 = $curr;
  ;HEAP8[$1105>>0]=HEAP8[$x159>>0]|0;HEAP8[$1105+1>>0]=HEAP8[$x159+1>>0]|0;HEAP8[$1105+2>>0]=HEAP8[$x159+2>>0]|0;HEAP8[$1105+3>>0]=HEAP8[$x159+3>>0]|0;
  $1106 = $curr;
  _to_little_endian_buffer($1106,4,1);
  $1107 = $curr;
  $1108 = ((($1107)) + 4|0);
  $curr = $1108;
  $1109 = $i;
  $1110 = ((gb + (23106792) | 0) + (($1109*52)|0)|0);
  $1111 = ((($1110)) + 48|0);
  $1112 = HEAP32[$1111>>2]|0;
  HEAP32[$x160>>2] = $1112;
  $1113 = $curr;
  ;HEAP8[$1113>>0]=HEAP8[$x160>>0]|0;HEAP8[$1113+1>>0]=HEAP8[$x160+1>>0]|0;HEAP8[$1113+2>>0]=HEAP8[$x160+2>>0]|0;HEAP8[$1113+3>>0]=HEAP8[$x160+3>>0]|0;
  $1114 = $curr;
  _to_little_endian_buffer($1114,4,1);
  $1115 = $curr;
  $1116 = ((($1115)) + 4|0);
  $curr = $1116;
  $1117 = $i;
  $1118 = (($1117) + 1)|0;
  $i = $1118;
 }
 $1119 = (_r4300_pc()|0);
 $1120 = HEAP32[$1119>>2]|0;
 HEAP32[$x161>>2] = $1120;
 $1121 = $curr;
 ;HEAP8[$1121>>0]=HEAP8[$x161>>0]|0;HEAP8[$1121+1>>0]=HEAP8[$x161+1>>0]|0;HEAP8[$1121+2>>0]=HEAP8[$x161+2>>0]|0;HEAP8[$1121+3>>0]=HEAP8[$x161+3>>0]|0;
 $1122 = $curr;
 _to_little_endian_buffer($1122,4,1);
 $1123 = $curr;
 $1124 = ((($1123)) + 4|0);
 $curr = $1124;
 $1125 = (_r4300_next_interrupt()|0);
 $1126 = HEAP32[$1125>>2]|0;
 HEAP32[$x162>>2] = $1126;
 $1127 = $curr;
 ;HEAP8[$1127>>0]=HEAP8[$x162>>0]|0;HEAP8[$1127+1>>0]=HEAP8[$x162+1>>0]|0;HEAP8[$1127+2>>0]=HEAP8[$x162+2>>0]|0;HEAP8[$1127+3>>0]=HEAP8[$x162+3>>0]|0;
 $1128 = $curr;
 _to_little_endian_buffer($1128,4,1);
 $1129 = $curr;
 $1130 = ((($1129)) + 4|0);
 $curr = $1130;
 $1131 = HEAP32[((((gb + (8421560) | 0)) + 64|0))>>2]|0;
 HEAP32[$x163>>2] = $1131;
 $1132 = $curr;
 ;HEAP8[$1132>>0]=HEAP8[$x163>>0]|0;HEAP8[$1132+1>>0]=HEAP8[$x163+1>>0]|0;HEAP8[$1132+2>>0]=HEAP8[$x163+2>>0]|0;HEAP8[$1132+3>>0]=HEAP8[$x163+3>>0]|0;
 $1133 = $curr;
 _to_little_endian_buffer($1133,4,1);
 $1134 = $curr;
 $1135 = ((($1134)) + 4|0);
 $curr = $1135;
 $1136 = HEAP32[((((gb + (8421560) | 0)) + 56|0))>>2]|0;
 HEAP32[$x164>>2] = $1136;
 $1137 = $curr;
 ;HEAP8[$1137>>0]=HEAP8[$x164>>0]|0;HEAP8[$1137+1>>0]=HEAP8[$x164+1>>0]|0;HEAP8[$1137+2>>0]=HEAP8[$x164+2>>0]|0;HEAP8[$1137+3>>0]=HEAP8[$x164+3>>0]|0;
 $1138 = $curr;
 _to_little_endian_buffer($1138,4,1);
 $1139 = $curr;
 $1140 = ((($1139)) + 4|0);
 $curr = $1140;
 $1141 = $queuelength;
 $1142 = (($1141|0) / 4)&-1;
 _to_little_endian_buffer($queue,4,$1142);
 $1143 = $curr;
 $1144 = $queuelength;
 $1145 = $1144;
 _memcpy(($1143|0),($queue|0),($1145|0))|0;
 $1146 = $curr;
 $1147 = $queuelength;
 _to_little_endian_buffer($1146,1,$1147);
 $1148 = $queuelength;
 $1149 = $1148;
 $1150 = $curr;
 $1151 = (($1150) + ($1149)|0);
 $curr = $1151;
 $1152 = $save;
 $1153 = ((($1152)) + 12|0);
 _init_work($1153,(fb + (518) | 0));
 $1154 = $save;
 $1155 = ((($1154)) + 12|0);
 (_queue_work($1155)|0);
 $0 = 1;
 $1156 = $0;
 STACKTOP = sp;return ($1156|0);
}
function _savestates_save_pj64_zip($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $zipfile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $filepath;
 $zipfile = 0;
 $1 = $0;
 $2 = (_zipOpen($1,0)|0);
 $zipfile = $2;
 $3 = $zipfile;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = $0;
   HEAP32[$vararg_buffer>>2] = $5;
   _main_message(4,6,(gb + (15479) | 0),$vararg_buffer);
  } else {
   $6 = $zipfile;
   $7 = $0;
   $8 = (_namefrompath($7)|0);
   $9 = (_zipOpenNewFileInZip($6,$8,0,0,0,0,0,0,8,-1)|0);
   $retval = $9;
   $10 = $retval;
   $11 = ($10|0)!=(0);
   $12 = $0;
   if ($11) {
    HEAP32[$vararg_buffer1>>2] = $12;
    _main_message(4,6,(gb + (15622) | 0),$vararg_buffer1);
    break;
   }
   $13 = $zipfile;
   $14 = (_savestates_save_pj64($12,$13,(fb + (519) | 0))|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $0;
    $17 = (_namefrompath($16)|0);
    HEAP32[$vararg_buffer4>>2] = $17;
    _main_message(4,6,(gb + (15516) | 0),$vararg_buffer4);
   }
  }
 } while(0);
 $18 = $zipfile;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return 1;
 }
 $20 = $zipfile;
 (_zipCloseFileInZip($20)|0);
 $21 = $zipfile;
 (_zipClose($21,(gb + (23109844) | 0))|0);
 STACKTOP = sp;return 1;
}
function _savestates_save_pj64_unc($filepath) {
 $filepath = $filepath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $filepath;
 $2 = $1;
 $3 = (_fopen(($2|0),((gb + (20964) | 0)|0))|0);
 $f = $3;
 $4 = $f;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 if ($5) {
  HEAP32[$vararg_buffer>>2] = $6;
  _main_message(4,6,(gb + (15479) | 0),$vararg_buffer);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $7 = $f;
 $8 = (_savestates_save_pj64($6,$7,(fb + (520) | 0))|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $11 = $1;
  $12 = (_namefrompath($11)|0);
  HEAP32[$vararg_buffer1>>2] = $12;
  _main_message(4,6,(gb + (15516) | 0),$vararg_buffer1);
  $13 = $f;
  (_fclose(($13|0))|0);
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $f;
  (_fclose(($10|0))|0);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _write_data_to_file($file,$buffer,$length) {
 $file = $file|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $buffer;
 $2 = $length;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = (_fwrite(($3|0),1,($4|0),($5|0))|0);
 $7 = $2;
 $8 = ($6|0)==($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _savestates_save_pj64($filepath,$handle,$write_func) {
 $filepath = $filepath|0;
 $handle = $handle|0;
 $write_func = $write_func|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $EntryDefined = 0, $MyEntryHi = 0, $MyEntryLo0 = 0, $MyEntryLo1 = 0, $MyPageMask = 0, $SaveRDRAMSize = 0, $cp0_regs = 0, $curr = 0, $i = 0, $savestateData = 0, $savestateSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x = 0, $x1 = 0, $x10 = 0, $x11 = 0, $x12 = 0;
 var $x13 = 0, $x14 = 0, $x15 = 0, $x16 = 0, $x17 = 0, $x18 = 0, $x19 = 0, $x2 = 0, $x20 = 0, $x21 = 0, $x22 = 0, $x23 = 0, $x24 = 0, $x25 = 0, $x26 = 0, $x27 = 0, $x28 = 0, $x29 = 0, $x3 = 0, $x30 = 0;
 var $x31 = 0, $x32 = 0, $x33 = 0, $x34 = 0, $x35 = 0, $x36 = 0, $x37 = 0, $x38 = 0, $x39 = 0, $x4 = 0, $x40 = 0, $x41 = 0, $x42 = 0, $x43 = 0, $x44 = 0, $x45 = 0, $x46 = 0, $x47 = 0, $x48 = 0, $x49 = 0;
 var $x5 = 0, $x50 = 0, $x51 = 0, $x52 = 0, $x53 = 0, $x54 = 0, $x55 = 0, $x56 = 0, $x57 = 0, $x58 = 0, $x59 = 0, $x6 = 0, $x60 = 0, $x61 = 0, $x62 = 0, $x63 = 0, $x64 = 0, $x65 = 0, $x66 = 0, $x67 = 0;
 var $x68 = 0, $x69 = 0, $x7 = 0, $x70 = 0, $x71 = 0, $x72 = 0, $x73 = 0, $x74 = 0, $x75 = 0, $x76 = 0, $x77 = 0, $x78 = 0, $x79 = 0, $x8 = 0, $x80 = 0, $x81 = 0, $x82 = 0, $x83 = 0, $x84 = 0, $x85 = 0;
 var $x86 = 0, $x87 = 0, $x88 = 0, $x89 = 0, $x9 = 0, $x90 = 0, $x91 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $x = sp + 404|0;
 $x1 = sp + 400|0;
 $x2 = sp + 396|0;
 $x3 = sp + 392|0;
 $x4 = sp + 388|0;
 $x5 = sp + 384|0;
 $x6 = sp + 8|0;
 $x7 = sp;
 $x8 = sp + 380|0;
 $x9 = sp + 376|0;
 $x10 = sp + 372|0;
 $x11 = sp + 368|0;
 $x12 = sp + 364|0;
 $x13 = sp + 360|0;
 $x14 = sp + 356|0;
 $x15 = sp + 352|0;
 $x16 = sp + 348|0;
 $x17 = sp + 344|0;
 $x18 = sp + 340|0;
 $x19 = sp + 336|0;
 $x20 = sp + 332|0;
 $x21 = sp + 328|0;
 $x22 = sp + 324|0;
 $x23 = sp + 320|0;
 $x24 = sp + 316|0;
 $x25 = sp + 312|0;
 $x26 = sp + 308|0;
 $x27 = sp + 304|0;
 $x28 = sp + 300|0;
 $x29 = sp + 296|0;
 $x30 = sp + 292|0;
 $x31 = sp + 288|0;
 $x32 = sp + 284|0;
 $x33 = sp + 280|0;
 $x34 = sp + 276|0;
 $x35 = sp + 272|0;
 $x36 = sp + 268|0;
 $x37 = sp + 264|0;
 $x38 = sp + 260|0;
 $x39 = sp + 256|0;
 $x40 = sp + 252|0;
 $x41 = sp + 248|0;
 $x42 = sp + 244|0;
 $x43 = sp + 240|0;
 $x44 = sp + 236|0;
 $x45 = sp + 232|0;
 $x46 = sp + 228|0;
 $x47 = sp + 224|0;
 $x48 = sp + 220|0;
 $x49 = sp + 216|0;
 $x50 = sp + 212|0;
 $x51 = sp + 208|0;
 $x52 = sp + 204|0;
 $x53 = sp + 200|0;
 $x54 = sp + 196|0;
 $x55 = sp + 192|0;
 $x56 = sp + 188|0;
 $x57 = sp + 184|0;
 $x58 = sp + 180|0;
 $x59 = sp + 176|0;
 $x60 = sp + 172|0;
 $x61 = sp + 168|0;
 $x62 = sp + 164|0;
 $x63 = sp + 160|0;
 $x64 = sp + 156|0;
 $x65 = sp + 152|0;
 $x66 = sp + 148|0;
 $x67 = sp + 144|0;
 $x68 = sp + 140|0;
 $x69 = sp + 136|0;
 $x70 = sp + 132|0;
 $x71 = sp + 128|0;
 $x72 = sp + 124|0;
 $x73 = sp + 120|0;
 $x74 = sp + 116|0;
 $x75 = sp + 112|0;
 $x76 = sp + 108|0;
 $x77 = sp + 104|0;
 $x78 = sp + 100|0;
 $x79 = sp + 96|0;
 $x80 = sp + 92|0;
 $x81 = sp + 88|0;
 $x82 = sp + 84|0;
 $x83 = sp + 80|0;
 $x84 = sp + 76|0;
 $x85 = sp + 72|0;
 $x86 = sp + 68|0;
 $x87 = sp + 44|0;
 $x88 = sp + 40|0;
 $x89 = sp + 36|0;
 $x90 = sp + 32|0;
 $x91 = sp + 28|0;
 $1 = $filepath;
 $2 = $handle;
 $3 = $write_func;
 $SaveRDRAMSize = 8388608;
 $4 = (_r4300_cp0_regs()|0);
 $cp0_regs = $4;
 $5 = $SaveRDRAMSize;
 $6 = (8 + ($5))|0;
 $7 = (($6) + 10068)|0;
 $savestateSize = $7;
 $8 = $savestateSize;
 $9 = (_malloc(($8|0))|0);
 $curr = $9;
 $savestateData = $9;
 $10 = $savestateData;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _main_message(4,6,(gb + (15535) | 0),$vararg_buffer);
  $0 = 0;
  $661 = $0;
  STACKTOP = sp;return ($661|0);
 }
 $12 = $curr;
 ;HEAP8[$12>>0]=HEAP8[(gb + (15570) | 0)>>0]|0;HEAP8[$12+1>>0]=HEAP8[(gb + (15570) | 0)+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[(gb + (15570) | 0)+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[(gb + (15570) | 0)+3>>0]|0;
 $13 = $curr;
 _to_little_endian_buffer($13,1,4);
 $14 = $curr;
 $15 = ((($14)) + 4|0);
 $curr = $15;
 $16 = $SaveRDRAMSize;
 HEAP32[$x>>2] = $16;
 $17 = $curr;
 ;HEAP8[$17>>0]=HEAP8[$x>>0]|0;HEAP8[$17+1>>0]=HEAP8[$x+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$x+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$x+3>>0]|0;
 $18 = $curr;
 _to_little_endian_buffer($18,4,1);
 $19 = $curr;
 $20 = ((($19)) + 4|0);
 $curr = $20;
 $21 = $curr;
 $22 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 dest=$21; src=$22; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $23 = $curr;
 _to_little_endian_buffer($23,4,16);
 $24 = $curr;
 $25 = ((($24)) + 64|0);
 $curr = $25;
 $26 = (_get_event(1)|0);
 $27 = $cp0_regs;
 $28 = ((($27)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) - ($29))|0;
 HEAP32[$x1>>2] = $30;
 $31 = $curr;
 ;HEAP8[$31>>0]=HEAP8[$x1>>0]|0;HEAP8[$31+1>>0]=HEAP8[$x1+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$x1+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$x1+3>>0]|0;
 $32 = $curr;
 _to_little_endian_buffer($32,4,1);
 $33 = $curr;
 $34 = ((($33)) + 4|0);
 $curr = $34;
 $35 = (_r4300_pc()|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$x2>>2] = $36;
 $37 = $curr;
 ;HEAP8[$37>>0]=HEAP8[$x2>>0]|0;HEAP8[$37+1>>0]=HEAP8[$x2+1>>0]|0;HEAP8[$37+2>>0]=HEAP8[$x2+2>>0]|0;HEAP8[$37+3>>0]=HEAP8[$x2+3>>0]|0;
 $38 = $curr;
 _to_little_endian_buffer($38,4,1);
 $39 = $curr;
 $40 = ((($39)) + 4|0);
 $curr = $40;
 $41 = $curr;
 $42 = (_r4300_regs()|0);
 _memcpy(($41|0),($42|0),256)|0;
 $43 = $curr;
 _to_little_endian_buffer($43,8,32);
 $44 = $curr;
 $45 = ((($44)) + 256|0);
 $curr = $45;
 $46 = $cp0_regs;
 $47 = ((($46)) + 48|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 67108864;
 $50 = ($49|0)==(0);
 if ($50) {
  _shuffle_fpr_data(67108864,0);
 }
 $51 = $curr;
 $52 = (_r4300_cp1_regs()|0);
 _memcpy(($51|0),($52|0),256)|0;
 $53 = $curr;
 _to_little_endian_buffer($53,8,32);
 $54 = $curr;
 $55 = ((($54)) + 256|0);
 $curr = $55;
 $56 = $cp0_regs;
 $57 = ((($56)) + 48|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 67108864;
 $60 = ($59|0)==(0);
 if ($60) {
  _shuffle_fpr_data(67108864,0);
 }
 $61 = $curr;
 $62 = $cp0_regs;
 dest=$61; src=$62; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $63 = $curr;
 _to_little_endian_buffer($63,4,32);
 $64 = $curr;
 $65 = ((($64)) + 128|0);
 $curr = $65;
 $66 = (_r4300_cp1_fcr0()|0);
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$x3>>2] = $67;
 $68 = $curr;
 ;HEAP8[$68>>0]=HEAP8[$x3>>0]|0;HEAP8[$68+1>>0]=HEAP8[$x3+1>>0]|0;HEAP8[$68+2>>0]=HEAP8[$x3+2>>0]|0;HEAP8[$68+3>>0]=HEAP8[$x3+3>>0]|0;
 $69 = $curr;
 _to_little_endian_buffer($69,4,1);
 $70 = $curr;
 $71 = ((($70)) + 4|0);
 $curr = $71;
 $i = 0;
 while(1) {
  $72 = $i;
  $73 = ($72>>>0)<(30);
  if (!($73)) {
   break;
  }
  HEAP32[$x4>>2] = 0;
  $74 = $curr;
  ;HEAP8[$74>>0]=HEAP8[$x4>>0]|0;HEAP8[$74+1>>0]=HEAP8[$x4+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$x4+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$x4+3>>0]|0;
  $75 = $curr;
  _to_little_endian_buffer($75,4,1);
  $76 = $curr;
  $77 = ((($76)) + 4|0);
  $curr = $77;
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = (_r4300_cp1_fcr31()|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$x5>>2] = $81;
 $82 = $curr;
 ;HEAP8[$82>>0]=HEAP8[$x5>>0]|0;HEAP8[$82+1>>0]=HEAP8[$x5+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$x5+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$x5+3>>0]|0;
 $83 = $curr;
 _to_little_endian_buffer($83,4,1);
 $84 = $curr;
 $85 = ((($84)) + 4|0);
 $curr = $85;
 $86 = (_r4300_mult_hi()|0);
 $87 = $86;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $x6;
 $94 = $93;
 HEAP32[$94>>2] = $89;
 $95 = (($93) + 4)|0;
 $96 = $95;
 HEAP32[$96>>2] = $92;
 $97 = $curr;
 ;HEAP8[$97>>0]=HEAP8[$x6>>0]|0;HEAP8[$97+1>>0]=HEAP8[$x6+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$x6+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$x6+3>>0]|0;HEAP8[$97+4>>0]=HEAP8[$x6+4>>0]|0;HEAP8[$97+5>>0]=HEAP8[$x6+5>>0]|0;HEAP8[$97+6>>0]=HEAP8[$x6+6>>0]|0;HEAP8[$97+7>>0]=HEAP8[$x6+7>>0]|0;
 $98 = $curr;
 _to_little_endian_buffer($98,8,1);
 $99 = $curr;
 $100 = ((($99)) + 8|0);
 $curr = $100;
 $101 = (_r4300_mult_lo()|0);
 $102 = $101;
 $103 = $102;
 $104 = HEAP32[$103>>2]|0;
 $105 = (($102) + 4)|0;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = $x7;
 $109 = $108;
 HEAP32[$109>>2] = $104;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = $107;
 $112 = $curr;
 ;HEAP8[$112>>0]=HEAP8[$x7>>0]|0;HEAP8[$112+1>>0]=HEAP8[$x7+1>>0]|0;HEAP8[$112+2>>0]=HEAP8[$x7+2>>0]|0;HEAP8[$112+3>>0]=HEAP8[$x7+3>>0]|0;HEAP8[$112+4>>0]=HEAP8[$x7+4>>0]|0;HEAP8[$112+5>>0]=HEAP8[$x7+5>>0]|0;HEAP8[$112+6>>0]=HEAP8[$x7+6>>0]|0;HEAP8[$112+7>>0]=HEAP8[$x7+7>>0]|0;
 $113 = $curr;
 _to_little_endian_buffer($113,8,1);
 $114 = $curr;
 $115 = ((($114)) + 8|0);
 $curr = $115;
 $116 = HEAP32[((((gb + (8421480) | 0)) + 32|0))>>2]|0;
 HEAP32[$x8>>2] = $116;
 $117 = $curr;
 ;HEAP8[$117>>0]=HEAP8[$x8>>0]|0;HEAP8[$117+1>>0]=HEAP8[$x8+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$x8+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$x8+3>>0]|0;
 $118 = $curr;
 _to_little_endian_buffer($118,4,1);
 $119 = $curr;
 $120 = ((($119)) + 4|0);
 $curr = $120;
 $121 = HEAP32[((((gb + (8421480) | 0)) + 36|0))>>2]|0;
 HEAP32[$x9>>2] = $121;
 $122 = $curr;
 ;HEAP8[$122>>0]=HEAP8[$x9>>0]|0;HEAP8[$122+1>>0]=HEAP8[$x9+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$x9+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$x9+3>>0]|0;
 $123 = $curr;
 _to_little_endian_buffer($123,4,1);
 $124 = $curr;
 $125 = ((($124)) + 4|0);
 $curr = $125;
 $126 = HEAP32[((((gb + (8421480) | 0)) + 40|0))>>2]|0;
 HEAP32[$x10>>2] = $126;
 $127 = $curr;
 ;HEAP8[$127>>0]=HEAP8[$x10>>0]|0;HEAP8[$127+1>>0]=HEAP8[$x10+1>>0]|0;HEAP8[$127+2>>0]=HEAP8[$x10+2>>0]|0;HEAP8[$127+3>>0]=HEAP8[$x10+3>>0]|0;
 $128 = $curr;
 _to_little_endian_buffer($128,4,1);
 $129 = $curr;
 $130 = ((($129)) + 4|0);
 $curr = $130;
 $131 = HEAP32[((((gb + (8421480) | 0)) + 44|0))>>2]|0;
 HEAP32[$x11>>2] = $131;
 $132 = $curr;
 ;HEAP8[$132>>0]=HEAP8[$x11>>0]|0;HEAP8[$132+1>>0]=HEAP8[$x11+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$x11+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$x11+3>>0]|0;
 $133 = $curr;
 _to_little_endian_buffer($133,4,1);
 $134 = $curr;
 $135 = ((($134)) + 4|0);
 $curr = $135;
 $136 = HEAP32[((((gb + (8421480) | 0)) + 48|0))>>2]|0;
 HEAP32[$x12>>2] = $136;
 $137 = $curr;
 ;HEAP8[$137>>0]=HEAP8[$x12>>0]|0;HEAP8[$137+1>>0]=HEAP8[$x12+1>>0]|0;HEAP8[$137+2>>0]=HEAP8[$x12+2>>0]|0;HEAP8[$137+3>>0]=HEAP8[$x12+3>>0]|0;
 $138 = $curr;
 _to_little_endian_buffer($138,4,1);
 $139 = $curr;
 $140 = ((($139)) + 4|0);
 $curr = $140;
 $141 = HEAP32[((((gb + (8421480) | 0)) + 52|0))>>2]|0;
 HEAP32[$x13>>2] = $141;
 $142 = $curr;
 ;HEAP8[$142>>0]=HEAP8[$x13>>0]|0;HEAP8[$142+1>>0]=HEAP8[$x13+1>>0]|0;HEAP8[$142+2>>0]=HEAP8[$x13+2>>0]|0;HEAP8[$142+3>>0]=HEAP8[$x13+3>>0]|0;
 $143 = $curr;
 _to_little_endian_buffer($143,4,1);
 $144 = $curr;
 $145 = ((($144)) + 4|0);
 $curr = $145;
 $146 = HEAP32[((((gb + (8421480) | 0)) + 56|0))>>2]|0;
 HEAP32[$x14>>2] = $146;
 $147 = $curr;
 ;HEAP8[$147>>0]=HEAP8[$x14>>0]|0;HEAP8[$147+1>>0]=HEAP8[$x14+1>>0]|0;HEAP8[$147+2>>0]=HEAP8[$x14+2>>0]|0;HEAP8[$147+3>>0]=HEAP8[$x14+3>>0]|0;
 $148 = $curr;
 _to_little_endian_buffer($148,4,1);
 $149 = $curr;
 $150 = ((($149)) + 4|0);
 $curr = $150;
 $151 = HEAP32[((((gb + (8421480) | 0)) + 60|0))>>2]|0;
 HEAP32[$x15>>2] = $151;
 $152 = $curr;
 ;HEAP8[$152>>0]=HEAP8[$x15>>0]|0;HEAP8[$152+1>>0]=HEAP8[$x15+1>>0]|0;HEAP8[$152+2>>0]=HEAP8[$x15+2>>0]|0;HEAP8[$152+3>>0]=HEAP8[$x15+3>>0]|0;
 $153 = $curr;
 _to_little_endian_buffer($153,4,1);
 $154 = $curr;
 $155 = ((($154)) + 4|0);
 $curr = $155;
 $156 = HEAP32[((((gb + (8421480) | 0)) + 64|0))>>2]|0;
 HEAP32[$x16>>2] = $156;
 $157 = $curr;
 ;HEAP8[$157>>0]=HEAP8[$x16>>0]|0;HEAP8[$157+1>>0]=HEAP8[$x16+1>>0]|0;HEAP8[$157+2>>0]=HEAP8[$x16+2>>0]|0;HEAP8[$157+3>>0]=HEAP8[$x16+3>>0]|0;
 $158 = $curr;
 _to_little_endian_buffer($158,4,1);
 $159 = $curr;
 $160 = ((($159)) + 4|0);
 $curr = $160;
 $161 = HEAP32[((((gb + (8421480) | 0)) + 68|0))>>2]|0;
 HEAP32[$x17>>2] = $161;
 $162 = $curr;
 ;HEAP8[$162>>0]=HEAP8[$x17>>0]|0;HEAP8[$162+1>>0]=HEAP8[$x17+1>>0]|0;HEAP8[$162+2>>0]=HEAP8[$x17+2>>0]|0;HEAP8[$162+3>>0]=HEAP8[$x17+3>>0]|0;
 $163 = $curr;
 _to_little_endian_buffer($163,4,1);
 $164 = $curr;
 $165 = ((($164)) + 4|0);
 $curr = $165;
 $166 = HEAP32[((((gb + (8413160) | 0)) + 8192|0))>>2]|0;
 HEAP32[$x18>>2] = $166;
 $167 = $curr;
 ;HEAP8[$167>>0]=HEAP8[$x18>>0]|0;HEAP8[$167+1>>0]=HEAP8[$x18+1>>0]|0;HEAP8[$167+2>>0]=HEAP8[$x18+2>>0]|0;HEAP8[$167+3>>0]=HEAP8[$x18+3>>0]|0;
 $168 = $curr;
 _to_little_endian_buffer($168,4,1);
 $169 = $curr;
 $170 = ((($169)) + 4|0);
 $curr = $170;
 $171 = HEAP32[((((gb + (8413160) | 0)) + 8196|0))>>2]|0;
 HEAP32[$x19>>2] = $171;
 $172 = $curr;
 ;HEAP8[$172>>0]=HEAP8[$x19>>0]|0;HEAP8[$172+1>>0]=HEAP8[$x19+1>>0]|0;HEAP8[$172+2>>0]=HEAP8[$x19+2>>0]|0;HEAP8[$172+3>>0]=HEAP8[$x19+3>>0]|0;
 $173 = $curr;
 _to_little_endian_buffer($173,4,1);
 $174 = $curr;
 $175 = ((($174)) + 4|0);
 $curr = $175;
 $176 = HEAP32[((((gb + (8413160) | 0)) + 8200|0))>>2]|0;
 HEAP32[$x20>>2] = $176;
 $177 = $curr;
 ;HEAP8[$177>>0]=HEAP8[$x20>>0]|0;HEAP8[$177+1>>0]=HEAP8[$x20+1>>0]|0;HEAP8[$177+2>>0]=HEAP8[$x20+2>>0]|0;HEAP8[$177+3>>0]=HEAP8[$x20+3>>0]|0;
 $178 = $curr;
 _to_little_endian_buffer($178,4,1);
 $179 = $curr;
 $180 = ((($179)) + 4|0);
 $curr = $180;
 $181 = HEAP32[((((gb + (8413160) | 0)) + 8204|0))>>2]|0;
 HEAP32[$x21>>2] = $181;
 $182 = $curr;
 ;HEAP8[$182>>0]=HEAP8[$x21>>0]|0;HEAP8[$182+1>>0]=HEAP8[$x21+1>>0]|0;HEAP8[$182+2>>0]=HEAP8[$x21+2>>0]|0;HEAP8[$182+3>>0]=HEAP8[$x21+3>>0]|0;
 $183 = $curr;
 _to_little_endian_buffer($183,4,1);
 $184 = $curr;
 $185 = ((($184)) + 4|0);
 $curr = $185;
 $186 = HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2]|0;
 HEAP32[$x22>>2] = $186;
 $187 = $curr;
 ;HEAP8[$187>>0]=HEAP8[$x22>>0]|0;HEAP8[$187+1>>0]=HEAP8[$x22+1>>0]|0;HEAP8[$187+2>>0]=HEAP8[$x22+2>>0]|0;HEAP8[$187+3>>0]=HEAP8[$x22+3>>0]|0;
 $188 = $curr;
 _to_little_endian_buffer($188,4,1);
 $189 = $curr;
 $190 = ((($189)) + 4|0);
 $curr = $190;
 $191 = HEAP32[((((gb + (8413160) | 0)) + 8212|0))>>2]|0;
 HEAP32[$x23>>2] = $191;
 $192 = $curr;
 ;HEAP8[$192>>0]=HEAP8[$x23>>0]|0;HEAP8[$192+1>>0]=HEAP8[$x23+1>>0]|0;HEAP8[$192+2>>0]=HEAP8[$x23+2>>0]|0;HEAP8[$192+3>>0]=HEAP8[$x23+3>>0]|0;
 $193 = $curr;
 _to_little_endian_buffer($193,4,1);
 $194 = $curr;
 $195 = ((($194)) + 4|0);
 $curr = $195;
 $196 = HEAP32[((((gb + (8413160) | 0)) + 8216|0))>>2]|0;
 HEAP32[$x24>>2] = $196;
 $197 = $curr;
 ;HEAP8[$197>>0]=HEAP8[$x24>>0]|0;HEAP8[$197+1>>0]=HEAP8[$x24+1>>0]|0;HEAP8[$197+2>>0]=HEAP8[$x24+2>>0]|0;HEAP8[$197+3>>0]=HEAP8[$x24+3>>0]|0;
 $198 = $curr;
 _to_little_endian_buffer($198,4,1);
 $199 = $curr;
 $200 = ((($199)) + 4|0);
 $curr = $200;
 $201 = HEAP32[((((gb + (8413160) | 0)) + 8220|0))>>2]|0;
 HEAP32[$x25>>2] = $201;
 $202 = $curr;
 ;HEAP8[$202>>0]=HEAP8[$x25>>0]|0;HEAP8[$202+1>>0]=HEAP8[$x25+1>>0]|0;HEAP8[$202+2>>0]=HEAP8[$x25+2>>0]|0;HEAP8[$202+3>>0]=HEAP8[$x25+3>>0]|0;
 $203 = $curr;
 _to_little_endian_buffer($203,4,1);
 $204 = $curr;
 $205 = ((($204)) + 4|0);
 $curr = $205;
 $206 = HEAP32[((((gb + (8413160) | 0)) + 8224|0))>>2]|0;
 HEAP32[$x26>>2] = $206;
 $207 = $curr;
 ;HEAP8[$207>>0]=HEAP8[$x26>>0]|0;HEAP8[$207+1>>0]=HEAP8[$x26+1>>0]|0;HEAP8[$207+2>>0]=HEAP8[$x26+2>>0]|0;HEAP8[$207+3>>0]=HEAP8[$x26+3>>0]|0;
 $208 = $curr;
 _to_little_endian_buffer($208,4,1);
 $209 = $curr;
 $210 = ((($209)) + 4|0);
 $curr = $210;
 $211 = HEAP32[((((gb + (8413160) | 0)) + 8228|0))>>2]|0;
 HEAP32[$x27>>2] = $211;
 $212 = $curr;
 ;HEAP8[$212>>0]=HEAP8[$x27>>0]|0;HEAP8[$212+1>>0]=HEAP8[$x27+1>>0]|0;HEAP8[$212+2>>0]=HEAP8[$x27+2>>0]|0;HEAP8[$212+3>>0]=HEAP8[$x27+3>>0]|0;
 $213 = $curr;
 _to_little_endian_buffer($213,4,1);
 $214 = $curr;
 $215 = ((($214)) + 4|0);
 $curr = $215;
 $216 = HEAP32[(gb + (8410952) | 0)>>2]|0;
 HEAP32[$x28>>2] = $216;
 $217 = $curr;
 ;HEAP8[$217>>0]=HEAP8[$x28>>0]|0;HEAP8[$217+1>>0]=HEAP8[$x28+1>>0]|0;HEAP8[$217+2>>0]=HEAP8[$x28+2>>0]|0;HEAP8[$217+3>>0]=HEAP8[$x28+3>>0]|0;
 $218 = $curr;
 _to_little_endian_buffer($218,4,1);
 $219 = $curr;
 $220 = ((($219)) + 4|0);
 $curr = $220;
 $221 = HEAP32[((((gb + (8410952) | 0)) + 4|0))>>2]|0;
 HEAP32[$x29>>2] = $221;
 $222 = $curr;
 ;HEAP8[$222>>0]=HEAP8[$x29>>0]|0;HEAP8[$222+1>>0]=HEAP8[$x29+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$x29+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$x29+3>>0]|0;
 $223 = $curr;
 _to_little_endian_buffer($223,4,1);
 $224 = $curr;
 $225 = ((($224)) + 4|0);
 $curr = $225;
 $226 = HEAP32[((((gb + (8410952) | 0)) + 8|0))>>2]|0;
 HEAP32[$x30>>2] = $226;
 $227 = $curr;
 ;HEAP8[$227>>0]=HEAP8[$x30>>0]|0;HEAP8[$227+1>>0]=HEAP8[$x30+1>>0]|0;HEAP8[$227+2>>0]=HEAP8[$x30+2>>0]|0;HEAP8[$227+3>>0]=HEAP8[$x30+3>>0]|0;
 $228 = $curr;
 _to_little_endian_buffer($228,4,1);
 $229 = $curr;
 $230 = ((($229)) + 4|0);
 $curr = $230;
 $231 = HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2]|0;
 HEAP32[$x31>>2] = $231;
 $232 = $curr;
 ;HEAP8[$232>>0]=HEAP8[$x31>>0]|0;HEAP8[$232+1>>0]=HEAP8[$x31+1>>0]|0;HEAP8[$232+2>>0]=HEAP8[$x31+2>>0]|0;HEAP8[$232+3>>0]=HEAP8[$x31+3>>0]|0;
 $233 = $curr;
 _to_little_endian_buffer($233,4,1);
 $234 = $curr;
 $235 = ((($234)) + 4|0);
 $curr = $235;
 $236 = HEAP32[((((gb + (8410952) | 0)) + 16|0))>>2]|0;
 HEAP32[$x32>>2] = $236;
 $237 = $curr;
 ;HEAP8[$237>>0]=HEAP8[$x32>>0]|0;HEAP8[$237+1>>0]=HEAP8[$x32+1>>0]|0;HEAP8[$237+2>>0]=HEAP8[$x32+2>>0]|0;HEAP8[$237+3>>0]=HEAP8[$x32+3>>0]|0;
 $238 = $curr;
 _to_little_endian_buffer($238,4,1);
 $239 = $curr;
 $240 = ((($239)) + 4|0);
 $curr = $240;
 $241 = HEAP32[((((gb + (8410952) | 0)) + 20|0))>>2]|0;
 HEAP32[$x33>>2] = $241;
 $242 = $curr;
 ;HEAP8[$242>>0]=HEAP8[$x33>>0]|0;HEAP8[$242+1>>0]=HEAP8[$x33+1>>0]|0;HEAP8[$242+2>>0]=HEAP8[$x33+2>>0]|0;HEAP8[$242+3>>0]=HEAP8[$x33+3>>0]|0;
 $243 = $curr;
 _to_little_endian_buffer($243,4,1);
 $244 = $curr;
 $245 = ((($244)) + 4|0);
 $curr = $245;
 $246 = HEAP32[((((gb + (8410952) | 0)) + 24|0))>>2]|0;
 HEAP32[$x34>>2] = $246;
 $247 = $curr;
 ;HEAP8[$247>>0]=HEAP8[$x34>>0]|0;HEAP8[$247+1>>0]=HEAP8[$x34+1>>0]|0;HEAP8[$247+2>>0]=HEAP8[$x34+2>>0]|0;HEAP8[$247+3>>0]=HEAP8[$x34+3>>0]|0;
 $248 = $curr;
 _to_little_endian_buffer($248,4,1);
 $249 = $curr;
 $250 = ((($249)) + 4|0);
 $curr = $250;
 $251 = HEAP32[((((gb + (8410952) | 0)) + 28|0))>>2]|0;
 HEAP32[$x35>>2] = $251;
 $252 = $curr;
 ;HEAP8[$252>>0]=HEAP8[$x35>>0]|0;HEAP8[$252+1>>0]=HEAP8[$x35+1>>0]|0;HEAP8[$252+2>>0]=HEAP8[$x35+2>>0]|0;HEAP8[$252+3>>0]=HEAP8[$x35+3>>0]|0;
 $253 = $curr;
 _to_little_endian_buffer($253,4,1);
 $254 = $curr;
 $255 = ((($254)) + 4|0);
 $curr = $255;
 HEAP32[$x36>>2] = 0;
 $256 = $curr;
 ;HEAP8[$256>>0]=HEAP8[$x36>>0]|0;HEAP8[$256+1>>0]=HEAP8[$x36+1>>0]|0;HEAP8[$256+2>>0]=HEAP8[$x36+2>>0]|0;HEAP8[$256+3>>0]=HEAP8[$x36+3>>0]|0;
 $257 = $curr;
 _to_little_endian_buffer($257,4,1);
 $258 = $curr;
 $259 = ((($258)) + 4|0);
 $curr = $259;
 HEAP32[$x37>>2] = 0;
 $260 = $curr;
 ;HEAP8[$260>>0]=HEAP8[$x37>>0]|0;HEAP8[$260+1>>0]=HEAP8[$x37+1>>0]|0;HEAP8[$260+2>>0]=HEAP8[$x37+2>>0]|0;HEAP8[$260+3>>0]=HEAP8[$x37+3>>0]|0;
 $261 = $curr;
 _to_little_endian_buffer($261,4,1);
 $262 = $curr;
 $263 = ((($262)) + 4|0);
 $curr = $263;
 $264 = HEAP32[(gb + (8410936) | 0)>>2]|0;
 HEAP32[$x38>>2] = $264;
 $265 = $curr;
 ;HEAP8[$265>>0]=HEAP8[$x38>>0]|0;HEAP8[$265+1>>0]=HEAP8[$x38+1>>0]|0;HEAP8[$265+2>>0]=HEAP8[$x38+2>>0]|0;HEAP8[$265+3>>0]=HEAP8[$x38+3>>0]|0;
 $266 = $curr;
 _to_little_endian_buffer($266,4,1);
 $267 = $curr;
 $268 = ((($267)) + 4|0);
 $curr = $268;
 $269 = HEAP32[((((gb + (8410936) | 0)) + 4|0))>>2]|0;
 HEAP32[$x39>>2] = $269;
 $270 = $curr;
 ;HEAP8[$270>>0]=HEAP8[$x39>>0]|0;HEAP8[$270+1>>0]=HEAP8[$x39+1>>0]|0;HEAP8[$270+2>>0]=HEAP8[$x39+2>>0]|0;HEAP8[$270+3>>0]=HEAP8[$x39+3>>0]|0;
 $271 = $curr;
 _to_little_endian_buffer($271,4,1);
 $272 = $curr;
 $273 = ((($272)) + 4|0);
 $curr = $273;
 $274 = HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2]|0;
 HEAP32[$x40>>2] = $274;
 $275 = $curr;
 ;HEAP8[$275>>0]=HEAP8[$x40>>0]|0;HEAP8[$275+1>>0]=HEAP8[$x40+1>>0]|0;HEAP8[$275+2>>0]=HEAP8[$x40+2>>0]|0;HEAP8[$275+3>>0]=HEAP8[$x40+3>>0]|0;
 $276 = $curr;
 _to_little_endian_buffer($276,4,1);
 $277 = $curr;
 $278 = ((($277)) + 4|0);
 $curr = $278;
 $279 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 HEAP32[$x41>>2] = $279;
 $280 = $curr;
 ;HEAP8[$280>>0]=HEAP8[$x41>>0]|0;HEAP8[$280+1>>0]=HEAP8[$x41+1>>0]|0;HEAP8[$280+2>>0]=HEAP8[$x41+2>>0]|0;HEAP8[$280+3>>0]=HEAP8[$x41+3>>0]|0;
 $281 = $curr;
 _to_little_endian_buffer($281,4,1);
 $282 = $curr;
 $283 = ((($282)) + 4|0);
 $curr = $283;
 $284 = HEAP32[(gb + (8421560) | 0)>>2]|0;
 HEAP32[$x42>>2] = $284;
 $285 = $curr;
 ;HEAP8[$285>>0]=HEAP8[$x42>>0]|0;HEAP8[$285+1>>0]=HEAP8[$x42+1>>0]|0;HEAP8[$285+2>>0]=HEAP8[$x42+2>>0]|0;HEAP8[$285+3>>0]=HEAP8[$x42+3>>0]|0;
 $286 = $curr;
 _to_little_endian_buffer($286,4,1);
 $287 = $curr;
 $288 = ((($287)) + 4|0);
 $curr = $288;
 $289 = HEAP32[((((gb + (8421560) | 0)) + 4|0))>>2]|0;
 HEAP32[$x43>>2] = $289;
 $290 = $curr;
 ;HEAP8[$290>>0]=HEAP8[$x43>>0]|0;HEAP8[$290+1>>0]=HEAP8[$x43+1>>0]|0;HEAP8[$290+2>>0]=HEAP8[$x43+2>>0]|0;HEAP8[$290+3>>0]=HEAP8[$x43+3>>0]|0;
 $291 = $curr;
 _to_little_endian_buffer($291,4,1);
 $292 = $curr;
 $293 = ((($292)) + 4|0);
 $curr = $293;
 $294 = HEAP32[((((gb + (8421560) | 0)) + 8|0))>>2]|0;
 HEAP32[$x44>>2] = $294;
 $295 = $curr;
 ;HEAP8[$295>>0]=HEAP8[$x44>>0]|0;HEAP8[$295+1>>0]=HEAP8[$x44+1>>0]|0;HEAP8[$295+2>>0]=HEAP8[$x44+2>>0]|0;HEAP8[$295+3>>0]=HEAP8[$x44+3>>0]|0;
 $296 = $curr;
 _to_little_endian_buffer($296,4,1);
 $297 = $curr;
 $298 = ((($297)) + 4|0);
 $curr = $298;
 $299 = HEAP32[((((gb + (8421560) | 0)) + 12|0))>>2]|0;
 HEAP32[$x45>>2] = $299;
 $300 = $curr;
 ;HEAP8[$300>>0]=HEAP8[$x45>>0]|0;HEAP8[$300+1>>0]=HEAP8[$x45+1>>0]|0;HEAP8[$300+2>>0]=HEAP8[$x45+2>>0]|0;HEAP8[$300+3>>0]=HEAP8[$x45+3>>0]|0;
 $301 = $curr;
 _to_little_endian_buffer($301,4,1);
 $302 = $curr;
 $303 = ((($302)) + 4|0);
 $curr = $303;
 $304 = HEAP32[((((gb + (8421560) | 0)) + 16|0))>>2]|0;
 HEAP32[$x46>>2] = $304;
 $305 = $curr;
 ;HEAP8[$305>>0]=HEAP8[$x46>>0]|0;HEAP8[$305+1>>0]=HEAP8[$x46+1>>0]|0;HEAP8[$305+2>>0]=HEAP8[$x46+2>>0]|0;HEAP8[$305+3>>0]=HEAP8[$x46+3>>0]|0;
 $306 = $curr;
 _to_little_endian_buffer($306,4,1);
 $307 = $curr;
 $308 = ((($307)) + 4|0);
 $curr = $308;
 $309 = HEAP32[((((gb + (8421560) | 0)) + 20|0))>>2]|0;
 HEAP32[$x47>>2] = $309;
 $310 = $curr;
 ;HEAP8[$310>>0]=HEAP8[$x47>>0]|0;HEAP8[$310+1>>0]=HEAP8[$x47+1>>0]|0;HEAP8[$310+2>>0]=HEAP8[$x47+2>>0]|0;HEAP8[$310+3>>0]=HEAP8[$x47+3>>0]|0;
 $311 = $curr;
 _to_little_endian_buffer($311,4,1);
 $312 = $curr;
 $313 = ((($312)) + 4|0);
 $curr = $313;
 $314 = HEAP32[((((gb + (8421560) | 0)) + 24|0))>>2]|0;
 HEAP32[$x48>>2] = $314;
 $315 = $curr;
 ;HEAP8[$315>>0]=HEAP8[$x48>>0]|0;HEAP8[$315+1>>0]=HEAP8[$x48+1>>0]|0;HEAP8[$315+2>>0]=HEAP8[$x48+2>>0]|0;HEAP8[$315+3>>0]=HEAP8[$x48+3>>0]|0;
 $316 = $curr;
 _to_little_endian_buffer($316,4,1);
 $317 = $curr;
 $318 = ((($317)) + 4|0);
 $curr = $318;
 $319 = HEAP32[((((gb + (8421560) | 0)) + 28|0))>>2]|0;
 HEAP32[$x49>>2] = $319;
 $320 = $curr;
 ;HEAP8[$320>>0]=HEAP8[$x49>>0]|0;HEAP8[$320+1>>0]=HEAP8[$x49+1>>0]|0;HEAP8[$320+2>>0]=HEAP8[$x49+2>>0]|0;HEAP8[$320+3>>0]=HEAP8[$x49+3>>0]|0;
 $321 = $curr;
 _to_little_endian_buffer($321,4,1);
 $322 = $curr;
 $323 = ((($322)) + 4|0);
 $curr = $323;
 $324 = HEAP32[((((gb + (8421560) | 0)) + 32|0))>>2]|0;
 HEAP32[$x50>>2] = $324;
 $325 = $curr;
 ;HEAP8[$325>>0]=HEAP8[$x50>>0]|0;HEAP8[$325+1>>0]=HEAP8[$x50+1>>0]|0;HEAP8[$325+2>>0]=HEAP8[$x50+2>>0]|0;HEAP8[$325+3>>0]=HEAP8[$x50+3>>0]|0;
 $326 = $curr;
 _to_little_endian_buffer($326,4,1);
 $327 = $curr;
 $328 = ((($327)) + 4|0);
 $curr = $328;
 $329 = HEAP32[((((gb + (8421560) | 0)) + 36|0))>>2]|0;
 HEAP32[$x51>>2] = $329;
 $330 = $curr;
 ;HEAP8[$330>>0]=HEAP8[$x51>>0]|0;HEAP8[$330+1>>0]=HEAP8[$x51+1>>0]|0;HEAP8[$330+2>>0]=HEAP8[$x51+2>>0]|0;HEAP8[$330+3>>0]=HEAP8[$x51+3>>0]|0;
 $331 = $curr;
 _to_little_endian_buffer($331,4,1);
 $332 = $curr;
 $333 = ((($332)) + 4|0);
 $curr = $333;
 $334 = HEAP32[((((gb + (8421560) | 0)) + 40|0))>>2]|0;
 HEAP32[$x52>>2] = $334;
 $335 = $curr;
 ;HEAP8[$335>>0]=HEAP8[$x52>>0]|0;HEAP8[$335+1>>0]=HEAP8[$x52+1>>0]|0;HEAP8[$335+2>>0]=HEAP8[$x52+2>>0]|0;HEAP8[$335+3>>0]=HEAP8[$x52+3>>0]|0;
 $336 = $curr;
 _to_little_endian_buffer($336,4,1);
 $337 = $curr;
 $338 = ((($337)) + 4|0);
 $curr = $338;
 $339 = HEAP32[((((gb + (8421560) | 0)) + 44|0))>>2]|0;
 HEAP32[$x53>>2] = $339;
 $340 = $curr;
 ;HEAP8[$340>>0]=HEAP8[$x53>>0]|0;HEAP8[$340+1>>0]=HEAP8[$x53+1>>0]|0;HEAP8[$340+2>>0]=HEAP8[$x53+2>>0]|0;HEAP8[$340+3>>0]=HEAP8[$x53+3>>0]|0;
 $341 = $curr;
 _to_little_endian_buffer($341,4,1);
 $342 = $curr;
 $343 = ((($342)) + 4|0);
 $curr = $343;
 $344 = HEAP32[((((gb + (8421560) | 0)) + 48|0))>>2]|0;
 HEAP32[$x54>>2] = $344;
 $345 = $curr;
 ;HEAP8[$345>>0]=HEAP8[$x54>>0]|0;HEAP8[$345+1>>0]=HEAP8[$x54+1>>0]|0;HEAP8[$345+2>>0]=HEAP8[$x54+2>>0]|0;HEAP8[$345+3>>0]=HEAP8[$x54+3>>0]|0;
 $346 = $curr;
 _to_little_endian_buffer($346,4,1);
 $347 = $curr;
 $348 = ((($347)) + 4|0);
 $curr = $348;
 $349 = HEAP32[((((gb + (8421560) | 0)) + 52|0))>>2]|0;
 HEAP32[$x55>>2] = $349;
 $350 = $curr;
 ;HEAP8[$350>>0]=HEAP8[$x55>>0]|0;HEAP8[$350+1>>0]=HEAP8[$x55+1>>0]|0;HEAP8[$350+2>>0]=HEAP8[$x55+2>>0]|0;HEAP8[$350+3>>0]=HEAP8[$x55+3>>0]|0;
 $351 = $curr;
 _to_little_endian_buffer($351,4,1);
 $352 = $curr;
 $353 = ((($352)) + 4|0);
 $curr = $353;
 $354 = HEAP32[(gb + (8421404) | 0)>>2]|0;
 HEAP32[$x56>>2] = $354;
 $355 = $curr;
 ;HEAP8[$355>>0]=HEAP8[$x56>>0]|0;HEAP8[$355+1>>0]=HEAP8[$x56+1>>0]|0;HEAP8[$355+2>>0]=HEAP8[$x56+2>>0]|0;HEAP8[$355+3>>0]=HEAP8[$x56+3>>0]|0;
 $356 = $curr;
 _to_little_endian_buffer($356,4,1);
 $357 = $curr;
 $358 = ((($357)) + 4|0);
 $curr = $358;
 $359 = HEAP32[((((gb + (8421404) | 0)) + 4|0))>>2]|0;
 HEAP32[$x57>>2] = $359;
 $360 = $curr;
 ;HEAP8[$360>>0]=HEAP8[$x57>>0]|0;HEAP8[$360+1>>0]=HEAP8[$x57+1>>0]|0;HEAP8[$360+2>>0]=HEAP8[$x57+2>>0]|0;HEAP8[$360+3>>0]=HEAP8[$x57+3>>0]|0;
 $361 = $curr;
 _to_little_endian_buffer($361,4,1);
 $362 = $curr;
 $363 = ((($362)) + 4|0);
 $curr = $363;
 $364 = HEAP32[((((gb + (8421404) | 0)) + 8|0))>>2]|0;
 HEAP32[$x58>>2] = $364;
 $365 = $curr;
 ;HEAP8[$365>>0]=HEAP8[$x58>>0]|0;HEAP8[$365+1>>0]=HEAP8[$x58+1>>0]|0;HEAP8[$365+2>>0]=HEAP8[$x58+2>>0]|0;HEAP8[$365+3>>0]=HEAP8[$x58+3>>0]|0;
 $366 = $curr;
 _to_little_endian_buffer($366,4,1);
 $367 = $curr;
 $368 = ((($367)) + 4|0);
 $curr = $368;
 $369 = HEAP32[((((gb + (8421404) | 0)) + 12|0))>>2]|0;
 HEAP32[$x59>>2] = $369;
 $370 = $curr;
 ;HEAP8[$370>>0]=HEAP8[$x59>>0]|0;HEAP8[$370+1>>0]=HEAP8[$x59+1>>0]|0;HEAP8[$370+2>>0]=HEAP8[$x59+2>>0]|0;HEAP8[$370+3>>0]=HEAP8[$x59+3>>0]|0;
 $371 = $curr;
 _to_little_endian_buffer($371,4,1);
 $372 = $curr;
 $373 = ((($372)) + 4|0);
 $curr = $373;
 $374 = HEAP32[((((gb + (8421404) | 0)) + 16|0))>>2]|0;
 HEAP32[$x60>>2] = $374;
 $375 = $curr;
 ;HEAP8[$375>>0]=HEAP8[$x60>>0]|0;HEAP8[$375+1>>0]=HEAP8[$x60+1>>0]|0;HEAP8[$375+2>>0]=HEAP8[$x60+2>>0]|0;HEAP8[$375+3>>0]=HEAP8[$x60+3>>0]|0;
 $376 = $curr;
 _to_little_endian_buffer($376,4,1);
 $377 = $curr;
 $378 = ((($377)) + 4|0);
 $curr = $378;
 $379 = HEAP32[((((gb + (8421404) | 0)) + 20|0))>>2]|0;
 HEAP32[$x61>>2] = $379;
 $380 = $curr;
 ;HEAP8[$380>>0]=HEAP8[$x61>>0]|0;HEAP8[$380+1>>0]=HEAP8[$x61+1>>0]|0;HEAP8[$380+2>>0]=HEAP8[$x61+2>>0]|0;HEAP8[$380+3>>0]=HEAP8[$x61+3>>0]|0;
 $381 = $curr;
 _to_little_endian_buffer($381,4,1);
 $382 = $curr;
 $383 = ((($382)) + 4|0);
 $curr = $383;
 $384 = HEAP32[(gb + (8409824) | 0)>>2]|0;
 HEAP32[$x62>>2] = $384;
 $385 = $curr;
 ;HEAP8[$385>>0]=HEAP8[$x62>>0]|0;HEAP8[$385+1>>0]=HEAP8[$x62+1>>0]|0;HEAP8[$385+2>>0]=HEAP8[$x62+2>>0]|0;HEAP8[$385+3>>0]=HEAP8[$x62+3>>0]|0;
 $386 = $curr;
 _to_little_endian_buffer($386,4,1);
 $387 = $curr;
 $388 = ((($387)) + 4|0);
 $curr = $388;
 $389 = HEAP32[((((gb + (8409824) | 0)) + 4|0))>>2]|0;
 HEAP32[$x63>>2] = $389;
 $390 = $curr;
 ;HEAP8[$390>>0]=HEAP8[$x63>>0]|0;HEAP8[$390+1>>0]=HEAP8[$x63+1>>0]|0;HEAP8[$390+2>>0]=HEAP8[$x63+2>>0]|0;HEAP8[$390+3>>0]=HEAP8[$x63+3>>0]|0;
 $391 = $curr;
 _to_little_endian_buffer($391,4,1);
 $392 = $curr;
 $393 = ((($392)) + 4|0);
 $curr = $393;
 $394 = HEAP32[((((gb + (8409824) | 0)) + 8|0))>>2]|0;
 HEAP32[$x64>>2] = $394;
 $395 = $curr;
 ;HEAP8[$395>>0]=HEAP8[$x64>>0]|0;HEAP8[$395+1>>0]=HEAP8[$x64+1>>0]|0;HEAP8[$395+2>>0]=HEAP8[$x64+2>>0]|0;HEAP8[$395+3>>0]=HEAP8[$x64+3>>0]|0;
 $396 = $curr;
 _to_little_endian_buffer($396,4,1);
 $397 = $curr;
 $398 = ((($397)) + 4|0);
 $curr = $398;
 $399 = HEAP32[((((gb + (8409824) | 0)) + 12|0))>>2]|0;
 HEAP32[$x65>>2] = $399;
 $400 = $curr;
 ;HEAP8[$400>>0]=HEAP8[$x65>>0]|0;HEAP8[$400+1>>0]=HEAP8[$x65+1>>0]|0;HEAP8[$400+2>>0]=HEAP8[$x65+2>>0]|0;HEAP8[$400+3>>0]=HEAP8[$x65+3>>0]|0;
 $401 = $curr;
 _to_little_endian_buffer($401,4,1);
 $402 = $curr;
 $403 = ((($402)) + 4|0);
 $curr = $403;
 $404 = HEAP32[((((gb + (8409824) | 0)) + 16|0))>>2]|0;
 HEAP32[$x66>>2] = $404;
 $405 = $curr;
 ;HEAP8[$405>>0]=HEAP8[$x66>>0]|0;HEAP8[$405+1>>0]=HEAP8[$x66+1>>0]|0;HEAP8[$405+2>>0]=HEAP8[$x66+2>>0]|0;HEAP8[$405+3>>0]=HEAP8[$x66+3>>0]|0;
 $406 = $curr;
 _to_little_endian_buffer($406,4,1);
 $407 = $curr;
 $408 = ((($407)) + 4|0);
 $curr = $408;
 $409 = HEAP32[((((gb + (8409824) | 0)) + 20|0))>>2]|0;
 HEAP32[$x67>>2] = $409;
 $410 = $curr;
 ;HEAP8[$410>>0]=HEAP8[$x67>>0]|0;HEAP8[$410+1>>0]=HEAP8[$x67+1>>0]|0;HEAP8[$410+2>>0]=HEAP8[$x67+2>>0]|0;HEAP8[$410+3>>0]=HEAP8[$x67+3>>0]|0;
 $411 = $curr;
 _to_little_endian_buffer($411,4,1);
 $412 = $curr;
 $413 = ((($412)) + 4|0);
 $curr = $413;
 $414 = HEAP32[((((gb + (8409824) | 0)) + 24|0))>>2]|0;
 HEAP32[$x68>>2] = $414;
 $415 = $curr;
 ;HEAP8[$415>>0]=HEAP8[$x68>>0]|0;HEAP8[$415+1>>0]=HEAP8[$x68+1>>0]|0;HEAP8[$415+2>>0]=HEAP8[$x68+2>>0]|0;HEAP8[$415+3>>0]=HEAP8[$x68+3>>0]|0;
 $416 = $curr;
 _to_little_endian_buffer($416,4,1);
 $417 = $curr;
 $418 = ((($417)) + 4|0);
 $curr = $418;
 $419 = HEAP32[((((gb + (8409824) | 0)) + 28|0))>>2]|0;
 HEAP32[$x69>>2] = $419;
 $420 = $curr;
 ;HEAP8[$420>>0]=HEAP8[$x69>>0]|0;HEAP8[$420+1>>0]=HEAP8[$x69+1>>0]|0;HEAP8[$420+2>>0]=HEAP8[$x69+2>>0]|0;HEAP8[$420+3>>0]=HEAP8[$x69+3>>0]|0;
 $421 = $curr;
 _to_little_endian_buffer($421,4,1);
 $422 = $curr;
 $423 = ((($422)) + 4|0);
 $curr = $423;
 $424 = HEAP32[((((gb + (8409824) | 0)) + 32|0))>>2]|0;
 HEAP32[$x70>>2] = $424;
 $425 = $curr;
 ;HEAP8[$425>>0]=HEAP8[$x70>>0]|0;HEAP8[$425+1>>0]=HEAP8[$x70+1>>0]|0;HEAP8[$425+2>>0]=HEAP8[$x70+2>>0]|0;HEAP8[$425+3>>0]=HEAP8[$x70+3>>0]|0;
 $426 = $curr;
 _to_little_endian_buffer($426,4,1);
 $427 = $curr;
 $428 = ((($427)) + 4|0);
 $curr = $428;
 $429 = HEAP32[((((gb + (8409824) | 0)) + 36|0))>>2]|0;
 HEAP32[$x71>>2] = $429;
 $430 = $curr;
 ;HEAP8[$430>>0]=HEAP8[$x71>>0]|0;HEAP8[$430+1>>0]=HEAP8[$x71+1>>0]|0;HEAP8[$430+2>>0]=HEAP8[$x71+2>>0]|0;HEAP8[$430+3>>0]=HEAP8[$x71+3>>0]|0;
 $431 = $curr;
 _to_little_endian_buffer($431,4,1);
 $432 = $curr;
 $433 = ((($432)) + 4|0);
 $curr = $433;
 $434 = HEAP32[((((gb + (8409824) | 0)) + 40|0))>>2]|0;
 HEAP32[$x72>>2] = $434;
 $435 = $curr;
 ;HEAP8[$435>>0]=HEAP8[$x72>>0]|0;HEAP8[$435+1>>0]=HEAP8[$x72+1>>0]|0;HEAP8[$435+2>>0]=HEAP8[$x72+2>>0]|0;HEAP8[$435+3>>0]=HEAP8[$x72+3>>0]|0;
 $436 = $curr;
 _to_little_endian_buffer($436,4,1);
 $437 = $curr;
 $438 = ((($437)) + 4|0);
 $curr = $438;
 $439 = HEAP32[((((gb + (8409824) | 0)) + 44|0))>>2]|0;
 HEAP32[$x73>>2] = $439;
 $440 = $curr;
 ;HEAP8[$440>>0]=HEAP8[$x73>>0]|0;HEAP8[$440+1>>0]=HEAP8[$x73+1>>0]|0;HEAP8[$440+2>>0]=HEAP8[$x73+2>>0]|0;HEAP8[$440+3>>0]=HEAP8[$x73+3>>0]|0;
 $441 = $curr;
 _to_little_endian_buffer($441,4,1);
 $442 = $curr;
 $443 = ((($442)) + 4|0);
 $curr = $443;
 $444 = HEAP32[((((gb + (8409824) | 0)) + 48|0))>>2]|0;
 HEAP32[$x74>>2] = $444;
 $445 = $curr;
 ;HEAP8[$445>>0]=HEAP8[$x74>>0]|0;HEAP8[$445+1>>0]=HEAP8[$x74+1>>0]|0;HEAP8[$445+2>>0]=HEAP8[$x74+2>>0]|0;HEAP8[$445+3>>0]=HEAP8[$x74+3>>0]|0;
 $446 = $curr;
 _to_little_endian_buffer($446,4,1);
 $447 = $curr;
 $448 = ((($447)) + 4|0);
 $curr = $448;
 $449 = HEAP32[(gb + (8421480) | 0)>>2]|0;
 HEAP32[$x75>>2] = $449;
 $450 = $curr;
 ;HEAP8[$450>>0]=HEAP8[$x75>>0]|0;HEAP8[$450+1>>0]=HEAP8[$x75+1>>0]|0;HEAP8[$450+2>>0]=HEAP8[$x75+2>>0]|0;HEAP8[$450+3>>0]=HEAP8[$x75+3>>0]|0;
 $451 = $curr;
 _to_little_endian_buffer($451,4,1);
 $452 = $curr;
 $453 = ((($452)) + 4|0);
 $curr = $453;
 $454 = HEAP32[((((gb + (8421480) | 0)) + 4|0))>>2]|0;
 HEAP32[$x76>>2] = $454;
 $455 = $curr;
 ;HEAP8[$455>>0]=HEAP8[$x76>>0]|0;HEAP8[$455+1>>0]=HEAP8[$x76+1>>0]|0;HEAP8[$455+2>>0]=HEAP8[$x76+2>>0]|0;HEAP8[$455+3>>0]=HEAP8[$x76+3>>0]|0;
 $456 = $curr;
 _to_little_endian_buffer($456,4,1);
 $457 = $curr;
 $458 = ((($457)) + 4|0);
 $curr = $458;
 $459 = HEAP32[((((gb + (8421480) | 0)) + 8|0))>>2]|0;
 HEAP32[$x77>>2] = $459;
 $460 = $curr;
 ;HEAP8[$460>>0]=HEAP8[$x77>>0]|0;HEAP8[$460+1>>0]=HEAP8[$x77+1>>0]|0;HEAP8[$460+2>>0]=HEAP8[$x77+2>>0]|0;HEAP8[$460+3>>0]=HEAP8[$x77+3>>0]|0;
 $461 = $curr;
 _to_little_endian_buffer($461,4,1);
 $462 = $curr;
 $463 = ((($462)) + 4|0);
 $curr = $463;
 $464 = HEAP32[((((gb + (8421480) | 0)) + 12|0))>>2]|0;
 HEAP32[$x78>>2] = $464;
 $465 = $curr;
 ;HEAP8[$465>>0]=HEAP8[$x78>>0]|0;HEAP8[$465+1>>0]=HEAP8[$x78+1>>0]|0;HEAP8[$465+2>>0]=HEAP8[$x78+2>>0]|0;HEAP8[$465+3>>0]=HEAP8[$x78+3>>0]|0;
 $466 = $curr;
 _to_little_endian_buffer($466,4,1);
 $467 = $curr;
 $468 = ((($467)) + 4|0);
 $curr = $468;
 $469 = HEAP32[((((gb + (8421480) | 0)) + 16|0))>>2]|0;
 HEAP32[$x79>>2] = $469;
 $470 = $curr;
 ;HEAP8[$470>>0]=HEAP8[$x79>>0]|0;HEAP8[$470+1>>0]=HEAP8[$x79+1>>0]|0;HEAP8[$470+2>>0]=HEAP8[$x79+2>>0]|0;HEAP8[$470+3>>0]=HEAP8[$x79+3>>0]|0;
 $471 = $curr;
 _to_little_endian_buffer($471,4,1);
 $472 = $curr;
 $473 = ((($472)) + 4|0);
 $curr = $473;
 $474 = HEAP32[((((gb + (8421480) | 0)) + 20|0))>>2]|0;
 HEAP32[$x80>>2] = $474;
 $475 = $curr;
 ;HEAP8[$475>>0]=HEAP8[$x80>>0]|0;HEAP8[$475+1>>0]=HEAP8[$x80+1>>0]|0;HEAP8[$475+2>>0]=HEAP8[$x80+2>>0]|0;HEAP8[$475+3>>0]=HEAP8[$x80+3>>0]|0;
 $476 = $curr;
 _to_little_endian_buffer($476,4,1);
 $477 = $curr;
 $478 = ((($477)) + 4|0);
 $curr = $478;
 $479 = HEAP32[((((gb + (8421480) | 0)) + 24|0))>>2]|0;
 HEAP32[$x81>>2] = $479;
 $480 = $curr;
 ;HEAP8[$480>>0]=HEAP8[$x81>>0]|0;HEAP8[$480+1>>0]=HEAP8[$x81+1>>0]|0;HEAP8[$480+2>>0]=HEAP8[$x81+2>>0]|0;HEAP8[$480+3>>0]=HEAP8[$x81+3>>0]|0;
 $481 = $curr;
 _to_little_endian_buffer($481,4,1);
 $482 = $curr;
 $483 = ((($482)) + 4|0);
 $curr = $483;
 $484 = HEAP32[((((gb + (8421480) | 0)) + 28|0))>>2]|0;
 HEAP32[$x82>>2] = $484;
 $485 = $curr;
 ;HEAP8[$485>>0]=HEAP8[$x82>>0]|0;HEAP8[$485+1>>0]=HEAP8[$x82+1>>0]|0;HEAP8[$485+2>>0]=HEAP8[$x82+2>>0]|0;HEAP8[$485+3>>0]=HEAP8[$x82+3>>0]|0;
 $486 = $curr;
 _to_little_endian_buffer($486,4,1);
 $487 = $curr;
 $488 = ((($487)) + 4|0);
 $curr = $488;
 $489 = HEAP32[(gb + (8410672) | 0)>>2]|0;
 HEAP32[$x83>>2] = $489;
 $490 = $curr;
 ;HEAP8[$490>>0]=HEAP8[$x83>>0]|0;HEAP8[$490+1>>0]=HEAP8[$x83+1>>0]|0;HEAP8[$490+2>>0]=HEAP8[$x83+2>>0]|0;HEAP8[$490+3>>0]=HEAP8[$x83+3>>0]|0;
 $491 = $curr;
 _to_little_endian_buffer($491,4,1);
 $492 = $curr;
 $493 = ((($492)) + 4|0);
 $curr = $493;
 $494 = HEAP32[((((gb + (8410672) | 0)) + 4|0))>>2]|0;
 HEAP32[$x84>>2] = $494;
 $495 = $curr;
 ;HEAP8[$495>>0]=HEAP8[$x84>>0]|0;HEAP8[$495+1>>0]=HEAP8[$x84+1>>0]|0;HEAP8[$495+2>>0]=HEAP8[$x84+2>>0]|0;HEAP8[$495+3>>0]=HEAP8[$x84+3>>0]|0;
 $496 = $curr;
 _to_little_endian_buffer($496,4,1);
 $497 = $curr;
 $498 = ((($497)) + 4|0);
 $curr = $498;
 $499 = HEAP32[((((gb + (8410672) | 0)) + 16|0))>>2]|0;
 HEAP32[$x85>>2] = $499;
 $500 = $curr;
 ;HEAP8[$500>>0]=HEAP8[$x85>>0]|0;HEAP8[$500+1>>0]=HEAP8[$x85+1>>0]|0;HEAP8[$500+2>>0]=HEAP8[$x85+2>>0]|0;HEAP8[$500+3>>0]=HEAP8[$x85+3>>0]|0;
 $501 = $curr;
 _to_little_endian_buffer($501,4,1);
 $502 = $curr;
 $503 = ((($502)) + 4|0);
 $curr = $503;
 $504 = HEAP32[((((gb + (8410672) | 0)) + 24|0))>>2]|0;
 HEAP32[$x86>>2] = $504;
 $505 = $curr;
 ;HEAP8[$505>>0]=HEAP8[$x86>>0]|0;HEAP8[$505+1>>0]=HEAP8[$x86+1>>0]|0;HEAP8[$505+2>>0]=HEAP8[$x86+2>>0]|0;HEAP8[$505+3>>0]=HEAP8[$x86+3>>0]|0;
 $506 = $curr;
 _to_little_endian_buffer($506,4,1);
 $507 = $curr;
 $508 = ((($507)) + 4|0);
 $curr = $508;
 $i = 0;
 while(1) {
  $509 = $i;
  $510 = ($509>>>0)<(32);
  if (!($510)) {
   break;
  }
  $511 = $i;
  $512 = ((gb + (23106792) | 0) + (($511*52)|0)|0);
  $513 = ((($512)) + 18|0);
  $514 = HEAP8[$513>>0]|0;
  $515 = $514 << 24 >> 24;
  $516 = ($515|0)!=(0);
  if ($516) {
   $524 = 1;
  } else {
   $517 = $i;
   $518 = ((gb + (23106792) | 0) + (($517*52)|0)|0);
   $519 = ((($518)) + 26|0);
   $520 = HEAP8[$519>>0]|0;
   $521 = $520 << 24 >> 24;
   $522 = ($521|0)!=(0);
   $524 = $522;
  }
  $523 = $524&1;
  $EntryDefined = $523;
  $525 = $i;
  $526 = ((gb + (23106792) | 0) + (($525*52)|0)|0);
  $527 = HEAP16[$526>>1]|0;
  $528 = $527 << 16 >> 16;
  $529 = $528 << 13;
  $MyPageMask = $529;
  $530 = $i;
  $531 = ((gb + (23106792) | 0) + (($530*52)|0)|0);
  $532 = ((($531)) + 4|0);
  $533 = HEAP32[$532>>2]|0;
  $534 = $533 << 13;
  $535 = $i;
  $536 = ((gb + (23106792) | 0) + (($535*52)|0)|0);
  $537 = ((($536)) + 9|0);
  $538 = HEAP8[$537>>0]|0;
  $539 = $538&255;
  $540 = $534 | $539;
  $MyEntryHi = $540;
  $541 = $i;
  $542 = ((gb + (23106792) | 0) + (($541*52)|0)|0);
  $543 = ((($542)) + 12|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = $544 << 6;
  $546 = $i;
  $547 = ((gb + (23106792) | 0) + (($546*52)|0)|0);
  $548 = ((($547)) + 16|0);
  $549 = HEAP8[$548>>0]|0;
  $550 = $549 << 24 >> 24;
  $551 = $550 << 3;
  $552 = $545 | $551;
  $553 = $i;
  $554 = ((gb + (23106792) | 0) + (($553*52)|0)|0);
  $555 = ((($554)) + 17|0);
  $556 = HEAP8[$555>>0]|0;
  $557 = $556 << 24 >> 24;
  $558 = $557 << 2;
  $559 = $552 | $558;
  $560 = $i;
  $561 = ((gb + (23106792) | 0) + (($560*52)|0)|0);
  $562 = ((($561)) + 18|0);
  $563 = HEAP8[$562>>0]|0;
  $564 = $563 << 24 >> 24;
  $565 = $564 << 1;
  $566 = $559 | $565;
  $567 = $i;
  $568 = ((gb + (23106792) | 0) + (($567*52)|0)|0);
  $569 = ((($568)) + 8|0);
  $570 = HEAP8[$569>>0]|0;
  $571 = $570 << 24 >> 24;
  $572 = $566 | $571;
  $MyEntryLo0 = $572;
  $573 = $i;
  $574 = ((gb + (23106792) | 0) + (($573*52)|0)|0);
  $575 = ((($574)) + 20|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $576 << 6;
  $578 = $i;
  $579 = ((gb + (23106792) | 0) + (($578*52)|0)|0);
  $580 = ((($579)) + 24|0);
  $581 = HEAP8[$580>>0]|0;
  $582 = $581 << 24 >> 24;
  $583 = $582 << 3;
  $584 = $577 | $583;
  $585 = $i;
  $586 = ((gb + (23106792) | 0) + (($585*52)|0)|0);
  $587 = ((($586)) + 25|0);
  $588 = HEAP8[$587>>0]|0;
  $589 = $588 << 24 >> 24;
  $590 = $589 << 2;
  $591 = $584 | $590;
  $592 = $i;
  $593 = ((gb + (23106792) | 0) + (($592*52)|0)|0);
  $594 = ((($593)) + 26|0);
  $595 = HEAP8[$594>>0]|0;
  $596 = $595 << 24 >> 24;
  $597 = $596 << 1;
  $598 = $591 | $597;
  $599 = $i;
  $600 = ((gb + (23106792) | 0) + (($599*52)|0)|0);
  $601 = ((($600)) + 8|0);
  $602 = HEAP8[$601>>0]|0;
  $603 = $602 << 24 >> 24;
  $604 = $598 | $603;
  $MyEntryLo1 = $604;
  $605 = $EntryDefined;
  HEAP32[$x87>>2] = $605;
  $606 = $curr;
  ;HEAP8[$606>>0]=HEAP8[$x87>>0]|0;HEAP8[$606+1>>0]=HEAP8[$x87+1>>0]|0;HEAP8[$606+2>>0]=HEAP8[$x87+2>>0]|0;HEAP8[$606+3>>0]=HEAP8[$x87+3>>0]|0;
  $607 = $curr;
  _to_little_endian_buffer($607,4,1);
  $608 = $curr;
  $609 = ((($608)) + 4|0);
  $curr = $609;
  $610 = $MyPageMask;
  HEAP32[$x88>>2] = $610;
  $611 = $curr;
  ;HEAP8[$611>>0]=HEAP8[$x88>>0]|0;HEAP8[$611+1>>0]=HEAP8[$x88+1>>0]|0;HEAP8[$611+2>>0]=HEAP8[$x88+2>>0]|0;HEAP8[$611+3>>0]=HEAP8[$x88+3>>0]|0;
  $612 = $curr;
  _to_little_endian_buffer($612,4,1);
  $613 = $curr;
  $614 = ((($613)) + 4|0);
  $curr = $614;
  $615 = $MyEntryHi;
  HEAP32[$x89>>2] = $615;
  $616 = $curr;
  ;HEAP8[$616>>0]=HEAP8[$x89>>0]|0;HEAP8[$616+1>>0]=HEAP8[$x89+1>>0]|0;HEAP8[$616+2>>0]=HEAP8[$x89+2>>0]|0;HEAP8[$616+3>>0]=HEAP8[$x89+3>>0]|0;
  $617 = $curr;
  _to_little_endian_buffer($617,4,1);
  $618 = $curr;
  $619 = ((($618)) + 4|0);
  $curr = $619;
  $620 = $MyEntryLo0;
  HEAP32[$x90>>2] = $620;
  $621 = $curr;
  ;HEAP8[$621>>0]=HEAP8[$x90>>0]|0;HEAP8[$621+1>>0]=HEAP8[$x90+1>>0]|0;HEAP8[$621+2>>0]=HEAP8[$x90+2>>0]|0;HEAP8[$621+3>>0]=HEAP8[$x90+3>>0]|0;
  $622 = $curr;
  _to_little_endian_buffer($622,4,1);
  $623 = $curr;
  $624 = ((($623)) + 4|0);
  $curr = $624;
  $625 = $MyEntryLo1;
  HEAP32[$x91>>2] = $625;
  $626 = $curr;
  ;HEAP8[$626>>0]=HEAP8[$x91>>0]|0;HEAP8[$626+1>>0]=HEAP8[$x91+1>>0]|0;HEAP8[$626+2>>0]=HEAP8[$x91+2>>0]|0;HEAP8[$626+3>>0]=HEAP8[$x91+3>>0]|0;
  $627 = $curr;
  _to_little_endian_buffer($627,4,1);
  $628 = $curr;
  $629 = ((($628)) + 4|0);
  $curr = $629;
  $630 = $i;
  $631 = (($630) + 1)|0;
  $i = $631;
 }
 $632 = $curr;
 dest=$632; src=((((gb + (8410672) | 0)) + 28|0)); stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $633 = $curr;
 _to_little_endian_buffer($633,1,64);
 $634 = $curr;
 $635 = ((($634)) + 64|0);
 $curr = $635;
 $636 = $curr;
 $637 = $SaveRDRAMSize;
 $638 = $637<<2;
 $639 = (($638>>>0) / 4)&-1;
 _memcpy(($636|0),((gb + (21216) | 0)|0),($639|0))|0;
 $640 = $curr;
 $641 = $SaveRDRAMSize;
 $642 = (($641>>>0) / 4)&-1;
 _to_little_endian_buffer($640,4,$642);
 $643 = $SaveRDRAMSize;
 $644 = (($643>>>0) / 4)&-1;
 $645 = $644<<2;
 $646 = $curr;
 $647 = (($646) + ($645)|0);
 $curr = $647;
 $648 = $curr;
 _memcpy(($648|0),((gb + (8413160) | 0)|0),8192)|0;
 $649 = $curr;
 _to_little_endian_buffer($649,4,2048);
 $650 = $curr;
 $651 = ((($650)) + 8192|0);
 $curr = $651;
 $652 = $3;
 $653 = $2;
 $654 = $savestateData;
 $655 = $savestateSize;
 $656 = (mftCall_iiii($652|0,($653|0),($654|0),($655|0))|0);
 $657 = ($656|0)!=(0);
 if ($657) {
  $660 = $savestateData;
  _free(($660|0));
  $0 = 1;
  $661 = $0;
  STACKTOP = sp;return ($661|0);
 } else {
  $658 = $1;
  HEAP32[$vararg_buffer1>>2] = $658;
  _main_message(4,6,(gb + (15574) | 0),$vararg_buffer1);
  $659 = $savestateData;
  _free(($659|0));
  $0 = 0;
  $661 = $0;
  STACKTOP = sp;return ($661|0);
 }
 return (0)|0;
}
function _write_data_to_zip($zip,$buffer,$length) {
 $zip = $zip|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $zip;
 $1 = $buffer;
 $2 = $length;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_zipWriteInFileInZip($3,$4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $7&1;
 STACKTOP = sp;return ($8|0);
}
function _savestates_save_m64p_work($work) {
 $work = $work|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mptr = 0, $f = 0, $save = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $work;
 $2 = $0;
 $__mptr = $2;
 $3 = $__mptr;
 $4 = ((($3)) + -12|0);
 $1 = $4;
 $5 = $1;
 $save = $5;
 $6 = HEAP32[(gb + (8424296) | 0)>>2]|0;
 (_SDL_LockMutex(($6|0))|0);
 $7 = $save;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_gzopen(($8|0),((gb + (20964) | 0)|0))|0);
 $f = $9;
 $10 = $f;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $save;
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  _main_message(4,6,(gb + (15665) | 0),$vararg_buffer);
  $14 = $save;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  _free(($16|0));
  STACKTOP = sp;return;
 }
 $17 = $f;
 $18 = $save;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $save;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_gzwrite(($17|0),($20|0),($23|0))|0);
 $25 = $save;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24|0)!=($27|0);
 if ($28) {
  $29 = $save;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $30;
  _main_message(4,6,(gb + (15695) | 0),$vararg_buffer1);
  $31 = $f;
  (_gzclose(($31|0))|0);
  $32 = $save;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  _free(($34|0));
  STACKTOP = sp;return;
 } else {
  $35 = $f;
  (_gzclose(($35|0))|0);
  $36 = $save;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_namefrompath($37)|0);
  HEAP32[$vararg_buffer4>>2] = $38;
  _main_message(4,6,(gb + (15516) | 0),$vararg_buffer4);
  $39 = $save;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  _free(($41|0));
  $42 = $save;
  $43 = HEAP32[$42>>2]|0;
  _free(($43|0));
  $44 = $save;
  _free(($44|0));
  $45 = HEAP32[(gb + (8424296) | 0)>>2]|0;
  (_SDL_UnlockMutex(($45|0))|0);
  STACKTOP = sp;return;
 }
}
function _init_work($work,$func) {
 $work = $work|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $work;
 $1 = $func;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 _INIT_LIST_HEAD_427($3);
 $4 = $1;
 $5 = $0;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _INIT_LIST_HEAD_427($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = $0;
 $5 = $0;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _read_data_from_file($file,$buffer,$length) {
 $file = $file|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $buffer;
 $2 = $length;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = (_fread(($3|0),1,($4|0),($5|0))|0);
 $7 = $2;
 $8 = ($6|0)==($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _savestates_load_pj64($filepath,$handle,$read_func) {
 $filepath = $filepath|0;
 $handle = $handle|0;
 $read_func = $read_func|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FCR31 = 0, $MyEntryHi = 0, $MyEntryLo0 = 0, $MyEntryLo1 = 0, $MyPageMask = 0, $RomHeader = 0;
 var $SaveRDRAMSize = 0, $buffer = 0, $cp0_regs = 0, $curr = 0, $header = 0, $i = 0, $savestateData = 0, $savestateSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vi_timer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 176|0;
 $header = sp + 168|0;
 $RomHeader = sp + 104|0;
 $1 = $filepath;
 $2 = $handle;
 $3 = $read_func;
 $4 = (_r4300_cp0_regs()|0);
 $cp0_regs = $4;
 $5 = $3;
 $6 = $2;
 $7 = (mftCall_iiii($5|0,($6|0),($header|0),8)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  _main_message(4,6,(gb + (15765) | 0),$vararg_buffer);
  $0 = 0;
  $833 = $0;
  STACKTOP = sp;return ($833|0);
 }
 $curr = $header;
 $10 = $curr;
 $11 = (_memcmp(($10|0),((gb + (15570) | 0)|0),4)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  HEAP32[$vararg_buffer1>>2] = $13;
  _main_message(4,6,(gb + (15815) | 0),$vararg_buffer1);
  $0 = 0;
  $833 = $0;
  STACKTOP = sp;return ($833|0);
 }
 $14 = $curr;
 $15 = ((($14)) + 4|0);
 $curr = $15;
 $16 = $curr;
 _to_little_endian_buffer($16,4,1);
 $17 = $curr;
 $18 = ((($17)) + 4|0);
 $curr = $18;
 $19 = $curr;
 $20 = ((($19)) + -4|0);
 $21 = HEAP32[$20>>2]|0;
 $SaveRDRAMSize = $21;
 $22 = $SaveRDRAMSize;
 $23 = (($22) + 10068)|0;
 $savestateSize = $23;
 $24 = $savestateSize;
 $25 = (_malloc(($24|0))|0);
 $curr = $25;
 $savestateData = $25;
 $26 = $savestateData;
 $27 = ($26|0)==(0|0);
 if ($27) {
  _main_message(4,6,(gb + (15892) | 0),$vararg_buffer4);
  $0 = 0;
  $833 = $0;
  STACKTOP = sp;return ($833|0);
 }
 $28 = $3;
 $29 = $2;
 $30 = $savestateData;
 $31 = $savestateSize;
 $32 = (mftCall_iiii($28|0,($29|0),($30|0),($31|0))|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $34 = $1;
  HEAP32[$vararg_buffer6>>2] = $34;
  _main_message(4,6,(gb + (15927) | 0),$vararg_buffer6);
  $35 = $savestateData;
  _free(($35|0));
  $0 = 0;
  $833 = $0;
  STACKTOP = sp;return ($833|0);
 }
 $36 = $curr;
 _to_little_endian_buffer($36,4,16);
 $37 = $curr;
 $38 = ((($37)) + 64|0);
 $curr = $38;
 $39 = $curr;
 $40 = ((($39)) + -64|0);
 dest=$RomHeader; src=$40; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $41 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $42 = (_memcmp(($RomHeader|0),($41|0),64)|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  _main_message(4,6,(gb + (15985) | 0),$vararg_buffer9);
  $44 = $savestateData;
  _free(($44|0));
  $0 = 0;
  $833 = $0;
  STACKTOP = sp;return ($833|0);
 }
 $45 = $curr;
 _to_little_endian_buffer($45,4,1);
 $46 = $curr;
 $47 = ((($46)) + 4|0);
 $curr = $47;
 $48 = $curr;
 $49 = ((($48)) + -4|0);
 $50 = HEAP32[$49>>2]|0;
 $vi_timer = $50;
 $51 = $curr;
 _to_little_endian_buffer($51,4,1);
 $52 = $curr;
 $53 = ((($52)) + 4|0);
 $curr = $53;
 $54 = $curr;
 $55 = ((($54)) + -4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_r4300_last_addr()|0);
 HEAP32[$57>>2] = $56;
 $58 = (_r4300_regs()|0);
 $59 = $curr;
 _to_little_endian_buffer($59,8,32);
 $60 = $curr;
 $61 = ((($60)) + 256|0);
 $curr = $61;
 $62 = $curr;
 $63 = ((($62)) + -256|0);
 _memcpy(($58|0),($63|0),256)|0;
 $64 = (_r4300_cp1_regs()|0);
 $65 = $curr;
 _to_little_endian_buffer($65,8,32);
 $66 = $curr;
 $67 = ((($66)) + 256|0);
 $curr = $67;
 $68 = $curr;
 $69 = ((($68)) + -256|0);
 _memcpy(($64|0),($69|0),256)|0;
 $70 = $cp0_regs;
 $71 = $curr;
 _to_little_endian_buffer($71,4,32);
 $72 = $curr;
 $73 = ((($72)) + 128|0);
 $curr = $73;
 $74 = $curr;
 $75 = ((($74)) + -128|0);
 dest=$70; src=$75; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $76 = $cp0_regs;
 $77 = ((($76)) + 48|0);
 $78 = HEAP32[$77>>2]|0;
 _set_fpr_pointers($78);
 $79 = $cp0_regs;
 $80 = ((($79)) + 48|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 & 67108864;
 $83 = ($82|0)==(0);
 if ($83) {
  _shuffle_fpr_data(67108864,0);
 }
 $84 = $cp0_regs;
 $85 = ((($84)) + 36|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $vi_timer;
 $88 = (($87) + ($86))|0;
 $vi_timer = $88;
 $89 = $cp0_regs;
 $90 = ((($89)) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $vi_timer;
 $93 = ($91>>>0)<($92>>>0);
 if ($93) {
  $94 = $cp0_regs;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  $99 = $96;
 } else {
  $97 = $vi_timer;
  $99 = $97;
 }
 $98 = (_r4300_next_interrupt()|0);
 HEAP32[$98>>2] = $99;
 $100 = $vi_timer;
 HEAP32[((((gb + (8421560) | 0)) + 64|0))>>2] = $100;
 HEAP32[((((gb + (8421560) | 0)) + 56|0))>>2] = 0;
 HEAP8[$buffer>>0]=1&255;HEAP8[$buffer+1>>0]=(1>>8)&255;HEAP8[$buffer+2>>0]=(1>>16)&255;HEAP8[$buffer+3>>0]=1>>24;
 $101 = $vi_timer;
 $102 = ((($buffer)) + 4|0);
 HEAP8[$102>>0]=$101&255;HEAP8[$102+1>>0]=($101>>8)&255;HEAP8[$102+2>>0]=($101>>16)&255;HEAP8[$102+3>>0]=$101>>24;
 $103 = ((($buffer)) + 8|0);
 HEAP8[$103>>0]=2&255;HEAP8[$103+1>>0]=(2>>8)&255;HEAP8[$103+2>>0]=(2>>16)&255;HEAP8[$103+3>>0]=2>>24;
 $104 = $cp0_regs;
 $105 = ((($104)) + 44|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($buffer)) + 12|0);
 HEAP8[$107>>0]=$106&255;HEAP8[$107+1>>0]=($106>>8)&255;HEAP8[$107+2>>0]=($106>>16)&255;HEAP8[$107+3>>0]=$106>>24;
 $108 = ((($buffer)) + 16|0);
 HEAP8[$108>>0]=-1&255;HEAP8[$108+1>>0]=(-1>>8)&255;HEAP8[$108+2>>0]=(-1>>16)&255;HEAP8[$108+3>>0]=-1>>24;
 _load_eventqueue_infos($buffer);
 $109 = $curr;
 _to_little_endian_buffer($109,4,1);
 $110 = $curr;
 $111 = ((($110)) + 4|0);
 $curr = $111;
 $112 = $curr;
 $113 = ((($112)) + -4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (_r4300_cp1_fcr0()|0);
 HEAP32[$115>>2] = $114;
 $116 = $curr;
 $117 = ((($116)) + 120|0);
 $curr = $117;
 $118 = $curr;
 _to_little_endian_buffer($118,4,1);
 $119 = $curr;
 $120 = ((($119)) + 4|0);
 $curr = $120;
 $121 = $curr;
 $122 = ((($121)) + -4|0);
 $123 = HEAP32[$122>>2]|0;
 $FCR31 = $123;
 $124 = $FCR31;
 $125 = (_r4300_cp1_fcr31()|0);
 HEAP32[$125>>2] = $124;
 $126 = $FCR31;
 _update_x86_rounding_mode($126);
 $127 = $curr;
 _to_little_endian_buffer($127,8,1);
 $128 = $curr;
 $129 = ((($128)) + 8|0);
 $curr = $129;
 $130 = $curr;
 $131 = ((($130)) + -8|0);
 $132 = $131;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($132) + 4)|0;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = (_r4300_mult_hi()|0);
 $139 = $138;
 $140 = $139;
 HEAP32[$140>>2] = $134;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = $137;
 $143 = $curr;
 _to_little_endian_buffer($143,8,1);
 $144 = $curr;
 $145 = ((($144)) + 8|0);
 $curr = $145;
 $146 = $curr;
 $147 = ((($146)) + -8|0);
 $148 = $147;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = (_r4300_mult_lo()|0);
 $155 = $154;
 $156 = $155;
 HEAP32[$156>>2] = $150;
 $157 = (($155) + 4)|0;
 $158 = $157;
 HEAP32[$158>>2] = $153;
 $159 = $curr;
 _to_little_endian_buffer($159,4,1);
 $160 = $curr;
 $161 = ((($160)) + 4|0);
 $curr = $161;
 $162 = $curr;
 $163 = ((($162)) + -4|0);
 $164 = HEAP32[$163>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 32|0))>>2] = $164;
 $165 = $curr;
 _to_little_endian_buffer($165,4,1);
 $166 = $curr;
 $167 = ((($166)) + 4|0);
 $curr = $167;
 $168 = $curr;
 $169 = ((($168)) + -4|0);
 $170 = HEAP32[$169>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 36|0))>>2] = $170;
 $171 = $curr;
 _to_little_endian_buffer($171,4,1);
 $172 = $curr;
 $173 = ((($172)) + 4|0);
 $curr = $173;
 $174 = $curr;
 $175 = ((($174)) + -4|0);
 $176 = HEAP32[$175>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 40|0))>>2] = $176;
 $177 = $curr;
 _to_little_endian_buffer($177,4,1);
 $178 = $curr;
 $179 = ((($178)) + 4|0);
 $curr = $179;
 $180 = $curr;
 $181 = ((($180)) + -4|0);
 $182 = HEAP32[$181>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 44|0))>>2] = $182;
 $183 = $curr;
 _to_little_endian_buffer($183,4,1);
 $184 = $curr;
 $185 = ((($184)) + 4|0);
 $curr = $185;
 $186 = $curr;
 $187 = ((($186)) + -4|0);
 $188 = HEAP32[$187>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 48|0))>>2] = $188;
 $189 = $curr;
 _to_little_endian_buffer($189,4,1);
 $190 = $curr;
 $191 = ((($190)) + 4|0);
 $curr = $191;
 $192 = $curr;
 $193 = ((($192)) + -4|0);
 $194 = HEAP32[$193>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 52|0))>>2] = $194;
 $195 = $curr;
 _to_little_endian_buffer($195,4,1);
 $196 = $curr;
 $197 = ((($196)) + 4|0);
 $curr = $197;
 $198 = $curr;
 $199 = ((($198)) + -4|0);
 $200 = HEAP32[$199>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 56|0))>>2] = $200;
 $201 = $curr;
 _to_little_endian_buffer($201,4,1);
 $202 = $curr;
 $203 = ((($202)) + 4|0);
 $curr = $203;
 $204 = $curr;
 $205 = ((($204)) + -4|0);
 $206 = HEAP32[$205>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 60|0))>>2] = $206;
 $207 = $curr;
 _to_little_endian_buffer($207,4,1);
 $208 = $curr;
 $209 = ((($208)) + 4|0);
 $curr = $209;
 $210 = $curr;
 $211 = ((($210)) + -4|0);
 $212 = HEAP32[$211>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 64|0))>>2] = $212;
 $213 = $curr;
 _to_little_endian_buffer($213,4,1);
 $214 = $curr;
 $215 = ((($214)) + 4|0);
 $curr = $215;
 $216 = $curr;
 $217 = ((($216)) + -4|0);
 $218 = HEAP32[$217>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 68|0))>>2] = $218;
 $219 = $curr;
 _to_little_endian_buffer($219,4,1);
 $220 = $curr;
 $221 = ((($220)) + 4|0);
 $curr = $221;
 $222 = $curr;
 $223 = ((($222)) + -4|0);
 $224 = HEAP32[$223>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8192|0))>>2] = $224;
 $225 = $curr;
 _to_little_endian_buffer($225,4,1);
 $226 = $curr;
 $227 = ((($226)) + 4|0);
 $curr = $227;
 $228 = $curr;
 $229 = ((($228)) + -4|0);
 $230 = HEAP32[$229>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8196|0))>>2] = $230;
 $231 = $curr;
 _to_little_endian_buffer($231,4,1);
 $232 = $curr;
 $233 = ((($232)) + 4|0);
 $curr = $233;
 $234 = $curr;
 $235 = ((($234)) + -4|0);
 $236 = HEAP32[$235>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8200|0))>>2] = $236;
 $237 = $curr;
 _to_little_endian_buffer($237,4,1);
 $238 = $curr;
 $239 = ((($238)) + 4|0);
 $curr = $239;
 $240 = $curr;
 $241 = ((($240)) + -4|0);
 $242 = HEAP32[$241>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8204|0))>>2] = $242;
 $243 = $curr;
 _to_little_endian_buffer($243,4,1);
 $244 = $curr;
 $245 = ((($244)) + 4|0);
 $curr = $245;
 $246 = $curr;
 $247 = ((($246)) + -4|0);
 $248 = HEAP32[$247>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2] = $248;
 $249 = $curr;
 _to_little_endian_buffer($249,4,1);
 $250 = $curr;
 $251 = ((($250)) + 4|0);
 $curr = $251;
 $252 = $curr;
 $253 = ((($252)) + -4|0);
 $254 = HEAP32[$253>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8212|0))>>2] = $254;
 $255 = $curr;
 _to_little_endian_buffer($255,4,1);
 $256 = $curr;
 $257 = ((($256)) + 4|0);
 $curr = $257;
 $258 = $curr;
 $259 = ((($258)) + -4|0);
 $260 = HEAP32[$259>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8216|0))>>2] = $260;
 $261 = $curr;
 _to_little_endian_buffer($261,4,1);
 $262 = $curr;
 $263 = ((($262)) + 4|0);
 $curr = $263;
 $264 = $curr;
 $265 = ((($264)) + -4|0);
 $266 = HEAP32[$265>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8220|0))>>2] = $266;
 $267 = $curr;
 _to_little_endian_buffer($267,4,1);
 $268 = $curr;
 $269 = ((($268)) + 4|0);
 $curr = $269;
 $270 = $curr;
 $271 = ((($270)) + -4|0);
 $272 = HEAP32[$271>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8224|0))>>2] = $272;
 $273 = $curr;
 _to_little_endian_buffer($273,4,1);
 $274 = $curr;
 $275 = ((($274)) + 4|0);
 $curr = $275;
 $276 = $curr;
 $277 = ((($276)) + -4|0);
 $278 = HEAP32[$277>>2]|0;
 HEAP32[((((gb + (8413160) | 0)) + 8228|0))>>2] = $278;
 $279 = $curr;
 _to_little_endian_buffer($279,4,1);
 $280 = $curr;
 $281 = ((($280)) + 4|0);
 $curr = $281;
 $282 = $curr;
 $283 = ((($282)) + -4|0);
 $284 = HEAP32[$283>>2]|0;
 HEAP32[(gb + (8410952) | 0)>>2] = $284;
 $285 = $curr;
 _to_little_endian_buffer($285,4,1);
 $286 = $curr;
 $287 = ((($286)) + 4|0);
 $curr = $287;
 $288 = $curr;
 $289 = ((($288)) + -4|0);
 $290 = HEAP32[$289>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 4|0))>>2] = $290;
 $291 = $curr;
 _to_little_endian_buffer($291,4,1);
 $292 = $curr;
 $293 = ((($292)) + 4|0);
 $curr = $293;
 $294 = $curr;
 $295 = ((($294)) + -4|0);
 $296 = HEAP32[$295>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 8|0))>>2] = $296;
 $297 = $curr;
 _to_little_endian_buffer($297,4,1);
 $298 = $curr;
 $299 = ((($298)) + 4|0);
 $curr = $299;
 $300 = $curr;
 $301 = ((($300)) + -4|0);
 $302 = HEAP32[$301>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 12|0))>>2] = $302;
 $303 = $curr;
 _to_little_endian_buffer($303,4,1);
 $304 = $curr;
 $305 = ((($304)) + 4|0);
 $curr = $305;
 $306 = $curr;
 $307 = ((($306)) + -4|0);
 $308 = HEAP32[$307>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 16|0))>>2] = $308;
 $309 = $curr;
 _to_little_endian_buffer($309,4,1);
 $310 = $curr;
 $311 = ((($310)) + 4|0);
 $curr = $311;
 $312 = $curr;
 $313 = ((($312)) + -4|0);
 $314 = HEAP32[$313>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 20|0))>>2] = $314;
 $315 = $curr;
 _to_little_endian_buffer($315,4,1);
 $316 = $curr;
 $317 = ((($316)) + 4|0);
 $curr = $317;
 $318 = $curr;
 $319 = ((($318)) + -4|0);
 $320 = HEAP32[$319>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 24|0))>>2] = $320;
 $321 = $curr;
 _to_little_endian_buffer($321,4,1);
 $322 = $curr;
 $323 = ((($322)) + 4|0);
 $curr = $323;
 $324 = $curr;
 $325 = ((($324)) + -4|0);
 $326 = HEAP32[$325>>2]|0;
 HEAP32[((((gb + (8410952) | 0)) + 28|0))>>2] = $326;
 $327 = $curr;
 _to_little_endian_buffer($327,4,1);
 $328 = $curr;
 $329 = ((($328)) + 4|0);
 $curr = $329;
 $330 = $curr;
 _to_little_endian_buffer($330,4,1);
 $331 = $curr;
 $332 = ((($331)) + 4|0);
 $curr = $332;
 $333 = $curr;
 _to_little_endian_buffer($333,4,1);
 $334 = $curr;
 $335 = ((($334)) + 4|0);
 $curr = $335;
 $336 = $curr;
 $337 = ((($336)) + -4|0);
 $338 = HEAP32[$337>>2]|0;
 HEAP32[(gb + (8410936) | 0)>>2] = $338;
 $339 = $curr;
 _to_little_endian_buffer($339,4,1);
 $340 = $curr;
 $341 = ((($340)) + 4|0);
 $curr = $341;
 $342 = $curr;
 $343 = ((($342)) + -4|0);
 $344 = HEAP32[$343>>2]|0;
 HEAP32[((((gb + (8410936) | 0)) + 4|0))>>2] = $344;
 $345 = $curr;
 _to_little_endian_buffer($345,4,1);
 $346 = $curr;
 $347 = ((($346)) + 4|0);
 $curr = $347;
 $348 = $curr;
 $349 = ((($348)) + -4|0);
 $350 = HEAP32[$349>>2]|0;
 HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2] = $350;
 $351 = $curr;
 _to_little_endian_buffer($351,4,1);
 $352 = $curr;
 $353 = ((($352)) + 4|0);
 $curr = $353;
 $354 = $curr;
 $355 = ((($354)) + -4|0);
 $356 = HEAP32[$355>>2]|0;
 HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2] = $356;
 $357 = $curr;
 _to_little_endian_buffer($357,4,1);
 $358 = $curr;
 $359 = ((($358)) + 4|0);
 $curr = $359;
 $360 = $curr;
 $361 = ((($360)) + -4|0);
 $362 = HEAP32[$361>>2]|0;
 HEAP32[(gb + (8421560) | 0)>>2] = $362;
 $363 = $curr;
 _to_little_endian_buffer($363,4,1);
 $364 = $curr;
 $365 = ((($364)) + 4|0);
 $curr = $365;
 $366 = $curr;
 $367 = ((($366)) + -4|0);
 $368 = HEAP32[$367>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 4|0))>>2] = $368;
 $369 = $curr;
 _to_little_endian_buffer($369,4,1);
 $370 = $curr;
 $371 = ((($370)) + 4|0);
 $curr = $371;
 $372 = $curr;
 $373 = ((($372)) + -4|0);
 $374 = HEAP32[$373>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 8|0))>>2] = $374;
 $375 = $curr;
 _to_little_endian_buffer($375,4,1);
 $376 = $curr;
 $377 = ((($376)) + 4|0);
 $curr = $377;
 $378 = $curr;
 $379 = ((($378)) + -4|0);
 $380 = HEAP32[$379>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 12|0))>>2] = $380;
 $381 = $curr;
 _to_little_endian_buffer($381,4,1);
 $382 = $curr;
 $383 = ((($382)) + 4|0);
 $curr = $383;
 $384 = $curr;
 $385 = ((($384)) + -4|0);
 $386 = HEAP32[$385>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 16|0))>>2] = $386;
 $387 = $curr;
 _to_little_endian_buffer($387,4,1);
 $388 = $curr;
 $389 = ((($388)) + 4|0);
 $curr = $389;
 $390 = $curr;
 $391 = ((($390)) + -4|0);
 $392 = HEAP32[$391>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 20|0))>>2] = $392;
 $393 = $curr;
 _to_little_endian_buffer($393,4,1);
 $394 = $curr;
 $395 = ((($394)) + 4|0);
 $curr = $395;
 $396 = $curr;
 $397 = ((($396)) + -4|0);
 $398 = HEAP32[$397>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 24|0))>>2] = $398;
 $399 = $curr;
 _to_little_endian_buffer($399,4,1);
 $400 = $curr;
 $401 = ((($400)) + 4|0);
 $curr = $401;
 $402 = $curr;
 $403 = ((($402)) + -4|0);
 $404 = HEAP32[$403>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 28|0))>>2] = $404;
 $405 = $curr;
 _to_little_endian_buffer($405,4,1);
 $406 = $curr;
 $407 = ((($406)) + 4|0);
 $curr = $407;
 $408 = $curr;
 $409 = ((($408)) + -4|0);
 $410 = HEAP32[$409>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 32|0))>>2] = $410;
 $411 = $curr;
 _to_little_endian_buffer($411,4,1);
 $412 = $curr;
 $413 = ((($412)) + 4|0);
 $curr = $413;
 $414 = $curr;
 $415 = ((($414)) + -4|0);
 $416 = HEAP32[$415>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 36|0))>>2] = $416;
 $417 = $curr;
 _to_little_endian_buffer($417,4,1);
 $418 = $curr;
 $419 = ((($418)) + 4|0);
 $curr = $419;
 $420 = $curr;
 $421 = ((($420)) + -4|0);
 $422 = HEAP32[$421>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 40|0))>>2] = $422;
 $423 = $curr;
 _to_little_endian_buffer($423,4,1);
 $424 = $curr;
 $425 = ((($424)) + 4|0);
 $curr = $425;
 $426 = $curr;
 $427 = ((($426)) + -4|0);
 $428 = HEAP32[$427>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 44|0))>>2] = $428;
 $429 = $curr;
 _to_little_endian_buffer($429,4,1);
 $430 = $curr;
 $431 = ((($430)) + 4|0);
 $curr = $431;
 $432 = $curr;
 $433 = ((($432)) + -4|0);
 $434 = HEAP32[$433>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 48|0))>>2] = $434;
 $435 = $curr;
 _to_little_endian_buffer($435,4,1);
 $436 = $curr;
 $437 = ((($436)) + 4|0);
 $curr = $437;
 $438 = $curr;
 $439 = ((($438)) + -4|0);
 $440 = HEAP32[$439>>2]|0;
 HEAP32[((((gb + (8421560) | 0)) + 52|0))>>2] = $440;
 $441 = HEAP32[((((gb + (10521540) | 0)) + 40|0))>>2]|0;
 mftCall_v($441|0);
 $442 = HEAP32[((((gb + (10521540) | 0)) + 44|0))>>2]|0;
 mftCall_v($442|0);
 $443 = $curr;
 _to_little_endian_buffer($443,4,1);
 $444 = $curr;
 $445 = ((($444)) + 4|0);
 $curr = $445;
 $446 = $curr;
 $447 = ((($446)) + -4|0);
 $448 = HEAP32[$447>>2]|0;
 HEAP32[(gb + (8421404) | 0)>>2] = $448;
 $449 = $curr;
 _to_little_endian_buffer($449,4,1);
 $450 = $curr;
 $451 = ((($450)) + 4|0);
 $curr = $451;
 $452 = $curr;
 $453 = ((($452)) + -4|0);
 $454 = HEAP32[$453>>2]|0;
 HEAP32[((((gb + (8421404) | 0)) + 4|0))>>2] = $454;
 $455 = $curr;
 _to_little_endian_buffer($455,4,1);
 $456 = $curr;
 $457 = ((($456)) + 4|0);
 $curr = $457;
 $458 = $curr;
 $459 = ((($458)) + -4|0);
 $460 = HEAP32[$459>>2]|0;
 HEAP32[((((gb + (8421404) | 0)) + 8|0))>>2] = $460;
 $461 = $curr;
 _to_little_endian_buffer($461,4,1);
 $462 = $curr;
 $463 = ((($462)) + 4|0);
 $curr = $463;
 $464 = $curr;
 $465 = ((($464)) + -4|0);
 $466 = HEAP32[$465>>2]|0;
 HEAP32[((((gb + (8421404) | 0)) + 12|0))>>2] = $466;
 $467 = $curr;
 _to_little_endian_buffer($467,4,1);
 $468 = $curr;
 $469 = ((($468)) + 4|0);
 $curr = $469;
 $470 = $curr;
 $471 = ((($470)) + -4|0);
 $472 = HEAP32[$471>>2]|0;
 HEAP32[((((gb + (8421404) | 0)) + 16|0))>>2] = $472;
 $473 = $curr;
 _to_little_endian_buffer($473,4,1);
 $474 = $curr;
 $475 = ((($474)) + 4|0);
 $curr = $475;
 $476 = $curr;
 $477 = ((($476)) + -4|0);
 $478 = HEAP32[$477>>2]|0;
 HEAP32[((((gb + (8421404) | 0)) + 20|0))>>2] = $478;
 HEAP32[((((gb + (8421404) | 0)) + 48|0))>>2] = 1;
 $479 = $curr;
 _to_little_endian_buffer($479,4,1);
 $480 = $curr;
 $481 = ((($480)) + 4|0);
 $curr = $481;
 $482 = $curr;
 $483 = ((($482)) + -4|0);
 $484 = HEAP32[$483>>2]|0;
 HEAP32[(gb + (8409824) | 0)>>2] = $484;
 $485 = $curr;
 _to_little_endian_buffer($485,4,1);
 $486 = $curr;
 $487 = ((($486)) + 4|0);
 $curr = $487;
 $488 = $curr;
 $489 = ((($488)) + -4|0);
 $490 = HEAP32[$489>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 4|0))>>2] = $490;
 $491 = $curr;
 _to_little_endian_buffer($491,4,1);
 $492 = $curr;
 $493 = ((($492)) + 4|0);
 $curr = $493;
 $494 = $curr;
 $495 = ((($494)) + -4|0);
 $496 = HEAP32[$495>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 8|0))>>2] = $496;
 $497 = $curr;
 _to_little_endian_buffer($497,4,1);
 $498 = $curr;
 $499 = ((($498)) + 4|0);
 $curr = $499;
 $500 = $curr;
 $501 = ((($500)) + -4|0);
 $502 = HEAP32[$501>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 12|0))>>2] = $502;
 $503 = $curr;
 _to_little_endian_buffer($503,4,1);
 $504 = $curr;
 $505 = ((($504)) + 4|0);
 $curr = $505;
 $506 = $curr;
 $507 = ((($506)) + -4|0);
 $508 = HEAP32[$507>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 16|0))>>2] = $508;
 $509 = $curr;
 _to_little_endian_buffer($509,4,1);
 $510 = $curr;
 $511 = ((($510)) + 4|0);
 $curr = $511;
 $512 = $curr;
 $513 = ((($512)) + -4|0);
 $514 = HEAP32[$513>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 20|0))>>2] = $514;
 $515 = $curr;
 _to_little_endian_buffer($515,4,1);
 $516 = $curr;
 $517 = ((($516)) + 4|0);
 $curr = $517;
 $518 = $curr;
 $519 = ((($518)) + -4|0);
 $520 = HEAP32[$519>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 24|0))>>2] = $520;
 $521 = $curr;
 _to_little_endian_buffer($521,4,1);
 $522 = $curr;
 $523 = ((($522)) + 4|0);
 $curr = $523;
 $524 = $curr;
 $525 = ((($524)) + -4|0);
 $526 = HEAP32[$525>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 28|0))>>2] = $526;
 $527 = $curr;
 _to_little_endian_buffer($527,4,1);
 $528 = $curr;
 $529 = ((($528)) + 4|0);
 $curr = $529;
 $530 = $curr;
 $531 = ((($530)) + -4|0);
 $532 = HEAP32[$531>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 32|0))>>2] = $532;
 $533 = $curr;
 _to_little_endian_buffer($533,4,1);
 $534 = $curr;
 $535 = ((($534)) + 4|0);
 $curr = $535;
 $536 = $curr;
 $537 = ((($536)) + -4|0);
 $538 = HEAP32[$537>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 36|0))>>2] = $538;
 $539 = $curr;
 _to_little_endian_buffer($539,4,1);
 $540 = $curr;
 $541 = ((($540)) + 4|0);
 $curr = $541;
 $542 = $curr;
 $543 = ((($542)) + -4|0);
 $544 = HEAP32[$543>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 40|0))>>2] = $544;
 $545 = $curr;
 _to_little_endian_buffer($545,4,1);
 $546 = $curr;
 $547 = ((($546)) + 4|0);
 $curr = $547;
 $548 = $curr;
 $549 = ((($548)) + -4|0);
 $550 = HEAP32[$549>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 44|0))>>2] = $550;
 $551 = $curr;
 _to_little_endian_buffer($551,4,1);
 $552 = $curr;
 $553 = ((($552)) + 4|0);
 $curr = $553;
 $554 = $curr;
 $555 = ((($554)) + -4|0);
 $556 = HEAP32[$555>>2]|0;
 HEAP32[((((gb + (8409824) | 0)) + 48|0))>>2] = $556;
 $557 = $3;
 $558 = $2;
 (mftCall_iiii($557|0,($558|0),((gb + (8409824) | 0)|0),52)|0);
 $559 = $curr;
 _to_little_endian_buffer($559,4,1);
 $560 = $curr;
 $561 = ((($560)) + 4|0);
 $curr = $561;
 $562 = $curr;
 $563 = ((($562)) + -4|0);
 $564 = HEAP32[$563>>2]|0;
 HEAP32[(gb + (8421480) | 0)>>2] = $564;
 $565 = $curr;
 _to_little_endian_buffer($565,4,1);
 $566 = $curr;
 $567 = ((($566)) + 4|0);
 $curr = $567;
 $568 = $curr;
 $569 = ((($568)) + -4|0);
 $570 = HEAP32[$569>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 4|0))>>2] = $570;
 $571 = $curr;
 _to_little_endian_buffer($571,4,1);
 $572 = $curr;
 $573 = ((($572)) + 4|0);
 $curr = $573;
 $574 = $curr;
 $575 = ((($574)) + -4|0);
 $576 = HEAP32[$575>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 8|0))>>2] = $576;
 $577 = $curr;
 _to_little_endian_buffer($577,4,1);
 $578 = $curr;
 $579 = ((($578)) + 4|0);
 $curr = $579;
 $580 = $curr;
 $581 = ((($580)) + -4|0);
 $582 = HEAP32[$581>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 12|0))>>2] = $582;
 $583 = $curr;
 _to_little_endian_buffer($583,4,1);
 $584 = $curr;
 $585 = ((($584)) + 4|0);
 $curr = $585;
 $586 = $curr;
 $587 = ((($586)) + -4|0);
 $588 = HEAP32[$587>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 16|0))>>2] = $588;
 $589 = $curr;
 _to_little_endian_buffer($589,4,1);
 $590 = $curr;
 $591 = ((($590)) + 4|0);
 $curr = $591;
 $592 = $curr;
 $593 = ((($592)) + -4|0);
 $594 = HEAP32[$593>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 20|0))>>2] = $594;
 $595 = $curr;
 _to_little_endian_buffer($595,4,1);
 $596 = $curr;
 $597 = ((($596)) + 4|0);
 $curr = $597;
 $598 = $curr;
 $599 = ((($598)) + -4|0);
 $600 = HEAP32[$599>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 24|0))>>2] = $600;
 $601 = $curr;
 _to_little_endian_buffer($601,4,1);
 $602 = $curr;
 $603 = ((($602)) + 4|0);
 $curr = $603;
 $604 = $curr;
 $605 = ((($604)) + -4|0);
 $606 = HEAP32[$605>>2]|0;
 HEAP32[((((gb + (8421480) | 0)) + 28|0))>>2] = $606;
 $607 = $curr;
 _to_little_endian_buffer($607,4,1);
 $608 = $curr;
 $609 = ((($608)) + 4|0);
 $curr = $609;
 $610 = $curr;
 $611 = ((($610)) + -4|0);
 $612 = HEAP32[$611>>2]|0;
 HEAP32[(gb + (8410672) | 0)>>2] = $612;
 $613 = $curr;
 _to_little_endian_buffer($613,4,1);
 $614 = $curr;
 $615 = ((($614)) + 4|0);
 $curr = $615;
 $616 = $curr;
 $617 = ((($616)) + -4|0);
 $618 = HEAP32[$617>>2]|0;
 HEAP32[((((gb + (8410672) | 0)) + 4|0))>>2] = $618;
 $619 = $curr;
 _to_little_endian_buffer($619,4,1);
 $620 = $curr;
 $621 = ((($620)) + 4|0);
 $curr = $621;
 $622 = $curr;
 $623 = ((($622)) + -4|0);
 $624 = HEAP32[$623>>2]|0;
 HEAP32[((((gb + (8410672) | 0)) + 16|0))>>2] = $624;
 $625 = $curr;
 _to_little_endian_buffer($625,4,1);
 $626 = $curr;
 $627 = ((($626)) + 4|0);
 $curr = $627;
 $628 = $curr;
 $629 = ((($628)) + -4|0);
 $630 = HEAP32[$629>>2]|0;
 HEAP32[((((gb + (8410672) | 0)) + 24|0))>>2] = $630;
 _memset(((gb + (14718184) | 0)|0),0,4194304)|0;
 _memset(((gb + (18912488) | 0)|0),0,4194304)|0;
 $i = 0;
 while(1) {
  $631 = $i;
  $632 = ($631|0)<(32);
  $633 = $curr;
  if (!($632)) {
   break;
  }
  _to_little_endian_buffer($633,4,1);
  $634 = $curr;
  $635 = ((($634)) + 4|0);
  $curr = $635;
  $636 = $curr;
  _to_little_endian_buffer($636,4,1);
  $637 = $curr;
  $638 = ((($637)) + 4|0);
  $curr = $638;
  $639 = $curr;
  $640 = ((($639)) + -4|0);
  $641 = HEAP32[$640>>2]|0;
  $MyPageMask = $641;
  $642 = $curr;
  _to_little_endian_buffer($642,4,1);
  $643 = $curr;
  $644 = ((($643)) + 4|0);
  $curr = $644;
  $645 = $curr;
  $646 = ((($645)) + -4|0);
  $647 = HEAP32[$646>>2]|0;
  $MyEntryHi = $647;
  $648 = $curr;
  _to_little_endian_buffer($648,4,1);
  $649 = $curr;
  $650 = ((($649)) + 4|0);
  $curr = $650;
  $651 = $curr;
  $652 = ((($651)) + -4|0);
  $653 = HEAP32[$652>>2]|0;
  $MyEntryLo0 = $653;
  $654 = $curr;
  _to_little_endian_buffer($654,4,1);
  $655 = $curr;
  $656 = ((($655)) + 4|0);
  $curr = $656;
  $657 = $curr;
  $658 = ((($657)) + -4|0);
  $659 = HEAP32[$658>>2]|0;
  $MyEntryLo1 = $659;
  $660 = $MyEntryLo0;
  $661 = $MyEntryLo1;
  $662 = $660 & $661;
  $663 = $662 & 1;
  $664 = $663&255;
  $665 = $i;
  $666 = ((gb + (23106792) | 0) + (($665*52)|0)|0);
  $667 = ((($666)) + 8|0);
  HEAP8[$667>>0] = $664;
  $668 = $MyEntryLo0;
  $669 = $668 & 1073741760;
  $670 = $669 >>> 6;
  $671 = $i;
  $672 = ((gb + (23106792) | 0) + (($671*52)|0)|0);
  $673 = ((($672)) + 12|0);
  HEAP32[$673>>2] = $670;
  $674 = $MyEntryLo1;
  $675 = $674 & 1073741760;
  $676 = $675 >>> 6;
  $677 = $i;
  $678 = ((gb + (23106792) | 0) + (($677*52)|0)|0);
  $679 = ((($678)) + 20|0);
  HEAP32[$679>>2] = $676;
  $680 = $MyEntryLo0;
  $681 = $680 & 56;
  $682 = $681 >>> 3;
  $683 = $682&255;
  $684 = $i;
  $685 = ((gb + (23106792) | 0) + (($684*52)|0)|0);
  $686 = ((($685)) + 16|0);
  HEAP8[$686>>0] = $683;
  $687 = $MyEntryLo1;
  $688 = $687 & 56;
  $689 = $688 >>> 3;
  $690 = $689&255;
  $691 = $i;
  $692 = ((gb + (23106792) | 0) + (($691*52)|0)|0);
  $693 = ((($692)) + 24|0);
  HEAP8[$693>>0] = $690;
  $694 = $MyEntryLo0;
  $695 = $694 & 4;
  $696 = $695 >>> 2;
  $697 = $696&255;
  $698 = $i;
  $699 = ((gb + (23106792) | 0) + (($698*52)|0)|0);
  $700 = ((($699)) + 17|0);
  HEAP8[$700>>0] = $697;
  $701 = $MyEntryLo1;
  $702 = $701 & 4;
  $703 = $702 >>> 2;
  $704 = $703&255;
  $705 = $i;
  $706 = ((gb + (23106792) | 0) + (($705*52)|0)|0);
  $707 = ((($706)) + 25|0);
  HEAP8[$707>>0] = $704;
  $708 = $MyEntryLo0;
  $709 = $708 & 2;
  $710 = $709 >>> 1;
  $711 = $710&255;
  $712 = $i;
  $713 = ((gb + (23106792) | 0) + (($712*52)|0)|0);
  $714 = ((($713)) + 18|0);
  HEAP8[$714>>0] = $711;
  $715 = $MyEntryLo1;
  $716 = $715 & 2;
  $717 = $716 >>> 1;
  $718 = $717&255;
  $719 = $i;
  $720 = ((gb + (23106792) | 0) + (($719*52)|0)|0);
  $721 = ((($720)) + 26|0);
  HEAP8[$721>>0] = $718;
  $722 = $MyEntryHi;
  $723 = $722 & 255;
  $724 = $723&255;
  $725 = $i;
  $726 = ((gb + (23106792) | 0) + (($725*52)|0)|0);
  $727 = ((($726)) + 9|0);
  HEAP8[$727>>0] = $724;
  $728 = $MyEntryHi;
  $729 = $728 & -8192;
  $730 = $729 >>> 13;
  $731 = $i;
  $732 = ((gb + (23106792) | 0) + (($731*52)|0)|0);
  $733 = ((($732)) + 4|0);
  HEAP32[$733>>2] = $730;
  $734 = $MyPageMask;
  $735 = $734 & 33546240;
  $736 = $735 >>> 13;
  $737 = $736&65535;
  $738 = $i;
  $739 = ((gb + (23106792) | 0) + (($738*52)|0)|0);
  HEAP16[$739>>1] = $737;
  $740 = $i;
  $741 = ((gb + (23106792) | 0) + (($740*52)|0)|0);
  $742 = ((($741)) + 4|0);
  $743 = HEAP32[$742>>2]|0;
  $744 = $743 << 13;
  $745 = $i;
  $746 = ((gb + (23106792) | 0) + (($745*52)|0)|0);
  $747 = ((($746)) + 28|0);
  HEAP32[$747>>2] = $744;
  $748 = $i;
  $749 = ((gb + (23106792) | 0) + (($748*52)|0)|0);
  $750 = ((($749)) + 28|0);
  $751 = HEAP32[$750>>2]|0;
  $752 = $i;
  $753 = ((gb + (23106792) | 0) + (($752*52)|0)|0);
  $754 = HEAP16[$753>>1]|0;
  $755 = $754 << 16 >> 16;
  $756 = $755 << 12;
  $757 = (($751) + ($756))|0;
  $758 = (($757) + 4095)|0;
  $759 = $i;
  $760 = ((gb + (23106792) | 0) + (($759*52)|0)|0);
  $761 = ((($760)) + 32|0);
  HEAP32[$761>>2] = $758;
  $762 = $i;
  $763 = ((gb + (23106792) | 0) + (($762*52)|0)|0);
  $764 = ((($763)) + 12|0);
  $765 = HEAP32[$764>>2]|0;
  $766 = $765 << 12;
  $767 = $i;
  $768 = ((gb + (23106792) | 0) + (($767*52)|0)|0);
  $769 = ((($768)) + 36|0);
  HEAP32[$769>>2] = $766;
  $770 = $i;
  $771 = ((gb + (23106792) | 0) + (($770*52)|0)|0);
  $772 = ((($771)) + 32|0);
  $773 = HEAP32[$772>>2]|0;
  $774 = (($773) + 1)|0;
  $775 = $i;
  $776 = ((gb + (23106792) | 0) + (($775*52)|0)|0);
  $777 = ((($776)) + 40|0);
  HEAP32[$777>>2] = $774;
  $778 = $i;
  $779 = ((gb + (23106792) | 0) + (($778*52)|0)|0);
  $780 = ((($779)) + 40|0);
  $781 = HEAP32[$780>>2]|0;
  $782 = $i;
  $783 = ((gb + (23106792) | 0) + (($782*52)|0)|0);
  $784 = HEAP16[$783>>1]|0;
  $785 = $784 << 16 >> 16;
  $786 = $785 << 12;
  $787 = (($781) + ($786))|0;
  $788 = (($787) + 4095)|0;
  $789 = $i;
  $790 = ((gb + (23106792) | 0) + (($789*52)|0)|0);
  $791 = ((($790)) + 44|0);
  HEAP32[$791>>2] = $788;
  $792 = $i;
  $793 = ((gb + (23106792) | 0) + (($792*52)|0)|0);
  $794 = ((($793)) + 20|0);
  $795 = HEAP32[$794>>2]|0;
  $796 = $795 << 12;
  $797 = $i;
  $798 = ((gb + (23106792) | 0) + (($797*52)|0)|0);
  $799 = ((($798)) + 48|0);
  HEAP32[$799>>2] = $796;
  $800 = $i;
  $801 = ((gb + (23106792) | 0) + (($800*52)|0)|0);
  _tlb_map($801);
  $802 = $i;
  $803 = (($802) + 1)|0;
  $i = $803;
 }
 _to_little_endian_buffer($633,1,64);
 $804 = $curr;
 $805 = ((($804)) + 64|0);
 $curr = $805;
 $806 = $curr;
 $807 = ((($806)) + -64|0);
 dest=((((gb + (8410672) | 0)) + 28|0)); src=$807; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _memset(((gb + (21216) | 0)|0),0,8388608)|0;
 $808 = $curr;
 $809 = $SaveRDRAMSize;
 $810 = (($809>>>0) / 4)&-1;
 _to_little_endian_buffer($808,4,$810);
 $811 = $SaveRDRAMSize;
 $812 = (($811>>>0) / 4)&-1;
 $813 = $812<<2;
 $814 = $curr;
 $815 = (($814) + ($813)|0);
 $curr = $815;
 $816 = $curr;
 $817 = $SaveRDRAMSize;
 $818 = (($817>>>0) / 4)&-1;
 $819 = $818<<2;
 $820 = (0 - ($819))|0;
 $821 = (($816) + ($820)|0);
 $822 = $SaveRDRAMSize;
 $823 = $822<<2;
 $824 = (($823>>>0) / 4)&-1;
 _memcpy(((gb + (21216) | 0)|0),($821|0),($824|0))|0;
 $825 = $curr;
 _to_little_endian_buffer($825,4,2048);
 $826 = $curr;
 $827 = ((($826)) + 8192|0);
 $curr = $827;
 $828 = $curr;
 $829 = ((($828)) + -8192|0);
 _memcpy(((gb + (8413160) | 0)|0),($829|0),8192)|0;
 _init_flashram(((((gb + (8409824) | 0)) + 64|0)));
 $830 = (_r4300_last_addr()|0);
 $831 = HEAP32[$830>>2]|0;
 _savestates_load_set_pc($831);
 $832 = $savestateData;
 _free(($832|0));
 $0 = 1;
 $833 = $0;
 STACKTOP = sp;return ($833|0);
}
function _read_data_from_zip($zip,$buffer,$length) {
 $zip = $zip|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $zip;
 $1 = $buffer;
 $2 = $length;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_unzReadCurrentFile($3,$4,$5)|0);
 $7 = $2;
 $8 = ($6|0)==($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _sdl_keysym2scancode($keysym) {
 $keysym = $keysym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $keysym;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3>>>0)>=(323);
 if ($4) {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $5 = $1;
  $6 = $5&65535;
  $7 = ((gb + (3704) | 0) + ($6<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _sdl_scancode2keysym($scancode) {
 $scancode = $scancode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $scancode;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3>>>0)>=(285);
 if ($4) {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $5 = $1;
  $6 = $5&65535;
  $7 = ((gb + (4350) | 0) + ($6<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _open_sra_file($sra,$filename) {
 $sra = $sra|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $sra;
 $1 = $filename;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 32768|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = ((($5)) + 32768|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (_read_from_file($7,$8,32768)|0);
 switch ($9|0) {
 case 1:  {
  $10 = $0;
  $11 = ((($10)) + 32768|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(5,(gb + (16454) | 0),$vararg_buffer);
  $13 = $0;
  _format_sram($13);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $14 = $0;
  $15 = ((($14)) + 32768|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  _DebugMessage(2,(gb + (16495) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _close_sra_file($sra) {
 $sra = $sra|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sra;
 $1 = $0;
 $2 = ((($1)) + 32768|0);
 $3 = HEAP32[$2>>2]|0;
 _free(($3|0));
 STACKTOP = sp;return;
}
function _sra_file_ptr($sra) {
 $sra = $sra|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sra;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _save_sra_file($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sra = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $opaque;
 $1 = $0;
 $sra = $1;
 $2 = $sra;
 $3 = ((($2)) + 32768|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $sra;
 $6 = (_write_to_file($4,$5,32768)|0);
 switch ($6|0) {
 case 1:  {
  $7 = $sra;
  $8 = ((($7)) + 32768|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _DebugMessage(2,(gb + (16525) | 0),$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $10 = $sra;
  $11 = ((($10)) + 32768|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  _DebugMessage(2,(gb + (16566) | 0),$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _workqueue_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $thread = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 ;HEAP32[(gb + (8424300) | 0)>>2]=0|0;HEAP32[(gb + (8424300) | 0)+4>>2]=0|0;HEAP32[(gb + (8424300) | 0)+8>>2]=0|0;HEAP32[(gb + (8424300) | 0)+12>>2]=0|0;HEAP32[(gb + (8424300) | 0)+16>>2]=0|0;HEAP32[(gb + (8424300) | 0)+20>>2]=0|0;HEAP32[(gb + (8424300) | 0)+24>>2]=0|0;
 _INIT_LIST_HEAD_473((gb + (8424300) | 0));
 _INIT_LIST_HEAD_473(((((gb + (8424300) | 0)) + 8|0)));
 _INIT_LIST_HEAD_473(((((gb + (8424300) | 0)) + 16|0)));
 $1 = (_SDL_CreateMutex()|0);
 HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2] = $1;
 $2 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  _DebugMessage(1,(gb + (16597) | 0),$vararg_buffer);
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $4 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
 (_SDL_LockMutex(($4|0))|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(1);
  if (!($6)) {
   label = 12;
   break;
  }
  $7 = (_malloc(24)|0);
  $thread = $7;
  $8 = $thread;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $11 = $thread;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;HEAP32[$11+20>>2]=0|0;
  $12 = $thread;
  $13 = ((($12)) + 16|0);
  _list_add($13,((((gb + (8424300) | 0)) + 16|0)));
  $14 = $thread;
  $15 = ((($14)) + 8|0);
  _INIT_LIST_HEAD_473($15);
  $16 = (_SDL_CreateCond()|0);
  $17 = $thread;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = $thread;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   label = 8;
   break;
  }
  $24 = $thread;
  $25 = (_SDL_CreateThread(((fb + (521) | 0)|0),((gb + (16740) | 0)|0),($24|0))|0);
  $26 = $thread;
  HEAP32[$26>>2] = $25;
  $27 = $thread;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   label = 10;
   break;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 6) {
  _DebugMessage(1,(gb + (16635) | 0),$vararg_buffer1);
  $10 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($10|0))|0);
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 8) {
  _DebugMessage(1,(gb + (16685) | 0),$vararg_buffer3);
  $23 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($23|0))|0);
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 10) {
  _DebugMessage(1,(gb + (16747) | 0),$vararg_buffer5);
  $30 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($30|0))|0);
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 12) {
  $33 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($33|0))|0);
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _workqueue_shutdown() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__mptr = 0, $__mptr1 = 0, $__mptr2 = 0, $i = 0, $safe = 0, $status = 0, $thread = 0, $vararg_buffer = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $status = sp + 40|0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(1);
  if (!($4)) {
   break;
  }
  $5 = (_malloc(12)|0);
  $work = $5;
  $6 = $work;
  _init_work_479($6,(fb + (522) | 0));
  $7 = $work;
  (_queue_work($7)|0);
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 $10 = HEAP32[((((gb + (8424300) | 0)) + 20|0))>>2]|0;
 $__mptr = $10;
 $11 = $__mptr;
 $12 = ((($11)) + -16|0);
 $0 = $12;
 $13 = $0;
 $thread = $13;
 $14 = $thread;
 $15 = ((($14)) + 16|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $__mptr1 = $17;
 $18 = $__mptr1;
 $19 = ((($18)) + -16|0);
 $1 = $19;
 $20 = $1;
 $safe = $20;
 while(1) {
  $21 = $thread;
  $22 = ((($21)) + 16|0);
  $23 = ($22|0)!=(((((gb + (8424300) | 0)) + 16|0))|0);
  if (!($23)) {
   break;
  }
  $24 = $thread;
  $25 = ((($24)) + 16|0);
  _list_del_480($25);
  $26 = $thread;
  $27 = HEAP32[$26>>2]|0;
  _SDL_WaitThread(($27|0),($status|0));
  $28 = $thread;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  _SDL_DestroyCond(($30|0));
  $31 = $thread;
  _free(($31|0));
  $32 = $safe;
  $thread = $32;
  $33 = $safe;
  $34 = ((($33)) + 16|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $__mptr2 = $36;
  $37 = $__mptr2;
  $38 = ((($37)) + -16|0);
  $2 = $38;
  $39 = $2;
  $safe = $39;
 }
 $40 = (_list_empty_481((gb + (8424300) | 0))|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  _SDL_DestroyMutex(($42|0));
  STACKTOP = sp;return;
 }
 _DebugMessage(2,(gb + (16789) | 0),$vararg_buffer);
 $42 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
 _SDL_DestroyMutex(($42|0));
 STACKTOP = sp;return;
}
function _queue_work($work) {
 $work = $work|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mptr = 0, $thread = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $work;
 $2 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
 (_SDL_LockMutex(($2|0))|0);
 $3 = $0;
 $4 = ((($3)) + 4|0);
 _list_add_tail_483($4,(gb + (8424300) | 0));
 $5 = (_list_empty_481(((((gb + (8424300) | 0)) + 8|0)))|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $16 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($16|0))|0);
  STACKTOP = sp;return 0;
 }
 $7 = HEAP32[((((gb + (8424300) | 0)) + 12|0))>>2]|0;
 $__mptr = $7;
 $8 = $__mptr;
 $9 = ((($8)) + -8|0);
 $1 = $9;
 $10 = $1;
 $thread = $10;
 $11 = $thread;
 $12 = ((($11)) + 8|0);
 _list_del_init($12);
 $13 = $thread;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 (_SDL_CondSignal(($15|0))|0);
 $16 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
 (_SDL_UnlockMutex(($16|0))|0);
 STACKTOP = sp;return 0;
}
function _INIT_LIST_HEAD_473($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = $0;
 $5 = $0;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _list_add($new_item,$head) {
 $new_item = $new_item|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $new_item;
 $1 = $head;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $next = $4;
 $5 = $0;
 $6 = $next;
 HEAP32[$6>>2] = $5;
 $7 = $next;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = $0;
 HEAP32[$11>>2] = $10;
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _workqueue_thread_handler($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thread = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $thread = $1;
 while(1) {
  $2 = $thread;
  $3 = (_workqueue_get_work($2)|0);
  $work = $3;
  $4 = $work;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==((fb + (522) | 0)|0);
  $7 = $work;
  if ($6) {
   break;
  }
  $8 = HEAP32[$7>>2]|0;
  $9 = $work;
  mftCall_vi($8|0,($9|0));
 }
 _free(($7|0));
 STACKTOP = sp;return 0;
}
function _workqueue_dismiss($work) {
 $work = $work|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $work;
 STACKTOP = sp;return;
}
function _init_work_479($work,$func) {
 $work = $work|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $work;
 $1 = $func;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 _INIT_LIST_HEAD_473($3);
 $4 = $1;
 $5 = $0;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _list_del_480($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $next = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $prev = $5;
 $6 = $prev;
 $7 = $next;
 HEAP32[$7>>2] = $6;
 $8 = $next;
 $9 = $prev;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _list_empty_481($head) {
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $head;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ($3|0)==($4|0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _list_add_tail_483($new_item,$head) {
 $new_item = $new_item|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $new_item;
 $1 = $head;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $prev = $3;
 $4 = $0;
 $5 = $prev;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $prev;
 $11 = $0;
 HEAP32[$11>>2] = $10;
 $12 = $0;
 $13 = $1;
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _list_del_init($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 _list_del_480($1);
 $2 = $0;
 _INIT_LIST_HEAD_473($2);
 STACKTOP = sp;return;
}
function _workqueue_get_work($thread) {
 $thread = $thread|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__mptr = 0, $found = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $thread;
 $found = 0;
 while(1) {
  $2 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_LockMutex(($2|0))|0);
  $3 = $0;
  $4 = ((($3)) + 8|0);
  _list_del_init($4);
  $5 = (_list_empty_481((gb + (8424300) | 0))|0);
  $6 = ($5|0)!=(0);
  if ($6) {
   $13 = $0;
   $14 = ((($13)) + 8|0);
   _list_add($14,((((gb + (8424300) | 0)) + 8|0)));
   $15 = $0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
   (_SDL_CondWait(($17|0),($18|0))|0);
  } else {
   $found = 1;
   $7 = HEAP32[((((gb + (8424300) | 0)) + 4|0))>>2]|0;
   $__mptr = $7;
   $8 = $__mptr;
   $9 = ((($8)) + -4|0);
   $1 = $9;
   $10 = $1;
   $work = $10;
   $11 = $work;
   $12 = ((($11)) + 4|0);
   _list_del_init($12);
  }
  $19 = HEAP32[((((gb + (8424300) | 0)) + 24|0))>>2]|0;
  (_SDL_UnlockMutex(($19|0))|0);
  $20 = $found;
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
 }
 $22 = $work;
 STACKTOP = sp;return ($22|0);
}
function _read_rdram() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (523) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (523) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (523) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (523) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdram() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (524) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (524) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (524) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (524) | 0),(gb + (8421480) | 0),$0,$3,$6)|0);
 return;
}
function _read_rdramFB() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (525) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_rdramFBb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (525) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_rdramFBh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (525) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_rdramFBd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (525) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_rdramFB() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (526) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_rdramFBb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (526) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_rdramFBh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (526) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_rdramFBd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (526) | 0),(gb + (8410952) | 0),$0,$3,$6)|0);
 return;
}
function _init_memory() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(65536);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = $2&65535;
  _map_region($3,0,(fb + (527) | 0),(fb + (528) | 0),(fb + (529) | 0),(fb + (530) | 0),(fb + (531) | 0),(fb + (532) | 0),(fb + (533) | 0),(fb + (534) | 0));
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(128);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (32768 + ($8))|0;
  $10 = $9&65535;
  _map_region($10,2,(fb + (535) | 0),(fb + (536) | 0),(fb + (537) | 0),(fb + (538) | 0),(fb + (539) | 0),(fb + (540) | 0),(fb + (541) | 0),(fb + (542) | 0));
  $11 = $i;
  $12 = (40960 + ($11))|0;
  $13 = $12&65535;
  _map_region($13,2,(fb + (535) | 0),(fb + (536) | 0),(fb + (537) | 0),(fb + (538) | 0),(fb + (539) | 0),(fb + (540) | 0),(fb + (541) | 0),(fb + (542) | 0));
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 $i = 128;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(1008);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (32768 + ($18))|0;
  $20 = $19&65535;
  _map_region($20,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $21 = $i;
  $22 = (40960 + ($21))|0;
  $23 = $22&65535;
  _map_region($23,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 _map_region(-31760,3,(fb + (551) | 0),(fb + (552) | 0),(fb + (553) | 0),(fb + (554) | 0),(fb + (555) | 0),(fb + (556) | 0),(fb + (557) | 0),(fb + (558) | 0));
 _map_region(-23568,3,(fb + (551) | 0),(fb + (552) | 0),(fb + (553) | 0),(fb + (554) | 0),(fb + (555) | 0),(fb + (556) | 0),(fb + (557) | 0),(fb + (558) | 0));
 $i = 1;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(16);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = (33776 + ($28))|0;
  $30 = $29&65535;
  _map_region($30,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $31 = $i;
  $32 = (41968 + ($31))|0;
  $33 = $32&65535;
  _map_region($33,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 _map_region(-31744,4,(fb + (559) | 0),(fb + (560) | 0),(fb + (561) | 0),(fb + (562) | 0),(fb + (563) | 0),(fb + (564) | 0),(fb + (565) | 0),(fb + (566) | 0));
 _map_region(-23552,4,(fb + (559) | 0),(fb + (560) | 0),(fb + (561) | 0),(fb + (562) | 0),(fb + (563) | 0),(fb + (564) | 0),(fb + (565) | 0),(fb + (566) | 0));
 $i = 1;
 while(1) {
  $36 = $i;
  $37 = ($36|0)<(4);
  if (!($37)) {
   break;
  }
  $38 = $i;
  $39 = (33792 + ($38))|0;
  $40 = $39&65535;
  _map_region($40,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $41 = $i;
  $42 = (41984 + ($41))|0;
  $43 = $42&65535;
  _map_region($43,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 _map_region(-31740,5,(fb + (567) | 0),(fb + (568) | 0),(fb + (569) | 0),(fb + (570) | 0),(fb + (571) | 0),(fb + (572) | 0),(fb + (573) | 0),(fb + (574) | 0));
 _map_region(-23548,5,(fb + (567) | 0),(fb + (568) | 0),(fb + (569) | 0),(fb + (570) | 0),(fb + (571) | 0),(fb + (572) | 0),(fb + (573) | 0),(fb + (574) | 0));
 $i = 5;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(8);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = (33792 + ($48))|0;
  $50 = $49&65535;
  _map_region($50,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $51 = $i;
  $52 = (41984 + ($51))|0;
  $53 = $52&65535;
  _map_region($53,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 _map_region(-31736,6,(fb + (575) | 0),(fb + (576) | 0),(fb + (577) | 0),(fb + (578) | 0),(fb + (579) | 0),(fb + (580) | 0),(fb + (581) | 0),(fb + (582) | 0));
 _map_region(-23544,6,(fb + (575) | 0),(fb + (576) | 0),(fb + (577) | 0),(fb + (578) | 0),(fb + (579) | 0),(fb + (580) | 0),(fb + (581) | 0),(fb + (582) | 0));
 $i = 9;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(16);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = (33792 + ($58))|0;
  $60 = $59&65535;
  _map_region($60,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $61 = $i;
  $62 = (41984 + ($61))|0;
  $63 = $62&65535;
  _map_region($63,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 _map_region(-31728,7,(fb + (583) | 0),(fb + (584) | 0),(fb + (585) | 0),(fb + (586) | 0),(fb + (587) | 0),(fb + (588) | 0),(fb + (589) | 0),(fb + (590) | 0));
 _map_region(-23536,7,(fb + (583) | 0),(fb + (584) | 0),(fb + (585) | 0),(fb + (586) | 0),(fb + (587) | 0),(fb + (588) | 0),(fb + (589) | 0),(fb + (590) | 0));
 $i = 1;
 while(1) {
  $66 = $i;
  $67 = ($66|0)<(16);
  if (!($67)) {
   break;
  }
  $68 = $i;
  $69 = (33808 + ($68))|0;
  $70 = $69&65535;
  _map_region($70,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $71 = $i;
  $72 = (42000 + ($71))|0;
  $73 = $72&65535;
  _map_region($73,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 _map_region(-31712,8,(fb + (591) | 0),(fb + (592) | 0),(fb + (593) | 0),(fb + (594) | 0),(fb + (595) | 0),(fb + (596) | 0),(fb + (597) | 0),(fb + (598) | 0));
 _map_region(-23520,8,(fb + (591) | 0),(fb + (592) | 0),(fb + (593) | 0),(fb + (594) | 0),(fb + (595) | 0),(fb + (596) | 0),(fb + (597) | 0),(fb + (598) | 0));
 $i = 1;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(16);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = (33824 + ($78))|0;
  $80 = $79&65535;
  _map_region($80,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $81 = $i;
  $82 = (42016 + ($81))|0;
  $83 = $82&65535;
  _map_region($83,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 _map_region(-31696,17,(fb + (599) | 0),(fb + (600) | 0),(fb + (601) | 0),(fb + (602) | 0),(fb + (603) | 0),(fb + (604) | 0),(fb + (605) | 0),(fb + (606) | 0));
 _map_region(-23504,17,(fb + (599) | 0),(fb + (600) | 0),(fb + (601) | 0),(fb + (602) | 0),(fb + (603) | 0),(fb + (604) | 0),(fb + (605) | 0),(fb + (606) | 0));
 $i = 1;
 while(1) {
  $86 = $i;
  $87 = ($86|0)<(16);
  if (!($87)) {
   break;
  }
  $88 = $i;
  $89 = (33840 + ($88))|0;
  $90 = $89&65535;
  _map_region($90,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $91 = $i;
  $92 = (42032 + ($91))|0;
  $93 = $92&65535;
  _map_region($93,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $94 = $i;
  $95 = (($94) + 1)|0;
  $i = $95;
 }
 _map_region(-31680,9,(fb + (607) | 0),(fb + (608) | 0),(fb + (609) | 0),(fb + (610) | 0),(fb + (611) | 0),(fb + (612) | 0),(fb + (613) | 0),(fb + (614) | 0));
 _map_region(-23488,9,(fb + (607) | 0),(fb + (608) | 0),(fb + (609) | 0),(fb + (610) | 0),(fb + (611) | 0),(fb + (612) | 0),(fb + (613) | 0),(fb + (614) | 0));
 $i = 1;
 while(1) {
  $96 = $i;
  $97 = ($96|0)<(16);
  if (!($97)) {
   break;
  }
  $98 = $i;
  $99 = (33856 + ($98))|0;
  $100 = $99&65535;
  _map_region($100,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $101 = $i;
  $102 = (42048 + ($101))|0;
  $103 = $102&65535;
  _map_region($103,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $104 = $i;
  $105 = (($104) + 1)|0;
  $i = $105;
 }
 _map_region(-31664,10,(fb + (615) | 0),(fb + (616) | 0),(fb + (617) | 0),(fb + (618) | 0),(fb + (619) | 0),(fb + (620) | 0),(fb + (621) | 0),(fb + (622) | 0));
 _map_region(-23472,10,(fb + (615) | 0),(fb + (616) | 0),(fb + (617) | 0),(fb + (618) | 0),(fb + (619) | 0),(fb + (620) | 0),(fb + (621) | 0),(fb + (622) | 0));
 $i = 1;
 while(1) {
  $106 = $i;
  $107 = ($106|0)<(16);
  if (!($107)) {
   break;
  }
  $108 = $i;
  $109 = (33872 + ($108))|0;
  $110 = $109&65535;
  _map_region($110,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $111 = $i;
  $112 = (42064 + ($111))|0;
  $113 = $112&65535;
  _map_region($113,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $114 = $i;
  $115 = (($114) + 1)|0;
  $i = $115;
 }
 _map_region(-31648,11,(fb + (623) | 0),(fb + (624) | 0),(fb + (625) | 0),(fb + (626) | 0),(fb + (627) | 0),(fb + (628) | 0),(fb + (629) | 0),(fb + (630) | 0));
 _map_region(-23456,11,(fb + (623) | 0),(fb + (624) | 0),(fb + (625) | 0),(fb + (626) | 0),(fb + (627) | 0),(fb + (628) | 0),(fb + (629) | 0),(fb + (630) | 0));
 $i = 1;
 while(1) {
  $116 = $i;
  $117 = ($116|0)<(16);
  if (!($117)) {
   break;
  }
  $118 = $i;
  $119 = (33888 + ($118))|0;
  $120 = $119&65535;
  _map_region($120,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $121 = $i;
  $122 = (42080 + ($121))|0;
  $123 = $122&65535;
  _map_region($123,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 _map_region(-31632,12,(fb + (631) | 0),(fb + (632) | 0),(fb + (633) | 0),(fb + (634) | 0),(fb + (635) | 0),(fb + (636) | 0),(fb + (637) | 0),(fb + (638) | 0));
 _map_region(-23440,12,(fb + (631) | 0),(fb + (632) | 0),(fb + (633) | 0),(fb + (634) | 0),(fb + (635) | 0),(fb + (636) | 0),(fb + (637) | 0),(fb + (638) | 0));
 $i = 1;
 while(1) {
  $126 = $i;
  $127 = ($126|0)<(16);
  if (!($127)) {
   break;
  }
  $128 = $i;
  $129 = (33904 + ($128))|0;
  $130 = $129&65535;
  _map_region($130,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $131 = $i;
  $132 = (42096 + ($131))|0;
  $133 = $132&65535;
  _map_region($133,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 _map_region(-31616,13,(fb + (639) | 0),(fb + (640) | 0),(fb + (641) | 0),(fb + (642) | 0),(fb + (643) | 0),(fb + (644) | 0),(fb + (645) | 0),(fb + (646) | 0));
 _map_region(-23424,13,(fb + (639) | 0),(fb + (640) | 0),(fb + (641) | 0),(fb + (642) | 0),(fb + (643) | 0),(fb + (644) | 0),(fb + (645) | 0),(fb + (646) | 0));
 $i = 1153;
 while(1) {
  $136 = $i;
  $137 = ($136|0)<(1280);
  if (!($137)) {
   break;
  }
  $138 = $i;
  $139 = (32768 + ($138))|0;
  $140 = $139&65535;
  _map_region($140,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $141 = $i;
  $142 = (40960 + ($141))|0;
  $143 = $142&65535;
  _map_region($143,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 _map_region(-31488,1,(fb + (647) | 0),(fb + (648) | 0),(fb + (649) | 0),(fb + (650) | 0),(fb + (651) | 0),(fb + (652) | 0),(fb + (653) | 0),(fb + (654) | 0));
 _map_region(-23296,1,(fb + (647) | 0),(fb + (648) | 0),(fb + (649) | 0),(fb + (650) | 0),(fb + (651) | 0),(fb + (652) | 0),(fb + (653) | 0),(fb + (654) | 0));
 $i = 1281;
 while(1) {
  $146 = $i;
  $147 = ($146|0)<(2048);
  if (!($147)) {
   break;
  }
  $148 = $i;
  $149 = (32768 + ($148))|0;
  $150 = $149&65535;
  _map_region($150,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $151 = $i;
  $152 = (40960 + ($151))|0;
  $153 = $152&65535;
  _map_region($153,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $154 = $i;
  $155 = (($154) + 1)|0;
  $i = $155;
 }
 _map_region(-30720,14,(fb + (655) | 0),(fb + (656) | 0),(fb + (657) | 0),(fb + (658) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
 _map_region(-22528,14,(fb + (655) | 0),(fb + (656) | 0),(fb + (657) | 0),(fb + (658) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
 _map_region(-30719,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (659) | 0),(fb + (660) | 0),(fb + (661) | 0),(fb + (662) | 0));
 _map_region(-22527,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (659) | 0),(fb + (660) | 0),(fb + (661) | 0),(fb + (662) | 0));
 $i = 2050;
 while(1) {
  $156 = $i;
  $157 = ($156|0)<(4096);
  if (!($157)) {
   break;
  }
  $158 = $i;
  $159 = (32768 + ($158))|0;
  $160 = $159&65535;
  _map_region($160,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $161 = $i;
  $162 = (40960 + ($161))|0;
  $163 = $162&65535;
  _map_region($163,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $164 = $i;
  $165 = (($164) + 1)|0;
  $i = $165;
 }
 $i = 0;
 while(1) {
  $166 = $i;
  $167 = HEAP32[(gb + (8422112) | 0)>>2]|0;
  $168 = $167 >> 16;
  $169 = ($166|0)<($168|0);
  if (!($169)) {
   break;
  }
  $170 = $i;
  $171 = (36864 + ($170))|0;
  $172 = $171&65535;
  _map_region($172,15,(fb + (663) | 0),(fb + (664) | 0),(fb + (665) | 0),(fb + (666) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $173 = $i;
  $174 = (45056 + ($173))|0;
  $175 = $174&65535;
  _map_region($175,15,(fb + (663) | 0),(fb + (664) | 0),(fb + (665) | 0),(fb + (666) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (667) | 0),(fb + (550) | 0));
  $176 = $i;
  $177 = (($176) + 1)|0;
  $i = $177;
 }
 $178 = HEAP32[(gb + (8422112) | 0)>>2]|0;
 $179 = $178 >> 16;
 $i = $179;
 while(1) {
  $180 = $i;
  $181 = ($180|0)<(4032);
  if (!($181)) {
   break;
  }
  $182 = $i;
  $183 = (36864 + ($182))|0;
  $184 = $183&65535;
  _map_region($184,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $185 = $i;
  $186 = (45056 + ($185))|0;
  $187 = $186&65535;
  _map_region($187,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 _map_region(-24640,16,(fb + (668) | 0),(fb + (669) | 0),(fb + (670) | 0),(fb + (671) | 0),(fb + (672) | 0),(fb + (673) | 0),(fb + (674) | 0),(fb + (675) | 0));
 _map_region(-16448,16,(fb + (668) | 0),(fb + (669) | 0),(fb + (670) | 0),(fb + (671) | 0),(fb + (672) | 0),(fb + (673) | 0),(fb + (674) | 0),(fb + (675) | 0));
 $i = 4033;
 while(1) {
  $190 = $i;
  $191 = ($190|0)<(4096);
  if (!($191)) {
   break;
  }
  $192 = $i;
  $193 = (36864 + ($192))|0;
  $194 = $193&65535;
  _map_region($194,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $195 = $i;
  $196 = (45056 + ($195))|0;
  $197 = $196&65535;
  _map_region($197,1,(fb + (543) | 0),(fb + (544) | 0),(fb + (545) | 0),(fb + (546) | 0),(fb + (547) | 0),(fb + (548) | 0),(fb + (549) | 0),(fb + (550) | 0));
  $198 = $i;
  $199 = (($198) + 1)|0;
  $i = $199;
 }
 HEAP32[(gb + (14718156) | 0)>>2] = 1;
 $200 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $201 = ((($200)) + 64|0);
 _init_cic_using_ipl3(((((gb + (8410672) | 0)) + 248|0)),$201);
 _init_r4300((gb + (8410936) | 0));
 _init_rdp((gb + (8410952) | 0));
 _init_rsp((gb + (8413160) | 0));
 _init_ai((gb + (8421404) | 0));
 _init_pi((gb + (8409824) | 0));
 _init_ri((gb + (8421480) | 0));
 _init_si((gb + (8410672) | 0));
 _init_vi((gb + (8421560) | 0));
 _DebugMessage(5,(gb + (16831) | 0),$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _map_region($region,$type,$read8,$read16,$read32,$read64,$write8,$write16,$write32,$write64) {
 $region = $region|0;
 $type = $type|0;
 $read8 = $read8|0;
 $read16 = $read16|0;
 $read32 = $read32|0;
 $read64 = $read64|0;
 $write8 = $write8|0;
 $write16 = $write16|0;
 $write32 = $write32|0;
 $write64 = $write64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $region;
 $1 = $type;
 $2 = $read8;
 $3 = $read16;
 $4 = $read32;
 $5 = $read64;
 $6 = $write8;
 $7 = $write16;
 $8 = $write32;
 $9 = $write64;
 $10 = $0;
 $11 = $1;
 _map_region_t($10,$11);
 $12 = $0;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 _map_region_r($12,$13,$14,$15,$16);
 $17 = $0;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 _map_region_w($17,$18,$19,$20,$21);
 STACKTOP = sp;return;
}
function _fast_mem_access($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $address;
 $2 = $1;
 $3 = $2 & -1073741824;
 $4 = ($3|0)!=(-2147483648);
 if ($4) {
  $5 = $1;
  $6 = (_virtual_to_physical_address($5,2)|0);
  $1 = $6;
 }
 $7 = $1;
 $8 = $7 & 536870908;
 $1 = $8;
 $9 = $1;
 $10 = ($9>>>0)<(8388608);
 $11 = $1;
 do {
  if ($10) {
   $12 = ((gb + (21216) | 0) + ($11)|0);
   $0 = $12;
  } else {
   $13 = ($11>>>0)>=(268435456);
   if ($13) {
    $14 = HEAP32[(gb + (8422108) | 0)>>2]|0;
    $15 = $1;
    $16 = (($15) - 268435456)|0;
    $17 = (($14) + ($16)|0);
    $0 = $17;
    break;
   }
   $18 = $1;
   $19 = $18 & -8192;
   $20 = ($19|0)==(67108864);
   if ($20) {
    $21 = $1;
    $22 = $21 & 8188;
    $23 = ((gb + (8413160) | 0) + ($22)|0);
    $0 = $23;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _readw($read_word,$opaque,$address,$value) {
 $read_word = $read_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 4|0;
 $0 = $read_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (mftCall_iiii($4|0,($5|0),($6|0),($w|0))|0);
 $result = $7;
 $8 = HEAP32[$w>>2]|0;
 $9 = $3;
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = $result;
 STACKTOP = sp;return ($14|0);
}
function _readb($read_word,$opaque,$address,$value) {
 $read_word = $read_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $result = 0, $shift = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 8|0;
 $0 = $read_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $2;
 $5 = (_bshift($4)|0);
 $shift = $5;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = (mftCall_iiii($6|0,($7|0),($8|0),($w|0))|0);
 $result = $9;
 $10 = HEAP32[$w>>2]|0;
 $11 = $shift;
 $12 = $10 >>> $11;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $result;
 STACKTOP = sp;return ($19|0);
}
function _readh($read_word,$opaque,$address,$value) {
 $read_word = $read_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $result = 0, $shift = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 8|0;
 $0 = $read_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $2;
 $5 = (_hshift($4)|0);
 $shift = $5;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = (mftCall_iiii($6|0,($7|0),($8|0),($w|0))|0);
 $result = $9;
 $10 = HEAP32[$w>>2]|0;
 $11 = $shift;
 $12 = $10 >>> $11;
 $13 = $12 & 65535;
 $14 = $3;
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $result;
 STACKTOP = sp;return ($19|0);
}
function _readd($read_word,$opaque,$address,$value) {
 $read_word = $read_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $result = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 8|0;
 $0 = $read_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (mftCall_iiii($4|0,($5|0),($6|0),($w|0))|0);
 $result = $7;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = (($10) + 4)|0;
 $12 = ((($w)) + 4|0);
 (mftCall_iiii($8|0,($9|0),($11|0),($12|0))|0);
 $13 = HEAP32[$w>>2]|0;
 $14 = ((($w)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $13;
 $21 = $result;
 STACKTOP = sp;return ($21|0);
}
function _writew($write_word,$opaque,$address,$value) {
 $write_word = $write_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $write_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (mftCall_iiiii($4|0,($5|0),($6|0),($7|0),-1)|0);
 STACKTOP = sp;return ($8|0);
}
function _writeb($write_word,$opaque,$address,$value) {
 $write_word = $write_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask = 0, $shift = 0;
 var $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $write_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $2;
 $5 = (_bshift($4)|0);
 $shift = $5;
 $6 = $3;
 $7 = $6&255;
 $8 = $shift;
 $9 = $7 << $8;
 $w = $9;
 $10 = $shift;
 $11 = 255 << $10;
 $mask = $11;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $w;
 $16 = $mask;
 $17 = (mftCall_iiiii($12|0,($13|0),($14|0),($15|0),($16|0))|0);
 STACKTOP = sp;return ($17|0);
}
function _writeh($write_word,$opaque,$address,$value) {
 $write_word = $write_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask = 0, $shift = 0;
 var $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $write_word;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $2;
 $5 = (_hshift($4)|0);
 $shift = $5;
 $6 = $3;
 $7 = $6&65535;
 $8 = $shift;
 $9 = $7 << $8;
 $w = $9;
 $10 = $shift;
 $11 = 65535 << $10;
 $mask = $11;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $w;
 $16 = $mask;
 $17 = (mftCall_iiiii($12|0,($13|0),($14|0),($15|0),($16|0))|0);
 STACKTOP = sp;return ($17|0);
}
function _writed($write_word,$opaque,$address,$0,$1) {
 $write_word = $write_word|0;
 $opaque = $opaque|0;
 $address = $address|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $2 = $write_word;
 $3 = $opaque;
 $4 = $address;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (mftCall_iiiii($10|0,($11|0),($12|0),($18|0),-1)|0);
 $result = $19;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = (($22) + 4)|0;
 $24 = $5;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (mftCall_iiiii($20|0,($21|0),($23|0),($26|0),-1)|0);
 $30 = $result;
 STACKTOP = sp;return ($30|0);
}
function _read_nomemb() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (_virtual_to_physical_address($0,0)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $1;
 $2 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $5 = $4 >>> 16;
 $6 = ((gb + (8686484) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 mftCall_v($7|0);
 return;
}
function _read_nomemh() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (_virtual_to_physical_address($0,0)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $1;
 $2 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $5 = $4 >>> 16;
 $6 = ((gb + (8948628) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 mftCall_v($7|0);
 return;
}
function _read_nomem() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (_virtual_to_physical_address($0,0)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $1;
 $2 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $5 = $4 >>> 16;
 $6 = ((gb + (8424340) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 mftCall_v($7|0);
 return;
}
function _read_nomemd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (_virtual_to_physical_address($0,0)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $1;
 $2 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $5 = $4 >>> 16;
 $6 = ((gb + (9210772) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 mftCall_v($7|0);
 return;
}
function _write_nomemb() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 _invalidate_r4300_cached_code($0,1);
 $1 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $2 = (_virtual_to_physical_address($1,1)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $2;
 $3 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $6 = $5 >>> 16;
 $7 = ((gb + (9735060) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 mftCall_v($8|0);
 return;
}
function _write_nomemh() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 _invalidate_r4300_cached_code($0,2);
 $1 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $2 = (_virtual_to_physical_address($1,1)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $2;
 $3 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $6 = $5 >>> 16;
 $7 = ((gb + (10259348) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 mftCall_v($8|0);
 return;
}
function _write_nomem() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 _invalidate_r4300_cached_code($0,4);
 $1 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $2 = (_virtual_to_physical_address($1,1)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $2;
 $3 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $6 = $5 >>> 16;
 $7 = ((gb + (9472916) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 mftCall_v($8|0);
 return;
}
function _write_nomemd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 _invalidate_r4300_cached_code($0,8);
 $1 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $2 = (_virtual_to_physical_address($1,1)|0);
 HEAP32[(gb + (8424328) | 0)>>2] = $2;
 $3 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $6 = $5 >>> 16;
 $7 = ((gb + (9997204) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 mftCall_v($8|0);
 return;
}
function _read_nothingb() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _read_nothingh() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _read_nothing() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _read_nothingd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _write_nothingb() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _write_nothingh() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _write_nothing() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _write_nothingd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _read_rdramregb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (676) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramregh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (676) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramreg() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (676) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rdramregd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (676) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramregb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (677) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramregh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (677) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramreg() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (677) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rdramregd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (677) | 0),(gb + (8421480) | 0),$0,$3,$6)|0);
 return;
}
function _read_rspmemb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (678) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspmemh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (678) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspmem() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (678) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspmemd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (678) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspmemb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (679) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspmemh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (679) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspmem() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (679) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspmemd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (679) | 0),(gb + (8413160) | 0),$0,$3,$6)|0);
 return;
}
function _read_rspregb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (680) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspregh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (680) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspreg() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (680) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspregd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (680) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspregb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (681) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspregh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (681) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspreg() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (681) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspregd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (681) | 0),(gb + (8413160) | 0),$0,$3,$6)|0);
 return;
}
function _read_rspreg2b() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (682) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspreg2h() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (682) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspreg2() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (682) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _read_rspreg2d() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (682) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspreg2b() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (683) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspreg2h() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (683) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspreg2() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (683) | 0),(gb + (8413160) | 0),$0,$1)|0);
 return;
}
function _write_rspreg2d() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (683) | 0),(gb + (8413160) | 0),$0,$3,$6)|0);
 return;
}
function _read_dpb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (684) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dph() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (684) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dp() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (684) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dpd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (684) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dpb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (685) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dph() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (685) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dp() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (685) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dpd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (685) | 0),(gb + (8410952) | 0),$0,$3,$6)|0);
 return;
}
function _read_dpsb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (686) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dpsh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (686) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dps() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (686) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _read_dpsd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (686) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dpsb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (687) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dpsh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (687) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dps() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (687) | 0),(gb + (8410952) | 0),$0,$1)|0);
 return;
}
function _write_dpsd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (687) | 0),(gb + (8410952) | 0),$0,$3,$6)|0);
 return;
}
function _read_mib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (688) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _read_mih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (688) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _read_mi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (688) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _read_mid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (688) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _write_mib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (689) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _write_mih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (689) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _write_mi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (689) | 0),(gb + (8410936) | 0),$0,$1)|0);
 return;
}
function _write_mid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (689) | 0),(gb + (8410936) | 0),$0,$3,$6)|0);
 return;
}
function _read_vib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (690) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _read_vih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (690) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _read_vi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (690) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _read_vid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (690) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _write_vib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (691) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _write_vih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (691) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _write_vi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (691) | 0),(gb + (8421560) | 0),$0,$1)|0);
 return;
}
function _write_vid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (691) | 0),(gb + (8421560) | 0),$0,$3,$6)|0);
 return;
}
function _read_aib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (692) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _read_aih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (692) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _read_ai() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (692) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _read_aid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (692) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _write_aib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (693) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _write_aih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (693) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _write_ai() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (693) | 0),(gb + (8421404) | 0),$0,$1)|0);
 return;
}
function _write_aid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (693) | 0),(gb + (8421404) | 0),$0,$3,$6)|0);
 return;
}
function _read_pib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (694) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (694) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (694) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (694) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (695) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (695) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pi() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (695) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (695) | 0),(gb + (8409824) | 0),$0,$3,$6)|0);
 return;
}
function _read_rib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (696) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (696) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_ri() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (696) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _read_rid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (696) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (697) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (697) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_ri() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (697) | 0),(gb + (8421480) | 0),$0,$1)|0);
 return;
}
function _write_rid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (697) | 0),(gb + (8421480) | 0),$0,$3,$6)|0);
 return;
}
function _read_sib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (698) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_sih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (698) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_si() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (698) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_sid() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (698) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_sib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (699) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_sih() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (699) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_si() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (699) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_sid() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (699) | 0),(gb + (8410672) | 0),$0,$3,$6)|0);
 return;
}
function _read_ddb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (700) | 0),0,$0,$1)|0);
 return;
}
function _read_ddh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (700) | 0),0,$0,$1)|0);
 return;
}
function _read_dd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (700) | 0),0,$0,$1)|0);
 return;
}
function _read_ddd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (700) | 0),0,$0,$1)|0);
 return;
}
function _write_ddb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (701) | 0),0,$0,$1)|0);
 return;
}
function _write_ddh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (701) | 0),0,$0,$1)|0);
 return;
}
function _write_dd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (701) | 0),0,$0,$1)|0);
 return;
}
function _write_ddd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (701) | 0),0,$0,$3,$6)|0);
 return;
}
function _read_pi_flashram_statusb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (702) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pi_flashram_statush() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (702) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pi_flashram_status() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (702) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pi_flashram_statusd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (702) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pi_flashram_commandb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (703) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pi_flashram_commandh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (703) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pi_flashram_command() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (703) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_pi_flashram_commandd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (703) | 0),(gb + (8409824) | 0),$0,$3,$6)|0);
 return;
}
function _read_romb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (704) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_romh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (704) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_rom() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (704) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_romd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (704) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _write_rom() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (705) | 0),(gb + (8409824) | 0),$0,$1)|0);
 return;
}
function _read_pifb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readb((fb + (706) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_pifh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readh((fb + (706) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_pif() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readw((fb + (706) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _read_pifd() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 (_readd((fb + (706) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_pifb() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP8[(gb + (23109845) | 0)>>0]|0;
 (_writeb((fb + (707) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_pifh() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP16[(gb + (23108460) | 0)>>1]|0;
 (_writeh((fb + (707) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_pif() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = HEAP32[(gb + (8424336) | 0)>>2]|0;
 (_writew((fb + (707) | 0),(gb + (8410672) | 0),$0,$1)|0);
 return;
}
function _write_pifd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $1 = (gb + (8409944) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 (_writed((fb + (707) | 0),(gb + (8410672) | 0),$0,$3,$6)|0);
 return;
}
function _map_region_t($region,$type) {
 $region = $region|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $region;
 $1 = $type;
 STACKTOP = sp;return;
}
function _map_region_r($region,$read8,$read16,$read32,$read64) {
 $region = $region|0;
 $read8 = $read8|0;
 $read16 = $read16|0;
 $read32 = $read32|0;
 $read64 = $read64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $region;
 $1 = $read8;
 $2 = $read16;
 $3 = $read32;
 $4 = $read64;
 $5 = $1;
 $6 = $0;
 $7 = $6&65535;
 $8 = ((gb + (8686484) | 0) + ($7<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = $2;
 $10 = $0;
 $11 = $10&65535;
 $12 = ((gb + (8948628) | 0) + ($11<<2)|0);
 HEAP32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = $14&65535;
 $16 = ((gb + (8424340) | 0) + ($15<<2)|0);
 HEAP32[$16>>2] = $13;
 $17 = $4;
 $18 = $0;
 $19 = $18&65535;
 $20 = ((gb + (9210772) | 0) + ($19<<2)|0);
 HEAP32[$20>>2] = $17;
 STACKTOP = sp;return;
}
function _map_region_w($region,$write8,$write16,$write32,$write64) {
 $region = $region|0;
 $write8 = $write8|0;
 $write16 = $write16|0;
 $write32 = $write32|0;
 $write64 = $write64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $region;
 $1 = $write8;
 $2 = $write16;
 $3 = $write32;
 $4 = $write64;
 $5 = $1;
 $6 = $0;
 $7 = $6&65535;
 $8 = ((gb + (9735060) | 0) + ($7<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = $2;
 $10 = $0;
 $11 = $10&65535;
 $12 = ((gb + (10259348) | 0) + ($11<<2)|0);
 HEAP32[$12>>2] = $9;
 $13 = $3;
 $14 = $0;
 $15 = $14&65535;
 $16 = ((gb + (9472916) | 0) + ($15<<2)|0);
 HEAP32[$16>>2] = $13;
 $17 = $4;
 $18 = $0;
 $19 = $18&65535;
 $20 = ((gb + (9997204) | 0) + ($19<<2)|0);
 HEAP32[$20>>2] = $17;
 STACKTOP = sp;return;
}
function _write_dd_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 STACKTOP = sp;return 0;
}
function _read_dd_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $1;
 $4 = ($3|0)==(-1526725368);
 $5 = $4 ? -1 : 0;
 $6 = $2;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return 0;
}
function _hshift($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 2;
 $3 = $2 ^ 2;
 $4 = $3 << 3;
 STACKTOP = sp;return ($4|0);
}
function _bshift($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 3;
 $3 = $2 ^ 3;
 $4 = $3 << 3;
 STACKTOP = sp;return ($4|0);
}
function _connect_cart_rom($cart_rom,$rom,$rom_size) {
 $cart_rom = $cart_rom|0;
 $rom = $rom|0;
 $rom_size = $rom_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cart_rom;
 $1 = $rom;
 $2 = $rom_size;
 $3 = $1;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $2;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _init_cart_rom($cart_rom) {
 $cart_rom = $cart_rom|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cart_rom;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _read_cart_rom($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $pi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $pi = $3;
 $4 = $1;
 $5 = (_rom_address($4)|0);
 $addr = $5;
 $6 = $pi;
 $7 = ((($6)) + 52|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $pi;
 $12 = ((($11)) + 52|0);
 if ($10) {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  HEAP32[$15>>2] = $14;
  $16 = $pi;
  $17 = ((($16)) + 52|0);
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return 0;
 } else {
  $19 = HEAP32[$12>>2]|0;
  $20 = $addr;
  $21 = (($19) + ($20)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  HEAP32[$23>>2] = $22;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _write_cart_rom($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $pi = $4;
 $5 = $2;
 $6 = $3;
 $7 = $5 & $6;
 $8 = $pi;
 $9 = ((($8)) + 52|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $7;
 STACKTOP = sp;return 0;
}
function _rom_address($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 67108860;
 STACKTOP = sp;return ($2|0);
}
function _init_flashram($flashram) {
 $flashram = $flashram|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flashram;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 28|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _flashram_save($flashram) {
 $flashram = $flashram|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flashram;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 mftCall_vi($3|0,($5|0));
 STACKTOP = sp;return;
}
function _format_flashram($flash) {
 $flash = $flash|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flash;
 $1 = $0;
 _memset(($1|0),-1,131072)|0;
 STACKTOP = sp;return;
}
function _read_flashram_status($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pi = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $1;
 $pi = $4;
 $5 = $pi;
 $6 = ((($5)) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(-1);
 if (!($8)) {
  $9 = $2;
  $10 = $9 & 65535;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $pi;
   $13 = ((($12)) + 108|0);
   HEAP32[$13>>2] = 1;
   $14 = $pi;
   $15 = ((($14)) + 64|0);
   $16 = ((($15)) + 16|0);
   $17 = $16;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = $3;
   HEAP32[$23>>2] = $22;
   $0 = 0;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 _DebugMessage(1,(gb + (16850) | 0),$vararg_buffer);
 $0 = -1;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _write_flashram_command($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pi = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $pi = $5;
 $6 = $pi;
 $7 = ((($6)) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(-1);
 if (!($9)) {
  $10 = $2;
  $11 = $10 & 65535;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $pi;
   $14 = ((($13)) + 108|0);
   HEAP32[$14>>2] = 1;
   $15 = $pi;
   $16 = $3;
   $17 = $4;
   $18 = $16 & $17;
   _flashram_command($15,$18);
   $0 = 0;
   $19 = $0;
   STACKTOP = sp;return ($19|0);
  }
 }
 _DebugMessage(1,(gb + (16889) | 0),$vararg_buffer);
 $0 = -1;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _dma_read_flashram($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $cart_addr = 0, $dram = 0, $dram_addr = 0, $flashram = 0;
 var $i = 0, $length = 0, $mem = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $flashram = $2;
 $3 = $0;
 $4 = ((($3)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $dram = $8;
 $9 = $flashram;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $mem = $11;
 $12 = $flashram;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 switch ($14|0) {
 case 4:  {
  $15 = $flashram;
  $16 = ((($15)) + 16|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) / 4)&-1;
  $26 = $dram;
  $27 = (($26) + ($25<<2)|0);
  HEAP32[$27>>2] = $22;
  $28 = $flashram;
  $29 = ((($28)) + 16|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37>>>0) / 4)&-1;
  $39 = (($38) + 1)|0;
  $40 = $dram;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $32;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $42 = $0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & 16777215;
  $46 = (($45) + 1)|0;
  $length = $46;
  $47 = $0;
  $48 = HEAP32[$47>>2]|0;
  $dram_addr = $48;
  $49 = $0;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) - 134217728)|0;
  $53 = $52 & 65535;
  $54 = $53<<1;
  $cart_addr = $54;
  $i = 0;
  while(1) {
   $55 = $i;
   $56 = $length;
   $57 = ($55>>>0)<($56>>>0);
   if (!($57)) {
    break;
   }
   $58 = $cart_addr;
   $59 = $i;
   $60 = (($58) + ($59))|0;
   $61 = $60 ^ 3;
   $62 = $mem;
   $63 = (($62) + ($61)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $dram_addr;
   $66 = $i;
   $67 = (($65) + ($66))|0;
   $68 = $67 ^ 3;
   $69 = $dram;
   $70 = (($69) + ($68)|0);
   HEAP8[$70>>0] = $64;
   $71 = $i;
   $72 = (($71) + 1)|0;
   $i = $72;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  $73 = $flashram;
  $74 = ((($73)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  HEAP32[$vararg_buffer>>2] = $75;
  _DebugMessage(2,(gb + (16931) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function _dma_write_flashram($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $flashram = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $flashram = $2;
 $3 = $flashram;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $cond = ($5|0)==(2);
 if ($cond) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = $flashram;
  $9 = ((($8)) + 28|0);
  HEAP32[$9>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $10 = $flashram;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _DebugMessage(1,(gb + (16961) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _flashram_command($pi,$command) {
 $pi = $pi|0;
 $command = $command|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dram = 0, $flashram = 0, $i = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $command;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $flashram = $3;
 $4 = $0;
 $5 = ((($4)) + 116|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $dram = $9;
 $10 = $1;
 $11 = $10 & -16777216;
 $switch$split2D = ($11|0)<(-520093696);
 L1: do {
  if ($switch$split2D) {
   $switch$split52D = ($11|0)<(-1275068416);
   if ($switch$split52D) {
    switch ($11|0) {
    case -1526726656:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $25 = $1;
    $26 = $25 & 65535;
    $27 = $26<<7;
    $28 = $flashram;
    $29 = ((($28)) + 24|0);
    HEAP32[$29>>2] = $27;
    $30 = $flashram;
    $31 = ((($30)) + 16|0);
    $32 = $31;
    $33 = $32;
    HEAP32[$33>>2] = 12713984;
    $34 = (($32) + 4)|0;
    $35 = $34;
    HEAP32[$35>>2] = 286359556;
    STACKTOP = sp;return;
   }
   $switch$split112D = ($11|0)<(-771751936);
   if ($switch$split112D) {
    switch ($11|0) {
    case -1275068416:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $36 = $flashram;
    $37 = ((($36)) + 12|0);
    HEAP32[$37>>2] = 2;
    STACKTOP = sp;return;
   }
   switch ($11|0) {
   case -771751936:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $38 = $flashram;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   switch ($40|0) {
   case 4: case 3: case 0:  {
    break;
   }
   case 1:  {
    $41 = $flashram;
    $42 = ((($41)) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $i = $43;
    while(1) {
     $44 = $i;
     $45 = $flashram;
     $46 = ((($45)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + 128)|0;
     $49 = ($44>>>0)<($48>>>0);
     if (!($49)) {
      break;
     }
     $50 = $i;
     $51 = $50 ^ 3;
     $52 = $flashram;
     $53 = ((($52)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($51)|0);
     HEAP8[$55>>0] = -1;
     $56 = $i;
     $57 = (($56) + 1)|0;
     $i = $57;
    }
    $58 = $flashram;
    _flashram_save($58);
    break;
   }
   case 2:  {
    $i = 0;
    while(1) {
     $59 = $i;
     $60 = ($59>>>0)<(128);
     $61 = $flashram;
     if (!($60)) {
      break;
     }
     $62 = ((($61)) + 28|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $i;
     $65 = (($63) + ($64))|0;
     $66 = $65 ^ 3;
     $67 = $dram;
     $68 = (($67) + ($66)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $flashram;
     $71 = ((($70)) + 24|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $i;
     $74 = (($72) + ($73))|0;
     $75 = $74 ^ 3;
     $76 = $flashram;
     $77 = ((($76)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($78) + ($75)|0);
     HEAP8[$79>>0] = $69;
     $80 = $i;
     $81 = (($80) + 1)|0;
     $i = $81;
    }
    _flashram_save($61);
    break;
   }
   default: {
    $82 = $flashram;
    $83 = ((($82)) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP32[$vararg_buffer>>2] = $84;
    _DebugMessage(2,(gb + (16992) | 0),$vararg_buffer);
   }
   }
   $85 = $flashram;
   $86 = ((($85)) + 12|0);
   HEAP32[$86>>2] = 0;
   STACKTOP = sp;return;
  } else {
   $switch$split82D = ($11|0)<(1258291200);
   if ($switch$split82D) {
    $switch$split142D = ($11|0)<(-268435456);
    if ($switch$split142D) {
     switch ($11|0) {
     case -520093696:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $87 = $flashram;
     $88 = ((($87)) + 12|0);
     HEAP32[$88>>2] = 4;
     $89 = $flashram;
     $90 = ((($89)) + 16|0);
     $91 = $90;
     $92 = $91;
     HEAP32[$92>>2] = 12713984;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = 286359553;
     STACKTOP = sp;return;
    } else {
     switch ($11|0) {
     case -268435456:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $95 = $flashram;
     $96 = ((($95)) + 12|0);
     HEAP32[$96>>2] = 3;
     $97 = $flashram;
     $98 = ((($97)) + 16|0);
     $99 = $98;
     $100 = $99;
     HEAP32[$100>>2] = -268435456;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 286359556;
     STACKTOP = sp;return;
    }
   } else {
    $switch$split172D = ($11|0)<(2013265920);
    if ($switch$split172D) {
     switch ($11|0) {
     case 1258291200:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $12 = $1;
     $13 = $12 & 65535;
     $14 = $13<<7;
     $15 = $flashram;
     $16 = ((($15)) + 24|0);
     HEAP32[$16>>2] = $14;
     STACKTOP = sp;return;
    } else {
     switch ($11|0) {
     case 2013265920:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $17 = $flashram;
     $18 = ((($17)) + 12|0);
     HEAP32[$18>>2] = 1;
     $19 = $flashram;
     $20 = ((($19)) + 16|0);
     $21 = $20;
     $22 = $21;
     HEAP32[$22>>2] = 12713984;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = 286359560;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $103 = $1;
 HEAP32[$vararg_buffer1>>2] = $103;
 _DebugMessage(2,(gb + (17030) | 0),$vararg_buffer1);
 STACKTOP = sp;return;
}
function _connect_pi($pi,$r4300,$ri,$rom,$rom_size) {
 $pi = $pi|0;
 $r4300 = $r4300|0;
 $ri = $ri|0;
 $rom = $rom|0;
 $rom_size = $rom_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $r4300;
 $2 = $ri;
 $3 = $rom;
 $4 = $rom_size;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = $3;
 $8 = $4;
 _connect_cart_rom($6,$7,$8);
 $9 = $1;
 $10 = $0;
 $11 = ((($10)) + 112|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = $0;
 $14 = ((($13)) + 116|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _init_pi($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $0;
 dest=$1; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = ((($2)) + 64|0);
 _init_flashram($3);
 $4 = $0;
 $5 = ((($4)) + 108|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function _read_pi_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pi = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $pi = $3;
 $4 = $1;
 $5 = (_pi_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $pi;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_pi_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pi = 0;
 var $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $pi = $5;
 $6 = $2;
 $7 = (_pi_reg($6)|0);
 $reg = $7;
 $8 = $reg;
 switch ($8|0) {
 case 2:  {
  $9 = $pi;
  $10 = ((($9)) + 8|0);
  $11 = $3;
  $12 = $4;
  _masked_write_513($10,$11,$12);
  $13 = $pi;
  _dma_pi_read($13);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 3:  {
  $14 = $pi;
  $15 = ((($14)) + 12|0);
  $16 = $3;
  $17 = $4;
  _masked_write_513($15,$16,$17);
  $18 = $pi;
  _dma_pi_write($18);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 4:  {
  $19 = $3;
  $20 = $4;
  $21 = $19 & $20;
  $22 = $21 & 2;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $pi;
   $25 = ((($24)) + 112|0);
   $26 = HEAP32[$25>>2]|0;
   _clear_rcp_interrupt($26,16);
  }
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5:  {
  $27 = $reg;
  $28 = $pi;
  $29 = (($28) + ($27<<2)|0);
  $30 = $3;
  $31 = $30 & 255;
  $32 = $4;
  _masked_write_513($29,$31,$32);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
  break;
 }
 default: {
  $33 = $reg;
  $34 = $pi;
  $35 = (($34) + ($33<<2)|0);
  $36 = $3;
  $37 = $4;
  _masked_write_513($35,$36,$37);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 }
 return (0)|0;
}
function _pi_end_of_dma_event($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -4;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = ((($5)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 _raise_rcp_interrupt($7,16);
 STACKTOP = sp;return;
}
function _pi_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_513($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _dma_pi_read($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>=(134217728);
 do {
  if ($4) {
   $5 = $0;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<(134283264);
   if ($8) {
    $9 = $0;
    $10 = ((($9)) + 108|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(1);
    $13 = $0;
    if ($12) {
     _dma_write_sram($13);
     $14 = $0;
     $15 = ((($14)) + 108|0);
     HEAP32[$15>>2] = -1;
     break;
    } else {
     _dma_write_flashram($13);
     break;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  _DebugMessage(2,(gb + (17100) | 0),$vararg_buffer);
 }
 $16 = $0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 1;
 HEAP32[$17>>2] = $19;
 _cp0_update_count();
 _add_interupt_event(16,4096);
 STACKTOP = sp;return;
}
function _dma_pi_write($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dram = 0, $dram_address = 0, $i = 0, $longueur = 0, $rom = 0, $rom_address = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(268435456);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 if ($4) {
  $8 = ($7>>>0)>=(134217728);
  do {
   if ($8) {
    $9 = $0;
    $10 = ((($9)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11>>>0)<(134283264);
    if ($12) {
     $13 = $0;
     $14 = ((($13)) + 108|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)!=(1);
     $17 = $0;
     if ($16) {
      _dma_read_sram($17);
      $18 = $0;
      $19 = ((($18)) + 108|0);
      HEAP32[$19>>2] = -1;
      break;
     } else {
      _dma_read_flashram($17);
      break;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } while(0);
  do {
   if ((label|0) == 7) {
    $20 = $0;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22>>>0)>=(100663296);
    if ($23) {
     $24 = $0;
     $25 = ((($24)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26>>>0)<(134217728);
     if ($27) {
      break;
     }
    }
    $28 = $0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$vararg_buffer>>2] = $30;
    _DebugMessage(2,(gb + (17059) | 0),$vararg_buffer);
   }
  } while(0);
  $31 = $0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 | 1;
  HEAP32[$32>>2] = $34;
  _cp0_update_count();
  _add_interupt_event(16,4096);
  STACKTOP = sp;return;
 }
 $35 = ($7>>>0)>=(532676608);
 $36 = $0;
 if ($35) {
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 | 1;
  HEAP32[$37>>2] = $39;
  _cp0_update_count();
  _add_interupt_event(16,4096);
  STACKTOP = sp;return;
 }
 $40 = ((($36)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 16777215;
 $43 = (($42) + 1)|0;
 $longueur = $43;
 $44 = $0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) - 268435456)|0;
 $48 = $47 & 67108863;
 $i = $48;
 $49 = $i;
 $50 = $longueur;
 $51 = (($49) + ($50))|0;
 $52 = $0;
 $53 = ((($52)) + 52|0);
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($51>>>0)>($55>>>0);
 if ($56) {
  $57 = $0;
  $58 = ((($57)) + 52|0);
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $i;
  $62 = (($60) - ($61))|0;
  $64 = $62;
 } else {
  $63 = $longueur;
  $64 = $63;
 }
 $longueur = $64;
 $65 = $0;
 $66 = HEAP32[$65>>2]|0;
 $67 = $longueur;
 $68 = (($66) + ($67))|0;
 $69 = ($68>>>0)>(8388607);
 if ($69) {
  $70 = $0;
  $71 = HEAP32[$70>>2]|0;
  $72 = (8388607 - ($71))|0;
  $74 = $72;
 } else {
  $73 = $longueur;
  $74 = $73;
 }
 $longueur = $74;
 $75 = $i;
 $76 = $0;
 $77 = ((($76)) + 52|0);
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($75>>>0)>($79>>>0);
 if (!($80)) {
  $81 = $0;
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82>>>0)>(8388607);
  if (!($83)) {
   $90 = $0;
   $91 = HEAP32[$90>>2]|0;
   $dram_address = $91;
   $92 = $0;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) - 268435456)|0;
   $96 = $95 & 67108863;
   $rom_address = $96;
   $97 = $0;
   $98 = ((($97)) + 116|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($99)) + 32|0);
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   $dram = $102;
   $103 = $0;
   $104 = ((($103)) + 52|0);
   $105 = HEAP32[$104>>2]|0;
   $rom = $105;
   $i = 0;
   while(1) {
    $106 = $i;
    $107 = $longueur;
    $108 = ($106>>>0)<($107>>>0);
    if (!($108)) {
     break;
    }
    $109 = $rom_address;
    $110 = $i;
    $111 = (($109) + ($110))|0;
    $112 = $111 ^ 3;
    $113 = $rom;
    $114 = (($113) + ($112)|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $dram_address;
    $117 = $i;
    $118 = (($116) + ($117))|0;
    $119 = $118 ^ 3;
    $120 = $dram;
    $121 = (($120) + ($119)|0);
    HEAP8[$121>>0] = $115;
    $122 = $i;
    $123 = (($122) + 1)|0;
    $i = $123;
   }
   $124 = $dram_address;
   $125 = (-2147483648 + ($124))|0;
   $126 = $longueur;
   _invalidate_r4300_cached_code($125,$126);
   $127 = $dram_address;
   $128 = (-1610612736 + ($127))|0;
   $129 = $longueur;
   _invalidate_r4300_cached_code($128,$129);
   $130 = $0;
   $131 = ((($130)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)==(268439552);
   if ($133) {
    _force_detected_rdram_size_hack();
   }
   $134 = $0;
   $135 = ((($134)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 | 3;
   HEAP32[$135>>2] = $137;
   _cp0_update_count();
   $138 = $longueur;
   $139 = (($138>>>0) / 8)&-1;
   _add_interupt_event(16,$139);
   STACKTOP = sp;return;
  }
 }
 $84 = $0;
 $85 = ((($84)) + 16|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 | 3;
 HEAP32[$85>>2] = $87;
 _cp0_update_count();
 $88 = $longueur;
 $89 = (($88>>>0) / 8)&-1;
 _add_interupt_event(16,$89);
 STACKTOP = sp;return;
}
function _sram_save($sram) {
 $sram = $sram|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sram;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 mftCall_vi($3|0,($5|0));
 STACKTOP = sp;return;
}
function _format_sram($sram) {
 $sram = $sram|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sram;
 $1 = $0;
 _memset(($1|0),0,32768)|0;
 STACKTOP = sp;return;
}
function _dma_write_sram($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cart_addr = 0, $dram = 0, $dram_addr = 0, $i = 0, $length = 0, $sram = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16777215;
 $5 = (($4) + 1)|0;
 $length = $5;
 $6 = $0;
 $7 = ((($6)) + 96|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $sram = $9;
 $10 = $0;
 $11 = ((($10)) + 116|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $dram = $15;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - 134217728)|0;
 $cart_addr = $19;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $dram_addr = $21;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $length;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   break;
  }
  $25 = $dram_addr;
  $26 = $i;
  $27 = (($25) + ($26))|0;
  $28 = $27 ^ 3;
  $29 = $dram;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $cart_addr;
  $33 = $i;
  $34 = (($32) + ($33))|0;
  $35 = $34 ^ 3;
  $36 = $sram;
  $37 = (($36) + ($35)|0);
  HEAP8[$37>>0] = $31;
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $0;
 $41 = ((($40)) + 96|0);
 _sram_save($41);
 STACKTOP = sp;return;
}
function _dma_read_sram($pi) {
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cart_addr = 0, $dram = 0, $dram_addr = 0, $i = 0, $length = 0, $sram = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16777215;
 $5 = (($4) + 1)|0;
 $length = $5;
 $6 = $0;
 $7 = ((($6)) + 96|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $sram = $9;
 $10 = $0;
 $11 = ((($10)) + 116|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $dram = $15;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - 134217728)|0;
 $20 = $19 & 65535;
 $cart_addr = $20;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $dram_addr = $22;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $length;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $cart_addr;
  $27 = $i;
  $28 = (($26) + ($27))|0;
  $29 = $28 ^ 3;
  $30 = $sram;
  $31 = (($30) + ($29)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $dram_addr;
  $34 = $i;
  $35 = (($33) + ($34))|0;
  $36 = $35 ^ 3;
  $37 = $dram;
  $38 = (($37) + ($36)|0);
  HEAP8[$38>>0] = $32;
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 STACKTOP = sp;return;
}
function _egcvip_is_connected($opaque,$pak) {
 $opaque = $opaque|0;
 $pak = $pak|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $channel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $pak;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $channel = $3;
 $4 = $channel;
 $5 = ((gb + (10521492) | 0) + (($4*12)|0)|0);
 $c = $5;
 $6 = $c;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 1:  {
  $9 = $1;
  HEAP32[$9>>2] = 0;
  break;
 }
 case 2:  {
  $10 = $1;
  HEAP32[$10>>2] = 1;
  break;
 }
 case 3:  {
  $11 = $1;
  HEAP32[$11>>2] = 2;
  break;
 }
 case 4:  {
  $12 = $1;
  HEAP32[$12>>2] = 3;
  break;
 }
 case 5:  {
  $13 = $1;
  HEAP32[$13>>2] = 2;
  break;
 }
 default: {
 }
 }
 $14 = $c;
 $15 = HEAP32[$14>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _egcvip_get_input($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $channel = 0, $keys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $keys = sp + 4|0;
 $0 = $opaque;
 ;HEAP32[$keys>>2]=0|0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $channel = $2;
 $3 = HEAP32[((((gb + (10521668) | 0)) + 8|0))>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $7 = HEAP32[$keys>>2]|0;
  STACKTOP = sp;return ($7|0);
 }
 $5 = HEAP32[((((gb + (10521668) | 0)) + 8|0))>>2]|0;
 $6 = $channel;
 mftCall_vii($5|0,($6|0),($keys|0));
 $7 = HEAP32[$keys>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _set_audio_format_via_audio_plugin($user_data,$frequency,$bits) {
 $user_data = $user_data|0;
 $frequency = $frequency|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $saved_ai_dacrate = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_data;
 $1 = $frequency;
 $2 = $bits;
 $3 = $0;
 $ai = $3;
 $4 = $ai;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $saved_ai_dacrate = $6;
 $7 = HEAP32[((((gb + (8422180) | 0)) + 12|0))>>2]|0;
 $8 = $1;
 $9 = (($7>>>0) / ($8>>>0))&-1;
 $10 = (($9) - 1)|0;
 $11 = $ai;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[((((gb + (10521612) | 0)) + 4|0))>>2]|0;
 $14 = HEAP32[((((gb + (8422180) | 0)) + 4|0))>>2]|0;
 mftCall_vi($13|0,($14|0));
 $15 = $saved_ai_dacrate;
 $16 = $ai;
 $17 = ((($16)) + 16|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _push_audio_samples_via_audio_plugin($user_data,$buffer,$size) {
 $user_data = $user_data|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $saved_ai_dram = 0, $saved_ai_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_data;
 $1 = $buffer;
 $2 = $size;
 $3 = $0;
 $ai = $3;
 $4 = $ai;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $saved_ai_length = $6;
 $7 = $ai;
 $8 = HEAP32[$7>>2]|0;
 $saved_ai_dram = $8;
 $9 = $1;
 $10 = $ai;
 $11 = ((($10)) + 68|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $9;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = $ai;
 HEAP32[$19>>2] = $18;
 $20 = $2;
 $21 = $ai;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = HEAP32[((((gb + (10521612) | 0)) + 8|0))>>2]|0;
 mftCall_v($23|0);
 $24 = $saved_ai_length;
 $25 = $ai;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $saved_ai_dram;
 $28 = $ai;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function _get_time_using_C_localtime($user_data) {
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $current_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $current_time = sp;
 $0 = $user_data;
 (_time(($current_time|0))|0);
 $1 = (_localtime(($current_time|0))|0);
 STACKTOP = sp;return ($1|0);
}
function _rvip_rumble($opaque,$action) {
 $opaque = $opaque|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channel = 0, $cmd = 0, $rumble_data = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cmd = sp + 14|0;
 $0 = $opaque;
 $1 = $action;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $channel = $3;
 $4 = $1;
 $5 = ($4|0)==(1);
 $6 = $5 ? 1 : 0;
 $7 = $6&255;
 $rumble_data = $7;
 ;HEAP8[$cmd>>0]=HEAP8[(gb + (17134) | 0)>>0]|0;HEAP8[$cmd+1>>0]=HEAP8[(gb + (17134) | 0)+1>>0]|0;HEAP8[$cmd+2>>0]=HEAP8[(gb + (17134) | 0)+2>>0]|0;HEAP8[$cmd+3>>0]=HEAP8[(gb + (17134) | 0)+3>>0]|0;HEAP8[$cmd+4>>0]=HEAP8[(gb + (17134) | 0)+4>>0]|0;
 $8 = ((($cmd)) + 5|0);
 $9 = $rumble_data;
 $10 = $9&255;
 $11 = $10&255;
 _memset(($8|0),($11|0),32)|0;
 $12 = ((($cmd)) + 37|0);
 HEAP8[$12>>0] = 0;
 $13 = HEAP32[((((gb + (10521668) | 0)) + 4|0))>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[((((gb + (10521668) | 0)) + 4|0))>>2]|0;
 $16 = $channel;
 mftCall_vii($15|0,($16|0),($cmd|0));
 STACKTOP = sp;return;
}
function _plugin_connect($type,$plugin_handle) {
 $type = $type|0;
 $plugin_handle = $plugin_handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $type;
 $2 = $plugin_handle;
 $3 = $1;
 switch ($3|0) {
 case 2:  {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[(gb + (10521724) | 0)>>2]|0;
   $7 = ($6|0)!=(0);
   $8 = HEAP32[(gb + (10521728) | 0)>>2]|0;
   $9 = ($8|0)!=(0);
   $or$cond = $7 | $9;
   $10 = HEAP32[(gb + (10521732) | 0)>>2]|0;
   $11 = ($10|0)!=(0);
   $or$cond3 = $or$cond | $11;
   if ($or$cond3) {
    _DebugMessage(2,(gb + (17139) | 0),$vararg_buffer);
   }
  }
  $12 = $2;
  $13 = (_plugin_connect_gfx($12)|0);
  $0 = $13;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
  break;
 }
 case 3:  {
  $14 = $2;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = HEAP32[(gb + (10521728) | 0)>>2]|0;
   $17 = ($16|0)!=(0);
   $18 = HEAP32[(gb + (10521732) | 0)>>2]|0;
   $19 = ($18|0)!=(0);
   $or$cond5 = $17 | $19;
   if ($or$cond5) {
    _DebugMessage(2,(gb + (17139) | 0),$vararg_buffer8);
   }
  }
  $20 = $2;
  $21 = (_plugin_connect_audio($20)|0);
  $0 = $21;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
  break;
 }
 case 4:  {
  $22 = $2;
  $23 = ($22|0)!=(0|0);
  $24 = HEAP32[(gb + (10521732) | 0)>>2]|0;
  $25 = ($24|0)!=(0);
  $or$cond7 = $23 & $25;
  if ($or$cond7) {
   _DebugMessage(2,(gb + (17139) | 0),$vararg_buffer10);
  }
  $26 = $2;
  $27 = (_plugin_connect_input($26)|0);
  $0 = $27;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
  break;
 }
 case 1:  {
  $28 = $2;
  $29 = (_plugin_connect_rsp($28)|0);
  $0 = $29;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
  break;
 }
 default: {
  $0 = 5;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 }
 return (0)|0;
}
function _plugin_start($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 1:  {
  $3 = (_plugin_start_rsp()|0);
  $0 = $3;
  break;
 }
 case 2:  {
  $4 = (_plugin_start_gfx()|0);
  $0 = $4;
  break;
 }
 case 3:  {
  $5 = (_plugin_start_audio()|0);
  $0 = $5;
  break;
 }
 case 4:  {
  $6 = (_plugin_start_input()|0);
  $0 = $6;
  break;
 }
 default: {
  $0 = 5;
 }
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _plugin_check() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10521736) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  _DebugMessage(2,(gb + (17191) | 0),$vararg_buffer);
 }
 $2 = HEAP32[(gb + (10521732) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  _DebugMessage(2,(gb + (17249) | 0),$vararg_buffer1);
 }
 $4 = HEAP32[(gb + (10521724) | 0)>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  _DebugMessage(2,(gb + (17310) | 0),$vararg_buffer3);
 }
 $6 = HEAP32[(gb + (10521728) | 0)>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 _DebugMessage(2,(gb + (17368) | 0),$vararg_buffer5);
 STACKTOP = sp;return 0;
}
function _plugin_connect_gfx($plugin_handle) {
 $plugin_handle = $plugin_handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $APIVersion = 0, $PluginType = 0, $PluginVersion = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $PluginType = sp + 52|0;
 $PluginVersion = sp + 48|0;
 $APIVersion = sp + 44|0;
 $1 = $plugin_handle;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = HEAP32[(gb + (10521736) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $0 = 10;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $6 = $1;
   $7 = (_osal_dynlib_getproc($6,(gb + (17434) | 0))|0);
   HEAP32[(gb + (10521540) | 0)>>2] = $7;
   $8 = ($7|0)!=(0|0);
   do {
    if ($8) {
     $9 = $1;
     $10 = (_osal_dynlib_getproc($9,(gb + (18050) | 0))|0);
     HEAP32[((((gb + (10521540) | 0)) + 4|0))>>2] = $10;
     $11 = ($10|0)!=(0|0);
     if ($11) {
      $12 = $1;
      $13 = (_osal_dynlib_getproc($12,(gb + (18063) | 0))|0);
      HEAP32[((((gb + (10521540) | 0)) + 8|0))>>2] = $13;
      $14 = ($13|0)!=(0|0);
      if ($14) {
       $15 = $1;
       $16 = (_osal_dynlib_getproc($15,(gb + (18075) | 0))|0);
       HEAP32[((((gb + (10521540) | 0)) + 12|0))>>2] = $16;
       $17 = ($16|0)!=(0|0);
       if ($17) {
        $18 = $1;
        $19 = (_osal_dynlib_getproc($18,(gb + (18086) | 0))|0);
        HEAP32[((((gb + (10521540) | 0)) + 16|0))>>2] = $19;
        $20 = ($19|0)!=(0|0);
        if ($20) {
         $21 = $1;
         $22 = (_osal_dynlib_getproc($21,(gb + (18099) | 0))|0);
         HEAP32[((((gb + (10521540) | 0)) + 20|0))>>2] = $22;
         $23 = ($22|0)!=(0|0);
         if ($23) {
          $24 = $1;
          $25 = (_osal_dynlib_getproc($24,(gb + (17475) | 0))|0);
          HEAP32[((((gb + (10521540) | 0)) + 24|0))>>2] = $25;
          $26 = ($25|0)!=(0|0);
          if ($26) {
           $27 = $1;
           $28 = (_osal_dynlib_getproc($27,(gb + (17612) | 0))|0);
           HEAP32[((((gb + (10521540) | 0)) + 28|0))>>2] = $28;
           $29 = ($28|0)!=(0|0);
           if ($29) {
            $30 = $1;
            $31 = (_osal_dynlib_getproc($30,(gb + (18114) | 0))|0);
            HEAP32[((((gb + (10521540) | 0)) + 32|0))>>2] = $31;
            $32 = ($31|0)!=(0|0);
            if ($32) {
             $33 = $1;
             $34 = (_osal_dynlib_getproc($33,(gb + (18122) | 0))|0);
             HEAP32[((((gb + (10521540) | 0)) + 36|0))>>2] = $34;
             $35 = ($34|0)!=(0|0);
             if ($35) {
              $36 = $1;
              $37 = (_osal_dynlib_getproc($36,(gb + (18135) | 0))|0);
              HEAP32[((((gb + (10521540) | 0)) + 40|0))>>2] = $37;
              $38 = ($37|0)!=(0|0);
              if ($38) {
               $39 = $1;
               $40 = (_osal_dynlib_getproc($39,(gb + (18151) | 0))|0);
               HEAP32[((((gb + (10521540) | 0)) + 44|0))>>2] = $40;
               $41 = ($40|0)!=(0|0);
               if ($41) {
                $42 = $1;
                $43 = (_osal_dynlib_getproc($42,(gb + (18166) | 0))|0);
                HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2] = $43;
                $44 = ($43|0)!=(0|0);
                if ($44) {
                 $45 = $1;
                 $46 = (_osal_dynlib_getproc($45,(gb + (18178) | 0))|0);
                 HEAP32[((((gb + (10521540) | 0)) + 52|0))>>2] = $46;
                 $47 = ($46|0)!=(0|0);
                 if ($47) {
                  $48 = $1;
                  $49 = (_osal_dynlib_getproc($48,(gb + (18199) | 0))|0);
                  HEAP32[((((gb + (10521540) | 0)) + 60|0))>>2] = $49;
                  $50 = ($49|0)!=(0|0);
                  if ($50) {
                   $51 = $1;
                   $52 = (_osal_dynlib_getproc($51,(gb + (18206) | 0))|0);
                   HEAP32[((((gb + (10521540) | 0)) + 64|0))>>2] = $52;
                   $53 = ($52|0)!=(0|0);
                   if ($53) {
                    $54 = $1;
                    $55 = (_osal_dynlib_getproc($54,(gb + (18214) | 0))|0);
                    HEAP32[((((gb + (10521540) | 0)) + 68|0))>>2] = $55;
                    $56 = ($55|0)!=(0|0);
                    if (!($56)) {
                     break;
                    }
                    $57 = $1;
                    $58 = (_osal_dynlib_getproc($57,(gb + (18279) | 0))|0);
                    HEAP32[((((gb + (10521540) | 0)) + 56|0))>>2] = $58;
                    $59 = HEAP32[(gb + (10521540) | 0)>>2]|0;
                    (mftCall_iiiiii($59|0,($PluginType|0),($PluginVersion|0),($APIVersion|0),(0|0),(0|0))|0);
                    $60 = HEAP32[$PluginType>>2]|0;
                    $61 = ($60|0)!=(2);
                    do {
                     if (!($61)) {
                      $62 = HEAP32[$APIVersion>>2]|0;
                      $63 = $62 & -65536;
                      $64 = ($63|0)!=(131072);
                      if ($64) {
                       break;
                      }
                      $65 = HEAP32[$APIVersion>>2]|0;
                      $66 = ($65|0)<(131328);
                      if ($66) {
                       $67 = HEAP32[$APIVersion>>2]|0;
                       $68 = $67 >> 16;
                       $69 = $68 & 65535;
                       $70 = HEAP32[$APIVersion>>2]|0;
                       $71 = $70 >> 8;
                       $72 = $71 & 255;
                       $73 = HEAP32[$APIVersion>>2]|0;
                       $74 = $73 & 255;
                       HEAP32[$vararg_buffer4>>2] = $69;
                       $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
                       HEAP32[$vararg_ptr6>>2] = $72;
                       $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
                       HEAP32[$vararg_ptr7>>2] = $74;
                       _DebugMessage(2,(gb + (18323) | 0),$vararg_buffer4);
                       $75 = HEAP32[((((gb + (10521540) | 0)) + 52|0))>>2]|0;
                       mftCall_vi($75|0,((fb + (708) | 0)|0));
                       $76 = HEAP32[((((gb + (10521540) | 0)) + 52|0))>>2]|0;
                       HEAP32[(gb + (10522008) | 0)>>2] = $76;
                       HEAP32[((((gb + (10521540) | 0)) + 52|0))>>2] = (fb + (709) | 0);
                      }
                      $77 = HEAP32[$APIVersion>>2]|0;
                      $78 = ($77|0)<(131584);
                      $79 = HEAP32[((((gb + (10521540) | 0)) + 56|0))>>2]|0;
                      $80 = ($79|0)==(0|0);
                      $or$cond = $78 | $80;
                      if ($or$cond) {
                       $81 = HEAP32[$APIVersion>>2]|0;
                       $82 = $81 >> 16;
                       $83 = $82 & 65535;
                       $84 = HEAP32[$APIVersion>>2]|0;
                       $85 = $84 >> 8;
                       $86 = $85 & 255;
                       $87 = HEAP32[$APIVersion>>2]|0;
                       $88 = $87 & 255;
                       HEAP32[$vararg_buffer8>>2] = $83;
                       $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
                       HEAP32[$vararg_ptr11>>2] = $86;
                       $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
                       HEAP32[$vararg_ptr12>>2] = $88;
                       _DebugMessage(2,(gb + (18426) | 0),$vararg_buffer8);
                       HEAP32[((((gb + (10521540) | 0)) + 56|0))>>2] = (fb + (42) | 0);
                      }
                      HEAP32[(gb + (10521736) | 0)>>2] = 1;
                      break L1;
                     }
                    } while(0);
                    _DebugMessage(1,(gb + (18297) | 0),$vararg_buffer2);
                    _plugin_disconnect_gfx();
                    $0 = 3;
                    $89 = $0;
                    STACKTOP = sp;return ($89|0);
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   _DebugMessage(1,(gb + (18235) | 0),$vararg_buffer);
   _plugin_disconnect_gfx();
   $0 = 5;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  } else {
   _plugin_disconnect_gfx();
  }
 } while(0);
 $0 = 0;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _plugin_connect_audio($plugin_handle) {
 $plugin_handle = $plugin_handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $APIVersion = 0, $PluginType = 0, $PluginVersion = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $PluginType = sp + 20|0;
 $PluginVersion = sp + 16|0;
 $APIVersion = sp + 12|0;
 $1 = $plugin_handle;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = HEAP32[(gb + (10521724) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $0 = 10;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
   }
   $6 = $1;
   $7 = (_osal_dynlib_getproc($6,(gb + (17434) | 0))|0);
   HEAP32[(gb + (10521612) | 0)>>2] = $7;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $1;
    $10 = (_osal_dynlib_getproc($9,(gb + (17831) | 0))|0);
    HEAP32[((((gb + (10521612) | 0)) + 4|0))>>2] = $10;
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $12 = $1;
     $13 = (_osal_dynlib_getproc($12,(gb + (17848) | 0))|0);
     HEAP32[((((gb + (10521612) | 0)) + 8|0))>>2] = $13;
     $14 = ($13|0)!=(0|0);
     if ($14) {
      $15 = $1;
      $16 = (_osal_dynlib_getproc($15,(gb + (17861) | 0))|0);
      HEAP32[((((gb + (10521612) | 0)) + 12|0))>>2] = $16;
      $17 = ($16|0)!=(0|0);
      if ($17) {
       $18 = $1;
       $19 = (_osal_dynlib_getproc($18,(gb + (17875) | 0))|0);
       HEAP32[((((gb + (10521612) | 0)) + 16|0))>>2] = $19;
       $20 = ($19|0)!=(0|0);
       if ($20) {
        $21 = $1;
        $22 = (_osal_dynlib_getproc($21,(gb + (17612) | 0))|0);
        HEAP32[((((gb + (10521612) | 0)) + 24|0))>>2] = $22;
        $23 = ($22|0)!=(0|0);
        if ($23) {
         $24 = $1;
         $25 = (_osal_dynlib_getproc($24,(gb + (17475) | 0))|0);
         HEAP32[((((gb + (10521612) | 0)) + 20|0))>>2] = $25;
         $26 = ($25|0)!=(0|0);
         if ($26) {
          $27 = $1;
          $28 = (_osal_dynlib_getproc($27,(gb + (17888) | 0))|0);
          HEAP32[((((gb + (10521612) | 0)) + 28|0))>>2] = $28;
          $29 = ($28|0)!=(0|0);
          if ($29) {
           $30 = $1;
           $31 = (_osal_dynlib_getproc($30,(gb + (17903) | 0))|0);
           HEAP32[((((gb + (10521612) | 0)) + 32|0))>>2] = $31;
           $32 = ($31|0)!=(0|0);
           if ($32) {
            $33 = $1;
            $34 = (_osal_dynlib_getproc($33,(gb + (17912) | 0))|0);
            HEAP32[((((gb + (10521612) | 0)) + 36|0))>>2] = $34;
            $35 = ($34|0)!=(0|0);
            if ($35) {
             $36 = $1;
             $37 = (_osal_dynlib_getproc($36,(gb + (17923) | 0))|0);
             HEAP32[((((gb + (10521612) | 0)) + 40|0))>>2] = $37;
             $38 = ($37|0)!=(0|0);
             if ($38) {
              $39 = $1;
              $40 = (_osal_dynlib_getproc($39,(gb + (17938) | 0))|0);
              HEAP32[((((gb + (10521612) | 0)) + 44|0))>>2] = $40;
              $41 = ($40|0)!=(0|0);
              if ($41) {
               $42 = $1;
               $43 = (_osal_dynlib_getproc($42,(gb + (17953) | 0))|0);
               HEAP32[((((gb + (10521612) | 0)) + 48|0))>>2] = $43;
               $44 = ($43|0)!=(0|0);
               if ($44) {
                $45 = $1;
                $46 = (_osal_dynlib_getproc($45,(gb + (17964) | 0))|0);
                HEAP32[((((gb + (10521612) | 0)) + 52|0))>>2] = $46;
                $47 = ($46|0)!=(0|0);
                if ($47) {
                 $48 = HEAP32[(gb + (10521612) | 0)>>2]|0;
                 (mftCall_iiiiii($48|0,($PluginType|0),($PluginVersion|0),($APIVersion|0),(0|0),(0|0))|0);
                 $49 = HEAP32[$PluginType>>2]|0;
                 $50 = ($49|0)!=(3);
                 do {
                  if (!($50)) {
                   $51 = HEAP32[$APIVersion>>2]|0;
                   $52 = $51 & -65536;
                   $53 = ($52|0)!=(131072);
                   if ($53) {
                    break;
                   }
                   HEAP32[(gb + (10521724) | 0)>>2] = 1;
                   break L1;
                  }
                 } while(0);
                 _DebugMessage(1,(gb + (18024) | 0),$vararg_buffer1);
                 _plugin_disconnect_audio();
                 $0 = 3;
                 $54 = $0;
                 STACKTOP = sp;return ($54|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   _DebugMessage(1,(gb + (17980) | 0),$vararg_buffer);
   _plugin_disconnect_audio();
   $0 = 5;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  } else {
   _plugin_disconnect_audio();
  }
 } while(0);
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _plugin_connect_input($plugin_handle) {
 $plugin_handle = $plugin_handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $APIVersion = 0, $PluginType = 0, $PluginVersion = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $PluginType = sp + 28|0;
 $PluginVersion = sp + 24|0;
 $APIVersion = sp + 20|0;
 $1 = $plugin_handle;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = HEAP32[(gb + (10521728) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $0 = 10;
    $44 = $0;
    STACKTOP = sp;return ($44|0);
   }
   $6 = $1;
   $7 = (_osal_dynlib_getproc($6,(gb + (17434) | 0))|0);
   HEAP32[(gb + (10521668) | 0)>>2] = $7;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $1;
    $10 = (_osal_dynlib_getproc($9,(gb + (17551) | 0))|0);
    HEAP32[((((gb + (10521668) | 0)) + 4|0))>>2] = $10;
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $12 = $1;
     $13 = (_osal_dynlib_getproc($12,(gb + (17569) | 0))|0);
     HEAP32[((((gb + (10521668) | 0)) + 8|0))>>2] = $13;
     $14 = ($13|0)!=(0|0);
     if ($14) {
      $15 = $1;
      $16 = (_osal_dynlib_getproc($15,(gb + (17577) | 0))|0);
      HEAP32[((((gb + (10521668) | 0)) + 12|0))>>2] = $16;
      $17 = ($16|0)!=(0|0);
      if ($17) {
       $18 = $1;
       $19 = (_osal_dynlib_getproc($18,(gb + (17597) | 0))|0);
       HEAP32[((((gb + (10521668) | 0)) + 16|0))>>2] = $19;
       $20 = ($19|0)!=(0|0);
       if ($20) {
        $21 = $1;
        $22 = (_osal_dynlib_getproc($21,(gb + (17612) | 0))|0);
        HEAP32[((((gb + (10521668) | 0)) + 24|0))>>2] = $22;
        $23 = ($22|0)!=(0|0);
        if ($23) {
         $24 = $1;
         $25 = (_osal_dynlib_getproc($24,(gb + (17475) | 0))|0);
         HEAP32[((((gb + (10521668) | 0)) + 20|0))>>2] = $25;
         $26 = ($25|0)!=(0|0);
         if ($26) {
          $27 = $1;
          $28 = (_osal_dynlib_getproc($27,(gb + (17620) | 0))|0);
          HEAP32[((((gb + (10521668) | 0)) + 28|0))>>2] = $28;
          $29 = ($28|0)!=(0|0);
          if ($29) {
           $30 = $1;
           $31 = (_osal_dynlib_getproc($30,(gb + (17632) | 0))|0);
           HEAP32[((((gb + (10521668) | 0)) + 32|0))>>2] = $31;
           $32 = ($31|0)!=(0|0);
           if ($32) {
            $33 = HEAP32[(gb + (10521668) | 0)>>2]|0;
            (mftCall_iiiiii($33|0,($PluginType|0),($PluginVersion|0),($APIVersion|0),(0|0),(0|0))|0);
            $34 = HEAP32[$PluginType>>2]|0;
            $35 = ($34|0)!=(4);
            if (!($35)) {
             $36 = HEAP32[$APIVersion>>2]|0;
             $37 = $36 & -65536;
             $38 = ($37|0)!=(131072);
             if (!($38)) {
              $39 = HEAP32[$APIVersion>>2]|0;
              $40 = ($39|0)<(131073);
              if ($40) {
               HEAP32[((((gb + (10521668) | 0)) + 36|0))>>2] = 0;
              } else {
               $41 = $1;
               $42 = (_osal_dynlib_getproc($41,(gb + (17712) | 0))|0);
               HEAP32[((((gb + (10521668) | 0)) + 36|0))>>2] = $42;
               $43 = ($42|0)!=(0|0);
               if (!($43)) {
                _DebugMessage(3,(gb + (17727) | 0),$vararg_buffer3);
               }
              }
              HEAP32[(gb + (10521728) | 0)>>2] = 1;
              break;
             }
            }
            _DebugMessage(1,(gb + (17686) | 0),$vararg_buffer1);
            _plugin_disconnect_input();
            $0 = 3;
            $44 = $0;
            STACKTOP = sp;return ($44|0);
           }
          }
         }
        }
       }
      }
     }
    }
   }
   _DebugMessage(1,(gb + (17642) | 0),$vararg_buffer);
   _plugin_disconnect_input();
   $0 = 5;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  } else {
   _plugin_disconnect_input();
  }
 } while(0);
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _plugin_connect_rsp($plugin_handle) {
 $plugin_handle = $plugin_handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $APIVersion = 0, $PluginType = 0, $PluginVersion = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $PluginType = sp + 20|0;
 $PluginVersion = sp + 16|0;
 $APIVersion = sp + 12|0;
 $1 = $plugin_handle;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = HEAP32[(gb + (10521732) | 0)>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $0 = 10;
    $24 = $0;
    STACKTOP = sp;return ($24|0);
   }
   $6 = $1;
   $7 = (_osal_dynlib_getproc($6,(gb + (17434) | 0))|0);
   HEAP32[(gb + (10521708) | 0)>>2] = $7;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $1;
    $10 = (_osal_dynlib_getproc($9,(gb + (17451) | 0))|0);
    HEAP32[((((gb + (10521708) | 0)) + 4|0))>>2] = $10;
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $12 = $1;
     $13 = (_osal_dynlib_getproc($12,(gb + (17463) | 0))|0);
     HEAP32[((((gb + (10521708) | 0)) + 8|0))>>2] = $13;
     $14 = ($13|0)!=(0|0);
     if ($14) {
      $15 = $1;
      $16 = (_osal_dynlib_getproc($15,(gb + (17475) | 0))|0);
      HEAP32[((((gb + (10521708) | 0)) + 12|0))>>2] = $16;
      $17 = ($16|0)!=(0|0);
      if ($17) {
       $18 = HEAP32[(gb + (10521708) | 0)>>2]|0;
       (mftCall_iiiiii($18|0,($PluginType|0),($PluginVersion|0),($APIVersion|0),(0|0),(0|0))|0);
       $19 = HEAP32[$PluginType>>2]|0;
       $20 = ($19|0)!=(1);
       if (!($20)) {
        $21 = HEAP32[$APIVersion>>2]|0;
        $22 = $21 & -65536;
        $23 = ($22|0)!=(131072);
        if (!($23)) {
         HEAP32[(gb + (10521732) | 0)>>2] = 1;
         break;
        }
       }
       _DebugMessage(1,(gb + (17527) | 0),$vararg_buffer1);
       _plugin_disconnect_rsp();
       $0 = 3;
       $24 = $0;
       STACKTOP = sp;return ($24|0);
      }
     }
    }
   }
   _DebugMessage(1,(gb + (17485) | 0),$vararg_buffer);
   _plugin_disconnect_rsp();
   $0 = 5;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  } else {
   _plugin_disconnect_rsp();
  }
 } while(0);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _plugin_start_rsp() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $rsp_info$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rsp_info$byval_copy = sp;
 HEAP32[(gb + (10521904) | 0)>>2] = (gb + (21216) | 0);
 HEAP32[((((gb + (10521904) | 0)) + 4|0))>>2] = (gb + (8413160) | 0);
 HEAP32[((((gb + (10521904) | 0)) + 8|0))>>2] = ((((gb + (8413160) | 0)) + 4096|0));
 HEAP32[((((gb + (10521904) | 0)) + 12|0))>>2] = ((((gb + (8410936) | 0)) + 8|0));
 HEAP32[((((gb + (10521904) | 0)) + 16|0))>>2] = ((((gb + (8413160) | 0)) + 8192|0));
 HEAP32[((((gb + (10521904) | 0)) + 20|0))>>2] = ((((gb + (8413160) | 0)) + 8196|0));
 HEAP32[((((gb + (10521904) | 0)) + 24|0))>>2] = ((((gb + (8413160) | 0)) + 8200|0));
 HEAP32[((((gb + (10521904) | 0)) + 28|0))>>2] = ((((gb + (8413160) | 0)) + 8204|0));
 HEAP32[((((gb + (10521904) | 0)) + 32|0))>>2] = ((((gb + (8413160) | 0)) + 8208|0));
 HEAP32[((((gb + (10521904) | 0)) + 36|0))>>2] = ((((gb + (8413160) | 0)) + 8212|0));
 HEAP32[((((gb + (10521904) | 0)) + 40|0))>>2] = ((((gb + (8413160) | 0)) + 8216|0));
 HEAP32[((((gb + (10521904) | 0)) + 44|0))>>2] = ((((gb + (8413160) | 0)) + 8224|0));
 HEAP32[((((gb + (10521904) | 0)) + 48|0))>>2] = ((((gb + (8413160) | 0)) + 8220|0));
 HEAP32[((((gb + (10521904) | 0)) + 52|0))>>2] = (gb + (8410952) | 0);
 HEAP32[((((gb + (10521904) | 0)) + 56|0))>>2] = ((((gb + (8410952) | 0)) + 4|0));
 HEAP32[((((gb + (10521904) | 0)) + 60|0))>>2] = ((((gb + (8410952) | 0)) + 8|0));
 HEAP32[((((gb + (10521904) | 0)) + 64|0))>>2] = ((((gb + (8410952) | 0)) + 12|0));
 HEAP32[((((gb + (10521904) | 0)) + 68|0))>>2] = ((((gb + (8410952) | 0)) + 16|0));
 HEAP32[((((gb + (10521904) | 0)) + 72|0))>>2] = ((((gb + (8410952) | 0)) + 20|0));
 HEAP32[((((gb + (10521904) | 0)) + 76|0))>>2] = ((((gb + (8410952) | 0)) + 24|0));
 HEAP32[((((gb + (10521904) | 0)) + 80|0))>>2] = ((((gb + (8410952) | 0)) + 28|0));
 HEAP32[((((gb + (10521904) | 0)) + 84|0))>>2] = (fb + (710) | 0);
 $0 = HEAP32[((((gb + (10521540) | 0)) + 16|0))>>2]|0;
 HEAP32[((((gb + (10521904) | 0)) + 88|0))>>2] = $0;
 $1 = HEAP32[((((gb + (10521612) | 0)) + 16|0))>>2]|0;
 HEAP32[((((gb + (10521904) | 0)) + 92|0))>>2] = $1;
 $2 = HEAP32[((((gb + (10521540) | 0)) + 20|0))>>2]|0;
 HEAP32[((((gb + (10521904) | 0)) + 96|0))>>2] = $2;
 $3 = HEAP32[((((gb + (10521540) | 0)) + 32|0))>>2]|0;
 HEAP32[((((gb + (10521904) | 0)) + 100|0))>>2] = $3;
 $4 = HEAP32[((((gb + (10521708) | 0)) + 8|0))>>2]|0;
 dest=$rsp_info$byval_copy; src=(gb + (10521904) | 0); stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 mftCall_vii($4|0,($rsp_info$byval_copy|0),(0|0));
 STACKTOP = sp;return 0;
}
function _plugin_start_gfx() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $gfx_info$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gfx_info$byval_copy = sp + 8|0;
 $1 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 HEAP32[(gb + (10521792) | 0)>>2] = $1;
 HEAP32[((((gb + (10521792) | 0)) + 4|0))>>2] = (gb + (21216) | 0);
 HEAP32[((((gb + (10521792) | 0)) + 8|0))>>2] = (gb + (8413160) | 0);
 HEAP32[((((gb + (10521792) | 0)) + 12|0))>>2] = ((((gb + (8413160) | 0)) + 4096|0));
 HEAP32[((((gb + (10521792) | 0)) + 16|0))>>2] = ((((gb + (8410936) | 0)) + 8|0));
 HEAP32[((((gb + (10521792) | 0)) + 20|0))>>2] = (gb + (8410952) | 0);
 HEAP32[((((gb + (10521792) | 0)) + 24|0))>>2] = ((((gb + (8410952) | 0)) + 4|0));
 HEAP32[((((gb + (10521792) | 0)) + 28|0))>>2] = ((((gb + (8410952) | 0)) + 8|0));
 HEAP32[((((gb + (10521792) | 0)) + 32|0))>>2] = ((((gb + (8410952) | 0)) + 12|0));
 HEAP32[((((gb + (10521792) | 0)) + 36|0))>>2] = ((((gb + (8410952) | 0)) + 16|0));
 HEAP32[((((gb + (10521792) | 0)) + 40|0))>>2] = ((((gb + (8410952) | 0)) + 20|0));
 HEAP32[((((gb + (10521792) | 0)) + 44|0))>>2] = ((((gb + (8410952) | 0)) + 24|0));
 HEAP32[((((gb + (10521792) | 0)) + 48|0))>>2] = ((((gb + (8410952) | 0)) + 28|0));
 HEAP32[((((gb + (10521792) | 0)) + 52|0))>>2] = (gb + (8421560) | 0);
 HEAP32[((((gb + (10521792) | 0)) + 56|0))>>2] = ((((gb + (8421560) | 0)) + 4|0));
 HEAP32[((((gb + (10521792) | 0)) + 60|0))>>2] = ((((gb + (8421560) | 0)) + 8|0));
 HEAP32[((((gb + (10521792) | 0)) + 64|0))>>2] = ((((gb + (8421560) | 0)) + 12|0));
 HEAP32[((((gb + (10521792) | 0)) + 68|0))>>2] = ((((gb + (8421560) | 0)) + 16|0));
 HEAP32[((((gb + (10521792) | 0)) + 72|0))>>2] = ((((gb + (8421560) | 0)) + 20|0));
 HEAP32[((((gb + (10521792) | 0)) + 76|0))>>2] = ((((gb + (8421560) | 0)) + 24|0));
 HEAP32[((((gb + (10521792) | 0)) + 80|0))>>2] = ((((gb + (8421560) | 0)) + 28|0));
 HEAP32[((((gb + (10521792) | 0)) + 84|0))>>2] = ((((gb + (8421560) | 0)) + 32|0));
 HEAP32[((((gb + (10521792) | 0)) + 88|0))>>2] = ((((gb + (8421560) | 0)) + 36|0));
 HEAP32[((((gb + (10521792) | 0)) + 92|0))>>2] = ((((gb + (8421560) | 0)) + 40|0));
 HEAP32[((((gb + (10521792) | 0)) + 96|0))>>2] = ((((gb + (8421560) | 0)) + 44|0));
 HEAP32[((((gb + (10521792) | 0)) + 100|0))>>2] = ((((gb + (8421560) | 0)) + 48|0));
 HEAP32[((((gb + (10521792) | 0)) + 104|0))>>2] = ((((gb + (8421560) | 0)) + 52|0));
 HEAP32[((((gb + (10521792) | 0)) + 108|0))>>2] = (fb + (710) | 0);
 $2 = HEAP32[((((gb + (10521540) | 0)) + 8|0))>>2]|0;
 dest=$gfx_info$byval_copy; src=(gb + (10521792) | 0); stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = (mftCall_ii($2|0,($gfx_info$byval_copy|0))|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 } else {
  $0 = 11;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _plugin_start_audio() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $audio_info$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $audio_info$byval_copy = sp + 4|0;
 HEAP32[(gb + (10521744) | 0)>>2] = (gb + (21216) | 0);
 HEAP32[((((gb + (10521744) | 0)) + 4|0))>>2] = (gb + (8413160) | 0);
 HEAP32[((((gb + (10521744) | 0)) + 8|0))>>2] = ((((gb + (8413160) | 0)) + 4096|0));
 HEAP32[((((gb + (10521744) | 0)) + 12|0))>>2] = ((((gb + (8410936) | 0)) + 8|0));
 HEAP32[((((gb + (10521744) | 0)) + 16|0))>>2] = (gb + (8421404) | 0);
 HEAP32[((((gb + (10521744) | 0)) + 20|0))>>2] = ((((gb + (8421404) | 0)) + 4|0));
 HEAP32[((((gb + (10521744) | 0)) + 24|0))>>2] = ((((gb + (8421404) | 0)) + 8|0));
 HEAP32[((((gb + (10521744) | 0)) + 28|0))>>2] = (gb + (10521788) | 0);
 HEAP32[((((gb + (10521744) | 0)) + 32|0))>>2] = ((((gb + (8421404) | 0)) + 16|0));
 HEAP32[((((gb + (10521744) | 0)) + 36|0))>>2] = ((((gb + (8421404) | 0)) + 20|0));
 HEAP32[((((gb + (10521744) | 0)) + 40|0))>>2] = (fb + (710) | 0);
 $1 = HEAP32[((((gb + (10521612) | 0)) + 12|0))>>2]|0;
 dest=$audio_info$byval_copy; src=(gb + (10521744) | 0); stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = (mftCall_ii($1|0,($audio_info$byval_copy|0))|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 } else {
  $0 = 11;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _plugin_start_input() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $control_info$byval_copy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $control_info$byval_copy = sp + 4|0;
 HEAP32[(gb + (10521740) | 0)>>2] = (gb + (10521492) | 0);
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((gb + (10521492) | 0) + (($2*12)|0)|0);
  HEAP32[$3>>2] = 0;
  $4 = $i;
  $5 = ((gb + (10521492) | 0) + (($4*12)|0)|0);
  $6 = ((($5)) + 4|0);
  HEAP32[$6>>2] = 0;
  $7 = $i;
  $8 = ((gb + (10521492) | 0) + (($7*12)|0)|0);
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 1;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = HEAP32[((((gb + (10521668) | 0)) + 12|0))>>2]|0;
 ;HEAP32[$control_info$byval_copy>>2]=HEAP32[(gb + (10521740) | 0)>>2]|0;
 mftCall_vi($12|0,($control_info$byval_copy|0));
 STACKTOP = sp;return 0;
}
function _EmptyFunc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _plugin_disconnect_rsp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[(gb + (10521708) | 0)>>2]=HEAP32[(gb + (304) | 0)>>2]|0;HEAP32[(gb + (10521708) | 0)+4>>2]=HEAP32[(gb + (304) | 0)+4>>2]|0;HEAP32[(gb + (10521708) | 0)+8>>2]=HEAP32[(gb + (304) | 0)+8>>2]|0;HEAP32[(gb + (10521708) | 0)+12>>2]=HEAP32[(gb + (304) | 0)+12>>2]|0;
 HEAP32[(gb + (10521732) | 0)>>2] = 0;
 return;
}
function _plugin_disconnect_input() {
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=(gb + (10521668) | 0); src=(gb + (320) | 0); stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(gb + (10521728) | 0)>>2] = 0;
 return;
}
function _plugin_disconnect_audio() {
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=(gb + (10521612) | 0); src=(gb + (360) | 0); stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(gb + (10521724) | 0)>>2] = 0;
 return;
}
function _plugin_disconnect_gfx() {
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=(gb + (10521540) | 0); src=(gb + (416) | 0); stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(gb + (10521736) | 0)>>2] = 0;
 HEAP32[(gb + (10522012) | 0)>>2] = 0;
 return;
}
function _backcompat_videoRenderCallback($unused) {
 $unused = $unused|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $unused;
 $1 = HEAP32[(gb + (10522012) | 0)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(gb + (10522012) | 0)>>2]|0;
 mftCall_vi($3|0,1);
 STACKTOP = sp;return;
}
function _backcompat_setRenderCallbackIntercept($callback) {
 $callback = $callback|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $callback;
 $1 = $0;
 HEAP32[(gb + (10522012) | 0)>>2] = $1;
 STACKTOP = sp;return;
}
function _dummyvideo_PluginGetVersion($PluginType,$PluginVersion,$APIVersion,$PluginNamePtr,$Capabilities) {
 $PluginType = $PluginType|0;
 $PluginVersion = $PluginVersion|0;
 $APIVersion = $APIVersion|0;
 $PluginNamePtr = $PluginNamePtr|0;
 $Capabilities = $Capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $PluginType;
 $1 = $PluginVersion;
 $2 = $APIVersion;
 $3 = $PluginNamePtr;
 $4 = $Capabilities;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  HEAP32[$7>>2] = 2;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  HEAP32[$10>>2] = 65536;
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 131584;
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  HEAP32[$16>>2] = (gb + (18512) | 0);
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $4;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _dummyvideo_ChangeWindow() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_InitiateGFX($Gfx_Info) {
 $Gfx_Info = $Gfx_Info|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _dummyvideo_MoveScreen($xpos,$ypos) {
 $xpos = $xpos|0;
 $ypos = $ypos|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xpos;
 $1 = $ypos;
 STACKTOP = sp;return;
}
function _dummyvideo_ProcessDList() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_ProcessRDPList() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_RomClosed() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_RomOpen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _dummyvideo_ShowCFB() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_UpdateScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_ViStatusChanged() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_ViWidthChanged() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyvideo_ReadScreen2($dest,$width,$height,$front) {
 $dest = $dest|0;
 $width = $width|0;
 $height = $height|0;
 $front = $front|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $width;
 $2 = $height;
 $3 = $front;
 STACKTOP = sp;return;
}
function _dummyvideo_SetRenderingCallback($callback) {
 $callback = $callback|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $callback;
 STACKTOP = sp;return;
}
function _dummyvideo_FBRead($addr) {
 $addr = $addr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 STACKTOP = sp;return;
}
function _dummyvideo_FBWrite($addr,$size) {
 $addr = $addr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $size;
 STACKTOP = sp;return;
}
function _dummyvideo_FBGetFrameBufferInfo($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 STACKTOP = sp;return;
}
function _dummyvideo_ResizeVideoOutput($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 STACKTOP = sp;return;
}
function _dummyaudio_PluginGetVersion($PluginType,$PluginVersion,$APIVersion,$PluginNamePtr,$Capabilities) {
 $PluginType = $PluginType|0;
 $PluginVersion = $PluginVersion|0;
 $APIVersion = $APIVersion|0;
 $PluginNamePtr = $PluginNamePtr|0;
 $Capabilities = $Capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $PluginType;
 $1 = $PluginVersion;
 $2 = $APIVersion;
 $3 = $PluginNamePtr;
 $4 = $Capabilities;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  HEAP32[$7>>2] = 3;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  HEAP32[$10>>2] = 65536;
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 131072;
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  HEAP32[$16>>2] = (gb + (18532) | 0);
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $4;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _dummyaudio_AiDacrateChanged($SystemType) {
 $SystemType = $SystemType|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SystemType;
 STACKTOP = sp;return;
}
function _dummyaudio_AiLenChanged() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_InitiateAudio($Audio_Info) {
 $Audio_Info = $Audio_Info|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _dummyaudio_RomOpen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _dummyaudio_RomClosed() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_ProcessAList() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_SetSpeedFactor($percent) {
 $percent = $percent|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $percent;
 STACKTOP = sp;return;
}
function _dummyaudio_VolumeUp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_VolumeDown() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_VolumeGetLevel() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _dummyaudio_VolumeSetLevel($level) {
 $level = $level|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 STACKTOP = sp;return;
}
function _dummyaudio_VolumeMute() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyaudio_VolumeGetString() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (18552) | 0)|0);
}
function _dummyinput_PluginGetVersion($PluginType,$PluginVersion,$APIVersion,$PluginNamePtr,$Capabilities) {
 $PluginType = $PluginType|0;
 $PluginVersion = $PluginVersion|0;
 $APIVersion = $APIVersion|0;
 $PluginNamePtr = $PluginNamePtr|0;
 $Capabilities = $Capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $PluginType;
 $1 = $PluginVersion;
 $2 = $APIVersion;
 $3 = $PluginNamePtr;
 $4 = $Capabilities;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  HEAP32[$7>>2] = 4;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  HEAP32[$10>>2] = 65536;
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 131073;
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  HEAP32[$16>>2] = (gb + (18561) | 0);
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $4;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _dummyinput_InitiateControllers($ControlInfo) {
 $ControlInfo = $ControlInfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ControlInfo>>2]|0;
 HEAP32[$0>>2] = 1;
 return;
}
function _dummyinput_GetKeys($Control,$Keys) {
 $Control = $Control|0;
 $Keys = $Keys|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Control;
 $1 = $Keys;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _dummyinput_ControllerCommand($Control,$Command) {
 $Control = $Control|0;
 $Command = $Command|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Control;
 $1 = $Command;
 STACKTOP = sp;return;
}
function _dummyinput_ReadController($Control,$Command) {
 $Control = $Control|0;
 $Command = $Command|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Control;
 $1 = $Command;
 STACKTOP = sp;return;
}
function _dummyinput_RomOpen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _dummyinput_RomClosed() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummyinput_SDL_KeyDown($keymod,$keysym) {
 $keymod = $keymod|0;
 $keysym = $keysym|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $keymod;
 $1 = $keysym;
 STACKTOP = sp;return;
}
function _dummyinput_SDL_KeyUp($keymod,$keysym) {
 $keymod = $keymod|0;
 $keysym = $keysym|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $keymod;
 $1 = $keysym;
 STACKTOP = sp;return;
}
function _dummyrsp_PluginGetVersion($PluginType,$PluginVersion,$APIVersion,$PluginNamePtr,$Capabilities) {
 $PluginType = $PluginType|0;
 $PluginVersion = $PluginVersion|0;
 $APIVersion = $APIVersion|0;
 $PluginNamePtr = $PluginNamePtr|0;
 $Capabilities = $Capabilities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $PluginType;
 $1 = $PluginVersion;
 $2 = $APIVersion;
 $3 = $PluginNamePtr;
 $4 = $Capabilities;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  HEAP32[$7>>2] = 1;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  HEAP32[$10>>2] = 65536;
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 131072;
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  HEAP32[$16>>2] = (gb + (18581) | 0);
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $4;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _dummyrsp_DoRspCycles($Cycles) {
 $Cycles = $Cycles|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Cycles;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _dummyrsp_InitiateRSP($Rsp_Info,$CycleCount) {
 $Rsp_Info = $Rsp_Info|0;
 $CycleCount = $CycleCount|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CycleCount;
 STACKTOP = sp;return;
}
function _dummyrsp_RomClosed() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _generic_jump_to($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $2 = ($1|0)==(0);
 $3 = $0;
 if ($2) {
  $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $5 = ((($4)) + 20|0);
  HEAP32[$5>>2] = $3;
  STACKTOP = sp;return;
 } else {
  HEAP32[(gb + (10523020) | 0)>>2] = $3;
  _jump_to_func();
  STACKTOP = sp;return;
 }
}
function _r4300_reset_hard() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0>>>0)<(32);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((gb + (8409952) | 0) + ($2<<3)|0);
  $4 = $3;
  $5 = $4;
  HEAP32[$5>>2] = 0;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
  $8 = $i;
  $9 = ((gb + (14717332) | 0) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = $i;
  $11 = ((gb + (8410232) | 0) + ($10<<3)|0);
  $12 = $11;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  $16 = $i;
  $17 = ((gb + (23106792) | 0) + (($16*52)|0)|0);
  HEAP16[$17>>1] = 0;
  $18 = $i;
  $19 = ((gb + (23106792) | 0) + (($18*52)|0)|0);
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = $i;
  $22 = ((gb + (23106792) | 0) + (($21*52)|0)|0);
  $23 = ((($22)) + 8|0);
  HEAP8[$23>>0] = 0;
  $24 = $i;
  $25 = ((gb + (23106792) | 0) + (($24*52)|0)|0);
  $26 = ((($25)) + 9|0);
  HEAP8[$26>>0] = 0;
  $27 = $i;
  $28 = ((gb + (23106792) | 0) + (($27*52)|0)|0);
  $29 = ((($28)) + 12|0);
  HEAP32[$29>>2] = 0;
  $30 = $i;
  $31 = ((gb + (23106792) | 0) + (($30*52)|0)|0);
  $32 = ((($31)) + 16|0);
  HEAP8[$32>>0] = 0;
  $33 = $i;
  $34 = ((gb + (23106792) | 0) + (($33*52)|0)|0);
  $35 = ((($34)) + 17|0);
  HEAP8[$35>>0] = 0;
  $36 = $i;
  $37 = ((gb + (23106792) | 0) + (($36*52)|0)|0);
  $38 = ((($37)) + 18|0);
  HEAP8[$38>>0] = 0;
  $39 = $i;
  $40 = ((gb + (23106792) | 0) + (($39*52)|0)|0);
  $41 = ((($40)) + 20|0);
  HEAP32[$41>>2] = 0;
  $42 = $i;
  $43 = ((gb + (23106792) | 0) + (($42*52)|0)|0);
  $44 = ((($43)) + 24|0);
  HEAP8[$44>>0] = 0;
  $45 = $i;
  $46 = ((gb + (23106792) | 0) + (($45*52)|0)|0);
  $47 = ((($46)) + 25|0);
  HEAP8[$47>>0] = 0;
  $48 = $i;
  $49 = ((gb + (23106792) | 0) + (($48*52)|0)|0);
  $50 = ((($49)) + 26|0);
  HEAP8[$50>>0] = 0;
  $51 = $i;
  $52 = ((gb + (23106792) | 0) + (($51*52)|0)|0);
  $53 = ((($52)) + 27|0);
  HEAP8[$53>>0] = 0;
  $54 = $i;
  $55 = ((gb + (23106792) | 0) + (($54*52)|0)|0);
  $56 = ((($55)) + 28|0);
  HEAP32[$56>>2] = 0;
  $57 = $i;
  $58 = ((gb + (23106792) | 0) + (($57*52)|0)|0);
  $59 = ((($58)) + 32|0);
  HEAP32[$59>>2] = 0;
  $60 = $i;
  $61 = ((gb + (23106792) | 0) + (($60*52)|0)|0);
  $62 = ((($61)) + 36|0);
  HEAP32[$62>>2] = 0;
  $63 = $i;
  $64 = ((gb + (23106792) | 0) + (($63*52)|0)|0);
  $65 = ((($64)) + 40|0);
  HEAP32[$65>>2] = 0;
  $66 = $i;
  $67 = ((gb + (23106792) | 0) + (($66*52)|0)|0);
  $68 = ((($67)) + 44|0);
  HEAP32[$68>>2] = 0;
  $69 = $i;
  $70 = ((gb + (23106792) | 0) + (($69*52)|0)|0);
  $71 = ((($70)) + 48|0);
  HEAP32[$71>>2] = 0;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = ($74>>>0)<(1048576);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = ((gb + (14718184) | 0) + ($76<<2)|0);
  HEAP32[$77>>2] = 0;
  $78 = $i;
  $79 = ((gb + (18912488) | 0) + ($78<<2)|0);
  HEAP32[$79>>2] = 0;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 HEAP32[(gb + (10522032) | 0)>>2] = 0;
 $82 = (gb + (8410208) | 0);
 $83 = $82;
 HEAP32[$83>>2] = 0;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 $86 = (gb + (8410216) | 0);
 $87 = $86;
 HEAP32[$87>>2] = 0;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = 0;
 HEAP32[(gb + (14717716) | 0)>>2] = 1297;
 HEAP32[(gb + (14717720) | 0)>>2] = 0;
 HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2] = 31;
 HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = 872415232;
 $90 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 _set_fpr_pointers($90);
 HEAP32[((((gb + (14717332) | 0)) + 64|0))>>2] = 451683;
 HEAP32[((((gb + (14717332) | 0)) + 60|0))>>2] = 2816;
 HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = 20480;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 92;
 HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2] = 8388592;
 HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = -1;
 HEAP32[((((gb + (14717332) | 0)) + 32|0))>>2] = -1;
 HEAP32[((((gb + (14717332) | 0)) + 120|0))>>2] = -1;
 $91 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 _update_x86_rounding_mode($91);
 STACKTOP = sp;return;
}
function _r4300_reset_soft() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bsd_dom1_config = 0, $reset_type = 0, $rom_type = 0, $s7 = 0, $tv_type = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rom_type = 0;
 $reset_type = 0;
 $s7 = 0;
 $0 = (_get_tv_type()|0);
 $tv_type = $0;
 $1 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $bsd_dom1_config = $2;
 HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = 872415232;
 HEAP32[((((gb + (14717332) | 0)) + 64|0))>>2] = 451683;
 HEAP32[((((gb + (8413160) | 0)) + 8208|0))>>2] = 1;
 HEAP32[((((gb + (8413160) | 0)) + 8224|0))>>2] = 0;
 $3 = $bsd_dom1_config;
 $4 = $3 & 255;
 HEAP32[((((gb + (8409824) | 0)) + 20|0))>>2] = $4;
 $5 = $bsd_dom1_config;
 $6 = $5 >>> 8;
 $7 = $6 & 255;
 HEAP32[((((gb + (8409824) | 0)) + 24|0))>>2] = $7;
 $8 = $bsd_dom1_config;
 $9 = $8 >>> 16;
 $10 = $9 & 15;
 HEAP32[((((gb + (8409824) | 0)) + 28|0))>>2] = $10;
 $11 = $bsd_dom1_config;
 $12 = $11 >>> 20;
 $13 = $12 & 3;
 HEAP32[((((gb + (8409824) | 0)) + 32|0))>>2] = $13;
 HEAP32[((((gb + (8409824) | 0)) + 16|0))>>2] = 0;
 HEAP32[(gb + (8421404) | 0)>>2] = 0;
 HEAP32[((((gb + (8421404) | 0)) + 4|0))>>2] = 0;
 HEAP32[((((gb + (8421560) | 0)) + 12|0))>>2] = 1023;
 HEAP32[((((gb + (8421560) | 0)) + 16|0))>>2] = 0;
 HEAP32[((((gb + (8421560) | 0)) + 36|0))>>2] = 0;
 $14 = HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2]|0;
 $15 = $14 & -30;
 HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2] = $15;
 $16 = HEAP32[(gb + (8422108) | 0)>>2]|0;
 $17 = ((($16)) + 64|0);
 _memcpy((((((gb + (8413160) | 0)) + 64|0))|0),($17|0),4032)|0;
 $18 = $rom_type;
 $19 = ((((gb + (8409952) | 0)) + 152|0));
 $20 = $19;
 HEAP32[$20>>2] = $18;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = $tv_type;
 $24 = ((((gb + (8409952) | 0)) + 160|0));
 $25 = $24;
 HEAP32[$25>>2] = $23;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = $reset_type;
 $29 = ((((gb + (8409952) | 0)) + 168|0));
 $30 = $29;
 HEAP32[$30>>2] = $28;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[((((gb + (8410672) | 0)) + 252|0))>>2]|0;
 $34 = ((((gb + (8409952) | 0)) + 176|0));
 $35 = $34;
 HEAP32[$35>>2] = $33;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = $s7;
 $39 = ((((gb + (8409952) | 0)) + 184|0));
 $40 = $39;
 HEAP32[$40>>2] = $38;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 HEAP32[((((gb + (8413160) | 0)) + 4096|0))>>2] = 1007534016;
 HEAP32[((((gb + (8413160) | 0)) + 4100|0))>>2] = -1918367748;
 HEAP32[((((gb + (8413160) | 0)) + 4104|0))>>2] = 632096704;
 HEAP32[((((gb + (8413160) | 0)) + 4108|0))>>2] = 822608000;
 HEAP32[((((gb + (8413160) | 0)) + 4112|0))>>2] = 1426128892;
 HEAP32[((((gb + (8413160) | 0)) + 4116|0))>>2] = 1007534016;
 HEAP32[((((gb + (8413160) | 0)) + 4120|0))>>2] = -1918369756;
 HEAP32[((((gb + (8413160) | 0)) + 4124|0))>>2] = 1007398912;
 $43 = ((((gb + (8409952) | 0)) + 88|0));
 $44 = $43;
 HEAP32[$44>>2] = -1543503808;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = -1;
 $47 = ((((gb + (8409952) | 0)) + 232|0));
 $48 = $47;
 HEAP32[$48>>2] = -1543495696;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = -1;
 $51 = ((((gb + (8409952) | 0)) + 248|0));
 $52 = $51;
 HEAP32[$52>>2] = -1543498416;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = -1;
 STACKTOP = sp;return;
}
function _r4300_execute() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _memcpy(((gb + (10522036) | 0)|0),((gb + (492) | 0)|0),964)|0;
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 HEAP32[(gb + (10523004) | 0)>>2] = 0;
 HEAP32[(gb + (10523008) | 0)>>2] = 0;
 HEAP32[(gb + (10523012) | 0)>>2] = -1543503808;
 HEAP32[(gb + (10523016) | 0)>>2] = 624999;
 _init_interupt();
 $0 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  _DebugMessage(3,(gb + (18599) | 0),$vararg_buffer);
  HEAP32[(gb + (10522016) | 0)>>2] = 0;
  _pure_interpreter();
 } else {
  _DebugMessage(3,(gb + (18649) | 0),$vararg_buffer1);
  HEAP32[(gb + (10522016) | 0)>>2] = 1;
  _init_blocks();
  HEAP32[(gb + (10523020) | 0)>>2] = -1543503808;
  _jump_to_func();
  $2 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[(gb + (10523012) | 0)>>2] = $7;
  while(1) {
   $8 = HEAP32[(gb + (10523004) | 0)>>2]|0;
   $9 = ($8|0)!=(0);
   $10 = $9 ^ 1;
   if (!($10)) {
    break;
   }
   $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   mftCall_v($12|0);
  }
  _free_blocks();
 }
 _DebugMessage(3,(gb + (18693) | 0),$vararg_buffer3);
 STACKTOP = sp;return;
}
function _get_tv_type() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[((((gb + (8422180) | 0)) + 4|0))>>2]|0;
 switch ($1|0) {
 case 2:  {
  $0 = 2;
  break;
 }
 case 1:  {
  $0 = 0;
  break;
 }
 default: {
  $0 = 1;
 }
 }
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function _jump_to_func() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $paddr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10523020) | 0)>>2]|0;
 $3 = (_update_invalid_addr($2)|0);
 $paddr = $3;
 $4 = $paddr;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[(gb + (10523020) | 0)>>2]|0;
 $7 = $6 >>> 12;
 $8 = ((gb + (10523024) | 0) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[(gb + (14717328) | 0)>>2] = $9;
 $10 = HEAP32[(gb + (10523020) | 0)>>2]|0;
 $11 = $10 >>> 12;
 $12 = ((gb + (23109846) | 0) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)!=(0);
 if ($14) {
  $15 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $16 = $15 >>> 12;
  $17 = ((gb + (10523024) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   $20 = (_malloc(44)|0);
   $21 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $22 = $21 >>> 12;
   $23 = ((gb + (10523024) | 0) + ($22<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $25 = $24 >>> 12;
   $26 = ((gb + (10523024) | 0) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[(gb + (14717328) | 0)>>2] = $27;
   $28 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $29 = $28 >>> 12;
   $30 = ((gb + (10523024) | 0) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 12|0);
   HEAP32[$32>>2] = 0;
   $33 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $34 = $33 >>> 12;
   $35 = ((gb + (10523024) | 0) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$36>>2] = 0;
   $37 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $38 = $37 >>> 12;
   $39 = ((gb + (10523024) | 0) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 24|0);
   HEAP32[$41>>2] = 0;
   $42 = HEAP32[(gb + (10523020) | 0)>>2]|0;
   $43 = $42 >>> 12;
   $44 = ((gb + (10523024) | 0) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 32|0);
   HEAP32[$46>>2] = 0;
  }
  $47 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $48 = $47 & -4096;
  $49 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $50 = $49 >>> 12;
  $51 = ((gb + (10523024) | 0) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $48;
  $54 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $55 = $54 & -4096;
  $56 = (($55) + 4096)|0;
  $57 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $58 = $57 >>> 12;
  $59 = ((gb + (10523024) | 0) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 8|0);
  HEAP32[$61>>2] = $56;
  $62 = HEAP32[(gb + (10523020) | 0)>>2]|0;
  $63 = $62 >>> 12;
  $64 = ((gb + (10523024) | 0) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  _init_block($65);
 }
 $66 = HEAP32[(gb + (14717328) | 0)>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[(gb + (10523020) | 0)>>2]|0;
 $69 = HEAP32[(gb + (14717328) | 0)>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($68) - ($71))|0;
 $73 = $72 >>> 2;
 $74 = (($67) + (($73*132)|0)|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $74;
 $75 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $76 = ($75|0)==(2);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 _dyna_jump();
 STACKTOP = sp;return;
}
function _init_blocks() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(1048576);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((gb + (23109846) | 0) + ($2)|0);
  HEAP8[$3>>0] = 1;
  $4 = $i;
  $5 = ((gb + (10523024) | 0) + ($4<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 STACKTOP = sp;return;
}
function _free_blocks() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(1048576);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((gb + (10523024) | 0) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $i;
   $7 = ((gb + (10523024) | 0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _free_block($8);
   $9 = $i;
   $10 = ((gb + (10523024) | 0) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   _free(($11|0));
   $12 = $i;
   $13 = ((gb + (10523024) | 0) + ($12<<2)|0);
   HEAP32[$13>>2] = 0;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 STACKTOP = sp;return;
}
function _invalidate_cached_code_hacktarux($address,$size) {
 $address = $address|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $addr_max = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $size;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  _memset(((gb + (23109846) | 0)|0),1,1048576)|0;
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $addr_max = $6;
 $7 = $0;
 $addr = $7;
 while(1) {
  $8 = $addr;
  $9 = $addr_max;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $addr;
  $12 = $11 >>> 12;
  $i = $12;
  $13 = $i;
  $14 = ((gb + (23109846) | 0) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(0);
  do {
   if ($17) {
    $18 = $i;
    $19 = ((gb + (10523024) | 0) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = $addr;
     $23 = $22 & 4095;
     $24 = (($23>>>0) / 4)&-1;
     $25 = $i;
     $26 = ((gb + (10523024) | 0) + ($25<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + (($24*132)|0)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
     $32 = ($30|0)!=($31|0);
     if (!($32)) {
      break;
     }
    }
    $33 = $i;
    $34 = ((gb + (23109846) | 0) + ($33)|0);
    HEAP8[$34>>0] = 1;
    $35 = $addr;
    $36 = $35 & -4096;
    $addr = $36;
    $37 = $addr;
    $38 = $37 | 4092;
    $addr = $38;
   } else {
    $39 = $addr;
    $40 = $39 & -4096;
    $addr = $40;
    $41 = $addr;
    $42 = $41 | 4092;
    $addr = $42;
   }
  } while(0);
  $43 = $addr;
  $44 = (($43) + 4)|0;
  $addr = $44;
 }
 STACKTOP = sp;return;
}
function _update_invalid_addr($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $beg_paddr = 0, $or$cond = 0, $paddr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = $1;
 $3 = ($2>>>0)>=(2147483648);
 $4 = $1;
 $5 = ($4>>>0)<(3221225472);
 $or$cond = $3 & $5;
 $6 = $1;
 if ($or$cond) {
  $7 = $6 >>> 12;
  $8 = ((gb + (23109846) | 0) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = $1;
   $12 = $11 ^ 536870912;
   $13 = $12 >>> 12;
   $14 = ((gb + (23109846) | 0) + ($13)|0);
   HEAP8[$14>>0] = 1;
  }
  $15 = $1;
  $16 = $15 ^ 536870912;
  $17 = $16 >>> 12;
  $18 = ((gb + (23109846) | 0) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  if ($20) {
   $21 = $1;
   $22 = $21 >>> 12;
   $23 = ((gb + (23109846) | 0) + ($22)|0);
   HEAP8[$23>>0] = 1;
  }
  $24 = $1;
  $0 = $24;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $25 = (_virtual_to_physical_address($6,2)|0);
 $paddr = $25;
 $26 = $paddr;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $paddr;
  $29 = $1;
  $30 = $1;
  $31 = $30 & -4096;
  $32 = (($29) - ($31))|0;
  $33 = (($28) - ($32))|0;
  $beg_paddr = $33;
  $34 = $paddr;
  (_update_invalid_addr($34)|0);
  $35 = $beg_paddr;
  $36 = (($35) + 0)|0;
  $37 = $36 >>> 12;
  $38 = ((gb + (23109846) | 0) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)!=(0);
  if ($40) {
   $41 = $1;
   $42 = $41 >>> 12;
   $43 = ((gb + (23109846) | 0) + ($42)|0);
   HEAP8[$43>>0] = 1;
  }
  $44 = $beg_paddr;
  $45 = (($44) + 4092)|0;
  $46 = $45 >>> 12;
  $47 = ((gb + (23109846) | 0) + ($46)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = ($48<<24>>24)!=(0);
  if ($49) {
   $50 = $1;
   $51 = $50 >>> 12;
   $52 = ((gb + (23109846) | 0) + ($51)|0);
   HEAP8[$52>>0] = 1;
  }
  $53 = $1;
  $54 = $53 >>> 12;
  $55 = ((gb + (23109846) | 0) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)!=(0);
  if ($57) {
   $58 = $beg_paddr;
   $59 = (($58) + 0)|0;
   $60 = $59 >>> 12;
   $61 = ((gb + (23109846) | 0) + ($60)|0);
   HEAP8[$61>>0] = 1;
  }
  $62 = $1;
  $63 = $62 >>> 12;
  $64 = ((gb + (23109846) | 0) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)!=(0);
  if ($66) {
   $67 = $beg_paddr;
   $68 = (($67) + 4092)|0;
   $69 = $68 >>> 12;
   $70 = ((gb + (23109846) | 0) + ($69)|0);
   HEAP8[$70>>0] = 1;
  }
 }
 $71 = $paddr;
 $0 = $71;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _LB() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8686484) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $27&255;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)<(0);
 $34 = $33 << 31 >> 31;
 $35 = $lsrtp;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 STACKTOP = sp;return;
}
function _LBU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8686484) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _LH() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8948628) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $27&65535;
 $32 = $31 << 16 >> 16;
 $33 = ($32|0)<(0);
 $34 = $33 << 31 >> 31;
 $35 = $lsrtp;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 STACKTOP = sp;return;
}
function _LHU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8948628) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _LW() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = $lsrtp;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $27;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 STACKTOP = sp;return;
}
function _LWL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 3;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $24;
  $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $26 = $25 >>> 16;
  $27 = ((gb + (8424340) | 0) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  mftCall_v($28|0);
  $29 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = $lsrtp;
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = $lsrtp;
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = $34;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $45 = $23 & -4;
  HEAP32[(gb + (8424328) | 0)>>2] = $45;
  HEAP32[(gb + (8424332) | 0)>>2] = $word;
  $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $47 = $46 >>> 16;
  $48 = ((gb + (8424340) | 0) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  mftCall_v($49|0);
  $50 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $lsaddr;
  $53 = $52 & 3;
  $54 = $53<<3;
  $55 = 1 << $54;
  $56 = (($55) - 1)|0;
  $old_mask = $56;
  $57 = $lsaddr;
  $58 = $57 & 3;
  $59 = $58<<3;
  $new_shift = $59;
  $60 = $lsrtp;
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $old_mask;
  $68 = $63 & $67;
  $69 = $word;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $new_shift;
  $76 = $71 << $75;
  $77 = $68 | $76;
  $78 = ($77|0)<(0);
  $79 = $78 << 31 >> 31;
  $80 = $lsrtp;
  $81 = $80;
  $82 = $81;
  HEAP32[$82>>2] = $77;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  STACKTOP = sp;return;
 }
}
function _LWR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 3;
 $24 = ($23|0)==(3);
 if ($24) {
  $25 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $25;
  $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $27 = $26 >>> 16;
  $28 = ((gb + (8424340) | 0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  mftCall_v($29|0);
  $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = $lsrtp;
  $33 = $32;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $lsrtp;
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = $35;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $40;
  STACKTOP = sp;return;
 } else {
  HEAP32[(gb + (8424332) | 0)>>2] = $word;
  $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $47 = $46 >>> 16;
  $48 = ((gb + (8424340) | 0) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  mftCall_v($49|0);
  $50 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $lsaddr;
  $53 = $52 & 3;
  $54 = (($53) + 1)|0;
  $55 = $54<<3;
  $56 = 1 << $55;
  $57 = (($56) - 1)|0;
  $58 = $57 ^ -1;
  $old_mask = $58;
  $59 = $lsaddr;
  $60 = $59 & 3;
  $61 = (3 - ($60))|0;
  $62 = $61<<3;
  $new_shift = $62;
  $63 = $lsrtp;
  $64 = $63;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = $old_mask;
  $71 = $66 & $70;
  $72 = $word;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = $new_shift;
  $79 = $74 >>> $78;
  $80 = $71 | $79;
  $81 = ($80|0)<(0);
  $82 = $81 << 31 >> 31;
  $83 = $lsrtp;
  $84 = $83;
  $85 = $84;
  HEAP32[$85>>2] = $80;
  $86 = (($84) + 4)|0;
  $87 = $86;
  HEAP32[$87>>2] = $82;
  STACKTOP = sp;return;
 }
}
function _SB() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&255;
 HEAP8[(gb + (23109845) | 0)>>0] = $24;
 $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $26 = $25 >>> 16;
 $27 = ((gb + (9735060) | 0) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 mftCall_v($28|0);
 $29 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $30 = $29 >>> 12;
 $31 = ((gb + (23109846) | 0) + ($30)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = $34 & 4095;
 $36 = (($35>>>0) / 4)&-1;
 $37 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $38 = $37 >>> 12;
 $39 = ((gb + (10523024) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + (($36*132)|0)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $45 = ($43|0)!=($44|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $47 = $46 >>> 12;
 $48 = ((gb + (23109846) | 0) + ($47)|0);
 HEAP8[$48>>0] = 1;
 STACKTOP = sp;return;
}
function _SH() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&65535;
 HEAP16[(gb + (23108460) | 0)>>1] = $24;
 $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $26 = $25 >>> 16;
 $27 = ((gb + (10259348) | 0) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 mftCall_v($28|0);
 $29 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $30 = $29 >>> 12;
 $31 = ((gb + (23109846) | 0) + ($30)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = $34 & 4095;
 $36 = (($35>>>0) / 4)&-1;
 $37 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $38 = $37 >>> 12;
 $39 = ((gb + (10523024) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + (($36*132)|0)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $45 = ($43|0)!=($44|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $47 = $46 >>> 12;
 $48 = ((gb + (23109846) | 0) + ($47)|0);
 HEAP8[$48>>0] = 1;
 STACKTOP = sp;return;
}
function _SW() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[(gb + (8424336) | 0)>>2] = $20;
 $24 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $25 = $24 >>> 16;
 $26 = ((gb + (9472916) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 mftCall_v($27|0);
 $28 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $29 = $28 >>> 12;
 $30 = ((gb + (23109846) | 0) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $34 = $33 & 4095;
 $35 = (($34>>>0) / 4)&-1;
 $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $37 = $36 >>> 12;
 $38 = ((gb + (10523024) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + (($35*132)|0)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $44 = ($42|0)!=($43|0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $46 = $45 >>> 12;
 $47 = ((gb + (23109846) | 0) + ($46)|0);
 HEAP8[$47>>0] = 1;
 STACKTOP = sp;return;
}
function _SWL() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $old_word = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 3;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[(gb + (8424336) | 0)>>2] = $27;
  $31 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $32 = $31 >>> 16;
  $33 = ((gb + (9472916) | 0) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  mftCall_v($34|0);
  $35 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $36 = $35 >>> 12;
  $37 = ((gb + (23109846) | 0) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)!=(0);
  if ($39) {
   STACKTOP = sp;return;
  }
  $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $41 = $40 & 4095;
  $42 = (($41>>>0) / 4)&-1;
  $43 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $44 = $43 >>> 12;
  $45 = ((gb + (10523024) | 0) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($42*132)|0)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
  $51 = ($49|0)!=($50|0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $53 = $52 >>> 12;
  $54 = ((gb + (23109846) | 0) + ($53)|0);
  HEAP8[$54>>0] = 1;
  STACKTOP = sp;return;
 }
 $55 = $23 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $55;
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $56 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $57 = $56 >>> 16;
 $58 = ((gb + (8424340) | 0) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 mftCall_v($59|0);
 $60 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $lsaddr;
 $63 = $62 & 3;
 $64 = (4 - ($63))|0;
 $65 = $64<<3;
 $66 = 1 << $65;
 $67 = (($66) - 1)|0;
 $68 = $67 ^ -1;
 $old_mask = $68;
 $69 = $lsaddr;
 $70 = $69 & 3;
 $71 = $70<<3;
 $new_shift = $71;
 $72 = $old_word;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = $old_mask;
 $79 = $74 & $78;
 $80 = $lsrtp;
 $81 = $80;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = $new_shift;
 $88 = $83 >>> $87;
 $89 = $79 | $88;
 HEAP32[(gb + (8424336) | 0)>>2] = $89;
 $90 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $91 = $90 >>> 16;
 $92 = ((gb + (9472916) | 0) + ($91<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 mftCall_v($93|0);
 $94 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $95 = $94 >>> 12;
 $96 = ((gb + (23109846) | 0) + ($95)|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97<<24>>24)!=(0);
 if ($98) {
  STACKTOP = sp;return;
 }
 $99 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $100 = $99 & 4095;
 $101 = (($100>>>0) / 4)&-1;
 $102 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $103 = $102 >>> 12;
 $104 = ((gb + (10523024) | 0) + ($103<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + (($101*132)|0)|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $110 = ($108|0)!=($109|0);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 $111 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $112 = $111 >>> 12;
 $113 = ((gb + (23109846) | 0) + ($112)|0);
 HEAP8[$113>>0] = 1;
 STACKTOP = sp;return;
}
function _SWR() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $old_word = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 3;
 $24 = ($23|0)==(3);
 if ($24) {
  $25 = $lsrtp;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  HEAP32[(gb + (8424336) | 0)>>2] = $28;
  $32 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $33 = $32 >>> 16;
  $34 = ((gb + (9472916) | 0) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $37 = $36 >>> 12;
  $38 = ((gb + (23109846) | 0) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)!=(0);
  if ($40) {
   STACKTOP = sp;return;
  }
  $41 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $42 = $41 & 4095;
  $43 = (($42>>>0) / 4)&-1;
  $44 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $45 = $44 >>> 12;
  $46 = ((gb + (10523024) | 0) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + (($43*132)|0)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
  $52 = ($50|0)!=($51|0);
  if (!($52)) {
   STACKTOP = sp;return;
  }
  $53 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $54 = $53 >>> 12;
  $55 = ((gb + (23109846) | 0) + ($54)|0);
  HEAP8[$55>>0] = 1;
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $56 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $57 = $56 >>> 16;
 $58 = ((gb + (8424340) | 0) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 mftCall_v($59|0);
 $60 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $lsaddr;
 $63 = $62 & 3;
 $64 = (3 - ($63))|0;
 $65 = $64<<3;
 $66 = 1 << $65;
 $67 = (($66) - 1)|0;
 $old_mask = $67;
 $68 = $lsaddr;
 $69 = $68 & 3;
 $70 = (3 - ($69))|0;
 $71 = $70<<3;
 $new_shift = $71;
 $72 = $old_word;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = $old_mask;
 $79 = $74 & $78;
 $80 = $lsrtp;
 $81 = $80;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = $new_shift;
 $88 = $83 << $87;
 $89 = $79 | $88;
 HEAP32[(gb + (8424336) | 0)>>2] = $89;
 $90 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $91 = $90 >>> 16;
 $92 = ((gb + (9472916) | 0) + ($91<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 mftCall_v($93|0);
 $94 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $95 = $94 >>> 12;
 $96 = ((gb + (23109846) | 0) + ($95)|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97<<24>>24)!=(0);
 if ($98) {
  STACKTOP = sp;return;
 }
 $99 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $100 = $99 & 4095;
 $101 = (($100>>>0) / 4)&-1;
 $102 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $103 = $102 >>> 12;
 $104 = ((gb + (10523024) | 0) + ($103<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + (($101*132)|0)|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $110 = ($108|0)!=($109|0);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 $111 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $112 = $111 >>> 12;
 $113 = ((gb + (23109846) | 0) + ($112)|0);
 HEAP8[$113>>0] = 1;
 STACKTOP = sp;return;
}
function _LD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (9210772) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _LDL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp + 8|0;
 $old_mask = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 7;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $24;
  $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $26 = $25 >>> 16;
  $27 = ((gb + (9210772) | 0) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  mftCall_v($28|0);
  STACKTOP = sp;return;
 }
 $29 = $23 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $29;
 HEAP32[(gb + (8424332) | 0)>>2] = $word;
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 16;
 $32 = ((gb + (9210772) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $lsaddr;
 $37 = $36 & 7;
 $38 = $37<<3;
 $39 = (_bitshift64Shl(1,0,($38|0))|0);
 $40 = (getTempRet0() | 0);
 $41 = (_i64Subtract(($39|0),($40|0),1,0)|0);
 $42 = (getTempRet0() | 0);
 $43 = $old_mask;
 $44 = $43;
 HEAP32[$44>>2] = $41;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $47 = $lsaddr;
 $48 = $47 & 7;
 $49 = $48<<3;
 $new_shift = $49;
 $50 = $lsrtp;
 $51 = $50;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = $old_mask;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $53 & $59;
 $64 = $56 & $62;
 $65 = $word;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = $new_shift;
 $72 = (_bitshift64Shl(($67|0),($70|0),($71|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = $63 | $72;
 $75 = $64 | $73;
 $76 = $lsrtp;
 $77 = $76;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $75;
 STACKTOP = sp;return;
}
function _LDR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp + 8|0;
 $old_mask = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 7;
 $24 = ($23|0)==(7);
 if ($24) {
  $25 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $25;
  $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $27 = $26 >>> 16;
  $28 = ((gb + (9210772) | 0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  mftCall_v($29|0);
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $word;
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 16;
 $32 = ((gb + (9210772) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $lsaddr;
 $37 = $36 & 7;
 $38 = (($37) + 1)|0;
 $39 = $38<<3;
 $40 = (_bitshift64Shl(1,0,($39|0))|0);
 $41 = (getTempRet0() | 0);
 $42 = (_i64Subtract(($40|0),($41|0),1,0)|0);
 $43 = (getTempRet0() | 0);
 $44 = $42 ^ -1;
 $45 = $43 ^ -1;
 $46 = $old_mask;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $lsaddr;
 $51 = $50 & 7;
 $52 = (7 - ($51))|0;
 $53 = $52<<3;
 $new_shift = $53;
 $54 = $lsrtp;
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $old_mask;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $57 & $63;
 $68 = $60 & $66;
 $69 = $word;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = $new_shift;
 $76 = (_bitshift64Lshr(($71|0),($74|0),($75|0))|0);
 $77 = (getTempRet0() | 0);
 $78 = $67 | $76;
 $79 = $68 | $77;
 $80 = $lsrtp;
 $81 = $80;
 $82 = $81;
 HEAP32[$82>>2] = $78;
 $83 = (($81) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = $79;
 STACKTOP = sp;return;
}
function _LL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = $lsrtp;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $27;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 HEAP32[(gb + (10522032) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _LWU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _SC() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = HEAP32[(gb + (10522032) | 0)>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $55 = $lsrtp;
  $56 = $55;
  $57 = $56;
  HEAP32[$57>>2] = 0;
  $58 = (($56) + 4)|0;
  $59 = $58;
  HEAP32[$59>>2] = 0;
  STACKTOP = sp;return;
 }
 $18 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $18;
 $19 = $lsrtp;
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 HEAP32[(gb + (8424336) | 0)>>2] = $22;
 $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $27 = $26 >>> 16;
 $28 = ((gb + (9472916) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 mftCall_v($29|0);
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 12;
 $32 = ((gb + (23109846) | 0) + ($31)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)!=(0);
 if (!($34)) {
  $35 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $36 = $35 & 4095;
  $37 = (($36>>>0) / 4)&-1;
  $38 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $39 = $38 >>> 12;
  $40 = ((gb + (10523024) | 0) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($37*132)|0)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
  $46 = ($44|0)!=($45|0);
  if ($46) {
   $47 = HEAP32[(gb + (8424328) | 0)>>2]|0;
   $48 = $47 >>> 12;
   $49 = ((gb + (23109846) | 0) + ($48)|0);
   HEAP8[$49>>0] = 1;
  }
 }
 HEAP32[(gb + (10522032) | 0)>>2] = 0;
 $50 = $lsrtp;
 $51 = $50;
 $52 = $51;
 HEAP32[$52>>2] = 1;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = 0;
 STACKTOP = sp;return;
}
function _SD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (gb + (8409944) | 0);
 $25 = $24;
 HEAP32[$25>>2] = $20;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $29 = $28 >>> 16;
 $30 = ((gb + (9997204) | 0) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 mftCall_v($31|0);
 $32 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $33 = $32 >>> 12;
 $34 = ((gb + (23109846) | 0) + ($33)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)!=(0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $38 = $37 & 4095;
 $39 = (($38>>>0) / 4)&-1;
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = $40 >>> 12;
 $42 = ((gb + (10523024) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + (($39*132)|0)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $48 = ($46|0)!=($47|0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $50 = $49 >>> 12;
 $51 = ((gb + (23109846) | 0) + ($50)|0);
 HEAP8[$51>>0] = 1;
 STACKTOP = sp;return;
}
function _SDL() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0;
 var $old_mask = 0, $old_word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp + 8|0;
 $old_mask = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 7;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (gb + (8409944) | 0);
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $30;
  $35 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $36 = $35 >>> 16;
  $37 = ((gb + (9997204) | 0) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  mftCall_v($38|0);
  $39 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $40 = $39 >>> 12;
  $41 = ((gb + (23109846) | 0) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)!=(0);
  if ($43) {
   STACKTOP = sp;return;
  }
  $44 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $45 = $44 & 4095;
  $46 = (($45>>>0) / 4)&-1;
  $47 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $48 = $47 >>> 12;
  $49 = ((gb + (10523024) | 0) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($46*132)|0)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
  $55 = ($53|0)!=($54|0);
  if (!($55)) {
   STACKTOP = sp;return;
  }
  $56 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $57 = $56 >>> 12;
  $58 = ((gb + (23109846) | 0) + ($57)|0);
  HEAP8[$58>>0] = 1;
  STACKTOP = sp;return;
 }
 $59 = $23 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $59;
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $60 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $61 = $60 >>> 16;
 $62 = ((gb + (9210772) | 0) + ($61<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 mftCall_v($63|0);
 $64 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $lsaddr;
 $67 = $66 & 7;
 $68 = (8 - ($67))|0;
 $69 = $68<<3;
 $70 = (_bitshift64Shl(1,0,($69|0))|0);
 $71 = (getTempRet0() | 0);
 $72 = (_i64Subtract(($70|0),($71|0),1,0)|0);
 $73 = (getTempRet0() | 0);
 $74 = $72 ^ -1;
 $75 = $73 ^ -1;
 $76 = $old_mask;
 $77 = $76;
 HEAP32[$77>>2] = $74;
 $78 = (($76) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $75;
 $80 = $lsaddr;
 $81 = $80 & 7;
 $82 = $81<<3;
 $new_shift = $82;
 $83 = $old_word;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = $old_mask;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + 4)|0;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = $85 & $91;
 $96 = $88 & $94;
 $97 = $lsrtp;
 $98 = $97;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $104 = $new_shift;
 $105 = (_bitshift64Lshr(($100|0),($103|0),($104|0))|0);
 $106 = (getTempRet0() | 0);
 $107 = $95 | $105;
 $108 = $96 | $106;
 $109 = (gb + (8409944) | 0);
 $110 = $109;
 HEAP32[$110>>2] = $107;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $114 = $113 >>> 16;
 $115 = ((gb + (9997204) | 0) + ($114<<2)|0);
 $116 = HEAP32[$115>>2]|0;
 mftCall_v($116|0);
 $117 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $118 = $117 >>> 12;
 $119 = ((gb + (23109846) | 0) + ($118)|0);
 $120 = HEAP8[$119>>0]|0;
 $121 = ($120<<24>>24)!=(0);
 if ($121) {
  STACKTOP = sp;return;
 }
 $122 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $123 = $122 & 4095;
 $124 = (($123>>>0) / 4)&-1;
 $125 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $126 = $125 >>> 12;
 $127 = ((gb + (10523024) | 0) + ($126<<2)|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + (($124*132)|0)|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $133 = ($131|0)!=($132|0);
 if (!($133)) {
  STACKTOP = sp;return;
 }
 $134 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $135 = $134 >>> 12;
 $136 = ((gb + (23109846) | 0) + ($135)|0);
 HEAP8[$136>>0] = 1;
 STACKTOP = sp;return;
}
function _SDR() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0;
 var $old_word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp + 8|0;
 $old_mask = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $lsaddr = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 7;
 $24 = ($23|0)==(7);
 if ($24) {
  $25 = $lsrtp;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (gb + (8409944) | 0);
  $33 = $32;
  HEAP32[$33>>2] = $28;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $37 = $36 >>> 16;
  $38 = ((gb + (9997204) | 0) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  mftCall_v($39|0);
  $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $41 = $40 >>> 12;
  $42 = ((gb + (23109846) | 0) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)!=(0);
  if ($44) {
   STACKTOP = sp;return;
  }
  $45 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $46 = $45 & 4095;
  $47 = (($46>>>0) / 4)&-1;
  $48 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $49 = $48 >>> 12;
  $50 = ((gb + (10523024) | 0) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($47*132)|0)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
  $56 = ($54|0)!=($55|0);
  if (!($56)) {
   STACKTOP = sp;return;
  }
  $57 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $58 = $57 >>> 12;
  $59 = ((gb + (23109846) | 0) + ($58)|0);
  HEAP8[$59>>0] = 1;
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $60 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $61 = $60 >>> 16;
 $62 = ((gb + (9210772) | 0) + ($61<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 mftCall_v($63|0);
 $64 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $lsaddr;
 $67 = $66 & 7;
 $68 = (7 - ($67))|0;
 $69 = $68<<3;
 $70 = (_bitshift64Shl(1,0,($69|0))|0);
 $71 = (getTempRet0() | 0);
 $72 = (_i64Subtract(($70|0),($71|0),1,0)|0);
 $73 = (getTempRet0() | 0);
 $74 = $old_mask;
 $75 = $74;
 HEAP32[$75>>2] = $72;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $73;
 $78 = $lsaddr;
 $79 = $78 & 7;
 $80 = (7 - ($79))|0;
 $81 = $80<<3;
 $new_shift = $81;
 $82 = $old_word;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $old_mask;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = $84 & $90;
 $95 = $87 & $93;
 $96 = $lsrtp;
 $97 = $96;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = $new_shift;
 $104 = (_bitshift64Shl(($99|0),($102|0),($103|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = $94 | $104;
 $107 = $95 | $105;
 $108 = (gb + (8409944) | 0);
 $109 = $108;
 HEAP32[$109>>2] = $106;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = $107;
 $112 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $113 = $112 >>> 16;
 $114 = ((gb + (9997204) | 0) + ($113<<2)|0);
 $115 = HEAP32[$114>>2]|0;
 mftCall_v($115|0);
 $116 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $117 = $116 >>> 12;
 $118 = ((gb + (23109846) | 0) + ($117)|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = ($119<<24>>24)!=(0);
 if ($120) {
  STACKTOP = sp;return;
 }
 $121 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $122 = $121 & 4095;
 $123 = (($122>>>0) / 4)&-1;
 $124 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $125 = $124 >>> 12;
 $126 = ((gb + (10523024) | 0) + ($125<<2)|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + (($123*132)|0)|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $132 = ($130|0)!=($131|0);
 if (!($132)) {
  STACKTOP = sp;return;
 }
 $133 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $134 = $133 >>> 12;
 $135 = ((gb + (23109846) | 0) + ($134)|0);
 HEAP8[$135>>0] = 1;
 STACKTOP = sp;return;
}
function _SYNC() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $1;
 return;
}
function _ADDI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _ADDIU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($3) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _SLTI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($8|0)<($15|0);
 $17 = ($5>>>0)<($13>>>0);
 $18 = ($8|0)==($15|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 if ($20) {
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = 1;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $34 = ((($33)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $34;
  return;
 } else {
  $29 = $24;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $34 = ((($33)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $34;
  return;
 }
}
function _SLTIU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($8>>>0)<($15>>>0);
 $17 = ($5>>>0)<($13>>>0);
 $18 = ($8|0)==($15|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 if ($20) {
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = 1;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $34 = ((($33)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $34;
  return;
 } else {
  $29 = $24;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $34 = ((($33)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $34;
  return;
 }
}
function _ANDI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $5 & $13;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 return;
}
function _ORI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $5 | $13;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 return;
}
function _XORI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $5 ^ $13;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 return;
}
function _LUI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $4 << 16;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 $8 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $5;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $7;
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _DADDI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = (_i64Add(($5|0),($8|0),($13|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _DADDIU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = (_i64Add(($5|0),($8|0),($13|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _ADD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _ADDU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _SUB() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) - ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _SUBU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) - ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _SLT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($8|0)<($18|0);
 $20 = ($5>>>0)<($15>>>0);
 $21 = ($8|0)==($18|0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 if ($23) {
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = 1;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = 0;
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
  return;
 } else {
  $32 = $27;
  $33 = $32;
  HEAP32[$33>>2] = 0;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
  return;
 }
}
function _SLTU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($8>>>0)<($18>>>0);
 $20 = ($5>>>0)<($15>>>0);
 $21 = ($8|0)==($18|0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 if ($23) {
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = 1;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = 0;
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
  return;
 } else {
  $32 = $27;
  $33 = $32;
  HEAP32[$33>>2] = 0;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
  return;
 }
}
function _AND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5 & $15;
 $20 = $8 & $18;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _OR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5 | $15;
 $20 = $8 | $18;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _XOR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5 ^ $15;
 $20 = $8 ^ $18;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _NOR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5 | $15;
 $20 = $8 | $18;
 $21 = $19 ^ -1;
 $22 = $20 ^ -1;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $32;
 return;
}
function _DADD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Add(($5|0),($8|0),($15|0),($18|0))|0);
 $20 = (getTempRet0() | 0);
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _DADDU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Add(($5|0),($8|0),($15|0),($18|0))|0);
 $20 = (getTempRet0() | 0);
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _DSUB() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Subtract(($5|0),($8|0),($15|0),($18|0))|0);
 $20 = (getTempRet0() | 0);
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _DSUBU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_i64Subtract(($5|0),($8|0),($15|0),($18|0))|0);
 $20 = (getTempRet0() | 0);
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $19;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $20;
 $29 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $30 = ((($29)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $30;
 return;
}
function _MULT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (___muldi3(($5|0),($8|0),($15|0),($18|0))|0);
 $20 = (getTempRet0() | 0);
 $21 = $temp;
 $22 = $21;
 HEAP32[$22>>2] = $19;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = $temp;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_bitshift64Ashr(($27|0),($30|0),32)|0);
 $32 = (getTempRet0() | 0);
 $33 = (gb + (8410208) | 0);
 $34 = $33;
 HEAP32[$34>>2] = $31;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 $37 = $temp;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($39|0)<(0);
 $44 = $43 << 31 >> 31;
 $45 = (gb + (8410216) | 0);
 $46 = $45;
 HEAP32[$46>>2] = $39;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = ((($49)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $50;
 STACKTOP = sp;return;
}
function _MULTU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (___muldi3(($5|0),0,($15|0),0)|0);
 $20 = (getTempRet0() | 0);
 $21 = $temp;
 $22 = $21;
 HEAP32[$22>>2] = $19;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = $temp;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_bitshift64Ashr(($27|0),($30|0),32)|0);
 $32 = (getTempRet0() | 0);
 $33 = (gb + (8410208) | 0);
 $34 = $33;
 HEAP32[$34>>2] = $31;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 $37 = $temp;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($39|0)<(0);
 $44 = $43 << 31 >> 31;
 $45 = (gb + (8410216) | 0);
 $46 = $45;
 HEAP32[$46>>2] = $39;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = ((($49)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $50;
 STACKTOP = sp;return;
}
function _DIV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($9|0) / ($14|0))&-1;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (gb + (8410216) | 0);
  $19 = $18;
  HEAP32[$19>>2] = $15;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($25|0) % ($30|0))&-1;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = (gb + (8410208) | 0);
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $39;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19284) | 0),$vararg_buffer);
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $39;
  STACKTOP = sp;return;
 }
}
function _DIVU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($9>>>0) / ($14>>>0))&-1;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (gb + (8410216) | 0);
  $19 = $18;
  HEAP32[$19>>2] = $15;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($25>>>0) % ($30>>>0))&-1;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = (gb + (8410208) | 0);
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $39;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19266) | 0),$vararg_buffer);
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $39;
  STACKTOP = sp;return;
 }
}
function _MFHI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (gb + (8410208) | 0);
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $5;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 return;
}
function _MTHI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (gb + (8410208) | 0);
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $14;
 return;
}
function _MFLO() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (gb + (8410216) | 0);
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $5;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 return;
}
function _MTLO() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (gb + (8410216) | 0);
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $14;
 return;
}
function _DMULT() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op2 = 0, $op3 = 0, $op4 = 0, $result1 = 0, $result2 = 0, $result3 = 0, $result4 = 0;
 var $sign = 0, $temp1 = 0, $temp2 = 0, $temp3 = 0, $temp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op1 = sp + 88|0;
 $op2 = sp + 80|0;
 $op3 = sp + 72|0;
 $op4 = sp + 64|0;
 $result1 = sp + 56|0;
 $result2 = sp + 48|0;
 $result3 = sp + 40|0;
 $result4 = sp + 32|0;
 $temp1 = sp + 24|0;
 $temp2 = sp + 16|0;
 $temp3 = sp + 8|0;
 $temp4 = sp;
 $sign = 0;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 if ($9) {
  $19 = (_i64Subtract(0,0,($15|0),($18|0))|0);
  $20 = (getTempRet0() | 0);
  $21 = $op2;
  $22 = $21;
  HEAP32[$22>>2] = $19;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = $sign;
  $26 = (1 - ($25))|0;
  $sign = $26;
 } else {
  $27 = $op2;
  $28 = $27;
  HEAP32[$28>>2] = $15;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $18;
 }
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)<(0);
 $42 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $43 = ((($42)) + 4|0);
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 if ($41) {
  $52 = (_i64Subtract(0,0,($48|0),($51|0))|0);
  $53 = (getTempRet0() | 0);
  $54 = $op4;
  $55 = $54;
  HEAP32[$55>>2] = $52;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = $53;
  $58 = $sign;
  $59 = (1 - ($58))|0;
  $sign = $59;
 } else {
  $60 = $op4;
  $61 = $60;
  HEAP32[$61>>2] = $48;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $51;
 }
 $64 = $op2;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $op1;
 $71 = $70;
 HEAP32[$71>>2] = $66;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = $op2;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + 4)|0;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = $op2;
 $81 = $80;
 HEAP32[$81>>2] = $79;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = 0;
 $84 = $op4;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = $op3;
 $91 = $90;
 HEAP32[$91>>2] = $86;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $94 = $op4;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = $op4;
 $101 = $100;
 HEAP32[$101>>2] = $99;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = 0;
 $104 = $op1;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = $op3;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = (___muldi3(($106|0),($109|0),($112|0),($115|0))|0);
 $117 = (getTempRet0() | 0);
 $118 = $temp1;
 $119 = $118;
 HEAP32[$119>>2] = $116;
 $120 = (($118) + 4)|0;
 $121 = $120;
 HEAP32[$121>>2] = $117;
 $122 = $temp1;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (($122) + 4)|0;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = $op1;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = (($128) + 4)|0;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $134 = $op4;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = (($134) + 4)|0;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (___muldi3(($130|0),($133|0),($136|0),($139|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (_i64Add(($127|0),0,($140|0),($141|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = $temp2;
 $145 = $144;
 HEAP32[$145>>2] = $142;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = $143;
 $148 = $op2;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = $op3;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = (($154) + 4)|0;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (___muldi3(($150|0),($153|0),($156|0),($159|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = $temp3;
 $163 = $162;
 HEAP32[$163>>2] = $160;
 $164 = (($162) + 4)|0;
 $165 = $164;
 HEAP32[$165>>2] = $161;
 $166 = $temp3;
 $167 = $166;
 $168 = HEAP32[$167>>2]|0;
 $169 = (($166) + 4)|0;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = $op2;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 $175 = (($172) + 4)|0;
 $176 = $175;
 $177 = HEAP32[$176>>2]|0;
 $178 = $op4;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($178) + 4)|0;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = (___muldi3(($174|0),($177|0),($180|0),($183|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($171|0),0,($184|0),($185|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = $temp4;
 $189 = $188;
 HEAP32[$189>>2] = $186;
 $190 = (($188) + 4)|0;
 $191 = $190;
 HEAP32[$191>>2] = $187;
 $192 = $temp1;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = $result1;
 $199 = $198;
 HEAP32[$199>>2] = $194;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = 0;
 $202 = $temp2;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = (($202) + 4)|0;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = $temp3;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $211 = (($208) + 4)|0;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (_i64Add(($204|0),($207|0),($210|0),0)|0);
 $215 = (getTempRet0() | 0);
 $216 = $result2;
 $217 = $216;
 HEAP32[$217>>2] = $214;
 $218 = (($216) + 4)|0;
 $219 = $218;
 HEAP32[$219>>2] = $215;
 $220 = $result2;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 $223 = (($220) + 4)|0;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 $226 = $temp4;
 $227 = $226;
 $228 = HEAP32[$227>>2]|0;
 $229 = (($226) + 4)|0;
 $230 = $229;
 $231 = HEAP32[$230>>2]|0;
 $232 = (_i64Add(($225|0),0,($228|0),($231|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = $result3;
 $235 = $234;
 HEAP32[$235>>2] = $232;
 $236 = (($234) + 4)|0;
 $237 = $236;
 HEAP32[$237>>2] = $233;
 $238 = $result3;
 $239 = $238;
 $240 = HEAP32[$239>>2]|0;
 $241 = (($238) + 4)|0;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 $244 = $result4;
 $245 = $244;
 HEAP32[$245>>2] = $243;
 $246 = (($244) + 4)|0;
 $247 = $246;
 HEAP32[$247>>2] = 0;
 $248 = $result1;
 $249 = $248;
 $250 = HEAP32[$249>>2]|0;
 $251 = (($248) + 4)|0;
 $252 = $251;
 $253 = HEAP32[$252>>2]|0;
 $254 = $result2;
 $255 = $254;
 $256 = HEAP32[$255>>2]|0;
 $257 = (($254) + 4)|0;
 $258 = $257;
 $259 = HEAP32[$258>>2]|0;
 $260 = $253 | $256;
 $261 = (gb + (8410216) | 0);
 $262 = $261;
 HEAP32[$262>>2] = $250;
 $263 = (($261) + 4)|0;
 $264 = $263;
 HEAP32[$264>>2] = $260;
 $265 = $result3;
 $266 = $265;
 $267 = HEAP32[$266>>2]|0;
 $268 = (($265) + 4)|0;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = $result4;
 $272 = $271;
 $273 = HEAP32[$272>>2]|0;
 $274 = (($271) + 4)|0;
 $275 = $274;
 $276 = HEAP32[$275>>2]|0;
 $277 = (gb + (8410208) | 0);
 $278 = $277;
 HEAP32[$278>>2] = $267;
 $279 = (($277) + 4)|0;
 $280 = $279;
 HEAP32[$280>>2] = $273;
 $281 = $sign;
 $282 = ($281|0)!=(0);
 if (!($282)) {
  $330 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $331 = ((($330)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $331;
  STACKTOP = sp;return;
 }
 $283 = (gb + (8410208) | 0);
 $284 = $283;
 $285 = HEAP32[$284>>2]|0;
 $286 = (($283) + 4)|0;
 $287 = $286;
 $288 = HEAP32[$287>>2]|0;
 $289 = $285 ^ -1;
 $290 = $288 ^ -1;
 $291 = (gb + (8410208) | 0);
 $292 = $291;
 HEAP32[$292>>2] = $289;
 $293 = (($291) + 4)|0;
 $294 = $293;
 HEAP32[$294>>2] = $290;
 $295 = (gb + (8410216) | 0);
 $296 = $295;
 $297 = HEAP32[$296>>2]|0;
 $298 = (($295) + 4)|0;
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = ($297|0)!=(0);
 $302 = ($300|0)!=(0);
 $303 = $301 | $302;
 if ($303) {
  $316 = (gb + (8410216) | 0);
  $317 = $316;
  $318 = HEAP32[$317>>2]|0;
  $319 = (($316) + 4)|0;
  $320 = $319;
  $321 = HEAP32[$320>>2]|0;
  $322 = $318 ^ -1;
  $323 = $321 ^ -1;
  $324 = (_i64Add(($322|0),($323|0),1,0)|0);
  $325 = (getTempRet0() | 0);
  $326 = (gb + (8410216) | 0);
  $327 = $326;
  HEAP32[$327>>2] = $324;
  $328 = (($326) + 4)|0;
  $329 = $328;
  HEAP32[$329>>2] = $325;
  $330 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $331 = ((($330)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $331;
  STACKTOP = sp;return;
 } else {
  $304 = (gb + (8410208) | 0);
  $305 = $304;
  $306 = HEAP32[$305>>2]|0;
  $307 = (($304) + 4)|0;
  $308 = $307;
  $309 = HEAP32[$308>>2]|0;
  $310 = (_i64Add(($306|0),($309|0),1,0)|0);
  $311 = (getTempRet0() | 0);
  $312 = (gb + (8410208) | 0);
  $313 = $312;
  HEAP32[$313>>2] = $310;
  $314 = (($312) + 4)|0;
  $315 = $314;
  HEAP32[$315>>2] = $311;
  $330 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $331 = ((($330)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $331;
  STACKTOP = sp;return;
 }
}
function _DMULTU() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op2 = 0, $op3 = 0;
 var $op4 = 0, $result1 = 0, $result2 = 0, $result3 = 0, $result4 = 0, $temp1 = 0, $temp2 = 0, $temp3 = 0, $temp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op1 = sp + 88|0;
 $op2 = sp + 80|0;
 $op3 = sp + 72|0;
 $op4 = sp + 64|0;
 $result1 = sp + 56|0;
 $result2 = sp + 48|0;
 $result3 = sp + 40|0;
 $result4 = sp + 32|0;
 $temp1 = sp + 24|0;
 $temp2 = sp + 16|0;
 $temp3 = sp + 8|0;
 $temp4 = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $op1;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Ashr(($18|0),($21|0),32)|0);
 $23 = (getTempRet0() | 0);
 $24 = $op2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $op3;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $43 = ((($42)) + 4|0);
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (_bitshift64Ashr(($48|0),($51|0),32)|0);
 $53 = (getTempRet0() | 0);
 $54 = $op4;
 $55 = $54;
 HEAP32[$55>>2] = $52;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $58 = $op1;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = $op3;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (___muldi3(($60|0),($63|0),($66|0),($69|0))|0);
 $71 = (getTempRet0() | 0);
 $72 = $temp1;
 $73 = $72;
 HEAP32[$73>>2] = $70;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $71;
 $76 = $temp1;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = $op1;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $op4;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = (___muldi3(($84|0),($87|0),($90|0),($93|0))|0);
 $95 = (getTempRet0() | 0);
 $96 = (_i64Add(($81|0),0,($94|0),($95|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = $temp2;
 $99 = $98;
 HEAP32[$99>>2] = $96;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $97;
 $102 = $op2;
 $103 = $102;
 $104 = HEAP32[$103>>2]|0;
 $105 = (($102) + 4)|0;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = $op3;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 $111 = (($108) + 4)|0;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (___muldi3(($104|0),($107|0),($110|0),($113|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = $temp3;
 $117 = $116;
 HEAP32[$117>>2] = $114;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $115;
 $120 = $temp3;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = (($120) + 4)|0;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = $op2;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = (($126) + 4)|0;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = $op4;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($132) + 4)|0;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = (___muldi3(($128|0),($131|0),($134|0),($137|0))|0);
 $139 = (getTempRet0() | 0);
 $140 = (_i64Add(($125|0),0,($138|0),($139|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = $temp4;
 $143 = $142;
 HEAP32[$143>>2] = $140;
 $144 = (($142) + 4)|0;
 $145 = $144;
 HEAP32[$145>>2] = $141;
 $146 = $temp1;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + 4)|0;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = $result1;
 $153 = $152;
 HEAP32[$153>>2] = $148;
 $154 = (($152) + 4)|0;
 $155 = $154;
 HEAP32[$155>>2] = 0;
 $156 = $temp2;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (($156) + 4)|0;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = $temp3;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = (($162) + 4)|0;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = (_i64Add(($158|0),($161|0),($164|0),0)|0);
 $169 = (getTempRet0() | 0);
 $170 = $result2;
 $171 = $170;
 HEAP32[$171>>2] = $168;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $169;
 $174 = $result2;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = (($174) + 4)|0;
 $178 = $177;
 $179 = HEAP32[$178>>2]|0;
 $180 = $temp4;
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($180) + 4)|0;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $186 = (_i64Add(($179|0),0,($182|0),($185|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = $result3;
 $189 = $188;
 HEAP32[$189>>2] = $186;
 $190 = (($188) + 4)|0;
 $191 = $190;
 HEAP32[$191>>2] = $187;
 $192 = $result3;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = $result4;
 $199 = $198;
 HEAP32[$199>>2] = $197;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = 0;
 $202 = $result1;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = (($202) + 4)|0;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = $result2;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $211 = (($208) + 4)|0;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = $207 | $210;
 $215 = (gb + (8410216) | 0);
 $216 = $215;
 HEAP32[$216>>2] = $204;
 $217 = (($215) + 4)|0;
 $218 = $217;
 HEAP32[$218>>2] = $214;
 $219 = $result3;
 $220 = $219;
 $221 = HEAP32[$220>>2]|0;
 $222 = (($219) + 4)|0;
 $223 = $222;
 $224 = HEAP32[$223>>2]|0;
 $225 = $result4;
 $226 = $225;
 $227 = HEAP32[$226>>2]|0;
 $228 = (($225) + 4)|0;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (gb + (8410208) | 0);
 $232 = $231;
 HEAP32[$232>>2] = $221;
 $233 = (($231) + 4)|0;
 $234 = $233;
 HEAP32[$234>>2] = $227;
 $235 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $236 = ((($235)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $236;
 STACKTOP = sp;return;
}
function _DDIV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)!=(0);
 $11 = ($9|0)!=(0);
 $12 = $10 | $11;
 if ($12) {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (___divdi3(($18|0),($21|0),($28|0),($31|0))|0);
  $33 = (getTempRet0() | 0);
  $34 = (gb + (8410216) | 0);
  $35 = $34;
  HEAP32[$35>>2] = $32;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (___remdi3(($43|0),($46|0),($53|0),($56|0))|0);
  $58 = (getTempRet0() | 0);
  $59 = (gb + (8410208) | 0);
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $64 = ((($63)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $64;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19248) | 0),$vararg_buffer);
  $63 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $64 = ((($63)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $64;
  STACKTOP = sp;return;
 }
}
function _DDIVU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)!=(0);
 $11 = ($9|0)!=(0);
 $12 = $10 | $11;
 if ($12) {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (___udivdi3(($18|0),($21|0),($28|0),($31|0))|0);
  $33 = (getTempRet0() | 0);
  $34 = (gb + (8410216) | 0);
  $35 = $34;
  HEAP32[$35>>2] = $32;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (___uremdi3(($43|0),($46|0),($53|0),($56|0))|0);
  $58 = (getTempRet0() | 0);
  $59 = (gb + (8410208) | 0);
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $64 = ((($63)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $64;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19229) | 0),$vararg_buffer);
  $63 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $64 = ((($63)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $64;
  STACKTOP = sp;return;
 }
}
function _J() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = $7 & -268435456;
 $9 = $3 | $8;
 $jump_target = $9;
 $link_register = (gb + (8409952) | 0);
 $10 = $link_register;
 $11 = ($10|0)!=((gb + (8409952) | 0)|0);
 if ($11) {
  $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 8)|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = $link_register;
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $17;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 mftCall_v($26|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $jump_target;
  $32 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) - ($34))|0;
  $36 = $35 >>> 2;
  $37 = (($30) + (($36*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
 }
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $40;
 $41 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $42 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $43 = ($41>>>0)<=($42>>>0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _J_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = $7 & -268435456;
 $9 = $3 | $8;
 $jump_target = $9;
 $link_register = (gb + (8409952) | 0);
 $10 = $link_register;
 $11 = ($10|0)!=((gb + (8409952) | 0)|0);
 if ($11) {
  $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 8)|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = $link_register;
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $17;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 mftCall_v($26|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $29;
  _jump_to_func();
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $32;
 $33 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $35 = ($33>>>0)<=($34>>>0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _J_IDLE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 _cp0_update_count();
 $0 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($0) - ($1))|0;
 $skip = $2;
 $3 = $skip;
 $4 = ($3|0)>(3);
 if ($4) {
  $5 = $skip;
  $6 = $5 & -4;
  $7 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $8;
  STACKTOP = sp;return;
 } else {
  _J();
  STACKTOP = sp;return;
 }
}
function _JAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = $7 & -268435456;
 $9 = $3 | $8;
 $jump_target = $9;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $10 = $link_register;
 $11 = ($10|0)!=((gb + (8409952) | 0)|0);
 if ($11) {
  $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 8)|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = $link_register;
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $17;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 mftCall_v($26|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $jump_target;
  $32 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) - ($34))|0;
  $36 = $35 >>> 2;
  $37 = (($30) + (($36*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $37;
 }
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $40;
 $41 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $42 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $43 = ($41>>>0)<=($42>>>0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JAL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = $7 & -268435456;
 $9 = $3 | $8;
 $jump_target = $9;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $10 = $link_register;
 $11 = ($10|0)!=((gb + (8409952) | 0)|0);
 if ($11) {
  $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 8)|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = $link_register;
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $17;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 mftCall_v($26|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $29;
  _jump_to_func();
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $32;
 $33 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $35 = ($33>>>0)<=($34>>>0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JAL_IDLE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 _cp0_update_count();
 $0 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($0) - ($1))|0;
 $skip = $2;
 $3 = $skip;
 $4 = ($3|0)>(3);
 if ($4) {
  $5 = $skip;
  $6 = $5 & -4;
  $7 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $8;
  STACKTOP = sp;return;
 } else {
  _JAL();
  STACKTOP = sp;return;
 }
}
function _JR_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $jump_target = $3;
 $link_register = (gb + (8409952) | 0);
 $4 = $link_register;
 $5 = ($4|0)!=((gb + (8409952) | 0)|0);
 if ($5) {
  $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 8)|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = $link_register;
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $11;
 }
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $18;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 mftCall_v($20|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $21 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $23;
  _jump_to_func();
 }
 $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $26;
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = ($27>>>0)<=($28>>>0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JALR_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $jump_target = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $link_register = $7;
 $8 = $link_register;
 $9 = ($8|0)!=((gb + (8409952) | 0)|0);
 if ($9) {
  $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8)|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = $link_register;
  $17 = $16;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $15;
 }
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 mftCall_v($24|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $25 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $27;
  _jump_to_func();
 }
 $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $29 = ((($28)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $30;
 $31 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $32 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $33 = ($31>>>0)<=($32>>>0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $48;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 mftCall_v($50|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $51 = $take_jump;
 $52 = ($51|0)==(0);
 $53 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $54 = ($53|0)!=(0);
 $or$cond = $52 | $54;
 if (!($or$cond)) {
  $55 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $jump_target;
  $58 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) - ($60))|0;
  $62 = $61 >>> 2;
  $63 = (($56) + (($62*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $63;
 }
 $64 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $65 = ((($64)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $66;
 $67 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $68 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $69 = ($67>>>0)<=($68>>>0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQ_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $48;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 mftCall_v($50|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $51 = $take_jump;
 $52 = ($51|0)==(0);
 $53 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $54 = ($53|0)!=(0);
 $or$cond = $52 | $54;
 if (!($or$cond)) {
  $55 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $55;
  _jump_to_func();
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQ_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = $take_jump;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  _BEQ();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = (($25) - ($26))|0;
 $skip = $27;
 $28 = $skip;
 $29 = ($28|0)>(3);
 if ($29) {
  $30 = $skip;
  $31 = $30 & -4;
  $32 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $33 = (($32) + ($31))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $33;
  STACKTOP = sp;return;
 } else {
  _BEQ();
  STACKTOP = sp;return;
 }
}
function _BNE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $48;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 mftCall_v($50|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $51 = $take_jump;
 $52 = ($51|0)==(0);
 $53 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $54 = ($53|0)!=(0);
 $or$cond = $52 | $54;
 if (!($or$cond)) {
  $55 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $jump_target;
  $58 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) - ($60))|0;
  $62 = $61 >>> 2;
  $63 = (($56) + (($62*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $63;
 }
 $64 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $65 = ((($64)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $66;
 $67 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $68 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $69 = ($67>>>0)<=($68>>>0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNE_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $48;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 mftCall_v($50|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $51 = $take_jump;
 $52 = ($51|0)==(0);
 $53 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $54 = ($53|0)!=(0);
 $or$cond = $52 | $54;
 if (!($or$cond)) {
  $55 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $55;
  _jump_to_func();
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNE_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = $take_jump;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  _BNE();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = (($25) - ($26))|0;
 $skip = $27;
 $28 = $skip;
 $29 = ($28|0)>(3);
 if ($29) {
  $30 = $skip;
  $31 = $30 & -4;
  $32 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $33 = (($32) + ($31))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $33;
  STACKTOP = sp;return;
 } else {
  _BNE();
  STACKTOP = sp;return;
 }
}
function _BLEZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $jump_target;
  $50 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) - ($52))|0;
  $54 = $53 >>> 2;
  $55 = (($48) + (($54*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $55;
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZ_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $47;
  _jump_to_func();
 }
 $48 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZ_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BLEZ();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BLEZ();
  STACKTOP = sp;return;
 }
}
function _BGTZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $jump_target;
  $50 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) - ($52))|0;
  $54 = $53 >>> 2;
  $55 = (($48) + (($54*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $55;
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZ_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $47;
  _jump_to_func();
 }
 $48 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZ_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGTZ();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGTZ();
  STACKTOP = sp;return;
 }
}
function _BLTZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0;
 var $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = (gb + (8409952) | 0);
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $36 = ((($35)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 mftCall_v($38|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $39 = $take_jump;
 $40 = ($39|0)==(0);
 $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if (!($or$cond)) {
  $43 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $jump_target;
  $46 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($45) - ($48))|0;
  $50 = $49 >>> 2;
  $51 = (($44) + (($50*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $51;
 }
 $52 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $53 = ((($52)) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $54;
 $55 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $56 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $57 = ($55>>>0)<=($56>>>0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZ_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = (gb + (8409952) | 0);
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $36 = ((($35)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 mftCall_v($38|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $39 = $take_jump;
 $40 = ($39|0)==(0);
 $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if (!($or$cond)) {
  $43 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $43;
  _jump_to_func();
 }
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $46;
 $47 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $48 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $49 = ($47>>>0)<=($48>>>0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZ_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = $take_jump;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _BLTZ();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $13 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $14 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $15 = (($13) - ($14))|0;
 $skip = $15;
 $16 = $skip;
 $17 = ($16|0)>(3);
 if ($17) {
  $18 = $skip;
  $19 = $18 & -4;
  $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $21;
  STACKTOP = sp;return;
 } else {
  _BLTZ();
  STACKTOP = sp;return;
 }
}
function _BGEZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $jump_target;
  $50 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) - ($52))|0;
  $54 = $53 >>> 2;
  $55 = (($48) + (($54*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $55;
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZ_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $47;
  _jump_to_func();
 }
 $48 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZ_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGEZ();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGEZ();
  STACKTOP = sp;return;
 }
}
function _BLTZAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0;
 var $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $36 = ((($35)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 mftCall_v($38|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $39 = $take_jump;
 $40 = ($39|0)==(0);
 $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if (!($or$cond)) {
  $43 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $jump_target;
  $46 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($45) - ($48))|0;
  $50 = $49 >>> 2;
  $51 = (($44) + (($50*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $51;
 }
 $52 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $53 = ((($52)) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $54;
 $55 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $56 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $57 = ($55>>>0)<=($56>>>0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZAL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $36 = ((($35)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 mftCall_v($38|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $39 = $take_jump;
 $40 = ($39|0)==(0);
 $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if (!($or$cond)) {
  $43 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $43;
  _jump_to_func();
 }
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $46;
 $47 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $48 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $49 = ($47>>>0)<=($48>>>0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZAL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = $take_jump;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _BLTZAL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $13 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $14 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $15 = (($13) - ($14))|0;
 $skip = $15;
 $16 = $skip;
 $17 = ($16|0)>(3);
 if ($17) {
  $18 = $skip;
  $19 = $18 & -4;
  $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $21;
  STACKTOP = sp;return;
 } else {
  _BLTZAL();
  STACKTOP = sp;return;
 }
}
function _BGEZAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $jump_target;
  $50 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) - ($52))|0;
  $54 = $53 >>> 2;
  $55 = (($48) + (($54*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $55;
 }
 $56 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $58;
 $59 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $60 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $61 = ($59>>>0)<=($60>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZAL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $40;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 mftCall_v($42|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $43 = $take_jump;
 $44 = ($43|0)==(0);
 $45 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $46 = ($45|0)!=(0);
 $or$cond = $44 | $46;
 if (!($or$cond)) {
  $47 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $47;
  _jump_to_func();
 }
 $48 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZAL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGEZAL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGEZAL();
  STACKTOP = sp;return;
 }
}
function _BEQL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = $take_jump;
 $48 = ($47|0)!=(0);
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($48) {
  $50 = ((($49)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  mftCall_v($52|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $53 = $take_jump;
  $54 = ($53|0)==(0);
  $55 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $56 = ($55|0)!=(0);
  $or$cond = $54 | $56;
  if (!($or$cond)) {
   $57 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   $59 = $jump_target;
   $60 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($59) - ($62))|0;
   $64 = $63 >>> 2;
   $65 = (($58) + (($64*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $65;
  }
 } else {
  $66 = ((($49)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $66;
  _cp0_update_count();
 }
 $67 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $68 = ((($67)) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $69;
 $70 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $71 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $72 = ($70>>>0)<=($71>>>0);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = $take_jump;
 $48 = ($47|0)!=(0);
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($48) {
  $50 = ((($49)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  mftCall_v($52|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $53 = $take_jump;
  $54 = ($53|0)==(0);
  $55 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $56 = ($55|0)!=(0);
  $or$cond = $54 | $56;
  if (!($or$cond)) {
   $57 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $57;
   _jump_to_func();
  }
 } else {
  $58 = ((($49)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = $take_jump;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  _BEQL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = (($25) - ($26))|0;
 $skip = $27;
 $28 = $skip;
 $29 = ($28|0)>(3);
 if ($29) {
  $30 = $skip;
  $31 = $30 & -4;
  $32 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $33 = (($32) + ($31))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $33;
  STACKTOP = sp;return;
 } else {
  _BEQL();
  STACKTOP = sp;return;
 }
}
function _BNEL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = $take_jump;
 $48 = ($47|0)!=(0);
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($48) {
  $50 = ((($49)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  mftCall_v($52|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $53 = $take_jump;
  $54 = ($53|0)==(0);
  $55 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $56 = ($55|0)!=(0);
  $or$cond = $54 | $56;
  if (!($or$cond)) {
   $57 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   $59 = $jump_target;
   $60 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($59) - ($62))|0;
   $64 = $63 >>> 2;
   $65 = (($58) + (($64*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $65;
  }
 } else {
  $66 = ((($49)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $66;
  _cp0_update_count();
 }
 $67 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $68 = ((($67)) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $69;
 $70 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $71 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $72 = ($70>>>0)<=($71>>>0);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNEL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 $31 = (($30) + 1)|0;
 $32 = $31<<2;
 $33 = (($25) + ($32))|0;
 $jump_target = $33;
 $link_register = (gb + (8409952) | 0);
 $34 = $link_register;
 $35 = ($34|0)!=((gb + (8409952) | 0)|0);
 if ($35) {
  $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8)|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $link_register;
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $41;
 }
 $47 = $take_jump;
 $48 = ($47|0)!=(0);
 $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($48) {
  $50 = ((($49)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  mftCall_v($52|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $53 = $take_jump;
  $54 = ($53|0)==(0);
  $55 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $56 = ($55|0)!=(0);
  $or$cond = $54 | $56;
  if (!($or$cond)) {
   $57 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $57;
   _jump_to_func();
  }
 } else {
  $58 = ((($49)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNEL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)!=($15|0);
 $20 = ($8|0)!=($18|0);
 $21 = $19 | $20;
 $22 = $21&1;
 $take_jump = $22;
 $23 = $take_jump;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  _BNEL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = (($25) - ($26))|0;
 $skip = $27;
 $28 = $skip;
 $29 = ($28|0)>(3);
 if ($29) {
  $30 = $skip;
  $31 = $30 & -4;
  $32 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $33 = (($32) + ($31))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $33;
  STACKTOP = sp;return;
 } else {
  _BNEL();
  STACKTOP = sp;return;
 }
}
function _BLEZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = $jump_target;
   $52 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) - ($54))|0;
   $56 = $55 >>> 2;
   $57 = (($50) + (($56*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $57;
  }
 } else {
  $58 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $49;
   _jump_to_func();
  }
 } else {
  $50 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  _cp0_update_count();
 }
 $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = ($5>>>0)<=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BLEZL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BLEZL();
  STACKTOP = sp;return;
 }
}
function _BGTZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = $jump_target;
   $52 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) - ($54))|0;
   $56 = $55 >>> 2;
   $57 = (($50) + (($56*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $57;
  }
 } else {
  $58 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $49;
   _jump_to_func();
  }
 } else {
  $50 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  _cp0_update_count();
 }
 $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGTZL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGTZL();
  STACKTOP = sp;return;
 }
}
function _BLTZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = (gb + (8409952) | 0);
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($36) {
  $38 = ((($37)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  mftCall_v($40|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $41 = $take_jump;
  $42 = ($41|0)==(0);
  $43 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $44 = ($43|0)!=(0);
  $or$cond = $42 | $44;
  if (!($or$cond)) {
   $45 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = $jump_target;
   $48 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($47) - ($50))|0;
   $52 = $51 >>> 2;
   $53 = (($46) + (($52*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $53;
  }
 } else {
  $54 = ((($37)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $54;
  _cp0_update_count();
 }
 $55 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $56 = ((($55)) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $57;
 $58 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $59 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $60 = ($58>>>0)<=($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = (gb + (8409952) | 0);
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($36) {
  $38 = ((($37)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  mftCall_v($40|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $41 = $take_jump;
  $42 = ($41|0)==(0);
  $43 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $44 = ($43|0)!=(0);
  $or$cond = $42 | $44;
  if (!($or$cond)) {
   $45 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $45;
   _jump_to_func();
  }
 } else {
  $46 = ((($37)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $46;
  _cp0_update_count();
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $49;
 $50 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $51 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $52 = ($50>>>0)<=($51>>>0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = $take_jump;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _BLTZL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $13 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $14 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $15 = (($13) - ($14))|0;
 $skip = $15;
 $16 = $skip;
 $17 = ($16|0)>(3);
 if ($17) {
  $18 = $skip;
  $19 = $18 & -4;
  $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $21;
  STACKTOP = sp;return;
 } else {
  _BLTZL();
  STACKTOP = sp;return;
 }
}
function _BGEZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = $jump_target;
   $52 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) - ($54))|0;
   $56 = $55 >>> 2;
   $57 = (($50) + (($56*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $57;
  }
 } else {
  $58 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = (gb + (8409952) | 0);
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $49;
   _jump_to_func();
  }
 } else {
  $50 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  _cp0_update_count();
 }
 $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGEZL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGEZL();
  STACKTOP = sp;return;
 }
}
function _BLTZALL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($36) {
  $38 = ((($37)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  mftCall_v($40|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $41 = $take_jump;
  $42 = ($41|0)==(0);
  $43 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $44 = ($43|0)!=(0);
  $or$cond = $42 | $44;
  if (!($or$cond)) {
   $45 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = $jump_target;
   $48 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($47) - ($50))|0;
   $52 = $51 >>> 2;
   $53 = (($46) + (($52*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $53;
  }
 } else {
  $54 = ((($37)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $54;
  _cp0_update_count();
 }
 $55 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $56 = ((($55)) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $57;
 $58 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $59 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $60 = ($58>>>0)<=($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZALL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + 1)|0;
 $20 = $19<<2;
 $21 = (($13) + ($20))|0;
 $jump_target = $21;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $22 = $link_register;
 $23 = ($22|0)!=((gb + (8409952) | 0)|0);
 if ($23) {
  $24 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($36) {
  $38 = ((($37)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  mftCall_v($40|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $41 = $take_jump;
  $42 = ($41|0)==(0);
  $43 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $44 = ($43|0)!=(0);
  $or$cond = $42 | $44;
  if (!($or$cond)) {
   $45 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $45;
   _jump_to_func();
  }
 } else {
  $46 = ((($37)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $46;
  _cp0_update_count();
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $49;
 $50 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $51 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $52 = ($50>>>0)<=($51>>>0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZALL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9&1;
 $take_jump = $10;
 $11 = $take_jump;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _BLTZALL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $13 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $14 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $15 = (($13) - ($14))|0;
 $skip = $15;
 $16 = $skip;
 $17 = ($16|0)>(3);
 if ($17) {
  $18 = $skip;
  $19 = $18 & -4;
  $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $21;
  STACKTOP = sp;return;
 } else {
  _BLTZALL();
  STACKTOP = sp;return;
 }
}
function _BGEZALL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = $jump_target;
   $52 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) - ($54))|0;
   $56 = $55 >>> 2;
   $57 = (($50) + (($56*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $57;
  }
 } else {
  $58 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $58;
  _cp0_update_count();
 }
 $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $61;
 $62 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $63 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $64 = ($62>>>0)<=($63>>>0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZALL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 1)|0;
 $24 = $23<<2;
 $25 = (($17) + ($24))|0;
 $jump_target = $25;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $26 = $link_register;
 $27 = ($26|0)!=((gb + (8409952) | 0)|0);
 if ($27) {
  $28 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8)|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $link_register;
  $35 = $34;
  $36 = $35;
  HEAP32[$36>>2] = $31;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $33;
 }
 $39 = $take_jump;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($40) {
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $43 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  mftCall_v($44|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $45 = $take_jump;
  $46 = ($45|0)==(0);
  $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $48 = ($47|0)!=(0);
  $or$cond = $46 | $48;
  if (!($or$cond)) {
   $49 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $49;
   _jump_to_func();
  }
 } else {
  $50 = ((($41)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $50;
  _cp0_update_count();
 }
 $51 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZALL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($5>>>0)>=(0);
 $11 = ($8|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $14 = $13&1;
 $take_jump = $14;
 $15 = $take_jump;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  _BGEZALL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $17 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $18 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $19 = (($17) - ($18))|0;
 $skip = $19;
 $20 = $skip;
 $21 = ($20|0)>(3);
 if ($21) {
  $22 = $skip;
  $23 = $22 & -4;
  $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $25 = (($24) + ($23))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $25;
  STACKTOP = sp;return;
 } else {
  _BGEZALL();
  STACKTOP = sp;return;
 }
}
function _BC1TL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = $take_jump;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($31) {
  $33 = ((($32)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $33;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $34 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $36 = $take_jump;
  $37 = ($36|0)==(0);
  $38 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $39 = ($38|0)!=(0);
  $or$cond = $37 | $39;
  if (!($or$cond)) {
   $40 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $42 = $jump_target;
   $43 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($42) - ($45))|0;
   $47 = $46 >>> 2;
   $48 = (($41) + (($47*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $48;
  }
 } else {
  $49 = ((($32)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $49;
  _cp0_update_count();
 }
 $50 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $52;
 $53 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $54 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $55 = ($53>>>0)<=($54>>>0);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1TL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = $take_jump;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($31) {
  $33 = ((($32)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $33;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $34 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $36 = $take_jump;
  $37 = ($36|0)==(0);
  $38 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $39 = ($38|0)!=(0);
  $or$cond = $37 | $39;
  if (!($or$cond)) {
   $40 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $40;
   _jump_to_func();
  }
 } else {
  $41 = ((($32)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $41;
  _cp0_update_count();
 }
 $42 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $44;
 $45 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $46 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $47 = ($45>>>0)<=($46>>>0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1TL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = (_check_cop1_unusable()|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $take_jump;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  _BC1TL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $8 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $10 = (($8) - ($9))|0;
 $skip = $10;
 $11 = $skip;
 $12 = ($11|0)>(3);
 if ($12) {
  $13 = $skip;
  $14 = $13 & -4;
  $15 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $16 = (($15) + ($14))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $16;
  STACKTOP = sp;return;
 } else {
  _BC1TL();
  STACKTOP = sp;return;
 }
}
function _BC1FL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = $take_jump;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($31) {
  $33 = ((($32)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $33;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $34 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $36 = $take_jump;
  $37 = ($36|0)==(0);
  $38 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $39 = ($38|0)!=(0);
  $or$cond = $37 | $39;
  if (!($or$cond)) {
   $40 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $42 = $jump_target;
   $43 = HEAP32[(gb + (14717328) | 0)>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($42) - ($45))|0;
   $47 = $46 >>> 2;
   $48 = (($41) + (($47*132)|0)|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $48;
  }
 } else {
  $49 = ((($32)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $49;
  _cp0_update_count();
 }
 $50 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $52;
 $53 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $54 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $55 = ($53>>>0)<=($54>>>0);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1FL_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = $take_jump;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 if ($31) {
  $33 = ((($32)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $33;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  $34 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $36 = $take_jump;
  $37 = ($36|0)==(0);
  $38 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $39 = ($38|0)!=(0);
  $or$cond = $37 | $39;
  if (!($or$cond)) {
   $40 = $jump_target;
   HEAP32[(gb + (10523020) | 0)>>2] = $40;
   _jump_to_func();
  }
 } else {
  $41 = ((($32)) + 264|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $41;
  _cp0_update_count();
 }
 $42 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $44;
 $45 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $46 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $47 = ($45>>>0)<=($46>>>0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1FL_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = (_check_cop1_unusable()|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $take_jump;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  _BC1FL();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $8 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $10 = (($8) - ($9))|0;
 $skip = $10;
 $11 = $skip;
 $12 = ($11|0)>(3);
 if ($12) {
  $13 = $skip;
  $14 = $13 & -4;
  $15 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $16 = (($15) + ($14))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $16;
  STACKTOP = sp;return;
 } else {
  _BC1FL();
  STACKTOP = sp;return;
 }
}
function _SLL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $4 << $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _SRL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $4 >>> $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _SRA() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $4 >> $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _SLLV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 31;
 $10 = $4 << $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _SRLV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 31;
 $10 = $4 >>> $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _SRAV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 31;
 $10 = $4 >> $9;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 return;
}
function _DSLL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSRL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Lshr(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSRA() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Ashr(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSLLV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 63;
 $15 = (_bitshift64Shl(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSRLV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 63;
 $15 = (_bitshift64Lshr(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSRAV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 63;
 $15 = (_bitshift64Ashr(($6|0),($9|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $26 = ((($25)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $26;
 return;
}
function _DSLL32() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (32 + ($14))|0;
 $16 = (_bitshift64Shl(($6|0),($9|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _DSRL32() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (32 + ($14))|0;
 $16 = (_bitshift64Lshr(($6|0),($9|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _DSRA32() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (32 + ($14))|0;
 $16 = (_bitshift64Ashr(($6|0),($9|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _MTC0() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 13|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 L1: do {
  switch ($4|0) {
  case 0:  {
   $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $6 = ((($5)) + 4|0);
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & -2147483585;
   HEAP32[(gb + (14717332) | 0)>>2] = $10;
   $11 = HEAP32[(gb + (14717332) | 0)>>2]|0;
   $12 = $11 & 63;
   $13 = ($12>>>0)>(31);
   if ($13) {
    _DebugMessage(1,(gb + (18980) | 0),$vararg_buffer);
    HEAP32[(gb + (10523004) | 0)>>2] = 1;
   }
   break;
  }
  case 15: case 8: case 1:  {
   break;
  }
  case 2:  {
   $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 1073741823;
   HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2] = $19;
   break;
  }
  case 3:  {
   $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $21 = ((($20)) + 4|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 1073741823;
   HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2] = $25;
   break;
  }
  case 4:  {
   $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 & -8388608;
   $32 = HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2]|0;
   $33 = $32 & 8388592;
   $34 = $31 | $33;
   HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2] = $34;
   break;
  }
  case 5:  {
   $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $36 = ((($35)) + 4|0);
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & 33546240;
   HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2] = $40;
   break;
  }
  case 6:  {
   $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $42 = ((($41)) + 4|0);
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2] = $45;
   HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2] = 31;
   break;
  }
  case 9:  {
   _cp0_update_count();
   HEAP32[(gb + (14717724) | 0)>>2] = 1;
   $46 = HEAP32[(gb + (10523016) | 0)>>2]|0;
   $47 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $48 = ($46>>>0)<=($47>>>0);
   if ($48) {
    _gen_interupt();
   }
   HEAP32[(gb + (14717724) | 0)>>2] = 0;
   $49 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $50 = ((($49)) + 4|0);
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$52>>2]|0;
   _translate_event_queue($53);
   $54 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $55 = ((($54)) + 4|0);
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $58;
   break;
  }
  case 10:  {
   $59 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $60 = ((($59)) + 4|0);
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 & -7937;
   HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2] = $64;
   break;
  }
  case 11:  {
   _cp0_update_count();
   _remove_event(2);
   $65 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $66 = ((($65)) + 4|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   _add_interupt_event_count(2,$69);
   $70 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $71 = ((($70)) + 4|0);
   $72 = ((($71)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 44|0))>>2] = $74;
   $75 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
   $76 = $75 & -32769;
   HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $76;
   break;
  }
  case 12:  {
   $77 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $78 = ((($77)) + 4|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 & 67108864;
   $83 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
   $84 = $83 & 67108864;
   $85 = ($82|0)!=($84|0);
   if ($85) {
    $86 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
    $87 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $88 = ((($87)) + 4|0);
    $89 = ((($88)) + 4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[$90>>2]|0;
    _shuffle_fpr_data($86,$91);
    $92 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $93 = ((($92)) + 4|0);
    $94 = ((($93)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = HEAP32[$95>>2]|0;
    _set_fpr_pointers($96);
   }
   $97 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $98 = ((($97)) + 4|0);
   $99 = ((($98)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$100>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $101;
   _cp0_update_count();
   $102 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $103 = ((($102)) + 132|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $103;
   _check_interupt();
   HEAP32[(gb + (14717724) | 0)>>2] = 1;
   $104 = HEAP32[(gb + (10523016) | 0)>>2]|0;
   $105 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $106 = ($104>>>0)<=($105>>>0);
   if ($106) {
    _gen_interupt();
   }
   HEAP32[(gb + (14717724) | 0)>>2] = 0;
   $107 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $108 = ((($107)) + -132|0);
   HEAP32[(gb + (10522028) | 0)>>2] = $108;
   break;
  }
  case 13:  {
   $109 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $110 = ((($109)) + 4|0);
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(0);
   if ($114) {
    _DebugMessage(1,(gb + (19040) | 0),$vararg_buffer1);
    HEAP32[(gb + (10523004) | 0)>>2] = 1;
    break L1;
   } else {
    $115 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $116 = ((($115)) + 4|0);
    $117 = ((($116)) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = HEAP32[$118>>2]|0;
    HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $119;
    break L1;
   }
   break;
  }
  case 14:  {
   $120 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $121 = ((($120)) + 4|0);
   $122 = ((($121)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = HEAP32[$123>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $124;
   break;
  }
  case 16:  {
   $125 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $126 = ((($125)) + 4|0);
   $127 = ((($126)) + 4|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = HEAP32[$128>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 64|0))>>2] = $129;
   break;
  }
  case 18:  {
   $130 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $131 = ((($130)) + 4|0);
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = HEAP32[$133>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 72|0))>>2] = $134;
   break;
  }
  case 19:  {
   $135 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $136 = ((($135)) + 4|0);
   $137 = ((($136)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = HEAP32[$138>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 76|0))>>2] = $139;
   break;
  }
  case 28:  {
   $140 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $141 = ((($140)) + 4|0);
   $142 = ((($141)) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = HEAP32[$143>>2]|0;
   $145 = $144 & 268435392;
   HEAP32[((((gb + (14717332) | 0)) + 112|0))>>2] = $145;
   break;
  }
  case 29:  {
   HEAP32[((((gb + (14717332) | 0)) + 116|0))>>2] = 0;
   break;
  }
  default: {
   $146 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $147 = ((($146)) + 4|0);
   $148 = ((($147)) + 13|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   HEAP32[$vararg_buffer3>>2] = $150;
   _DebugMessage(1,(gb + (19105) | 0),$vararg_buffer3);
   HEAP32[(gb + (10523004) | 0)>>2] = 1;
  }
  }
 } while(0);
 $151 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $152 = ((($151)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $152;
 STACKTOP = sp;return;
}
function _MFC0() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 13|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 1:  {
  _DebugMessage(1,(gb + (19128) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $23;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  _cp0_update_count();
  break;
 }
 default: {
 }
 }
 $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 13|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((gb + (14717332) | 0) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _TLBR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $1 = $0 & 31;
 $index = $1;
 $2 = $index;
 $3 = ((gb + (23106792) | 0) + (($2*52)|0)|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = $5 << 13;
 HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2] = $6;
 $7 = $index;
 $8 = ((gb + (23106792) | 0) + (($7*52)|0)|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 13;
 $12 = $index;
 $13 = ((gb + (23106792) | 0) + (($12*52)|0)|0);
 $14 = ((($13)) + 9|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $11 | $16;
 HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2] = $17;
 $18 = $index;
 $19 = ((gb + (23106792) | 0) + (($18*52)|0)|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 << 6;
 $23 = $index;
 $24 = ((gb + (23106792) | 0) + (($23*52)|0)|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = $27 << 3;
 $29 = $22 | $28;
 $30 = $index;
 $31 = ((gb + (23106792) | 0) + (($30*52)|0)|0);
 $32 = ((($31)) + 17|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = $34 << 2;
 $36 = $29 | $35;
 $37 = $index;
 $38 = ((gb + (23106792) | 0) + (($37*52)|0)|0);
 $39 = ((($38)) + 18|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = $41 << 1;
 $43 = $36 | $42;
 $44 = $index;
 $45 = ((gb + (23106792) | 0) + (($44*52)|0)|0);
 $46 = ((($45)) + 8|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 << 24 >> 24;
 $49 = $43 | $48;
 HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2] = $49;
 $50 = $index;
 $51 = ((gb + (23106792) | 0) + (($50*52)|0)|0);
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 << 6;
 $55 = $index;
 $56 = ((gb + (23106792) | 0) + (($55*52)|0)|0);
 $57 = ((($56)) + 24|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 << 24 >> 24;
 $60 = $59 << 3;
 $61 = $54 | $60;
 $62 = $index;
 $63 = ((gb + (23106792) | 0) + (($62*52)|0)|0);
 $64 = ((($63)) + 25|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 << 24 >> 24;
 $67 = $66 << 2;
 $68 = $61 | $67;
 $69 = $index;
 $70 = ((gb + (23106792) | 0) + (($69*52)|0)|0);
 $71 = ((($70)) + 26|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72 << 24 >> 24;
 $74 = $73 << 1;
 $75 = $68 | $74;
 $76 = $index;
 $77 = ((gb + (23106792) | 0) + (($76*52)|0)|0);
 $78 = ((($77)) + 8|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79 << 24 >> 24;
 $81 = $75 | $80;
 HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2] = $81;
 $82 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $83 = ((($82)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $83;
 STACKTOP = sp;return;
}
function _TLBWI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $1 = $0 & 63;
 _TLBWrite($1);
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $3;
 return;
}
function _TLBWR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _cp0_update_count();
 $0 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $1 = (($0>>>0) / 2)&-1;
 $2 = HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2]|0;
 $3 = (32 - ($2))|0;
 $4 = (($1>>>0) % ($3>>>0))&-1;
 $5 = HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2]|0;
 $6 = (($4) + ($5))|0;
 HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2] = $6;
 $7 = HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2]|0;
 _TLBWrite($7);
 $8 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $9 = ((($8)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $9;
 return;
}
function _TLBP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $1 = $0 | -2147483648;
 HEAP32[(gb + (14717332) | 0)>>2] = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(32);
  if (!($3)) {
   label = 8;
   break;
  }
  $4 = $i;
  $5 = ((gb + (23106792) | 0) + (($4*52)|0)|0);
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = ((gb + (23106792) | 0) + (($8*52)|0)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = $11 ^ -1;
  $13 = $7 & $12;
  $14 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
  $15 = $14 & -8192;
  $16 = $15 >>> 13;
  $17 = $i;
  $18 = ((gb + (23106792) | 0) + (($17*52)|0)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = $20 ^ -1;
  $22 = $16 & $21;
  $23 = ($13|0)==($22|0);
  if ($23) {
   $24 = $i;
   $25 = ((gb + (23106792) | 0) + (($24*52)|0)|0);
   $26 = ((($25)) + 8|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)!=(0);
   if ($29) {
    break;
   }
   $30 = $i;
   $31 = ((gb + (23106792) | 0) + (($30*52)|0)|0);
   $32 = ((($31)) + 9|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
   $36 = $35 & 255;
   $37 = ($34|0)==($36|0);
   if ($37) {
    break;
   }
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 if ((label|0) == 8) {
  $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $42 = ((($41)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $42;
  STACKTOP = sp;return;
 }
 $38 = $i;
 HEAP32[(gb + (14717332) | 0)>>2] = $38;
 $41 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $42 = ((($41)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $42;
 STACKTOP = sp;return;
}
function _CACHE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $1;
 return;
}
function _ERET() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _cp0_update_count();
 $0 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $1 = $0 & 4;
 $2 = ($1|0)!=(0);
 if ($2) {
  _DebugMessage(1,(gb + (18966) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 } else {
  $3 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
  $4 = $3 & -3;
  HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $4;
  $5 = HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2]|0;
  _generic_jump_to($5);
 }
 HEAP32[(gb + (10522032) | 0)>>2] = 0;
 _check_interupt();
 $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $8;
 $9 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = ($9>>>0)<=($10>>>0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _LWC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $lslfft = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($11) + ($19))|0;
 $lslfaddr = $20;
 $21 = (_check_cop1_unusable()|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 $25 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $25;
 HEAP32[(gb + (8424332) | 0)>>2] = $temp;
 $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $27 = $26 >>> 16;
 $28 = ((gb + (8424340) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 mftCall_v($29|0);
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $lslfft;
 $40 = $39&255;
 $41 = ((gb + (14717460) | 0) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$42>>2] = $35;
 STACKTOP = sp;return;
}
function _SWC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $lslfft = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($11) + ($19))|0;
 $lslfaddr = $20;
 $21 = (_check_cop1_unusable()|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 $25 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $25;
 $26 = $lslfft;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[(gb + (8424336) | 0)>>2] = $30;
 $31 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $32 = $31 >>> 16;
 $33 = ((gb + (9472916) | 0) + ($32<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 mftCall_v($34|0);
 $35 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $36 = $35 >>> 12;
 $37 = ((gb + (23109846) | 0) + ($36)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)!=(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = $40 & 4095;
 $42 = (($41>>>0) / 4)&-1;
 $43 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $44 = $43 >>> 12;
 $45 = ((gb + (10523024) | 0) + ($44<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + (($42*132)|0)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $51 = ($49|0)!=($50|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $53 = $52 >>> 12;
 $54 = ((gb + (23109846) | 0) + ($53)|0);
 HEAP8[$54>>0] = 1;
 STACKTOP = sp;return;
}
function _MTC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ((gb + (14717460) | 0) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $15;
 return;
}
function _MFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $21;
 return;
}
function _CTC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(31);
 if ($7) {
  $8 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  HEAP32[(gb + (14717720) | 0)>>2] = $12;
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  _update_x86_rounding_mode($17);
 }
 $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $19 = ((($18)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $19;
 return;
}
function _CFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(31);
 if ($7) {
  $8 = HEAP32[(gb + (14717720) | 0)>>2]|0;
  $9 = ($8|0)<(0);
  $9 << 31 >> 31;
  $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$13>>2] = $8;
 }
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ((($15)) + 13|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[(gb + (14717716) | 0)>>2]|0;
  $21 = ($20|0)<(0);
  $21 << 31 >> 31;
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$25>>2] = $20;
 }
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $27;
 return;
}
function _BC1T() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $31;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $34 = $take_jump;
 $35 = ($34|0)==(0);
 $36 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $37 = ($36|0)!=(0);
 $or$cond = $35 | $37;
 if (!($or$cond)) {
  $38 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = $jump_target;
  $41 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40) - ($43))|0;
  $45 = $44 >>> 2;
  $46 = (($39) + (($45*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $46;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $49;
 $50 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $51 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $52 = ($50>>>0)<=($51>>>0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1T_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $31;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $34 = $take_jump;
 $35 = ($34|0)==(0);
 $36 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $37 = ($36|0)!=(0);
 $or$cond = $35 | $37;
 if (!($or$cond)) {
  $38 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $38;
  _jump_to_func();
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $41;
 $42 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $43 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $44 = ($42>>>0)<=($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1T_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)!=(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = (_check_cop1_unusable()|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $take_jump;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  _BC1T();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $8 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $10 = (($8) - ($9))|0;
 $skip = $10;
 $11 = $skip;
 $12 = ($11|0)>(3);
 if ($12) {
  $13 = $skip;
  $14 = $13 & -4;
  $15 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $16 = (($15) + ($14))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $16;
  STACKTOP = sp;return;
 } else {
  _BC1T();
  STACKTOP = sp;return;
 }
}
function _BC1F() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $31;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $34 = $take_jump;
 $35 = ($34|0)==(0);
 $36 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $37 = ($36|0)!=(0);
 $or$cond = $35 | $37;
 if (!($or$cond)) {
  $38 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = $jump_target;
  $41 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40) - ($43))|0;
  $45 = $44 >>> 2;
  $46 = (($39) + (($45*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $46;
 }
 $47 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $49;
 $50 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $51 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $52 = ($50>>>0)<=($51>>>0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1F_OUT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($11) + 1)|0;
 $13 = $12<<2;
 $14 = (($6) + ($13))|0;
 $jump_target = $14;
 $link_register = (gb + (8409952) | 0);
 $15 = (_check_cop1_unusable()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $link_register;
 $18 = ($17|0)!=((gb + (8409952) | 0)|0);
 if ($18) {
  $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8)|0;
  $23 = ($22|0)<(0);
  $24 = $23 << 31 >> 31;
  $25 = $link_register;
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
 }
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $31;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $34 = $take_jump;
 $35 = ($34|0)==(0);
 $36 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $37 = ($36|0)!=(0);
 $or$cond = $35 | $37;
 if (!($or$cond)) {
  $38 = $jump_target;
  HEAP32[(gb + (10523020) | 0)>>2] = $38;
  _jump_to_func();
 }
 $39 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $41;
 $42 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $43 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $44 = ($42>>>0)<=($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1F_IDLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 8388608;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $take_jump = $3;
 $4 = (_check_cop1_unusable()|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $take_jump;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  _BC1F();
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $8 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $10 = (($8) - ($9))|0;
 $skip = $10;
 $11 = $skip;
 $12 = ($11|0)>(3);
 if ($12) {
  $13 = $skip;
  $14 = $13 & -4;
  $15 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $16 = (($15) + ($14))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $16;
  STACKTOP = sp;return;
 } else {
  _BC1F();
  STACKTOP = sp;return;
 }
}
function _DMFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $11;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 return;
}
function _DMTC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = ((($13)) + 13|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ((gb + (14717588) | 0) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $8;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $11;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 return;
}
function _LDC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $lslfft = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($11) + ($19))|0;
 $lslfaddr = $20;
 $21 = (_check_cop1_unusable()|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 $25 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $25;
 $26 = $lslfft;
 $27 = $26&255;
 $28 = ((gb + (14717588) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[(gb + (8424332) | 0)>>2] = $29;
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 16;
 $32 = ((gb + (9210772) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 STACKTOP = sp;return;
}
function _SDC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $lslfft = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($11) + ($19))|0;
 $lslfaddr = $20;
 $21 = (_check_cop1_unusable()|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $24;
 $25 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $25;
 $26 = $lslfft;
 $27 = $26&255;
 $28 = ((gb + (14717588) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (gb + (8409944) | 0);
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $35;
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = $40 >>> 16;
 $42 = ((gb + (9997204) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 mftCall_v($43|0);
 $44 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $45 = $44 >>> 12;
 $46 = ((gb + (23109846) | 0) + ($45)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)!=(0);
 if ($48) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $50 = $49 & 4095;
 $51 = (($50>>>0) / 4)&-1;
 $52 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $53 = $52 >>> 12;
 $54 = ((gb + (10523024) | 0) + ($53<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + (($51*132)|0)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $60 = ($58|0)!=($59|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $62 = $61 >>> 12;
 $63 = ((gb + (23109846) | 0) + ($62)|0);
 HEAP8[$63>>0] = 1;
 STACKTOP = sp;return;
}
function _CVT_S_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_s_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_S_W() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_s_w($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_S_L() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_s_l($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_D_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_d_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_D_W() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_d_w($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_D_L() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_d_l($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_W_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_w_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_W_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_w_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_L_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_l_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CVT_L_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _cvt_l_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ROUND_W_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _round_w_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ROUND_W_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _round_w_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ROUND_L_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _round_l_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ROUND_L_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _round_l_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _TRUNC_W_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _trunc_w_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _TRUNC_W_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _trunc_w_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _TRUNC_L_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _trunc_l_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _TRUNC_L_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _trunc_l_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CEIL_W_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _ceil_w_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CEIL_W_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _ceil_w_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CEIL_L_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _ceil_l_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _CEIL_L_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _ceil_l_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _FLOOR_W_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _floor_w_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _FLOOR_W_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _floor_w_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _FLOOR_L_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _floor_l_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _FLOOR_L_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _floor_l_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ADD_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717460) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _add_s($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _ADD_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _add_d($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _SUB_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717460) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _sub_s($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _SUB_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _sub_d($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _MUL_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717460) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _mul_s($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _MUL_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 _mul_d($8,$14,$21);
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 return;
}
function _DIV_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 1024;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ((gb + (14717460) | 0) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = +HEAPF32[$10>>2];
  $12 = $11 == 0.0;
  if ($12) {
   _DebugMessage(1,(gb + (18955) | 0),$vararg_buffer);
  }
 }
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ((gb + (14717460) | 0) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ((gb + (14717460) | 0) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 _div_s($19,$25,$32);
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $34;
 STACKTOP = sp;return;
}
function _DIV_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 1024;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ((gb + (14717588) | 0) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 0.0;
  if ($12) {
   _DebugMessage(1,(gb + (18944) | 0),$vararg_buffer);
  }
 }
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ((gb + (14717588) | 0) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((gb + (14717588) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = ((($27)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ((gb + (14717588) | 0) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 _div_d($19,$25,$32);
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $34;
 STACKTOP = sp;return;
}
function _ABS_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _abs_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _ABS_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _abs_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _MOV_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _mov_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _MOV_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _mov_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _NEG_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _neg_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _NEG_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _neg_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _SQRT_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717460) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _sqrt_s($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _SQRT_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((gb + (14717588) | 0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _sqrt_d($8,$15);
 $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $17 = ((($16)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $17;
 return;
}
function _C_F_S() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 _c_f_s();
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $3;
 return;
}
function _C_F_D() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 _c_f_d();
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $3;
 return;
}
function _C_UN_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_un_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_UN_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_un_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_EQ_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_eq_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_EQ_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_eq_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_UEQ_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ueq_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_UEQ_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ueq_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_OLT_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_olt_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_OLT_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_olt_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_ULT_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ult_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_ULT_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ult_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_OLE_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ole_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_OLE_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ole_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_ULE_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ule_s($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_ULE_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((gb + (14717588) | 0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 _c_ule_d($8,$14);
 $15 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $16 = ((($15)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $16;
 return;
}
function _C_SF_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_sf_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_SF_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((gb + (14717588) | 0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF64[$6>>3];
 $8 = (___DOUBLE_BITS($7)|0);
 $9 = (getTempRet0() | 0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2146435072);
 $12 = ($8>>>0)>(0);
 $13 = ($10|0)==(2146435072);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  label = 3;
 } else {
  $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ((gb + (14717588) | 0) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ((gb + (14717588) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 _c_sf_d($37,$43);
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $45;
 STACKTOP = sp;return;
}
function _C_NGLE_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_ngle_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_NGLE_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((gb + (14717588) | 0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF64[$6>>3];
 $8 = (___DOUBLE_BITS($7)|0);
 $9 = (getTempRet0() | 0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2146435072);
 $12 = ($8>>>0)>(0);
 $13 = ($10|0)==(2146435072);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  label = 3;
 } else {
  $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ((gb + (14717588) | 0) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ((gb + (14717588) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 _c_ngle_d($37,$43);
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $45;
 STACKTOP = sp;return;
}
function _C_SEQ_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_seq_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_SEQ_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((gb + (14717588) | 0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF64[$6>>3];
 $8 = (___DOUBLE_BITS($7)|0);
 $9 = (getTempRet0() | 0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2146435072);
 $12 = ($8>>>0)>(0);
 $13 = ($10|0)==(2146435072);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  label = 3;
 } else {
  $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ((gb + (14717588) | 0) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ((gb + (14717588) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 _c_seq_d($37,$43);
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $45;
 STACKTOP = sp;return;
}
function _C_NGL_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_ngl_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_NGL_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((gb + (14717588) | 0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF64[$6>>3];
 $8 = (___DOUBLE_BITS($7)|0);
 $9 = (getTempRet0() | 0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2146435072);
 $12 = ($8>>>0)>(0);
 $13 = ($10|0)==(2146435072);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  label = 3;
 } else {
  $16 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ((gb + (14717588) | 0) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ((gb + (14717588) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 _c_ngl_d($37,$43);
 $44 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $45 = ((($44)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $45;
 STACKTOP = sp;return;
}
function _C_LT_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_lt_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_LT_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF64[$8>>3];
 $10 = (___DOUBLE_BITS($9)|0);
 $11 = (getTempRet0() | 0);
 $12 = $11 & 2147483647;
 $13 = ($12>>>0)>(2146435072);
 $14 = ($10>>>0)>(0);
 $15 = ($12|0)==(2146435072);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  label = 4;
 } else {
  $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ((gb + (14717588) | 0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = +HEAPF64[$23>>3];
  $25 = (___DOUBLE_BITS($24)|0);
  $26 = (getTempRet0() | 0);
  $27 = $26 & 2147483647;
  $28 = ($27>>>0)>(2146435072);
  $29 = ($25>>>0)>(0);
  $30 = ($27|0)==(2146435072);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = ((($34)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ((gb + (14717588) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((gb + (14717588) | 0) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 _c_lt_d($39,$45);
 $46 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $47 = ((($46)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $47;
 STACKTOP = sp;return;
}
function _C_NGE_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_nge_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_NGE_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF64[$8>>3];
 $10 = (___DOUBLE_BITS($9)|0);
 $11 = (getTempRet0() | 0);
 $12 = $11 & 2147483647;
 $13 = ($12>>>0)>(2146435072);
 $14 = ($10>>>0)>(0);
 $15 = ($12|0)==(2146435072);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  label = 4;
 } else {
  $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ((gb + (14717588) | 0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = +HEAPF64[$23>>3];
  $25 = (___DOUBLE_BITS($24)|0);
  $26 = (getTempRet0() | 0);
  $27 = $26 & 2147483647;
  $28 = ($27>>>0)>(2146435072);
  $29 = ($25>>>0)>(0);
  $30 = ($27|0)==(2146435072);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = ((($34)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ((gb + (14717588) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((gb + (14717588) | 0) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 _c_nge_d($39,$45);
 $46 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $47 = ((($46)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $47;
 STACKTOP = sp;return;
}
function _C_LE_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_le_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_LE_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF64[$8>>3];
 $10 = (___DOUBLE_BITS($9)|0);
 $11 = (getTempRet0() | 0);
 $12 = $11 & 2147483647;
 $13 = ($12>>>0)>(2146435072);
 $14 = ($10>>>0)>(0);
 $15 = ($12|0)==(2146435072);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  label = 4;
 } else {
  $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ((gb + (14717588) | 0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = +HEAPF64[$23>>3];
  $25 = (___DOUBLE_BITS($24)|0);
  $26 = (getTempRet0() | 0);
  $27 = $26 & 2147483647;
  $28 = ($27>>>0)>(2146435072);
  $29 = ($25>>>0)>(0);
  $30 = ($27|0)==(2146435072);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = ((($34)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ((gb + (14717588) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((gb + (14717588) | 0) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 _c_le_d($39,$45);
 $46 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $47 = ((($46)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $47;
 STACKTOP = sp;return;
}
function _C_NGT_S() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717460) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF32[$8>>2];
 $10 = (___FLOAT_BITS($9)|0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2139095040);
 if ($12) {
  label = 4;
 } else {
  $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ((gb + (14717460) | 0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = +HEAPF32[$18>>2];
  $20 = (___FLOAT_BITS($19)|0);
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2139095040);
  if ($22) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ((gb + (14717460) | 0) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ((gb + (14717460) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 _c_ngt_s($29,$35);
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $37;
 STACKTOP = sp;return;
}
function _C_NGT_D() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_check_cop1_unusable()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((gb + (14717588) | 0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = +HEAPF64[$8>>3];
 $10 = (___DOUBLE_BITS($9)|0);
 $11 = (getTempRet0() | 0);
 $12 = $11 & 2147483647;
 $13 = ($12>>>0)>(2146435072);
 $14 = ($10>>>0)>(0);
 $15 = ($12|0)==(2146435072);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  label = 4;
 } else {
  $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ((gb + (14717588) | 0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = +HEAPF64[$23>>3];
  $25 = (___DOUBLE_BITS($24)|0);
  $26 = (getTempRet0() | 0);
  $27 = $26 & 2147483647;
  $28 = ($27>>>0)>(2146435072);
  $29 = ($25>>>0)>(0);
  $30 = ($27|0)==(2146435072);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $33 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = ((($34)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ((gb + (14717588) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((gb + (14717588) | 0) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 _c_ngt_d($39,$45);
 $46 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $47 = ((($46)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $47;
 STACKTOP = sp;return;
}
function _SYSCALL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 32;
 _exception_general();
 return;
}
function _TEQ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($5|0)==($15|0);
 $20 = ($8|0)==($18|0);
 $21 = $19 & $20;
 if (!($21)) {
  $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $23 = ((($22)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $23;
  STACKTOP = sp;return;
 }
 _DebugMessage(1,(gb + (19207) | 0),$vararg_buffer);
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 $22 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $23 = ((($22)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _NOP() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $1;
 return;
}
function _RESERVED() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fast_mem_access($5)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 _DebugMessage(1,(gb + (19184) | 0),$vararg_buffer);
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _NI() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _DebugMessage(1,(gb + (19301) | 0),$vararg_buffer);
 $3 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_fast_mem_access($8)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $5;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $10;
 _DebugMessage(1,(gb + (19313) | 0),$vararg_buffer1);
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _FIN_BLOCK() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blk = 0, $inst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $3 = ((($2)) + -132|0);
  $4 = ((($3)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 4)|0;
  HEAP32[(gb + (10523020) | 0)>>2] = $6;
  _jump_to_func();
  $7 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  mftCall_v($8|0);
  $9 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $10 = ($9|0)==(2);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  _dyna_jump();
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(gb + (14717328) | 0)>>2]|0;
 $blk = $11;
 $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $inst = $12;
 $13 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $14 = ((($13)) + -132|0);
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 4)|0;
 HEAP32[(gb + (10523020) | 0)>>2] = $17;
 _jump_to_func();
 $18 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 if (!($19)) {
  $22 = $blk;
  HEAP32[(gb + (14717328) | 0)>>2] = $22;
  $23 = $inst;
  $24 = ((($23)) + 132|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $24;
 }
 $25 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $26 = ($25|0)==(2);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 _dyna_jump();
 STACKTOP = sp;return;
}
function _NOTCOMPILED() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 12;
 $4 = ((gb + (10523024) | 0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_fast_mem_access($7)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $mem;
  $12 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 >>> 12;
  $16 = ((gb + (10523024) | 0) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  _recompile_block($11,$17,$20);
 } else {
  _DebugMessage(1,(gb + (18718) | 0),$vararg_buffer);
 }
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 mftCall_v($22|0);
 $23 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $24 = ($23|0)==(2);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 _dyna_jump();
 STACKTOP = sp;return;
}
function _NOTCOMPILED2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _NOTCOMPILED();
 return;
}
function _JR_IDLE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 _cp0_update_count();
 $0 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($0) - ($1))|0;
 $skip = $2;
 $3 = $skip;
 $4 = ($3|0)>(3);
 if ($4) {
  $5 = $skip;
  $6 = $5 & -4;
  $7 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $8;
  STACKTOP = sp;return;
 } else {
  _JR();
  STACKTOP = sp;return;
 }
}
function _JALR_IDLE() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 _cp0_update_count();
 $0 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($0) - ($1))|0;
 $skip = $2;
 $3 = $skip;
 $4 = ($3|0)>(3);
 if ($4) {
  $5 = $skip;
  $6 = $5 & -4;
  $7 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $8;
  STACKTOP = sp;return;
 } else {
  _JALR();
  STACKTOP = sp;return;
 }
}
function _JALR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $jump_target = $3;
 $4 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $link_register = $7;
 $8 = $link_register;
 $9 = ($8|0)!=((gb + (8409952) | 0)|0);
 if ($9) {
  $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8)|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = $link_register;
  $17 = $16;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $15;
 }
 $21 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $22 = ((($21)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $22;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $23 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 mftCall_v($24|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $25 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = $jump_target;
  $30 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) - ($32))|0;
  $34 = $33 >>> 2;
  $35 = (($28) + (($34*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $35;
 }
 $36 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $38;
 $39 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $40 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $41 = ($39>>>0)<=($40>>>0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $take_jump = 1;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $jump_target = $3;
 $link_register = (gb + (8409952) | 0);
 $4 = $link_register;
 $5 = ($4|0)!=((gb + (8409952) | 0)|0);
 if ($5) {
  $6 = HEAP32[(gb + (10522028) | 0)>>2]|0;
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 8)|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = $link_register;
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $11;
 }
 $17 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $18 = ((($17)) + 132|0);
 HEAP32[(gb + (10522028) | 0)>>2] = $18;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 $19 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 mftCall_v($20|0);
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $21 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $jump_target;
  $26 = HEAP32[(gb + (14717328) | 0)>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($25) - ($28))|0;
  $30 = $29 >>> 2;
  $31 = (($24) + (($30*132)|0)|0);
  HEAP32[(gb + (10522028) | 0)>>2] = $31;
 }
 $32 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $33 = ((($32)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $34;
 $35 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $36 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $37 = ($35>>>0)<=($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function ___FLOAT_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 setTempRet0(($7) | 0);
 STACKTOP = sp;return ($4|0);
}
function _c_ngt_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngt_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_le_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_le_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_nge_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_nge_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_lt_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_lt_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngl_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngl_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_seq_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_seq_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngle_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_ngle_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_sf_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_sf_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_ule_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 <= $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ule_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 <= $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ole_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 <= $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ole_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 <= $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ult_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 < $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ult_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 < $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_olt_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 < $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_olt_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 < $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ueq_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 == $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ueq_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 == $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_eq_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 == $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_eq_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 == $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_un_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $25 = $24 & -8388609;
   $26 = $25;
   HEAP32[(gb + (14717720) | 0)>>2] = $26;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 $26 = $23;
 HEAP32[(gb + (14717720) | 0)>>2] = $26;
 STACKTOP = sp;return;
}
function _c_un_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $15 = $14 & -8388609;
   $16 = $15;
   HEAP32[(gb + (14717720) | 0)>>2] = $16;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 $16 = $13;
 HEAP32[(gb + (14717720) | 0)>>2] = $16;
 STACKTOP = sp;return;
}
function _c_f_d() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $1;
 return;
}
function _c_f_s() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $1;
 return;
}
function _sqrt_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 _set_rounding();
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_sqrt((+$3)));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _set_rounding() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 3;
 switch ($1|0) {
 case 0:  {
  (_fesetround(0)|0);
  return;
  break;
 }
 case 1:  {
  (_fesetround(3072)|0);
  return;
  break;
 }
 case 2:  {
  (_fesetround(2048)|0);
  return;
  break;
 }
 case 3:  {
  (_fesetround(1024)|0);
  return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function _sqrt_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 _set_rounding();
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_sqrt((+$3)));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _neg_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _neg_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _mov_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function _mov_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 HEAPF32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function _abs_d($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_abs((+$3)));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _abs_s($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_abs((+$3)));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _div_d($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 / $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _div_s($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 / $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _mul_d($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 * $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _mul_s($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _sub_d($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _sub_s($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _add_d($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 + $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _add_s($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _floor_l_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_floor((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _floor_l_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_floor((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _floor_w_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _floor_w_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _ceil_l_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _ceil_l_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _ceil_w_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _ceil_w_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _trunc_l_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_trunc((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _trunc_l_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_truncf((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _trunc_w_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_trunc((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _trunc_w_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_truncf((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _round_l_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_round((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _round_l_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_roundf((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _round_w_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_round((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _round_w_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_roundf((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _cvt_l_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_l_d($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_l_d($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_l_d($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_l_d($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _cvt_l_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_l_s($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_l_s($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_l_s($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_l_s($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _cvt_w_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_w_d($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_w_d($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_w_d($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_w_d($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _cvt_w_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_w_s($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_w_s($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_w_s($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_w_s($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _cvt_d_l($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding();
 $2 = $0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
 $10 = $1;
 HEAPF64[$10>>3] = $9;
 STACKTOP = sp;return;
}
function _cvt_d_w($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _cvt_d_s($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _cvt_s_l($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding();
 $2 = $0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
 $10 = $1;
 HEAPF32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _cvt_s_w($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding();
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _cvt_s_d($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding();
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $3;
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _TLBWrite($idx) {
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $idx;
 $1 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 L1: do {
  if ($2) {
   $3 = $0;
   $4 = ((gb + (23106792) | 0) + (($3*52)|0)|0);
   $5 = ((($4)) + 18|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   L3: do {
    if ($7) {
     $8 = $0;
     $9 = ((gb + (23106792) | 0) + (($8*52)|0)|0);
     $10 = ((($9)) + 28|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = $11 >>> 12;
     $i = $12;
     while(1) {
      $13 = $i;
      $14 = $0;
      $15 = ((gb + (23106792) | 0) + (($14*52)|0)|0);
      $16 = ((($15)) + 32|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = $17 >>> 12;
      $19 = ($13>>>0)<=($18>>>0);
      if (!($19)) {
       break L3;
      }
      $20 = $i;
      $21 = ((gb + (23109846) | 0) + ($20)|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)!=(0);
      do {
       if (!($23)) {
        $24 = $i;
        $25 = ((gb + (14718184) | 0) + ($24<<2)|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = $26 >>> 12;
        $28 = ((gb + (23109846) | 0) + ($27)|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = $29 << 24 >> 24;
        $31 = ($30|0)!=(0);
        if (!($31)) {
         $32 = $i;
         $33 = ((gb + (14718184) | 0) + ($32<<2)|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = $34 >>> 12;
         $36 = (($35) + 131072)|0;
         $37 = ((gb + (23109846) | 0) + ($36)|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = $38 << 24 >> 24;
         $40 = ($39|0)!=(0);
         if (!($40)) {
          break;
         }
        }
        $41 = $i;
        $42 = ((gb + (23109846) | 0) + ($41)|0);
        HEAP8[$42>>0] = 1;
       }
      } while(0);
      $43 = $i;
      $44 = ((gb + (23109846) | 0) + ($43)|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = ($45<<24>>24)!=(0);
      $47 = $i;
      if ($46) {
       $60 = ((gb + (10523024) | 0) + ($47<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)!=(0|0);
       if ($62) {
        $63 = $i;
        $64 = ((gb + (10523024) | 0) + ($63<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ((($65)) + 40|0);
        HEAP32[$66>>2] = 0;
       }
      } else {
       $48 = ((gb + (14718184) | 0) + ($47<<2)|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $49 & 8384512;
       $51 = (($50>>>0) / 4)&-1;
       $52 = ((gb + (21216) | 0) + ($51<<2)|0);
       $53 = (_adler32(0,($52|0),4096)|0);
       $54 = $i;
       $55 = ((gb + (10523024) | 0) + ($54<<2)|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ((($56)) + 40|0);
       HEAP32[$57>>2] = $53;
       $58 = $i;
       $59 = ((gb + (23109846) | 0) + ($58)|0);
       HEAP8[$59>>0] = 1;
      }
      $67 = $i;
      $68 = (($67) + 1)|0;
      $i = $68;
     }
    }
   } while(0);
   $69 = $0;
   $70 = ((gb + (23106792) | 0) + (($69*52)|0)|0);
   $71 = ((($70)) + 26|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)!=(0);
   if ($73) {
    $74 = $0;
    $75 = ((gb + (23106792) | 0) + (($74*52)|0)|0);
    $76 = ((($75)) + 40|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 >>> 12;
    $i = $78;
    while(1) {
     $79 = $i;
     $80 = $0;
     $81 = ((gb + (23106792) | 0) + (($80*52)|0)|0);
     $82 = ((($81)) + 44|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $83 >>> 12;
     $85 = ($79>>>0)<=($84>>>0);
     if (!($85)) {
      break L1;
     }
     $86 = $i;
     $87 = ((gb + (23109846) | 0) + ($86)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)!=(0);
     do {
      if (!($89)) {
       $90 = $i;
       $91 = ((gb + (14718184) | 0) + ($90<<2)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 >>> 12;
       $94 = ((gb + (23109846) | 0) + ($93)|0);
       $95 = HEAP8[$94>>0]|0;
       $96 = $95 << 24 >> 24;
       $97 = ($96|0)!=(0);
       if (!($97)) {
        $98 = $i;
        $99 = ((gb + (14718184) | 0) + ($98<<2)|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = $100 >>> 12;
        $102 = (($101) + 131072)|0;
        $103 = ((gb + (23109846) | 0) + ($102)|0);
        $104 = HEAP8[$103>>0]|0;
        $105 = $104 << 24 >> 24;
        $106 = ($105|0)!=(0);
        if (!($106)) {
         break;
        }
       }
       $107 = $i;
       $108 = ((gb + (23109846) | 0) + ($107)|0);
       HEAP8[$108>>0] = 1;
      }
     } while(0);
     $109 = $i;
     $110 = ((gb + (23109846) | 0) + ($109)|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)!=(0);
     $113 = $i;
     if ($112) {
      $126 = ((gb + (10523024) | 0) + ($113<<2)|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)!=(0|0);
      if ($128) {
       $129 = $i;
       $130 = ((gb + (10523024) | 0) + ($129<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ((($131)) + 40|0);
       HEAP32[$132>>2] = 0;
      }
     } else {
      $114 = ((gb + (14718184) | 0) + ($113<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115 & 8384512;
      $117 = (($116>>>0) / 4)&-1;
      $118 = ((gb + (21216) | 0) + ($117<<2)|0);
      $119 = (_adler32(0,($118|0),4096)|0);
      $120 = $i;
      $121 = ((gb + (10523024) | 0) + ($120<<2)|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 40|0);
      HEAP32[$123>>2] = $119;
      $124 = $i;
      $125 = ((gb + (23109846) | 0) + ($124)|0);
      HEAP8[$125>>0] = 1;
     }
     $133 = $i;
     $134 = (($133) + 1)|0;
     $i = $134;
    }
   }
  }
 } while(0);
 $135 = $0;
 $136 = ((gb + (23106792) | 0) + (($135*52)|0)|0);
 _tlb_unmap($136);
 $137 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $138 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $139 = $137 & $138;
 $140 = $139 & 1;
 $141 = $140&255;
 $142 = $0;
 $143 = ((gb + (23106792) | 0) + (($142*52)|0)|0);
 $144 = ((($143)) + 8|0);
 HEAP8[$144>>0] = $141;
 $145 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $146 = $145 & 1073741760;
 $147 = $146 >>> 6;
 $148 = $0;
 $149 = ((gb + (23106792) | 0) + (($148*52)|0)|0);
 $150 = ((($149)) + 12|0);
 HEAP32[$150>>2] = $147;
 $151 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $152 = $151 & 1073741760;
 $153 = $152 >>> 6;
 $154 = $0;
 $155 = ((gb + (23106792) | 0) + (($154*52)|0)|0);
 $156 = ((($155)) + 20|0);
 HEAP32[$156>>2] = $153;
 $157 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $158 = $157 & 56;
 $159 = $158 >>> 3;
 $160 = $159&255;
 $161 = $0;
 $162 = ((gb + (23106792) | 0) + (($161*52)|0)|0);
 $163 = ((($162)) + 16|0);
 HEAP8[$163>>0] = $160;
 $164 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $165 = $164 & 56;
 $166 = $165 >>> 3;
 $167 = $166&255;
 $168 = $0;
 $169 = ((gb + (23106792) | 0) + (($168*52)|0)|0);
 $170 = ((($169)) + 24|0);
 HEAP8[$170>>0] = $167;
 $171 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $172 = $171 & 4;
 $173 = $172 >>> 2;
 $174 = $173&255;
 $175 = $0;
 $176 = ((gb + (23106792) | 0) + (($175*52)|0)|0);
 $177 = ((($176)) + 17|0);
 HEAP8[$177>>0] = $174;
 $178 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $179 = $178 & 4;
 $180 = $179 >>> 2;
 $181 = $180&255;
 $182 = $0;
 $183 = ((gb + (23106792) | 0) + (($182*52)|0)|0);
 $184 = ((($183)) + 25|0);
 HEAP8[$184>>0] = $181;
 $185 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $186 = $185 & 2;
 $187 = $186 >>> 1;
 $188 = $187&255;
 $189 = $0;
 $190 = ((gb + (23106792) | 0) + (($189*52)|0)|0);
 $191 = ((($190)) + 18|0);
 HEAP8[$191>>0] = $188;
 $192 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $193 = $192 & 2;
 $194 = $193 >>> 1;
 $195 = $194&255;
 $196 = $0;
 $197 = ((gb + (23106792) | 0) + (($196*52)|0)|0);
 $198 = ((($197)) + 26|0);
 HEAP8[$198>>0] = $195;
 $199 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
 $200 = $199 & 255;
 $201 = $200&255;
 $202 = $0;
 $203 = ((gb + (23106792) | 0) + (($202*52)|0)|0);
 $204 = ((($203)) + 9|0);
 HEAP8[$204>>0] = $201;
 $205 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
 $206 = $205 & -8192;
 $207 = $206 >>> 13;
 $208 = $0;
 $209 = ((gb + (23106792) | 0) + (($208*52)|0)|0);
 $210 = ((($209)) + 4|0);
 HEAP32[$210>>2] = $207;
 $211 = HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2]|0;
 $212 = $211 & 33546240;
 $213 = $212 >>> 13;
 $214 = $213&65535;
 $215 = $0;
 $216 = ((gb + (23106792) | 0) + (($215*52)|0)|0);
 HEAP16[$216>>1] = $214;
 $217 = $0;
 $218 = ((gb + (23106792) | 0) + (($217*52)|0)|0);
 $219 = ((($218)) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = $220 << 13;
 $222 = $0;
 $223 = ((gb + (23106792) | 0) + (($222*52)|0)|0);
 $224 = ((($223)) + 28|0);
 HEAP32[$224>>2] = $221;
 $225 = $0;
 $226 = ((gb + (23106792) | 0) + (($225*52)|0)|0);
 $227 = ((($226)) + 28|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = $0;
 $230 = ((gb + (23106792) | 0) + (($229*52)|0)|0);
 $231 = HEAP16[$230>>1]|0;
 $232 = $231 << 16 >> 16;
 $233 = $232 << 12;
 $234 = (($228) + ($233))|0;
 $235 = (($234) + 4095)|0;
 $236 = $0;
 $237 = ((gb + (23106792) | 0) + (($236*52)|0)|0);
 $238 = ((($237)) + 32|0);
 HEAP32[$238>>2] = $235;
 $239 = $0;
 $240 = ((gb + (23106792) | 0) + (($239*52)|0)|0);
 $241 = ((($240)) + 12|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = $242 << 12;
 $244 = $0;
 $245 = ((gb + (23106792) | 0) + (($244*52)|0)|0);
 $246 = ((($245)) + 36|0);
 HEAP32[$246>>2] = $243;
 $247 = $0;
 $248 = ((gb + (23106792) | 0) + (($247*52)|0)|0);
 $249 = ((($248)) + 32|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($250) + 1)|0;
 $252 = $0;
 $253 = ((gb + (23106792) | 0) + (($252*52)|0)|0);
 $254 = ((($253)) + 40|0);
 HEAP32[$254>>2] = $251;
 $255 = $0;
 $256 = ((gb + (23106792) | 0) + (($255*52)|0)|0);
 $257 = ((($256)) + 40|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = $0;
 $260 = ((gb + (23106792) | 0) + (($259*52)|0)|0);
 $261 = HEAP16[$260>>1]|0;
 $262 = $261 << 16 >> 16;
 $263 = $262 << 12;
 $264 = (($258) + ($263))|0;
 $265 = (($264) + 4095)|0;
 $266 = $0;
 $267 = ((gb + (23106792) | 0) + (($266*52)|0)|0);
 $268 = ((($267)) + 44|0);
 HEAP32[$268>>2] = $265;
 $269 = $0;
 $270 = ((gb + (23106792) | 0) + (($269*52)|0)|0);
 $271 = ((($270)) + 20|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272 << 12;
 $274 = $0;
 $275 = ((gb + (23106792) | 0) + (($274*52)|0)|0);
 $276 = ((($275)) + 48|0);
 HEAP32[$276>>2] = $273;
 $277 = $0;
 $278 = ((gb + (23106792) | 0) + (($277*52)|0)|0);
 _tlb_map($278);
 $279 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $280 = ($279|0)!=(0);
 if (!($280)) {
  STACKTOP = sp;return;
 }
 $281 = $0;
 $282 = ((gb + (23106792) | 0) + (($281*52)|0)|0);
 $283 = ((($282)) + 18|0);
 $284 = HEAP8[$283>>0]|0;
 $285 = ($284<<24>>24)!=(0);
 L39: do {
  if ($285) {
   $286 = $0;
   $287 = ((gb + (23106792) | 0) + (($286*52)|0)|0);
   $288 = ((($287)) + 28|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 >>> 12;
   $i1 = $290;
   while(1) {
    $291 = $i1;
    $292 = $0;
    $293 = ((gb + (23106792) | 0) + (($292*52)|0)|0);
    $294 = ((($293)) + 32|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = $295 >>> 12;
    $297 = ($291>>>0)<=($296>>>0);
    if (!($297)) {
     break L39;
    }
    $298 = $i1;
    $299 = ((gb + (10523024) | 0) + ($298<<2)|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)!=(0|0);
    if ($301) {
     $302 = $i1;
     $303 = ((gb + (10523024) | 0) + ($302<<2)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($304)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($306|0)!=(0);
     if ($307) {
      $308 = $i1;
      $309 = ((gb + (10523024) | 0) + ($308<<2)|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = ((($310)) + 40|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = $i1;
      $314 = ((gb + (14718184) | 0) + ($313<<2)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $315 & 8384512;
      $317 = (($316>>>0) / 4)&-1;
      $318 = ((gb + (21216) | 0) + ($317<<2)|0);
      $319 = (_adler32(0,($318|0),4096)|0);
      $320 = ($312|0)==($319|0);
      if ($320) {
       $321 = $i1;
       $322 = ((gb + (23109846) | 0) + ($321)|0);
       HEAP8[$322>>0] = 0;
      }
     }
    }
    $323 = $i1;
    $324 = (($323) + 1)|0;
    $i1 = $324;
   }
  }
 } while(0);
 $325 = $0;
 $326 = ((gb + (23106792) | 0) + (($325*52)|0)|0);
 $327 = ((($326)) + 26|0);
 $328 = HEAP8[$327>>0]|0;
 $329 = ($328<<24>>24)!=(0);
 if (!($329)) {
  STACKTOP = sp;return;
 }
 $330 = $0;
 $331 = ((gb + (23106792) | 0) + (($330*52)|0)|0);
 $332 = ((($331)) + 40|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = $333 >>> 12;
 $i1 = $334;
 while(1) {
  $335 = $i1;
  $336 = $0;
  $337 = ((gb + (23106792) | 0) + (($336*52)|0)|0);
  $338 = ((($337)) + 44|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $339 >>> 12;
  $341 = ($335>>>0)<=($340>>>0);
  if (!($341)) {
   break;
  }
  $342 = $i1;
  $343 = ((gb + (10523024) | 0) + ($342<<2)|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344|0)!=(0|0);
  if ($345) {
   $346 = $i1;
   $347 = ((gb + (10523024) | 0) + ($346<<2)|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ((($348)) + 40|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)!=(0);
   if ($351) {
    $352 = $i1;
    $353 = ((gb + (10523024) | 0) + ($352<<2)|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ((($354)) + 40|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = $i1;
    $358 = ((gb + (14718184) | 0) + ($357<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $359 & 8384512;
    $361 = (($360>>>0) / 4)&-1;
    $362 = ((gb + (21216) | 0) + ($361<<2)|0);
    $363 = (_adler32(0,($362|0),4096)|0);
    $364 = ($356|0)==($363|0);
    if ($364) {
     $365 = $i1;
     $366 = ((gb + (23109846) | 0) + ($365)|0);
     HEAP8[$366>>0] = 0;
    }
   }
  }
  $367 = $i1;
  $368 = (($367) + 1)|0;
  $i1 = $368;
 }
 STACKTOP = sp;return;
}
function _r4300_cp0_regs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (14717332) | 0)|0);
}
function _check_cop1_unusable() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $2 = $1 & 536870912;
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 } else {
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 268435500;
  _exception_general();
  $0 = 1;
  $4 = $0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _cp0_update_count() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[(gb + (10523012) | 0)>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >>> 2;
 $6 = HEAP32[(gb + (488) | 0)>>2]|0;
 $7 = Math_imul($5, $6)|0;
 $8 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $9 = (($8) + ($7))|0;
 HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $9;
 $10 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $12;
 return;
}
function _r4300_cp1_regs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (8410232) | 0)|0);
}
function _r4300_cp1_regs_simple() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (14717460) | 0)|0);
}
function _r4300_cp1_regs_double() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (14717588) | 0)|0);
}
function _r4300_cp1_fcr0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (14717716) | 0)|0);
}
function _r4300_cp1_fcr31() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (14717720) | 0)|0);
}
function _shuffle_fpr_data($oldStatus,$newStatus) {
 $oldStatus = $oldStatus|0;
 $newStatus = $newStatus|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $high32 = 0, $i = 0, $isBigEndian = 0, $least32 = 0, $most32 = 0, $temp_fgr_32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp_fgr_32 = sp + 16|0;
 $0 = $oldStatus;
 $1 = $newStatus;
 $isBigEndian = 0;
 $2 = $1;
 $3 = $2 & 67108864;
 $4 = $0;
 $5 = $4 & 67108864;
 $6 = ($3|0)!=($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7 & 67108864;
 $9 = ($8|0)!=(0);
 $i = 0;
 if ($9) {
  while(1) {
   $10 = $i;
   $11 = ($10|0)<(32);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $13 = $12 >> 1;
   $14 = ((gb + (8410232) | 0) + ($13<<3)|0);
   $15 = $i;
   $16 = $15 & 1;
   $17 = $16 ^ 0;
   $18 = (($14) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $i;
   $21 = (($temp_fgr_32) + ($20<<2)|0);
   HEAP32[$21>>2] = $19;
   $22 = $i;
   $23 = (($22) + 1)|0;
   $i = $23;
  }
  $i = 0;
  while(1) {
   $24 = $i;
   $25 = ($24|0)<(32);
   if (!($25)) {
    break;
   }
   $26 = $i;
   $27 = $26 >> 1;
   $28 = (($27) + 16)|0;
   $29 = ((gb + (8410232) | 0) + ($28<<3)|0);
   $30 = $i;
   $31 = $30 & 1;
   $32 = (($29) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $high32 = $33;
   $34 = $i;
   $35 = (($temp_fgr_32) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $i;
   $38 = ((gb + (8410232) | 0) + ($37<<3)|0);
   HEAP32[$38>>2] = $36;
   $39 = $high32;
   $40 = $i;
   $41 = ((gb + (8410232) | 0) + ($40<<3)|0);
   $42 = ((($41)) + 4|0);
   HEAP32[$42>>2] = $39;
   $43 = $i;
   $44 = (($43) + 1)|0;
   $i = $44;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $45 = $i;
  $46 = ($45|0)<(32);
  if (!($46)) {
   break;
  }
  $47 = $i;
  $48 = ((gb + (8410232) | 0) + ($47<<3)|0);
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $i;
  $52 = (($temp_fgr_32) + ($51<<2)|0);
  HEAP32[$52>>2] = $50;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = ($55|0)<(16);
  if (!($56)) {
   break;
  }
  $57 = $i;
  $58 = $57<<1;
  $59 = ((gb + (8410232) | 0) + ($58<<3)|0);
  $60 = HEAP32[$59>>2]|0;
  $least32 = $60;
  $61 = $i;
  $62 = $61<<1;
  $63 = (($62) + 1)|0;
  $64 = ((gb + (8410232) | 0) + ($63<<3)|0);
  $65 = HEAP32[$64>>2]|0;
  $most32 = $65;
  $66 = $most32;
  $67 = $least32;
  $68 = $i;
  $69 = ((gb + (8410232) | 0) + ($68<<3)|0);
  $70 = $69;
  $71 = $70;
  HEAP32[$71>>2] = $67;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = $66;
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(32);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = (($temp_fgr_32) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $i;
  $82 = $81 >> 1;
  $83 = (($82) + 16)|0;
  $84 = ((gb + (8410232) | 0) + ($83<<3)|0);
  $85 = $i;
  $86 = $85 & 1;
  $87 = (($84) + ($86<<2)|0);
  HEAP32[$87>>2] = $80;
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 STACKTOP = sp;return;
}
function _set_fpr_pointers($newStatus) {
 $newStatus = $newStatus|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $isBigEndian = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $newStatus;
 $isBigEndian = 0;
 $1 = $0;
 $2 = $1 & 67108864;
 $3 = ($2|0)!=(0);
 $i = 0;
 if ($3) {
  while(1) {
   $4 = $i;
   $5 = ($4|0)<(32);
   if (!($5)) {
    break;
   }
   $6 = $i;
   $7 = ((gb + (8410232) | 0) + ($6<<3)|0);
   $8 = $i;
   $9 = ((gb + (14717588) | 0) + ($8<<2)|0);
   HEAP32[$9>>2] = $7;
   $10 = $i;
   $11 = ((gb + (8410232) | 0) + ($10<<3)|0);
   $12 = $i;
   $13 = ((gb + (14717460) | 0) + ($12<<2)|0);
   HEAP32[$13>>2] = $11;
   $14 = $i;
   $15 = (($14) + 1)|0;
   $i = $15;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $16 = $i;
   $17 = ($16|0)<(32);
   if (!($17)) {
    break;
   }
   $18 = $i;
   $19 = $18 >> 1;
   $20 = ((gb + (8410232) | 0) + ($19<<3)|0);
   $21 = $i;
   $22 = ((gb + (14717588) | 0) + ($21<<2)|0);
   HEAP32[$22>>2] = $20;
   $23 = $i;
   $24 = $23 >> 1;
   $25 = ((gb + (8410232) | 0) + ($24<<3)|0);
   $26 = $i;
   $27 = $26 & 1;
   $28 = $27 ^ 0;
   $29 = (($25) + ($28<<2)|0);
   $30 = $i;
   $31 = ((gb + (14717460) | 0) + ($30<<2)|0);
   HEAP32[$31>>2] = $29;
   $32 = $i;
   $33 = (($32) + 1)|0;
   $i = $33;
  }
  STACKTOP = sp;return;
 }
}
function _update_x86_rounding_mode($FCR31) {
 $FCR31 = $FCR31|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $FCR31;
 $1 = $0;
 $2 = $1 & 3;
 switch ($2|0) {
 case 0:  {
  HEAP32[(gb + (1456) | 0)>>2] = 831;
  break;
 }
 case 1:  {
  HEAP32[(gb + (1456) | 0)>>2] = 3903;
  break;
 }
 case 2:  {
  HEAP32[(gb + (1456) | 0)>>2] = 2879;
  break;
 }
 case 3:  {
  HEAP32[(gb + (1456) | 0)>>2] = 1855;
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _TLB_refill_exception($address,$w) {
 $address = $address|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $usual_handler = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $w;
 $usual_handler = 0;
 $2 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $3 = ($2|0)!=(2);
 $4 = $1;
 $5 = ($4|0)!=(2);
 $or$cond = $3 & $5;
 if ($or$cond) {
  _cp0_update_count();
 }
 $6 = $1;
 $7 = ($6|0)==(1);
 if ($7) {
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 12;
 } else {
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 8;
 }
 $8 = $0;
 HEAP32[((((gb + (14717332) | 0)) + 32|0))>>2] = $8;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2]|0;
 $10 = $9 & -8388593;
 $11 = $0;
 $12 = $11 >>> 9;
 $13 = $12 & 8388592;
 $14 = $10 | $13;
 HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2] = $14;
 $15 = $0;
 $16 = $15 & -8192;
 HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2] = $16;
 $17 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $18 = $17 & 2;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   _generic_jump_to(-2147483264);
   $20 = HEAP32[(gb + (10523000) | 0)>>2]|0;
   $21 = ($20|0)==(1);
   $22 = HEAP32[(gb + (10523000) | 0)>>2]|0;
   $23 = ($22|0)==(3);
   $or$cond3 = $21 | $23;
   $24 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
   if ($or$cond3) {
    $25 = $24 | -2147483648;
    HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $25;
    break;
   } else {
    $26 = $24 & 2147483647;
    HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $26;
    break;
   }
  } else {
   $27 = HEAP32[(gb + (10522016) | 0)>>2]|0;
   $28 = ($27|0)!=(0);
   do {
    if ($28) {
     $29 = $1;
     $30 = ($29|0)!=(2);
     if ($30) {
      $31 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $32 = ((($31)) + 20|0);
      $33 = HEAP32[$32>>2]|0;
      HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $33;
      break;
     } else {
      $34 = $0;
      HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $34;
      break;
     }
    } else {
     $35 = HEAP32[(gb + (10522028) | 0)>>2]|0;
     $36 = ((($35)) + 20|0);
     $37 = HEAP32[$36>>2]|0;
     HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $37;
    }
   } while(0);
   $38 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
   $39 = $38 & 2147483647;
   HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $39;
   $40 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
   $41 = $40 | 2;
   HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $41;
   $42 = $0;
   $43 = ($42>>>0)>=(2147483648);
   $44 = $0;
   $45 = ($44>>>0)<(3221225472);
   $or$cond5 = $43 & $45;
   if ($or$cond5) {
    $usual_handler = 1;
   }
   $i = 0;
   while(1) {
    $46 = $i;
    $47 = ($46|0)<(32);
    if (!($47)) {
     break;
    }
    $48 = $0;
    $49 = $i;
    $50 = ((gb + (23106792) | 0) + (($49*52)|0)|0);
    $51 = ((($50)) + 28|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($48>>>0)>=($52>>>0);
    if ($53) {
     $54 = $0;
     $55 = $i;
     $56 = ((gb + (23106792) | 0) + (($55*52)|0)|0);
     $57 = ((($56)) + 32|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($54>>>0)<=($58>>>0);
     if ($59) {
      $usual_handler = 1;
     }
    }
    $60 = $0;
    $61 = $i;
    $62 = ((gb + (23106792) | 0) + (($61*52)|0)|0);
    $63 = ((($62)) + 40|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($60>>>0)>=($64>>>0);
    if ($65) {
     $66 = $0;
     $67 = $i;
     $68 = ((gb + (23106792) | 0) + (($67*52)|0)|0);
     $69 = ((($68)) + 44|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66>>>0)<=($70>>>0);
     if ($71) {
      $usual_handler = 1;
     }
    }
    $72 = $i;
    $73 = (($72) + 1)|0;
    $i = $73;
   }
   $74 = $usual_handler;
   $75 = ($74|0)!=(0);
   if ($75) {
    _generic_jump_to(-2147483264);
    break;
   } else {
    _generic_jump_to(-2147483648);
    break;
   }
  }
 } while(0);
 $76 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $77 = ($76|0)==(1);
 $78 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $79 = ($78|0)==(3);
 $or$cond7 = $77 | $79;
 $80 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 if ($or$cond7) {
  $81 = $80 | -2147483648;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $81;
  $82 = HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2]|0;
  $83 = (($82) - 4)|0;
  HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $83;
 } else {
  $84 = $80 & 2147483647;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $84;
 }
 $85 = $1;
 $86 = ($85|0)!=(2);
 if ($86) {
  $87 = HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2]|0;
  $88 = (($87) - 4)|0;
  HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $88;
 }
 $89 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $90 = ((($89)) + 20|0);
 $91 = HEAP32[$90>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $91;
 $92 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $93 = ($92|0)==(2);
 if ($93) {
  _dyna_jump();
  $94 = HEAP32[(gb + (10522024) | 0)>>2]|0;
  $95 = ($94|0)!=(0);
  if (!($95)) {
   HEAP32[(gb + (10523000) | 0)>>2] = 0;
  }
 }
 $96 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $97 = ($96|0)!=(2);
 $98 = HEAP32[(gb + (10522024) | 0)>>2]|0;
 $99 = ($98|0)!=(0);
 $or$cond9 = $97 | $99;
 if (!($or$cond9)) {
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (10522024) | 0)>>2] = 0;
 $100 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $101 = ($100|0)!=(0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $103 = ((($102)) + 20|0);
 $104 = HEAP32[$103>>2]|0;
 HEAP32[(gb + (10522020) | 0)>>2] = $104;
 HEAP32[(gb + (10523016) | 0)>>2] = 0;
 STACKTOP = sp;return;
}
function _exception_general() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _cp0_update_count();
 $0 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $1 = $0 | 2;
 HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $1;
 $2 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $4;
 $5 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $6 = ($5|0)==(1);
 $7 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $8 = ($7|0)==(3);
 $or$cond = $6 | $8;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 if ($or$cond) {
  $10 = $9 | -2147483648;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $10;
  $11 = HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2]|0;
  $12 = (($11) - 4)|0;
  HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $12;
 } else {
  $13 = $9 & 2147483647;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $13;
 }
 _generic_jump_to(-2147483264);
 $14 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $16;
 $17 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  _dyna_jump();
  $19 = HEAP32[(gb + (10522024) | 0)>>2]|0;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   HEAP32[(gb + (10523000) | 0)>>2] = 0;
  }
 }
 $21 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $22 = ($21|0)!=(2);
 $23 = HEAP32[(gb + (10522024) | 0)>>2]|0;
 $24 = ($23|0)!=(0);
 $or$cond3 = $22 | $24;
 if (!($or$cond3)) {
  return;
 }
 HEAP32[(gb + (10522024) | 0)>>2] = 0;
 $25 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  return;
 }
 $27 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[(gb + (10522020) | 0)>>2] = $29;
 HEAP32[(gb + (10523016) | 0)>>2] = 0;
 return;
}
function _add_interupt_event($type,$delay) {
 $type = $type|0;
 $delay = $delay|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $delay;
 $2 = $0;
 $3 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $4 = $1;
 $5 = (($3) + ($4))|0;
 _add_interupt_event_count($2,$5);
 STACKTOP = sp;return;
}
function _add_interupt_event_count($type,$count) {
 $type = $type|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $e = 0;
 var $event = 0, $or$cond = 0, $special = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $type;
 $1 = $count;
 $2 = $0;
 $3 = ($2|0)==(32);
 $4 = $3&1;
 $special = $4;
 $5 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $6 = ($5>>>0)>(2147483648);
 if ($6) {
  HEAP32[(gb + (14717728) | 0)>>2] = 0;
 }
 $7 = $0;
 $8 = (_get_event($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $0;
  HEAP32[$vararg_buffer>>2] = $10;
  _DebugMessage(2,(gb + (18741) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 $11 = (_alloc_node((gb + (14717732) | 0))|0);
 $event = $11;
 $12 = $event;
 $13 = ($12|0)==(0|0);
 if ($13) {
  _DebugMessage(1,(gb + (18784) | 0),$vararg_buffer3);
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = $event;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = $event;
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $event;
  HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $21;
  $22 = $event;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[(gb + (10523016) | 0)>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_before_event($27,$30,$32)|0);
 $34 = ($33|0)==(0);
 $35 = $special;
 $36 = ($35|0)!=(0);
 $or$cond = $34 | $36;
 $37 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 if (!($or$cond)) {
  $38 = $event;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  $40 = $event;
  HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $40;
  $41 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[(gb + (10523016) | 0)>>2] = $43;
  STACKTOP = sp;return;
 }
 $e = $37;
 while(1) {
  $44 = $e;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if (!($47)) {
   break;
  }
  $48 = $1;
  $49 = $e;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $e;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = (_before_event($48,$53,$57)|0);
  $59 = ($58|0)!=(0);
  $60 = $special;
  $61 = ($60|0)!=(0);
  $62 = $59 ? $61 : 1;
  if (!($62)) {
   break;
  }
  $63 = $e;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $e = $65;
 }
 $66 = $e;
 $67 = ((($66)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  $70 = $event;
  $71 = $e;
  $72 = ((($71)) + 8|0);
  HEAP32[$72>>2] = $70;
  $73 = $event;
  $74 = ((($73)) + 8|0);
  HEAP32[$74>>2] = 0;
  STACKTOP = sp;return;
 }
 $75 = $special;
 $76 = ($75|0)!=(0);
 L29: do {
  if (!($76)) {
   while(1) {
    $77 = $e;
    $78 = ((($77)) + 8|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)!=(0|0);
    if (!($80)) {
     break L29;
    }
    $81 = $e;
    $82 = ((($81)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $1;
    $87 = ($85|0)==($86|0);
    if (!($87)) {
     break L29;
    }
    $88 = $e;
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $e = $90;
   }
  }
 } while(0);
 $91 = $e;
 $92 = ((($91)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $event;
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = $93;
 $96 = $event;
 $97 = $e;
 $98 = ((($97)) + 8|0);
 HEAP32[$98>>2] = $96;
 STACKTOP = sp;return;
}
function _get_event($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $e = $2;
 $3 = $e;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $5 = $e;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = $e;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 while(1) {
  $12 = $e;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $e;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ($19|0)!=($20|0);
  if (!($21)) {
   break;
  }
  $22 = $e;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $e = $24;
 }
 $25 = $e;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $e;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33;
 } else {
  $34 = 0;
 }
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _get_next_event_type() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
  return ($4|0);
 }
 $2 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 return ($4|0);
}
function _remove_event($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $to_del = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $e = $1;
 $2 = $e;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $e;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ($5|0)==($6|0);
 if ($7) {
  $8 = $e;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $10;
  $11 = $e;
  _free_node((gb + (14717732) | 0),$11);
  STACKTOP = sp;return;
 }
 while(1) {
  $12 = $e;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $e;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = ($19|0)!=($20|0);
  if (!($21)) {
   break;
  }
  $22 = $e;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $e = $24;
 }
 $25 = $e;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $e;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $to_del = $31;
 $32 = $to_del;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $e;
 $36 = ((($35)) + 8|0);
 HEAP32[$36>>2] = $34;
 $37 = $to_del;
 _free_node((gb + (14717732) | 0),$37);
 STACKTOP = sp;return;
}
function _translate_event_queue($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $base;
 _remove_event(2);
 _remove_event(32);
 $1 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $e = $1;
 while(1) {
  $2 = $e;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $e;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $8 = (($6) - ($7))|0;
  $9 = $0;
  $10 = (($8) + ($9))|0;
  $11 = $e;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $e;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $e = $15;
 }
 $16 = HEAP32[((((gb + (14717332) | 0)) + 44|0))>>2]|0;
 _add_interupt_event_count(2,$16);
 _add_interupt_event_count(32,0);
 STACKTOP = sp;return;
}
function _save_eventqueue_infos($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $len = 0;
 $1 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $e = $1;
 while(1) {
  $2 = $e;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $len;
  $6 = (($4) + ($5)|0);
  $7 = $e;
  ;HEAP8[$6>>0]=HEAP8[$7>>0]|0;HEAP8[$6+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$7+3>>0]|0;
  $8 = $0;
  $9 = $len;
  $10 = (($8) + ($9)|0);
  $11 = ((($10)) + 4|0);
  $12 = $e;
  $13 = ((($12)) + 4|0);
  ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;HEAP8[$11+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$13+3>>0]|0;
  $14 = $len;
  $15 = (($14) + 8)|0;
  $len = $15;
  $16 = $e;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $e = $18;
 }
 $19 = $len;
 $20 = $0;
 $21 = (($20) + ($19)|0);
 HEAP32[$21>>2] = -1;
 $22 = $len;
 $23 = (($22) + 4)|0;
 STACKTOP = sp;return ($23|0);
}
function _load_eventqueue_infos($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0;
 var $len = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $len = 0;
 _clear_queue();
 while(1) {
  $1 = $len;
  $2 = $0;
  $3 = (($2) + ($1)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(-1);
  if (!($5)) {
   break;
  }
  $6 = $len;
  $7 = $0;
  $8 = (($7) + ($6)|0);
  $9 = HEAP32[$8>>2]|0;
  $type = $9;
  $10 = $len;
  $11 = (($10) + 4)|0;
  $12 = $0;
  $13 = (($12) + ($11)|0);
  $14 = HEAP32[$13>>2]|0;
  $count = $14;
  $15 = $type;
  $16 = $count;
  _add_interupt_event_count($15,$16);
  $17 = $len;
  $18 = (($17) + 8)|0;
  $len = $18;
 }
 STACKTOP = sp;return;
}
function _init_interupt() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (14717728) | 0)>>2] = 1;
 HEAP32[((((gb + (8421560) | 0)) + 64|0))>>2] = 5000;
 HEAP32[((((gb + (8421560) | 0)) + 60|0))>>2] = 5000;
 _clear_queue();
 $0 = HEAP32[((((gb + (8421560) | 0)) + 64|0))>>2]|0;
 _add_interupt_event_count(1,$0);
 _add_interupt_event_count(32,0);
 return;
}
function _check_interupt() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $event = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[((((gb + (8410936) | 0)) + 8|0))>>2]|0;
 $1 = HEAP32[((((gb + (8410936) | 0)) + 12|0))>>2]|0;
 $2 = $0 & $1;
 $3 = ($2|0)!=(0);
 $4 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 if ($3) {
  $5 = $4 | 1024;
  $6 = $5 & -125;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $6;
 } else {
  $7 = $4 & -1025;
  HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $7;
 }
 $8 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $9 = $8 & 7;
 $10 = ($9|0)!=(1);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $12 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 $13 = $11 & $12;
 $14 = $13 & 65280;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = (_alloc_node((gb + (14717732) | 0))|0);
 $event = $16;
 $17 = $event;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _DebugMessage(1,(gb + (18784) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 $19 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 HEAP32[(gb + (10523016) | 0)>>2] = $19;
 $20 = $event;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $event;
 HEAP32[$22>>2] = 4;
 $23 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = $event;
  HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $25;
  $26 = $event;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $28 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
  $29 = $event;
  $30 = ((($29)) + 8|0);
  HEAP32[$30>>2] = $28;
  $31 = $event;
  HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $31;
  STACKTOP = sp;return;
 }
}
function _raise_maskable_interrupt($cause) {
 $cause = $cause|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cause;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 $2 = $0;
 $3 = $1 | $2;
 $4 = $3 & -125;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $4;
 $5 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $6 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 $7 = $5 & $6;
 $8 = $7 & 65280;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $11 = $10 & 7;
 $12 = ($11|0)!=(1);
 if ($12) {
  STACKTOP = sp;return;
 }
 _wrapped_exception_general();
 STACKTOP = sp;return;
}
function _gen_interupt() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10523004) | 0)>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  HEAP32[(gb + (8410668) | 0)>>2] = 0;
  _dyna_stop();
 }
 $2 = HEAP32[(gb + (14717724) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $4 = (_savestates_get_job()|0);
  $5 = ($4|0)==(1);
  if ($5) {
   (_savestates_load()|0);
   STACKTOP = sp;return;
  }
  $6 = HEAP32[(gb + (14718180) | 0)>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   _reset_hard();
   HEAP32[(gb + (14718180) | 0)>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $dest = $10;
  HEAP32[(gb + (10522020) | 0)>>2] = 0;
  $11 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $15 = ($13>>>0)>($14>>>0);
  if ($15) {
   label = 11;
  } else {
   $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $17 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($16) - ($19))|0;
   $21 = ($20>>>0)<(2147483648);
   if ($21) {
    label = 11;
   } else {
    $25 = 0;
   }
  }
  if ((label|0) == 11) {
   $22 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24;
  }
  HEAP32[(gb + (10523016) | 0)>>2] = $25;
  $26 = $dest;
  HEAP32[(gb + (10523012) | 0)>>2] = $26;
  $27 = $dest;
  _generic_jump_to($27);
  STACKTOP = sp;return;
 }
 $28 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 do {
  switch ($29|0) {
  case 32:  {
   _special_int_handler();
   break;
  }
  case 1:  {
   _remove_interupt_event();
   _vi_vertical_interrupt_event((gb + (8421560) | 0));
   break;
  }
  case 2:  {
   _compare_int_handler();
   break;
  }
  case 4:  {
   _remove_interupt_event();
   _wrapped_exception_general();
   break;
  }
  case 8:  {
   _remove_interupt_event();
   _si_end_of_dma_event((gb + (8410672) | 0));
   break;
  }
  case 16:  {
   _remove_interupt_event();
   _pi_end_of_dma_event((gb + (8409824) | 0));
   break;
  }
  case 64:  {
   _remove_interupt_event();
   _ai_end_of_dma_event((gb + (8421404) | 0));
   break;
  }
  case 128:  {
   _remove_interupt_event();
   _rsp_interrupt_event((gb + (8413160) | 0));
   break;
  }
  case 256:  {
   _remove_interupt_event();
   _rdp_interrupt_event((gb + (8410952) | 0));
   break;
  }
  case 512:  {
   _hw2_int_handler();
   break;
  }
  case 1024:  {
   _nmi_int_handler();
   break;
  }
  default: {
   $30 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer>>2] = $31;
   _DebugMessage(1,(gb + (18832) | 0),$vararg_buffer);
   _remove_interupt_event();
   _wrapped_exception_general();
  }
  }
 } while(0);
 $32 = HEAP32[(gb + (14717724) | 0)>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = (_savestates_get_job()|0);
 $35 = ($34|0)==(2);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 (_savestates_save()|0);
 STACKTOP = sp;return;
}
function _alloc_node($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 256|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>=(16);
 if ($5) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $6 = $1;
  $7 = ((($6)) + 256|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $1;
  $11 = ((($10)) + 192|0);
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _before_event($evt1,$evt2,$type2) {
 $evt1 = $evt1|0;
 $evt2 = $evt2|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $evt1;
 $2 = $evt2;
 $3 = $type2;
 $4 = $1;
 $5 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<(2147483648);
 do {
  if ($7) {
   $8 = $2;
   $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<(2147483648);
   if ($11) {
    $12 = $1;
    $13 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
    $14 = (($12) - ($13))|0;
    $15 = $2;
    $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
    $17 = (($15) - ($16))|0;
    $18 = ($14>>>0)<($17>>>0);
    if ($18) {
     $0 = 1;
     break;
    } else {
     $0 = 0;
     break;
    }
   }
   $19 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $20 = $2;
   $21 = (($19) - ($20))|0;
   $22 = ($21>>>0)<(268435456);
   if (!($22)) {
    $0 = 1;
    break;
   }
   $23 = $3;
   $cond = ($23|0)==(32);
   if (!($cond)) {
    $0 = 0;
    break;
   }
   $24 = HEAP32[(gb + (14717728) | 0)>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _free_node($p,$node) {
 $p = $p|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $node;
 $2 = $0;
 $3 = ((($2)) + 256|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 256|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = ((($13)) + 192|0);
 $15 = (($14) + ($12<<2)|0);
 HEAP32[$15>>2] = $8;
 STACKTOP = sp;return;
}
function _clear_queue() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = 0;
 _clear_pool((gb + (14717732) | 0));
 return;
}
function _wrapped_exception_general() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exception_general();
 return;
}
function _special_int_handler() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $1 = ($0>>>0)>(268435456);
 if ($1) {
  return;
 }
 HEAP32[(gb + (14717728) | 0)>>2] = 1;
 _remove_interupt_event();
 _add_interupt_event_count(32,0);
 return;
}
function _remove_interupt_event() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $e = $0;
 $1 = $e;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2] = $3;
 $4 = $e;
 _free_node((gb + (14717732) | 0),$4);
 $5 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $21 = 0;
  HEAP32[(gb + (10523016) | 0)>>2] = $21;
  STACKTOP = sp;return;
 }
 $7 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = ($9>>>0)>($10>>>0);
 if (!($11)) {
  $12 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $13 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) - ($15))|0;
  $17 = ($16>>>0)<(2147483648);
  if (!($17)) {
   $21 = 0;
   HEAP32[(gb + (10523016) | 0)>>2] = $21;
   STACKTOP = sp;return;
  }
 }
 $18 = HEAP32[((((gb + (14717732) | 0)) + 260|0))>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 HEAP32[(gb + (10523016) | 0)>>2] = $21;
 STACKTOP = sp;return;
}
function _compare_int_handler() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _remove_interupt_event();
 $0 = HEAP32[(gb + (488) | 0)>>2]|0;
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($1) + ($0))|0;
 HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $2;
 $3 = HEAP32[((((gb + (14717332) | 0)) + 44|0))>>2]|0;
 _add_interupt_event_count(2,$3);
 $4 = HEAP32[(gb + (488) | 0)>>2]|0;
 $5 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $6 = (($5) - ($4))|0;
 HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $6;
 _raise_maskable_interrupt(32768);
 return;
}
function _hw2_int_handler() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _remove_interupt_event();
 $0 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $1 = $0 & -3670017;
 $2 = $1 | 4096;
 HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $2;
 $3 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
 $4 = $3 | 4096;
 $5 = $4 & -125;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $5;
 _wrapped_exception_general();
 return;
}
function _nmi_int_handler() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _remove_interupt_event();
 $0 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $1 = $0 & -3670017;
 $2 = $1 | 5242884;
 HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $2;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 0;
 _r4300_reset_soft();
 HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = 0;
 HEAP32[(gb + (8410668) | 0)>>2] = 0;
 _init_interupt();
 HEAP32[((((gb + (8421404) | 0)) + 12|0))>>2] = 0;
 $3 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[((((gb + (14717332) | 0)) + 120|0))>>2] = $5;
 $6 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  _free_blocks();
  _init_blocks();
 }
 $8 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $9 = ($8|0)==(1);
 $10 = HEAP32[(gb + (10523000) | 0)>>2]|0;
 $11 = ($10|0)==(3);
 $or$cond = $9 | $11;
 if (!($or$cond)) {
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  HEAP32[(gb + (10522024) | 0)>>2] = 0;
  HEAP32[(gb + (10523012) | 0)>>2] = -1543503808;
  _generic_jump_to(-1543503808);
  return;
 }
 $12 = HEAP32[((((gb + (14717332) | 0)) + 120|0))>>2]|0;
 $13 = (($12) - 4)|0;
 HEAP32[((((gb + (14717332) | 0)) + 120|0))>>2] = $13;
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 HEAP32[(gb + (10522024) | 0)>>2] = 0;
 HEAP32[(gb + (10523012) | 0)>>2] = -1543503808;
 _generic_jump_to(-1543503808);
 return;
}
function _clear_pool($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = (($4) + (($3*12)|0)|0);
  $6 = $i;
  $7 = $0;
  $8 = ((($7)) + 192|0);
  $9 = (($8) + ($6<<2)|0);
  HEAP32[$9>>2] = $5;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $0;
 $13 = ((($12)) + 256|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _init_mi($mi) {
 $mi = $mi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 33685762;
 STACKTOP = sp;return;
}
function _read_mi_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r4300 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $r4300 = $3;
 $4 = $1;
 $5 = (_mi_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $r4300;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_mi_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp0_regs = 0, $r4300 = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $r4300 = $4;
 $5 = $1;
 $6 = (_mi_reg($5)|0);
 $reg = $6;
 $7 = (_r4300_cp0_regs()|0);
 $cp0_regs = $7;
 $8 = $reg;
 switch ($8|0) {
 case 0:  {
  $9 = $r4300;
  $10 = $2;
  $11 = $3;
  $12 = $10 & $11;
  $13 = (_update_mi_init_mode($9,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   STACKTOP = sp;return 0;
  }
  $15 = $r4300;
  _clear_rcp_interrupt($15,32);
  STACKTOP = sp;return 0;
  break;
 }
 case 3:  {
  $16 = $r4300;
  $17 = ((($16)) + 12|0);
  $18 = $2;
  $19 = $3;
  $20 = $18 & $19;
  _update_mi_intr_mask($17,$20);
  _check_interupt();
  _cp0_update_count();
  $21 = HEAP32[(gb + (10523016) | 0)>>2]|0;
  $22 = $cp0_regs;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21>>>0)<=($24>>>0);
  if (!($25)) {
   STACKTOP = sp;return 0;
  }
  _gen_interupt();
  STACKTOP = sp;return 0;
  break;
 }
 default: {
  STACKTOP = sp;return 0;
 }
 }
 return (0)|0;
}
function _clear_rcp_interrupt($r4300,$mi_intr) {
 $r4300 = $r4300|0;
 $mi_intr = $mi_intr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r4300;
 $1 = $mi_intr;
 $2 = $1;
 $3 = $2 ^ -1;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & $3;
 HEAP32[$5>>2] = $7;
 _check_interupt();
 STACKTOP = sp;return;
}
function _raise_rcp_interrupt($r4300,$mi_intr) {
 $r4300 = $r4300|0;
 $mi_intr = $mi_intr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r4300;
 $1 = $mi_intr;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | $2;
 HEAP32[$4>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9 & $12;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 _raise_maskable_interrupt(1024);
 STACKTOP = sp;return;
}
function _signal_rcp_interrupt($r4300,$mi_intr) {
 $r4300 = $r4300|0;
 $mi_intr = $mi_intr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r4300;
 $1 = $mi_intr;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | $2;
 HEAP32[$4>>2] = $6;
 _check_interupt();
 STACKTOP = sp;return;
}
function _mi_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _update_mi_init_mode($mi_init_mode,$w) {
 $mi_init_mode = $mi_init_mode|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clear_dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi_init_mode;
 $1 = $w;
 $clear_dp = 0;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -128;
 HEAP32[$2>>2] = $4;
 $5 = $1;
 $6 = $5 & 127;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 HEAP32[$7>>2] = $9;
 $10 = $1;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & -129;
  HEAP32[$13>>2] = $15;
 }
 $16 = $1;
 $17 = $16 & 256;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 | 128;
  HEAP32[$19>>2] = $21;
 }
 $22 = $1;
 $23 = $22 & 512;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & -257;
  HEAP32[$25>>2] = $27;
 }
 $28 = $1;
 $29 = $28 & 1024;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 256;
  HEAP32[$31>>2] = $33;
 }
 $34 = $1;
 $35 = $34 & 2048;
 $36 = ($35|0)!=(0);
 if ($36) {
  $clear_dp = 1;
 }
 $37 = $1;
 $38 = $37 & 4096;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & -513;
  HEAP32[$40>>2] = $42;
 }
 $43 = $1;
 $44 = $43 & 8192;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  $49 = $clear_dp;
  STACKTOP = sp;return ($49|0);
 }
 $46 = $0;
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 | 512;
 HEAP32[$46>>2] = $48;
 $49 = $clear_dp;
 STACKTOP = sp;return ($49|0);
}
function _update_mi_intr_mask($mi_intr_mask,$w) {
 $mi_intr_mask = $mi_intr_mask|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi_intr_mask;
 $1 = $w;
 $2 = $1;
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -2;
  HEAP32[$5>>2] = $7;
 }
 $8 = $1;
 $9 = $8 & 2;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 | 1;
  HEAP32[$11>>2] = $13;
 }
 $14 = $1;
 $15 = $14 & 4;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & -3;
  HEAP32[$17>>2] = $19;
 }
 $20 = $1;
 $21 = $20 & 8;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 | 2;
  HEAP32[$23>>2] = $25;
 }
 $26 = $1;
 $27 = $26 & 16;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & -5;
  HEAP32[$29>>2] = $31;
 }
 $32 = $1;
 $33 = $32 & 32;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $0;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 | 4;
  HEAP32[$35>>2] = $37;
 }
 $38 = $1;
 $39 = $38 & 64;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $0;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & -9;
  HEAP32[$41>>2] = $43;
 }
 $44 = $1;
 $45 = $44 & 128;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 | 8;
  HEAP32[$47>>2] = $49;
 }
 $50 = $1;
 $51 = $50 & 256;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & -17;
  HEAP32[$53>>2] = $55;
 }
 $56 = $1;
 $57 = $56 & 512;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $0;
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 | 16;
  HEAP32[$59>>2] = $61;
 }
 $62 = $1;
 $63 = $62 & 1024;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $0;
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & -33;
  HEAP32[$65>>2] = $67;
 }
 $68 = $1;
 $69 = $68 & 2048;
 $70 = ($69|0)!=(0);
 if (!($70)) {
  STACKTOP = sp;return;
 }
 $71 = $0;
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 | 32;
 HEAP32[$71>>2] = $73;
 STACKTOP = sp;return;
}
function _pure_interpreter() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_printf(((gb + (18873) | 0)|0),($vararg_buffer|0))|0);
 HEAP32[(gb + (10523004) | 0)>>2] = 0;
 HEAP32[(gb + (10522028) | 0)>>2] = (gb + (14717996) | 0);
 HEAP32[(gb + (10523012) | 0)>>2] = -1543503808;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 HEAP32[$1>>2] = -1543503808;
 _emscripten_set_main_loop(((fb + (711) | 0)|0),0,1);
 STACKTOP = sp;return;
}
function _JR_IDLE_819($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 _cp0_update_count();
 $1 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $2 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $3 = (($1) - ($2))|0;
 $skip = $3;
 $4 = $skip;
 $5 = ($4|0)>(3);
 if ($5) {
  $6 = $skip;
  $7 = $6 & -4;
  $8 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $9 = (($8) + ($7))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  _JR_830($10);
  STACKTOP = sp;return;
 }
}
function _JALR_IDLE_820($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 _cp0_update_count();
 $1 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $2 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $3 = (($1) - ($2))|0;
 $skip = $3;
 $4 = $skip;
 $5 = ($4|0)>(3);
 if ($5) {
  $6 = $skip;
  $7 = $6 & -4;
  $8 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $9 = (($8) + ($7))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  _JALR_831($10);
  STACKTOP = sp;return;
 }
}
function _pure_interpreter_loop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _InterpretOpcode();
 return;
}
function _InterpretOpcode() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op = 0, $txop = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_fast_mem_access($2)|0);
 $4 = HEAP32[$3>>2]|0;
 $op = $4;
 $5 = $op;
 $6 = $5 >>> 26;
 $7 = $6 & 63;
 $txop = $7;
 $8 = $txop;
 HEAP32[$vararg_buffer>>2] = $8;
 _DebugMessage(3,(gb + (18893) | 0),$vararg_buffer);
 $9 = $op;
 $10 = $9 >>> 26;
 $11 = $10 & 63;
 L1: do {
  switch ($11|0) {
  case 0:  {
   $12 = $op;
   $13 = $12 & 63;
   do {
    switch ($13|0) {
    case 0:  {
     $14 = $op;
     $15 = $14 >>> 11;
     $16 = $15 & 31;
     $17 = ($16|0)!=(0);
     if ($17) {
      $18 = $op;
      _SLL_823($18);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 2:  {
     $19 = $op;
     $20 = $19 >>> 11;
     $21 = $20 & 31;
     $22 = ($21|0)!=(0);
     if ($22) {
      $23 = $op;
      _SRL_825($23);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 3:  {
     $24 = $op;
     $25 = $24 >>> 11;
     $26 = $25 & 31;
     $27 = ($26|0)!=(0);
     if ($27) {
      $28 = $op;
      _SRA_826($28);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 4:  {
     $29 = $op;
     $30 = $29 >>> 11;
     $31 = $30 & 31;
     $32 = ($31|0)!=(0);
     if ($32) {
      $33 = $op;
      _SLLV_827($33);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 6:  {
     $34 = $op;
     $35 = $34 >>> 11;
     $36 = $35 & 31;
     $37 = ($36|0)!=(0);
     if ($37) {
      $38 = $op;
      _SRLV_828($38);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 7:  {
     $39 = $op;
     $40 = $39 >>> 11;
     $41 = $40 & 31;
     $42 = ($41|0)!=(0);
     if ($42) {
      $43 = $op;
      _SRAV_829($43);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 8:  {
     $44 = $op;
     _JR_830($44);
     break L1;
     break;
    }
    case 9:  {
     $45 = $op;
     _JALR_831($45);
     break L1;
     break;
    }
    case 12:  {
     $46 = $op;
     _SYSCALL_832($46);
     break L1;
     break;
    }
    case 13:  {
     $47 = $op;
     _NI_833($47);
     break L1;
     break;
    }
    case 15:  {
     $48 = $op;
     _SYNC_834($48);
     break L1;
     break;
    }
    case 16:  {
     $49 = $op;
     $50 = $49 >>> 11;
     $51 = $50 & 31;
     $52 = ($51|0)!=(0);
     if ($52) {
      $53 = $op;
      _MFHI_835($53);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 17:  {
     $54 = $op;
     _MTHI_836($54);
     break L1;
     break;
    }
    case 18:  {
     $55 = $op;
     $56 = $55 >>> 11;
     $57 = $56 & 31;
     $58 = ($57|0)!=(0);
     if ($58) {
      $59 = $op;
      _MFLO_837($59);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 19:  {
     $60 = $op;
     _MTLO_838($60);
     break L1;
     break;
    }
    case 20:  {
     $61 = $op;
     $62 = $61 >>> 11;
     $63 = $62 & 31;
     $64 = ($63|0)!=(0);
     if ($64) {
      $65 = $op;
      _DSLLV_839($65);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 22:  {
     $66 = $op;
     $67 = $66 >>> 11;
     $68 = $67 & 31;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = $op;
      _DSRLV_840($70);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 23:  {
     $71 = $op;
     $72 = $71 >>> 11;
     $73 = $72 & 31;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $op;
      _DSRAV_841($75);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 24:  {
     $76 = $op;
     _MULT_842($76);
     break L1;
     break;
    }
    case 25:  {
     $77 = $op;
     _MULTU_843($77);
     break L1;
     break;
    }
    case 26:  {
     $78 = $op;
     _DIV_844($78);
     break L1;
     break;
    }
    case 27:  {
     $79 = $op;
     _DIVU_845($79);
     break L1;
     break;
    }
    case 28:  {
     $80 = $op;
     _DMULT_846($80);
     break L1;
     break;
    }
    case 29:  {
     $81 = $op;
     _DMULTU_847($81);
     break L1;
     break;
    }
    case 30:  {
     $82 = $op;
     _DDIV_848($82);
     break L1;
     break;
    }
    case 31:  {
     $83 = $op;
     _DDIVU_849($83);
     break L1;
     break;
    }
    case 32:  {
     $84 = $op;
     $85 = $84 >>> 11;
     $86 = $85 & 31;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $op;
      _ADD_850($88);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 33:  {
     $89 = $op;
     $90 = $89 >>> 11;
     $91 = $90 & 31;
     $92 = ($91|0)!=(0);
     if ($92) {
      $93 = $op;
      _ADDU_851($93);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 34:  {
     $94 = $op;
     $95 = $94 >>> 11;
     $96 = $95 & 31;
     $97 = ($96|0)!=(0);
     if ($97) {
      $98 = $op;
      _SUB_852($98);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 35:  {
     $99 = $op;
     $100 = $99 >>> 11;
     $101 = $100 & 31;
     $102 = ($101|0)!=(0);
     if ($102) {
      $103 = $op;
      _SUBU_853($103);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 36:  {
     $104 = $op;
     $105 = $104 >>> 11;
     $106 = $105 & 31;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $op;
      _AND_854($108);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 37:  {
     $109 = $op;
     $110 = $109 >>> 11;
     $111 = $110 & 31;
     $112 = ($111|0)!=(0);
     if ($112) {
      $113 = $op;
      _OR_855($113);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 38:  {
     $114 = $op;
     $115 = $114 >>> 11;
     $116 = $115 & 31;
     $117 = ($116|0)!=(0);
     if ($117) {
      $118 = $op;
      _XOR_856($118);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 39:  {
     $119 = $op;
     $120 = $119 >>> 11;
     $121 = $120 & 31;
     $122 = ($121|0)!=(0);
     if ($122) {
      $123 = $op;
      _NOR_857($123);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 42:  {
     $124 = $op;
     $125 = $124 >>> 11;
     $126 = $125 & 31;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = $op;
      _SLT_858($128);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 43:  {
     $129 = $op;
     $130 = $129 >>> 11;
     $131 = $130 & 31;
     $132 = ($131|0)!=(0);
     if ($132) {
      $133 = $op;
      _SLTU_859($133);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 44:  {
     $134 = $op;
     $135 = $134 >>> 11;
     $136 = $135 & 31;
     $137 = ($136|0)!=(0);
     if ($137) {
      $138 = $op;
      _DADD_860($138);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 45:  {
     $139 = $op;
     $140 = $139 >>> 11;
     $141 = $140 & 31;
     $142 = ($141|0)!=(0);
     if ($142) {
      $143 = $op;
      _DADDU_861($143);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 46:  {
     $144 = $op;
     $145 = $144 >>> 11;
     $146 = $145 & 31;
     $147 = ($146|0)!=(0);
     if ($147) {
      $148 = $op;
      _DSUB_862($148);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 47:  {
     $149 = $op;
     $150 = $149 >>> 11;
     $151 = $150 & 31;
     $152 = ($151|0)!=(0);
     if ($152) {
      $153 = $op;
      _DSUBU_863($153);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 51: case 50: case 49: case 48:  {
     $154 = $op;
     _NI_833($154);
     break L1;
     break;
    }
    case 52:  {
     $155 = $op;
     _TEQ_864($155);
     break L1;
     break;
    }
    case 54:  {
     $156 = $op;
     _NI_833($156);
     break L1;
     break;
    }
    case 56:  {
     $157 = $op;
     $158 = $157 >>> 11;
     $159 = $158 & 31;
     $160 = ($159|0)!=(0);
     if ($160) {
      $161 = $op;
      _DSLL_865($161);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 58:  {
     $162 = $op;
     $163 = $162 >>> 11;
     $164 = $163 & 31;
     $165 = ($164|0)!=(0);
     if ($165) {
      $166 = $op;
      _DSRL_866($166);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 59:  {
     $167 = $op;
     $168 = $167 >>> 11;
     $169 = $168 & 31;
     $170 = ($169|0)!=(0);
     if ($170) {
      $171 = $op;
      _DSRA_867($171);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 60:  {
     $172 = $op;
     $173 = $172 >>> 11;
     $174 = $173 & 31;
     $175 = ($174|0)!=(0);
     if ($175) {
      $176 = $op;
      _DSLL32_868($176);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 62:  {
     $177 = $op;
     $178 = $177 >>> 11;
     $179 = $178 & 31;
     $180 = ($179|0)!=(0);
     if ($180) {
      $181 = $op;
      _DSRL32_869($181);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 63:  {
     $182 = $op;
     $183 = $182 >>> 11;
     $184 = $183 & 31;
     $185 = ($184|0)!=(0);
     if ($185) {
      $186 = $op;
      _DSRA32_870($186);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    default: {
     $187 = $op;
     _RESERVED_871($187);
     break L1;
    }
    }
   } while(0);
   break;
  }
  case 1:  {
   $188 = $op;
   $189 = $188 >>> 16;
   $190 = $189 & 31;
   do {
    switch ($190|0) {
    case 0:  {
     $191 = $op;
     $192 = $191&65535;
     $193 = $192 << 16 >> 16;
     $194 = ($193|0)==(-1);
     if ($194) {
      $195 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $196 = ((($195)) + 20|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + 4)|0;
      $199 = (_fast_mem_access($198)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($200|0)==(0);
      if ($201) {
       $202 = $op;
       _BLTZ_IDLE_872($202);
       break L1;
      }
     }
     $203 = $op;
     _BLTZ_873($203);
     break L1;
     break;
    }
    case 1:  {
     $204 = $op;
     $205 = $204&65535;
     $206 = $205 << 16 >> 16;
     $207 = ($206|0)==(-1);
     if ($207) {
      $208 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $209 = ((($208)) + 20|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = (($210) + 4)|0;
      $212 = (_fast_mem_access($211)|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213|0)==(0);
      if ($214) {
       $215 = $op;
       _BGEZ_IDLE_874($215);
       break L1;
      }
     }
     $216 = $op;
     _BGEZ_875($216);
     break L1;
     break;
    }
    case 2:  {
     $217 = $op;
     $218 = $217&65535;
     $219 = $218 << 16 >> 16;
     $220 = ($219|0)==(-1);
     if ($220) {
      $221 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $222 = ((($221)) + 20|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (($223) + 4)|0;
      $225 = (_fast_mem_access($224)|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ($226|0)==(0);
      if ($227) {
       $228 = $op;
       _BLTZL_IDLE_876($228);
       break L1;
      }
     }
     $229 = $op;
     _BLTZL_877($229);
     break L1;
     break;
    }
    case 3:  {
     $230 = $op;
     $231 = $230&65535;
     $232 = $231 << 16 >> 16;
     $233 = ($232|0)==(-1);
     if ($233) {
      $234 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $235 = ((($234)) + 20|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($236) + 4)|0;
      $238 = (_fast_mem_access($237)|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ($239|0)==(0);
      if ($240) {
       $241 = $op;
       _BGEZL_IDLE_878($241);
       break L1;
      }
     }
     $242 = $op;
     _BGEZL_879($242);
     break L1;
     break;
    }
    case 14: case 12: case 11: case 10: case 9: case 8:  {
     $243 = $op;
     _NI_833($243);
     break L1;
     break;
    }
    case 16:  {
     $244 = $op;
     $245 = $244&65535;
     $246 = $245 << 16 >> 16;
     $247 = ($246|0)==(-1);
     if ($247) {
      $248 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $249 = ((($248)) + 20|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($250) + 4)|0;
      $252 = (_fast_mem_access($251)|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = ($253|0)==(0);
      if ($254) {
       $255 = $op;
       _BLTZAL_IDLE_880($255);
       break L1;
      }
     }
     $256 = $op;
     _BLTZAL_881($256);
     break L1;
     break;
    }
    case 17:  {
     $257 = $op;
     $258 = $257&65535;
     $259 = $258 << 16 >> 16;
     $260 = ($259|0)==(-1);
     if ($260) {
      $261 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $262 = ((($261)) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 4)|0;
      $265 = (_fast_mem_access($264)|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ($266|0)==(0);
      if ($267) {
       $268 = $op;
       _BGEZAL_IDLE_882($268);
       break L1;
      }
     }
     $269 = $op;
     _BGEZAL_883($269);
     break L1;
     break;
    }
    case 18:  {
     $270 = $op;
     $271 = $270&65535;
     $272 = $271 << 16 >> 16;
     $273 = ($272|0)==(-1);
     if ($273) {
      $274 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $275 = ((($274)) + 20|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = (($276) + 4)|0;
      $278 = (_fast_mem_access($277)|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ($279|0)==(0);
      if ($280) {
       $281 = $op;
       _BLTZALL_IDLE_884($281);
       break L1;
      }
     }
     $282 = $op;
     _BLTZALL_885($282);
     break L1;
     break;
    }
    case 19:  {
     $283 = $op;
     $284 = $283&65535;
     $285 = $284 << 16 >> 16;
     $286 = ($285|0)==(-1);
     if ($286) {
      $287 = HEAP32[(gb + (10522028) | 0)>>2]|0;
      $288 = ((($287)) + 20|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = (($289) + 4)|0;
      $291 = (_fast_mem_access($290)|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = ($292|0)==(0);
      if ($293) {
       $294 = $op;
       _BGEZALL_IDLE_886($294);
       break L1;
      }
     }
     $295 = $op;
     _BGEZALL_887($295);
     break L1;
     break;
    }
    default: {
     $296 = $op;
     _RESERVED_871($296);
     break L1;
    }
    }
   } while(0);
   break;
  }
  case 2:  {
   $297 = $op;
   $298 = $297 & 67108863;
   $299 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $300 = ((($299)) + 20|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $301 & 268435455;
   $303 = $302 >>> 2;
   $304 = ($298|0)==($303|0);
   if ($304) {
    $305 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $306 = ((($305)) + 20|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $307 & 268435455;
    $309 = ($308|0)!=(268435452);
    if ($309) {
     $310 = HEAP32[(gb + (10522028) | 0)>>2]|0;
     $311 = ((($310)) + 20|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = (($312) + 4)|0;
     $314 = (_fast_mem_access($313)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ($315|0)==(0);
     if ($316) {
      $317 = $op;
      _J_IDLE_888($317);
      break L1;
     }
    }
   }
   $318 = $op;
   _J_889($318);
   break;
  }
  case 3:  {
   $319 = $op;
   $320 = $319 & 67108863;
   $321 = HEAP32[(gb + (10522028) | 0)>>2]|0;
   $322 = ((($321)) + 20|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & 268435455;
   $325 = $324 >>> 2;
   $326 = ($320|0)==($325|0);
   if ($326) {
    $327 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $328 = ((($327)) + 20|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = $329 & 268435455;
    $331 = ($330|0)!=(268435452);
    if ($331) {
     $332 = HEAP32[(gb + (10522028) | 0)>>2]|0;
     $333 = ((($332)) + 20|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (($334) + 4)|0;
     $336 = (_fast_mem_access($335)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = ($337|0)==(0);
     if ($338) {
      $339 = $op;
      _JAL_IDLE_890($339);
      break L1;
     }
    }
   }
   $340 = $op;
   _JAL_891($340);
   break;
  }
  case 4:  {
   $341 = $op;
   $342 = $341&65535;
   $343 = $342 << 16 >> 16;
   $344 = ($343|0)==(-1);
   if ($344) {
    $345 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $346 = ((($345)) + 20|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = (($347) + 4)|0;
    $349 = (_fast_mem_access($348)|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ($350|0)==(0);
    if ($351) {
     $352 = $op;
     _BEQ_IDLE_892($352);
     break L1;
    }
   }
   $353 = $op;
   _BEQ_893($353);
   break;
  }
  case 5:  {
   $354 = $op;
   $355 = $354&65535;
   $356 = $355 << 16 >> 16;
   $357 = ($356|0)==(-1);
   if ($357) {
    $358 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $359 = ((($358)) + 20|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($360) + 4)|0;
    $362 = (_fast_mem_access($361)|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ($363|0)==(0);
    if ($364) {
     $365 = $op;
     _BNE_IDLE_894($365);
     break L1;
    }
   }
   $366 = $op;
   _BNE_895($366);
   break;
  }
  case 6:  {
   $367 = $op;
   $368 = $367&65535;
   $369 = $368 << 16 >> 16;
   $370 = ($369|0)==(-1);
   if ($370) {
    $371 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $372 = ((($371)) + 20|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = (($373) + 4)|0;
    $375 = (_fast_mem_access($374)|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($376|0)==(0);
    if ($377) {
     $378 = $op;
     _BLEZ_IDLE_896($378);
     break L1;
    }
   }
   $379 = $op;
   _BLEZ_897($379);
   break;
  }
  case 7:  {
   $380 = $op;
   $381 = $380&65535;
   $382 = $381 << 16 >> 16;
   $383 = ($382|0)==(-1);
   if ($383) {
    $384 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $385 = ((($384)) + 20|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = (($386) + 4)|0;
    $388 = (_fast_mem_access($387)|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = ($389|0)==(0);
    if ($390) {
     $391 = $op;
     _BGTZ_IDLE_898($391);
     break L1;
    }
   }
   $392 = $op;
   _BGTZ_899($392);
   break;
  }
  case 8:  {
   $393 = $op;
   $394 = $393 >>> 16;
   $395 = $394 & 31;
   $396 = ($395|0)!=(0);
   if ($396) {
    $397 = $op;
    _ADDI_900($397);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 9:  {
   $398 = $op;
   $399 = $398 >>> 16;
   $400 = $399 & 31;
   $401 = ($400|0)!=(0);
   if ($401) {
    $402 = $op;
    _ADDIU_901($402);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 10:  {
   $403 = $op;
   $404 = $403 >>> 16;
   $405 = $404 & 31;
   $406 = ($405|0)!=(0);
   if ($406) {
    $407 = $op;
    _SLTI_902($407);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 11:  {
   $408 = $op;
   $409 = $408 >>> 16;
   $410 = $409 & 31;
   $411 = ($410|0)!=(0);
   if ($411) {
    $412 = $op;
    _SLTIU_903($412);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 12:  {
   $413 = $op;
   $414 = $413 >>> 16;
   $415 = $414 & 31;
   $416 = ($415|0)!=(0);
   if ($416) {
    $417 = $op;
    _ANDI_904($417);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 13:  {
   $418 = $op;
   $419 = $418 >>> 16;
   $420 = $419 & 31;
   $421 = ($420|0)!=(0);
   if ($421) {
    $422 = $op;
    _ORI_905($422);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 14:  {
   $423 = $op;
   $424 = $423 >>> 16;
   $425 = $424 & 31;
   $426 = ($425|0)!=(0);
   if ($426) {
    $427 = $op;
    _XORI_906($427);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 15:  {
   $428 = $op;
   $429 = $428 >>> 16;
   $430 = $429 & 31;
   $431 = ($430|0)!=(0);
   if ($431) {
    $432 = $op;
    _LUI_907($432);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 16:  {
   $433 = $op;
   $434 = $433 >>> 21;
   $435 = $434 & 31;
   switch ($435|0) {
   case 0:  {
    $436 = $op;
    $437 = $436 >>> 16;
    $438 = $437 & 31;
    $439 = ($438|0)!=(0);
    if ($439) {
     $440 = $op;
     _MFC0_908($440);
     break L1;
    } else {
     _NOP_824(0);
     break L1;
    }
    break;
   }
   case 4:  {
    $441 = $op;
    _MTC0_909($441);
    break L1;
    break;
   }
   case 16:  {
    $442 = $op;
    $443 = $442 & 63;
    switch ($443|0) {
    case 1:  {
     $444 = $op;
     _TLBR_910($444);
     break L1;
     break;
    }
    case 2:  {
     $445 = $op;
     _TLBWI_911($445);
     break L1;
     break;
    }
    case 6:  {
     $446 = $op;
     _TLBWR_912($446);
     break L1;
     break;
    }
    case 8:  {
     $447 = $op;
     _TLBP_913($447);
     break L1;
     break;
    }
    case 24:  {
     $448 = $op;
     _ERET_914($448);
     break L1;
     break;
    }
    default: {
     $449 = $op;
     _RESERVED_871($449);
     break L1;
    }
    }
    break;
   }
   default: {
    $450 = $op;
    _RESERVED_871($450);
    break L1;
   }
   }
   break;
  }
  case 17:  {
   $451 = $op;
   $452 = $451 >>> 21;
   $453 = $452 & 31;
   do {
    switch ($453|0) {
    case 0:  {
     $454 = $op;
     $455 = $454 >>> 16;
     $456 = $455 & 31;
     $457 = ($456|0)!=(0);
     if ($457) {
      $458 = $op;
      _MFC1_915($458);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 1:  {
     $459 = $op;
     $460 = $459 >>> 16;
     $461 = $460 & 31;
     $462 = ($461|0)!=(0);
     if ($462) {
      $463 = $op;
      _DMFC1_916($463);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 2:  {
     $464 = $op;
     $465 = $464 >>> 16;
     $466 = $465 & 31;
     $467 = ($466|0)!=(0);
     if ($467) {
      $468 = $op;
      _CFC1_917($468);
      break L1;
     } else {
      _NOP_824(0);
      break L1;
     }
     break;
    }
    case 4:  {
     $469 = $op;
     _MTC1_918($469);
     break L1;
     break;
    }
    case 5:  {
     $470 = $op;
     _DMTC1_919($470);
     break L1;
     break;
    }
    case 6:  {
     $471 = $op;
     _CTC1_920($471);
     break L1;
     break;
    }
    case 8:  {
     $472 = $op;
     $473 = $472 >>> 16;
     $474 = $473 & 3;
     switch ($474|0) {
     case 0:  {
      $475 = $op;
      $476 = $475&65535;
      $477 = $476 << 16 >> 16;
      $478 = ($477|0)==(-1);
      if ($478) {
       $479 = HEAP32[(gb + (10522028) | 0)>>2]|0;
       $480 = ((($479)) + 20|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($481) + 4)|0;
       $483 = (_fast_mem_access($482)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = ($484|0)==(0);
       if ($485) {
        $486 = $op;
        _BC1F_IDLE_921($486);
        break L1;
       }
      }
      $487 = $op;
      _BC1F_922($487);
      break L1;
      break;
     }
     case 1:  {
      $488 = $op;
      $489 = $488&65535;
      $490 = $489 << 16 >> 16;
      $491 = ($490|0)==(-1);
      if ($491) {
       $492 = HEAP32[(gb + (10522028) | 0)>>2]|0;
       $493 = ((($492)) + 20|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = (($494) + 4)|0;
       $496 = (_fast_mem_access($495)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = ($497|0)==(0);
       if ($498) {
        $499 = $op;
        _BC1T_IDLE_923($499);
        break L1;
       }
      }
      $500 = $op;
      _BC1T_924($500);
      break L1;
      break;
     }
     case 2:  {
      $501 = $op;
      $502 = $501&65535;
      $503 = $502 << 16 >> 16;
      $504 = ($503|0)==(-1);
      if ($504) {
       $505 = HEAP32[(gb + (10522028) | 0)>>2]|0;
       $506 = ((($505)) + 20|0);
       $507 = HEAP32[$506>>2]|0;
       $508 = (($507) + 4)|0;
       $509 = (_fast_mem_access($508)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = ($510|0)==(0);
       if ($511) {
        $512 = $op;
        _BC1FL_IDLE_925($512);
        break L1;
       }
      }
      $513 = $op;
      _BC1FL_926($513);
      break L1;
      break;
     }
     case 3:  {
      $514 = $op;
      $515 = $514&65535;
      $516 = $515 << 16 >> 16;
      $517 = ($516|0)==(-1);
      if ($517) {
       $518 = HEAP32[(gb + (10522028) | 0)>>2]|0;
       $519 = ((($518)) + 20|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = (($520) + 4)|0;
       $522 = (_fast_mem_access($521)|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = ($523|0)==(0);
       if ($524) {
        $525 = $op;
        _BC1TL_IDLE_927($525);
        break L1;
       }
      }
      $526 = $op;
      _BC1TL_928($526);
      break L1;
      break;
     }
     default: {
      // unreachable;
     }
     }
     break;
    }
    case 16:  {
     $527 = $op;
     $528 = $527 & 63;
     do {
      switch ($528|0) {
      case 0:  {
       $529 = $op;
       _ADD_S_929($529);
       break L1;
       break;
      }
      case 1:  {
       $530 = $op;
       _SUB_S_930($530);
       break L1;
       break;
      }
      case 2:  {
       $531 = $op;
       _MUL_S_931($531);
       break L1;
       break;
      }
      case 3:  {
       $532 = $op;
       _DIV_S_932($532);
       break L1;
       break;
      }
      case 4:  {
       $533 = $op;
       _SQRT_S_933($533);
       break L1;
       break;
      }
      case 5:  {
       $534 = $op;
       _ABS_S_934($534);
       break L1;
       break;
      }
      case 6:  {
       $535 = $op;
       _MOV_S_935($535);
       break L1;
       break;
      }
      case 7:  {
       $536 = $op;
       _NEG_S_936($536);
       break L1;
       break;
      }
      case 8:  {
       $537 = $op;
       _ROUND_L_S_937($537);
       break L1;
       break;
      }
      case 9:  {
       $538 = $op;
       _TRUNC_L_S_938($538);
       break L1;
       break;
      }
      case 10:  {
       $539 = $op;
       _CEIL_L_S_939($539);
       break L1;
       break;
      }
      case 11:  {
       $540 = $op;
       _FLOOR_L_S_940($540);
       break L1;
       break;
      }
      case 12:  {
       $541 = $op;
       _ROUND_W_S_941($541);
       break L1;
       break;
      }
      case 13:  {
       $542 = $op;
       _TRUNC_W_S_942($542);
       break L1;
       break;
      }
      case 14:  {
       $543 = $op;
       _CEIL_W_S_943($543);
       break L1;
       break;
      }
      case 15:  {
       $544 = $op;
       _FLOOR_W_S_944($544);
       break L1;
       break;
      }
      case 33:  {
       $545 = $op;
       _CVT_D_S_945($545);
       break L1;
       break;
      }
      case 36:  {
       $546 = $op;
       _CVT_W_S_946($546);
       break L1;
       break;
      }
      case 37:  {
       $547 = $op;
       _CVT_L_S_947($547);
       break L1;
       break;
      }
      case 48:  {
       $548 = $op;
       _C_F_S_948($548);
       break L1;
       break;
      }
      case 49:  {
       $549 = $op;
       _C_UN_S_949($549);
       break L1;
       break;
      }
      case 50:  {
       $550 = $op;
       _C_EQ_S_950($550);
       break L1;
       break;
      }
      case 51:  {
       $551 = $op;
       _C_UEQ_S_951($551);
       break L1;
       break;
      }
      case 52:  {
       $552 = $op;
       _C_OLT_S_952($552);
       break L1;
       break;
      }
      case 53:  {
       $553 = $op;
       _C_ULT_S_953($553);
       break L1;
       break;
      }
      case 54:  {
       $554 = $op;
       _C_OLE_S_954($554);
       break L1;
       break;
      }
      case 55:  {
       $555 = $op;
       _C_ULE_S_955($555);
       break L1;
       break;
      }
      case 56:  {
       $556 = $op;
       _C_SF_S_956($556);
       break L1;
       break;
      }
      case 57:  {
       $557 = $op;
       _C_NGLE_S_957($557);
       break L1;
       break;
      }
      case 58:  {
       $558 = $op;
       _C_SEQ_S_958($558);
       break L1;
       break;
      }
      case 59:  {
       $559 = $op;
       _C_NGL_S_959($559);
       break L1;
       break;
      }
      case 60:  {
       $560 = $op;
       _C_LT_S_960($560);
       break L1;
       break;
      }
      case 61:  {
       $561 = $op;
       _C_NGE_S_961($561);
       break L1;
       break;
      }
      case 62:  {
       $562 = $op;
       _C_LE_S_962($562);
       break L1;
       break;
      }
      case 63:  {
       $563 = $op;
       _C_NGT_S_963($563);
       break L1;
       break;
      }
      default: {
       $564 = $op;
       _RESERVED_871($564);
       break L1;
      }
      }
     } while(0);
     break;
    }
    case 17:  {
     $565 = $op;
     $566 = $565 & 63;
     do {
      switch ($566|0) {
      case 0:  {
       $567 = $op;
       _ADD_D_964($567);
       break L1;
       break;
      }
      case 1:  {
       $568 = $op;
       _SUB_D_965($568);
       break L1;
       break;
      }
      case 2:  {
       $569 = $op;
       _MUL_D_966($569);
       break L1;
       break;
      }
      case 3:  {
       $570 = $op;
       _DIV_D_967($570);
       break L1;
       break;
      }
      case 4:  {
       $571 = $op;
       _SQRT_D_968($571);
       break L1;
       break;
      }
      case 5:  {
       $572 = $op;
       _ABS_D_969($572);
       break L1;
       break;
      }
      case 6:  {
       $573 = $op;
       _MOV_D_970($573);
       break L1;
       break;
      }
      case 7:  {
       $574 = $op;
       _NEG_D_971($574);
       break L1;
       break;
      }
      case 8:  {
       $575 = $op;
       _ROUND_L_D_972($575);
       break L1;
       break;
      }
      case 9:  {
       $576 = $op;
       _TRUNC_L_D_973($576);
       break L1;
       break;
      }
      case 10:  {
       $577 = $op;
       _CEIL_L_D_974($577);
       break L1;
       break;
      }
      case 11:  {
       $578 = $op;
       _FLOOR_L_D_975($578);
       break L1;
       break;
      }
      case 12:  {
       $579 = $op;
       _ROUND_W_D_976($579);
       break L1;
       break;
      }
      case 13:  {
       $580 = $op;
       _TRUNC_W_D_977($580);
       break L1;
       break;
      }
      case 14:  {
       $581 = $op;
       _CEIL_W_D_978($581);
       break L1;
       break;
      }
      case 15:  {
       $582 = $op;
       _FLOOR_W_D_979($582);
       break L1;
       break;
      }
      case 32:  {
       $583 = $op;
       _CVT_S_D_980($583);
       break L1;
       break;
      }
      case 36:  {
       $584 = $op;
       _CVT_W_D_981($584);
       break L1;
       break;
      }
      case 37:  {
       $585 = $op;
       _CVT_L_D_982($585);
       break L1;
       break;
      }
      case 48:  {
       $586 = $op;
       _C_F_D_983($586);
       break L1;
       break;
      }
      case 49:  {
       $587 = $op;
       _C_UN_D_984($587);
       break L1;
       break;
      }
      case 50:  {
       $588 = $op;
       _C_EQ_D_985($588);
       break L1;
       break;
      }
      case 51:  {
       $589 = $op;
       _C_UEQ_D_986($589);
       break L1;
       break;
      }
      case 52:  {
       $590 = $op;
       _C_OLT_D_987($590);
       break L1;
       break;
      }
      case 53:  {
       $591 = $op;
       _C_ULT_D_988($591);
       break L1;
       break;
      }
      case 54:  {
       $592 = $op;
       _C_OLE_D_989($592);
       break L1;
       break;
      }
      case 55:  {
       $593 = $op;
       _C_ULE_D_990($593);
       break L1;
       break;
      }
      case 56:  {
       $594 = $op;
       _C_SF_D_991($594);
       break L1;
       break;
      }
      case 57:  {
       $595 = $op;
       _C_NGLE_D_992($595);
       break L1;
       break;
      }
      case 58:  {
       $596 = $op;
       _C_SEQ_D_993($596);
       break L1;
       break;
      }
      case 59:  {
       $597 = $op;
       _C_NGL_D_994($597);
       break L1;
       break;
      }
      case 60:  {
       $598 = $op;
       _C_LT_D_995($598);
       break L1;
       break;
      }
      case 61:  {
       $599 = $op;
       _C_NGE_D_996($599);
       break L1;
       break;
      }
      case 62:  {
       $600 = $op;
       _C_LE_D_997($600);
       break L1;
       break;
      }
      case 63:  {
       $601 = $op;
       _C_NGT_D_998($601);
       break L1;
       break;
      }
      default: {
       $602 = $op;
       _RESERVED_871($602);
       break L1;
      }
      }
     } while(0);
     break;
    }
    case 20:  {
     $603 = $op;
     $604 = $603 & 63;
     switch ($604|0) {
     case 32:  {
      $605 = $op;
      _CVT_S_W_999($605);
      break L1;
      break;
     }
     case 33:  {
      $606 = $op;
      _CVT_D_W_1000($606);
      break L1;
      break;
     }
     default: {
      $607 = $op;
      _RESERVED_871($607);
      break L1;
     }
     }
     break;
    }
    case 21:  {
     $608 = $op;
     $609 = $608 & 63;
     switch ($609|0) {
     case 32:  {
      $610 = $op;
      _CVT_S_L_1001($610);
      break L1;
      break;
     }
     case 33:  {
      $611 = $op;
      _CVT_D_L_1002($611);
      break L1;
      break;
     }
     default: {
      $612 = $op;
      _RESERVED_871($612);
      break L1;
     }
     }
     break;
    }
    default: {
     $613 = $op;
     _RESERVED_871($613);
     break L1;
    }
    }
   } while(0);
   break;
  }
  case 20:  {
   $614 = $op;
   $615 = $614&65535;
   $616 = $615 << 16 >> 16;
   $617 = ($616|0)==(-1);
   if ($617) {
    $618 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $619 = ((($618)) + 20|0);
    $620 = HEAP32[$619>>2]|0;
    $621 = (($620) + 4)|0;
    $622 = (_fast_mem_access($621)|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = ($623|0)==(0);
    if ($624) {
     $625 = $op;
     _BEQL_IDLE_1003($625);
     break L1;
    }
   }
   $626 = $op;
   _BEQL_1004($626);
   break;
  }
  case 21:  {
   $627 = $op;
   $628 = $627&65535;
   $629 = $628 << 16 >> 16;
   $630 = ($629|0)==(-1);
   if ($630) {
    $631 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $632 = ((($631)) + 20|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = (($633) + 4)|0;
    $635 = (_fast_mem_access($634)|0);
    $636 = HEAP32[$635>>2]|0;
    $637 = ($636|0)==(0);
    if ($637) {
     $638 = $op;
     _BNEL_IDLE_1005($638);
     break L1;
    }
   }
   $639 = $op;
   _BNEL_1006($639);
   break;
  }
  case 22:  {
   $640 = $op;
   $641 = $640&65535;
   $642 = $641 << 16 >> 16;
   $643 = ($642|0)==(-1);
   if ($643) {
    $644 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $645 = ((($644)) + 20|0);
    $646 = HEAP32[$645>>2]|0;
    $647 = (($646) + 4)|0;
    $648 = (_fast_mem_access($647)|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = ($649|0)==(0);
    if ($650) {
     $651 = $op;
     _BLEZL_IDLE_1007($651);
     break L1;
    }
   }
   $652 = $op;
   _BLEZL_1008($652);
   break;
  }
  case 23:  {
   $653 = $op;
   $654 = $653&65535;
   $655 = $654 << 16 >> 16;
   $656 = ($655|0)==(-1);
   if ($656) {
    $657 = HEAP32[(gb + (10522028) | 0)>>2]|0;
    $658 = ((($657)) + 20|0);
    $659 = HEAP32[$658>>2]|0;
    $660 = (($659) + 4)|0;
    $661 = (_fast_mem_access($660)|0);
    $662 = HEAP32[$661>>2]|0;
    $663 = ($662|0)==(0);
    if ($663) {
     $664 = $op;
     _BGTZL_IDLE_1009($664);
     break L1;
    }
   }
   $665 = $op;
   _BGTZL_1010($665);
   break;
  }
  case 24:  {
   $666 = $op;
   $667 = $666 >>> 16;
   $668 = $667 & 31;
   $669 = ($668|0)!=(0);
   if ($669) {
    $670 = $op;
    _DADDI_1011($670);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 25:  {
   $671 = $op;
   $672 = $671 >>> 16;
   $673 = $672 & 31;
   $674 = ($673|0)!=(0);
   if ($674) {
    $675 = $op;
    _DADDIU_1012($675);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 26:  {
   $676 = $op;
   $677 = $676 >>> 16;
   $678 = $677 & 31;
   $679 = ($678|0)!=(0);
   if ($679) {
    $680 = $op;
    _LDL_1013($680);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 27:  {
   $681 = $op;
   $682 = $681 >>> 16;
   $683 = $682 & 31;
   $684 = ($683|0)!=(0);
   if ($684) {
    $685 = $op;
    _LDR_1014($685);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 32:  {
   $686 = $op;
   $687 = $686 >>> 16;
   $688 = $687 & 31;
   $689 = ($688|0)!=(0);
   if ($689) {
    $690 = $op;
    _LB_1015($690);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 33:  {
   $691 = $op;
   $692 = $691 >>> 16;
   $693 = $692 & 31;
   $694 = ($693|0)!=(0);
   if ($694) {
    $695 = $op;
    _LH_1016($695);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 34:  {
   $696 = $op;
   $697 = $696 >>> 16;
   $698 = $697 & 31;
   $699 = ($698|0)!=(0);
   if ($699) {
    $700 = $op;
    _LWL_1017($700);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 35:  {
   $701 = $op;
   $702 = $701 >>> 16;
   $703 = $702 & 31;
   $704 = ($703|0)!=(0);
   if ($704) {
    $705 = $op;
    _LW_1018($705);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 36:  {
   $706 = $op;
   $707 = $706 >>> 16;
   $708 = $707 & 31;
   $709 = ($708|0)!=(0);
   if ($709) {
    $710 = $op;
    _LBU_1019($710);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 37:  {
   $711 = $op;
   $712 = $711 >>> 16;
   $713 = $712 & 31;
   $714 = ($713|0)!=(0);
   if ($714) {
    $715 = $op;
    _LHU_1020($715);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 38:  {
   $716 = $op;
   $717 = $716 >>> 16;
   $718 = $717 & 31;
   $719 = ($718|0)!=(0);
   if ($719) {
    $720 = $op;
    _LWR_1021($720);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 39:  {
   $721 = $op;
   $722 = $721 >>> 16;
   $723 = $722 & 31;
   $724 = ($723|0)!=(0);
   if ($724) {
    $725 = $op;
    _LWU_1022($725);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 40:  {
   $726 = $op;
   _SB_1023($726);
   break;
  }
  case 41:  {
   $727 = $op;
   _SH_1024($727);
   break;
  }
  case 42:  {
   $728 = $op;
   _SWL_1025($728);
   break;
  }
  case 43:  {
   $729 = $op;
   _SW_1026($729);
   break;
  }
  case 44:  {
   $730 = $op;
   _SDL_1027($730);
   break;
  }
  case 45:  {
   $731 = $op;
   _SDR_1028($731);
   break;
  }
  case 46:  {
   $732 = $op;
   _SWR_1029($732);
   break;
  }
  case 47:  {
   $733 = $op;
   _CACHE_1030($733);
   break;
  }
  case 48:  {
   $734 = $op;
   $735 = $734 >>> 16;
   $736 = $735 & 31;
   $737 = ($736|0)!=(0);
   if ($737) {
    $738 = $op;
    _LL_1031($738);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 49:  {
   $739 = $op;
   _LWC1_1032($739);
   break;
  }
  case 52:  {
   $740 = $op;
   _NI_833($740);
   break;
  }
  case 53:  {
   $741 = $op;
   _LDC1_1033($741);
   break;
  }
  case 55:  {
   $742 = $op;
   $743 = $742 >>> 16;
   $744 = $743 & 31;
   $745 = ($744|0)!=(0);
   if ($745) {
    $746 = $op;
    _LD_1034($746);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 56:  {
   $747 = $op;
   $748 = $747 >>> 16;
   $749 = $748 & 31;
   $750 = ($749|0)!=(0);
   if ($750) {
    $751 = $op;
    _SC_1035($751);
    break L1;
   } else {
    _NOP_824(0);
    break L1;
   }
   break;
  }
  case 57:  {
   $752 = $op;
   _SWC1_1036($752);
   break;
  }
  case 60:  {
   $753 = $op;
   _NI_833($753);
   break;
  }
  case 61:  {
   $754 = $op;
   _SDC1_1037($754);
   break;
  }
  case 63:  {
   $755 = $op;
   _SD_1038($755);
   break;
  }
  default: {
   $756 = $op;
   _RESERVED_871($756);
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _SLL_823($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 6;
 $8 = $7 & 31;
 $9 = $5 << $8;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = $0;
 $13 = $12 >>> 11;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $21 = (($20) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 STACKTOP = sp;return;
}
function _NOP_824($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $2 = (($1) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $2;
 STACKTOP = sp;return;
}
function _SRL_825($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 6;
 $8 = $7 & 31;
 $9 = $5 >>> $8;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = $0;
 $13 = $12 >>> 11;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $21 = (($20) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 STACKTOP = sp;return;
}
function _SRA_826($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 6;
 $8 = $7 & 31;
 $9 = $5 >> $8;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = $0;
 $13 = $12 >>> 11;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $21 = (($20) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 STACKTOP = sp;return;
}
function _SLLV_827($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 21;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 31;
 $12 = $5 << $11;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = $0;
 $16 = $15 >>> 11;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _SRLV_828($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 21;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 31;
 $12 = $5 >>> $11;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = $0;
 $16 = $15 >>> 11;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _SRAV_829($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 21;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 31;
 $12 = $5 >> $11;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = $0;
 $16 = $15 >>> 11;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _JR_830($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $jump_target = $5;
 $link_register = (gb + (8409952) | 0);
 $6 = $link_register;
 $7 = ($6|0)!=((gb + (8409952) | 0)|0);
 if ($7) {
  $8 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $9 = (($8) + 8)|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = $link_register;
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $11;
 }
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = (($17) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $18;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $19 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 }
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $22;
 $23 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $24 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $25 = ($23>>>0)<=($24>>>0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JALR_831($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $jump_target = $5;
 $6 = $0;
 $7 = $6 >>> 11;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $link_register = $9;
 $10 = $link_register;
 $11 = ($10|0)!=((gb + (8409952) | 0)|0);
 if ($11) {
  $12 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $13 = (($12) + 8)|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = $link_register;
  $17 = $16;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $15;
 }
 $21 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $22 = (($21) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $22;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $23 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $25;
 }
 $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $26;
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = ($27>>>0)<=($28>>>0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _SYSCALL_832($op) {
 $op = $op|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = 32;
 _exception_general();
 STACKTOP = sp;return;
}
function _NI_833($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $op;
 $1 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 _DebugMessage(1,(gb + (19301) | 0),$vararg_buffer);
 $2 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $3 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $4 = (_fast_mem_access($3)|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $2;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $5;
 _DebugMessage(1,(gb + (19313) | 0),$vararg_buffer1);
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _SYNC_834($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $2 = (($1) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $2;
 STACKTOP = sp;return;
}
function _MFHI_835($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (gb + (8410208) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7 >>> 11;
 $9 = $8 & 31;
 $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $3;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $6;
 $15 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $16 = (($15) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $16;
 STACKTOP = sp;return;
}
function _MTHI_836($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (gb + (8410208) | 0);
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $16 = (($15) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $16;
 STACKTOP = sp;return;
}
function _MFLO_837($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (gb + (8410216) | 0);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7 >>> 11;
 $9 = $8 & 31;
 $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $3;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $6;
 $15 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $16 = (($15) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $16;
 STACKTOP = sp;return;
}
function _MTLO_838($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (gb + (8410216) | 0);
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $16 = (($15) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $16;
 STACKTOP = sp;return;
}
function _DSLLV_839($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 21;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 63;
 $17 = (_bitshift64Shl(($7|0),($10|0),($16|0))|0);
 $18 = (getTempRet0() | 0);
 $19 = $0;
 $20 = $19 >>> 11;
 $21 = $20 & 31;
 $22 = ((gb + (8409952) | 0) + ($21<<3)|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $18;
 $27 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $28 = (($27) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $28;
 STACKTOP = sp;return;
}
function _DSRLV_840($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 21;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 63;
 $17 = (_bitshift64Lshr(($7|0),($10|0),($16|0))|0);
 $18 = (getTempRet0() | 0);
 $19 = $0;
 $20 = $19 >>> 11;
 $21 = $20 & 31;
 $22 = ((gb + (8409952) | 0) + ($21<<3)|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $18;
 $27 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $28 = (($27) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $28;
 STACKTOP = sp;return;
}
function _DSRAV_841($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 21;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 63;
 $17 = (_bitshift64Ashr(($7|0),($10|0),($16|0))|0);
 $18 = (getTempRet0() | 0);
 $19 = $0;
 $20 = $19 >>> 11;
 $21 = $20 & 31;
 $22 = ((gb + (8409952) | 0) + ($21<<3)|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $18;
 $27 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $28 = (($27) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $28;
 STACKTOP = sp;return;
}
function _MULT_842($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (___muldi3(($7|0),($10|0),($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = $temp;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $temp;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_bitshift64Ashr(($29|0),($32|0),32)|0);
 $34 = (getTempRet0() | 0);
 $35 = (gb + (8410208) | 0);
 $36 = $35;
 HEAP32[$36>>2] = $33;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = $temp;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (gb + (8410216) | 0);
 $48 = $47;
 HEAP32[$48>>2] = $41;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $52 = (($51) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $52;
 STACKTOP = sp;return;
}
function _MULTU_843($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (___muldi3(($7|0),0,($17|0),0)|0);
 $22 = (getTempRet0() | 0);
 $23 = $temp;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $temp;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_bitshift64Ashr(($29|0),($32|0),32)|0);
 $34 = (getTempRet0() | 0);
 $35 = (gb + (8410208) | 0);
 $36 = $35;
 HEAP32[$36>>2] = $33;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = $temp;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (gb + (8410216) | 0);
 $48 = $47;
 HEAP32[$48>>2] = $41;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $52 = (($51) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $52;
 STACKTOP = sp;return;
}
function _DIV_844($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = $7 >>> 21;
  $9 = $8 & 31;
  $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($11|0) / ($16|0))&-1;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = (gb + (8410216) | 0);
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  $24 = $0;
  $25 = $24 >>> 21;
  $26 = $25 & 31;
  $27 = ((gb + (8409952) | 0) + ($26<<3)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $0;
  $30 = $29 >>> 16;
  $31 = $30 & 31;
  $32 = ((gb + (8409952) | 0) + ($31<<3)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($28|0) % ($33|0))&-1;
  $35 = ($34|0)<(0);
  $36 = $35 << 31 >> 31;
  $37 = (gb + (8410208) | 0);
  $38 = $37;
  HEAP32[$38>>2] = $34;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $42 = (($41) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19284) | 0),$vararg_buffer);
  $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $42 = (($41) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
  STACKTOP = sp;return;
 }
}
function _DIVU_845($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = $7 >>> 21;
  $9 = $8 & 31;
  $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($11>>>0) / ($16>>>0))&-1;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = (gb + (8410216) | 0);
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  $24 = $0;
  $25 = $24 >>> 21;
  $26 = $25 & 31;
  $27 = ((gb + (8409952) | 0) + ($26<<3)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $0;
  $30 = $29 >>> 16;
  $31 = $30 & 31;
  $32 = ((gb + (8409952) | 0) + ($31<<3)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($28>>>0) % ($33>>>0))&-1;
  $35 = ($34|0)<(0);
  $36 = $35 << 31 >> 31;
  $37 = (gb + (8410208) | 0);
  $38 = $37;
  HEAP32[$38>>2] = $34;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $42 = (($41) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19266) | 0),$vararg_buffer);
  $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $42 = (($41) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
  STACKTOP = sp;return;
 }
}
function _DMULT_846($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op2 = 0, $op3 = 0, $op4 = 0, $result1 = 0;
 var $result2 = 0, $result3 = 0, $result4 = 0, $sign = 0, $temp1 = 0, $temp2 = 0, $temp3 = 0, $temp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op1 = sp + 88|0;
 $op2 = sp + 80|0;
 $op3 = sp + 72|0;
 $op4 = sp + 64|0;
 $result1 = sp + 56|0;
 $result2 = sp + 48|0;
 $result3 = sp + 40|0;
 $result4 = sp + 32|0;
 $temp1 = sp + 24|0;
 $temp2 = sp + 16|0;
 $temp3 = sp + 8|0;
 $temp4 = sp;
 $0 = $op;
 $sign = 0;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $0;
 $13 = $12 >>> 21;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 if ($11) {
  $22 = (_i64Subtract(0,0,($18|0),($21|0))|0);
  $23 = (getTempRet0() | 0);
  $24 = $op2;
  $25 = $24;
  HEAP32[$25>>2] = $22;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $sign;
  $29 = (1 - ($28))|0;
  $sign = $29;
 } else {
  $30 = $op2;
  $31 = $30;
  HEAP32[$31>>2] = $18;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = $21;
 }
 $34 = $0;
 $35 = $34 >>> 16;
 $36 = $35 & 31;
 $37 = ((gb + (8409952) | 0) + ($36<<3)|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)<(0);
 $45 = $0;
 $46 = $45 >>> 16;
 $47 = $46 & 31;
 $48 = ((gb + (8409952) | 0) + ($47<<3)|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 if ($44) {
  $55 = (_i64Subtract(0,0,($51|0),($54|0))|0);
  $56 = (getTempRet0() | 0);
  $57 = $op4;
  $58 = $57;
  HEAP32[$58>>2] = $55;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  $61 = $sign;
  $62 = (1 - ($61))|0;
  $sign = $62;
 } else {
  $63 = $op4;
  $64 = $63;
  HEAP32[$64>>2] = $51;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $54;
 }
 $67 = $op2;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = $op1;
 $74 = $73;
 HEAP32[$74>>2] = $69;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = 0;
 $77 = $op2;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = $op2;
 $84 = $83;
 HEAP32[$84>>2] = $82;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = 0;
 $87 = $op4;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $op3;
 $94 = $93;
 HEAP32[$94>>2] = $89;
 $95 = (($93) + 4)|0;
 $96 = $95;
 HEAP32[$96>>2] = 0;
 $97 = $op4;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = $op4;
 $104 = $103;
 HEAP32[$104>>2] = $102;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = 0;
 $107 = $op1;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $op3;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($113) + 4)|0;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (___muldi3(($109|0),($112|0),($115|0),($118|0))|0);
 $120 = (getTempRet0() | 0);
 $121 = $temp1;
 $122 = $121;
 HEAP32[$122>>2] = $119;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = $120;
 $125 = $temp1;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = (($125) + 4)|0;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = $op1;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $134 = (($131) + 4)|0;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = $op4;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (($137) + 4)|0;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (___muldi3(($133|0),($136|0),($139|0),($142|0))|0);
 $144 = (getTempRet0() | 0);
 $145 = (_i64Add(($130|0),0,($143|0),($144|0))|0);
 $146 = (getTempRet0() | 0);
 $147 = $temp2;
 $148 = $147;
 HEAP32[$148>>2] = $145;
 $149 = (($147) + 4)|0;
 $150 = $149;
 HEAP32[$150>>2] = $146;
 $151 = $op2;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = (($151) + 4)|0;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = $op3;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($157) + 4)|0;
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = (___muldi3(($153|0),($156|0),($159|0),($162|0))|0);
 $164 = (getTempRet0() | 0);
 $165 = $temp3;
 $166 = $165;
 HEAP32[$166>>2] = $163;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $164;
 $169 = $temp3;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = (($169) + 4)|0;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 $175 = $op2;
 $176 = $175;
 $177 = HEAP32[$176>>2]|0;
 $178 = (($175) + 4)|0;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = $op4;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = (($181) + 4)|0;
 $185 = $184;
 $186 = HEAP32[$185>>2]|0;
 $187 = (___muldi3(($177|0),($180|0),($183|0),($186|0))|0);
 $188 = (getTempRet0() | 0);
 $189 = (_i64Add(($174|0),0,($187|0),($188|0))|0);
 $190 = (getTempRet0() | 0);
 $191 = $temp4;
 $192 = $191;
 HEAP32[$192>>2] = $189;
 $193 = (($191) + 4)|0;
 $194 = $193;
 HEAP32[$194>>2] = $190;
 $195 = $temp1;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = (($195) + 4)|0;
 $199 = $198;
 $200 = HEAP32[$199>>2]|0;
 $201 = $result1;
 $202 = $201;
 HEAP32[$202>>2] = $197;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = 0;
 $205 = $temp2;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = (($205) + 4)|0;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $211 = $temp3;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (($211) + 4)|0;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = (_i64Add(($207|0),($210|0),($213|0),0)|0);
 $218 = (getTempRet0() | 0);
 $219 = $result2;
 $220 = $219;
 HEAP32[$220>>2] = $217;
 $221 = (($219) + 4)|0;
 $222 = $221;
 HEAP32[$222>>2] = $218;
 $223 = $result2;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 $226 = (($223) + 4)|0;
 $227 = $226;
 $228 = HEAP32[$227>>2]|0;
 $229 = $temp4;
 $230 = $229;
 $231 = HEAP32[$230>>2]|0;
 $232 = (($229) + 4)|0;
 $233 = $232;
 $234 = HEAP32[$233>>2]|0;
 $235 = (_i64Add(($228|0),0,($231|0),($234|0))|0);
 $236 = (getTempRet0() | 0);
 $237 = $result3;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $result3;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 $244 = (($241) + 4)|0;
 $245 = $244;
 $246 = HEAP32[$245>>2]|0;
 $247 = $result4;
 $248 = $247;
 HEAP32[$248>>2] = $246;
 $249 = (($247) + 4)|0;
 $250 = $249;
 HEAP32[$250>>2] = 0;
 $251 = $result1;
 $252 = $251;
 $253 = HEAP32[$252>>2]|0;
 $254 = (($251) + 4)|0;
 $255 = $254;
 $256 = HEAP32[$255>>2]|0;
 $257 = $result2;
 $258 = $257;
 $259 = HEAP32[$258>>2]|0;
 $260 = (($257) + 4)|0;
 $261 = $260;
 $262 = HEAP32[$261>>2]|0;
 $263 = $256 | $259;
 $264 = (gb + (8410216) | 0);
 $265 = $264;
 HEAP32[$265>>2] = $253;
 $266 = (($264) + 4)|0;
 $267 = $266;
 HEAP32[$267>>2] = $263;
 $268 = $result3;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = (($268) + 4)|0;
 $272 = $271;
 $273 = HEAP32[$272>>2]|0;
 $274 = $result4;
 $275 = $274;
 $276 = HEAP32[$275>>2]|0;
 $277 = (($274) + 4)|0;
 $278 = $277;
 $279 = HEAP32[$278>>2]|0;
 $280 = (gb + (8410208) | 0);
 $281 = $280;
 HEAP32[$281>>2] = $270;
 $282 = (($280) + 4)|0;
 $283 = $282;
 HEAP32[$283>>2] = $276;
 $284 = $sign;
 $285 = ($284|0)!=(0);
 if (!($285)) {
  $333 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $334 = (($333) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $334;
  STACKTOP = sp;return;
 }
 $286 = (gb + (8410208) | 0);
 $287 = $286;
 $288 = HEAP32[$287>>2]|0;
 $289 = (($286) + 4)|0;
 $290 = $289;
 $291 = HEAP32[$290>>2]|0;
 $292 = $288 ^ -1;
 $293 = $291 ^ -1;
 $294 = (gb + (8410208) | 0);
 $295 = $294;
 HEAP32[$295>>2] = $292;
 $296 = (($294) + 4)|0;
 $297 = $296;
 HEAP32[$297>>2] = $293;
 $298 = (gb + (8410216) | 0);
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = (($298) + 4)|0;
 $302 = $301;
 $303 = HEAP32[$302>>2]|0;
 $304 = ($300|0)!=(0);
 $305 = ($303|0)!=(0);
 $306 = $304 | $305;
 if ($306) {
  $319 = (gb + (8410216) | 0);
  $320 = $319;
  $321 = HEAP32[$320>>2]|0;
  $322 = (($319) + 4)|0;
  $323 = $322;
  $324 = HEAP32[$323>>2]|0;
  $325 = $321 ^ -1;
  $326 = $324 ^ -1;
  $327 = (_i64Add(($325|0),($326|0),1,0)|0);
  $328 = (getTempRet0() | 0);
  $329 = (gb + (8410216) | 0);
  $330 = $329;
  HEAP32[$330>>2] = $327;
  $331 = (($329) + 4)|0;
  $332 = $331;
  HEAP32[$332>>2] = $328;
  $333 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $334 = (($333) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $334;
  STACKTOP = sp;return;
 } else {
  $307 = (gb + (8410208) | 0);
  $308 = $307;
  $309 = HEAP32[$308>>2]|0;
  $310 = (($307) + 4)|0;
  $311 = $310;
  $312 = HEAP32[$311>>2]|0;
  $313 = (_i64Add(($309|0),($312|0),1,0)|0);
  $314 = (getTempRet0() | 0);
  $315 = (gb + (8410208) | 0);
  $316 = $315;
  HEAP32[$316>>2] = $313;
  $317 = (($315) + 4)|0;
  $318 = $317;
  HEAP32[$318>>2] = $314;
  $333 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $334 = (($333) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $334;
  STACKTOP = sp;return;
 }
}
function _DMULTU_847($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $op1 = 0, $op2 = 0, $op3 = 0, $op4 = 0, $result1 = 0, $result2 = 0, $result3 = 0, $result4 = 0, $temp1 = 0, $temp2 = 0, $temp3 = 0, $temp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op1 = sp + 88|0;
 $op2 = sp + 80|0;
 $op3 = sp + 72|0;
 $op4 = sp + 64|0;
 $result1 = sp + 56|0;
 $result2 = sp + 48|0;
 $result3 = sp + 40|0;
 $result4 = sp + 32|0;
 $temp1 = sp + 24|0;
 $temp2 = sp + 16|0;
 $temp3 = sp + 8|0;
 $temp4 = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $op1;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = $15 >>> 21;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Ashr(($21|0),($24|0),32)|0);
 $26 = (getTempRet0() | 0);
 $27 = $op2;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 $31 = $0;
 $32 = $31 >>> 16;
 $33 = $32 & 31;
 $34 = ((gb + (8409952) | 0) + ($33<<3)|0);
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $op3;
 $42 = $41;
 HEAP32[$42>>2] = $37;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = $0;
 $46 = $45 >>> 16;
 $47 = $46 & 31;
 $48 = ((gb + (8409952) | 0) + ($47<<3)|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (_bitshift64Ashr(($51|0),($54|0),32)|0);
 $56 = (getTempRet0() | 0);
 $57 = $op4;
 $58 = $57;
 HEAP32[$58>>2] = $55;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = 0;
 $61 = $op1;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $op3;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (___muldi3(($63|0),($66|0),($69|0),($72|0))|0);
 $74 = (getTempRet0() | 0);
 $75 = $temp1;
 $76 = $75;
 HEAP32[$76>>2] = $73;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = $temp1;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = $op1;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = $op4;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($91) + 4)|0;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (___muldi3(($87|0),($90|0),($93|0),($96|0))|0);
 $98 = (getTempRet0() | 0);
 $99 = (_i64Add(($84|0),0,($97|0),($98|0))|0);
 $100 = (getTempRet0() | 0);
 $101 = $temp2;
 $102 = $101;
 HEAP32[$102>>2] = $99;
 $103 = (($101) + 4)|0;
 $104 = $103;
 HEAP32[$104>>2] = $100;
 $105 = $op2;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = (($105) + 4)|0;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 $111 = $op3;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + 4)|0;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (___muldi3(($107|0),($110|0),($113|0),($116|0))|0);
 $118 = (getTempRet0() | 0);
 $119 = $temp3;
 $120 = $119;
 HEAP32[$120>>2] = $117;
 $121 = (($119) + 4)|0;
 $122 = $121;
 HEAP32[$122>>2] = $118;
 $123 = $temp3;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($123) + 4)|0;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = $op2;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + 4)|0;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = $op4;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = (($135) + 4)|0;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (___muldi3(($131|0),($134|0),($137|0),($140|0))|0);
 $142 = (getTempRet0() | 0);
 $143 = (_i64Add(($128|0),0,($141|0),($142|0))|0);
 $144 = (getTempRet0() | 0);
 $145 = $temp4;
 $146 = $145;
 HEAP32[$146>>2] = $143;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = $144;
 $149 = $temp1;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = (($149) + 4)|0;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = $result1;
 $156 = $155;
 HEAP32[$156>>2] = $151;
 $157 = (($155) + 4)|0;
 $158 = $157;
 HEAP32[$158>>2] = 0;
 $159 = $temp2;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = (($159) + 4)|0;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = $temp3;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = (($165) + 4)|0;
 $169 = $168;
 $170 = HEAP32[$169>>2]|0;
 $171 = (_i64Add(($161|0),($164|0),($167|0),0)|0);
 $172 = (getTempRet0() | 0);
 $173 = $result2;
 $174 = $173;
 HEAP32[$174>>2] = $171;
 $175 = (($173) + 4)|0;
 $176 = $175;
 HEAP32[$176>>2] = $172;
 $177 = $result2;
 $178 = $177;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($177) + 4)|0;
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = $temp4;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $186 = (($183) + 4)|0;
 $187 = $186;
 $188 = HEAP32[$187>>2]|0;
 $189 = (_i64Add(($182|0),0,($185|0),($188|0))|0);
 $190 = (getTempRet0() | 0);
 $191 = $result3;
 $192 = $191;
 HEAP32[$192>>2] = $189;
 $193 = (($191) + 4)|0;
 $194 = $193;
 HEAP32[$194>>2] = $190;
 $195 = $result3;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = (($195) + 4)|0;
 $199 = $198;
 $200 = HEAP32[$199>>2]|0;
 $201 = $result4;
 $202 = $201;
 HEAP32[$202>>2] = $200;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = 0;
 $205 = $result1;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = (($205) + 4)|0;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $211 = $result2;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (($211) + 4)|0;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = $210 | $213;
 $218 = (gb + (8410216) | 0);
 $219 = $218;
 HEAP32[$219>>2] = $207;
 $220 = (($218) + 4)|0;
 $221 = $220;
 HEAP32[$221>>2] = $217;
 $222 = $result3;
 $223 = $222;
 $224 = HEAP32[$223>>2]|0;
 $225 = (($222) + 4)|0;
 $226 = $225;
 $227 = HEAP32[$226>>2]|0;
 $228 = $result4;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (($228) + 4)|0;
 $232 = $231;
 $233 = HEAP32[$232>>2]|0;
 $234 = (gb + (8410208) | 0);
 $235 = $234;
 HEAP32[$235>>2] = $224;
 $236 = (($234) + 4)|0;
 $237 = $236;
 HEAP32[$237>>2] = $230;
 $238 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $239 = (($238) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $239;
 STACKTOP = sp;return;
}
function _DDIV_848($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=(0);
 $12 = ($10|0)!=(0);
 $13 = $11 | $12;
 if ($13) {
  $14 = $0;
  $15 = $14 >>> 21;
  $16 = $15 & 31;
  $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = $24 >>> 16;
  $26 = $25 & 31;
  $27 = ((gb + (8409952) | 0) + ($26<<3)|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (___divdi3(($20|0),($23|0),($30|0),($33|0))|0);
  $35 = (getTempRet0() | 0);
  $36 = (gb + (8410216) | 0);
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $40 = $0;
  $41 = $40 >>> 21;
  $42 = $41 & 31;
  $43 = ((gb + (8409952) | 0) + ($42<<3)|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $0;
  $51 = $50 >>> 16;
  $52 = $51 & 31;
  $53 = ((gb + (8409952) | 0) + ($52<<3)|0);
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (___remdi3(($46|0),($49|0),($56|0),($59|0))|0);
  $61 = (getTempRet0() | 0);
  $62 = (gb + (8410208) | 0);
  $63 = $62;
  HEAP32[$63>>2] = $60;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $61;
  $66 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $67 = (($66) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $67;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19248) | 0),$vararg_buffer);
  $66 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $67 = (($66) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $67;
  STACKTOP = sp;return;
 }
}
function _DDIVU_849($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=(0);
 $12 = ($10|0)!=(0);
 $13 = $11 | $12;
 if ($13) {
  $14 = $0;
  $15 = $14 >>> 21;
  $16 = $15 & 31;
  $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = $24 >>> 16;
  $26 = $25 & 31;
  $27 = ((gb + (8409952) | 0) + ($26<<3)|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (___udivdi3(($20|0),($23|0),($30|0),($33|0))|0);
  $35 = (getTempRet0() | 0);
  $36 = (gb + (8410216) | 0);
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $40 = $0;
  $41 = $40 >>> 21;
  $42 = $41 & 31;
  $43 = ((gb + (8409952) | 0) + ($42<<3)|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $0;
  $51 = $50 >>> 16;
  $52 = $51 & 31;
  $53 = ((gb + (8409952) | 0) + ($52<<3)|0);
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (___uremdi3(($46|0),($49|0),($56|0),($59|0))|0);
  $61 = (getTempRet0() | 0);
  $62 = (gb + (8410208) | 0);
  $63 = $62;
  HEAP32[$63>>2] = $60;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $61;
  $66 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $67 = (($66) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $67;
  STACKTOP = sp;return;
 } else {
  _DebugMessage(1,(gb + (19229) | 0),$vararg_buffer);
  $66 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $67 = (($66) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $67;
  STACKTOP = sp;return;
 }
}
function _ADD_850($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) + ($10))|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = $0;
 $15 = $14 >>> 11;
 $16 = $15 & 31;
 $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _ADDU_851($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) + ($10))|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = $0;
 $15 = $14 >>> 11;
 $16 = $15 & 31;
 $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _SUB_852($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) - ($10))|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = $0;
 $15 = $14 >>> 11;
 $16 = $15 & 31;
 $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _SUBU_853($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) - ($10))|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = $0;
 $15 = $14 >>> 11;
 $16 = $15 & 31;
 $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _AND_854($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $7 & $17;
 $22 = $10 & $20;
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _OR_855($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $7 | $17;
 $22 = $10 | $20;
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _XOR_856($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $7 ^ $17;
 $22 = $10 ^ $20;
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _NOR_857($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $7 | $17;
 $22 = $10 | $20;
 $23 = $21 ^ -1;
 $24 = $22 ^ -1;
 $25 = $0;
 $26 = $25 >>> 11;
 $27 = $26 & 31;
 $28 = ((gb + (8409952) | 0) + ($27<<3)|0);
 $29 = $28;
 $30 = $29;
 HEAP32[$30>>2] = $23;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $24;
 $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $34 = (($33) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
 STACKTOP = sp;return;
}
function _SLT_858($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($10|0)<($20|0);
 $22 = ($7>>>0)<($17>>>0);
 $23 = ($10|0)==($20|0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 $26 = $0;
 $27 = $26 >>> 11;
 $28 = $27 & 31;
 $29 = ((gb + (8409952) | 0) + ($28<<3)|0);
 if ($25) {
  $30 = $29;
  $31 = $30;
  HEAP32[$31>>2] = 1;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = 0;
  $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $39 = (($38) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $34 = $29;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = 0;
  $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $39 = (($38) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  STACKTOP = sp;return;
 }
}
function _SLTU_859($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($10>>>0)<($20>>>0);
 $22 = ($7>>>0)<($17>>>0);
 $23 = ($10|0)==($20|0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 $26 = $0;
 $27 = $26 >>> 11;
 $28 = $27 & 31;
 $29 = ((gb + (8409952) | 0) + ($28<<3)|0);
 if ($25) {
  $30 = $29;
  $31 = $30;
  HEAP32[$31>>2] = 1;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = 0;
  $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $39 = (($38) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $34 = $29;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = 0;
  $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $39 = (($38) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  STACKTOP = sp;return;
 }
}
function _DADD_860($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Add(($7|0),($10|0),($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _DADDU_861($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Add(($7|0),($10|0),($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _DSUB_862($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Subtract(($7|0),($10|0),($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _DSUBU_863($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Subtract(($7|0),($10|0),($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = $0;
 $24 = $23 >>> 11;
 $25 = $24 & 31;
 $26 = ((gb + (8409952) | 0) + ($25<<3)|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $21;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $22;
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _TEQ_864($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)==($17|0);
 $22 = ($10|0)==($20|0);
 $23 = $21 & $22;
 if ($23) {
  _DebugMessage(1,(gb + (19207) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $25 = (($24) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $25;
 STACKTOP = sp;return;
}
function _DSLL_865($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (_bitshift64Shl(($7|0),($10|0),($13|0))|0);
 $15 = (getTempRet0() | 0);
 $16 = $0;
 $17 = $16 >>> 11;
 $18 = $17 & 31;
 $19 = ((gb + (8409952) | 0) + ($18<<3)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = $14;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $15;
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $25 = (($24) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $25;
 STACKTOP = sp;return;
}
function _DSRL_866($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (_bitshift64Lshr(($7|0),($10|0),($13|0))|0);
 $15 = (getTempRet0() | 0);
 $16 = $0;
 $17 = $16 >>> 11;
 $18 = $17 & 31;
 $19 = ((gb + (8409952) | 0) + ($18<<3)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = $14;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $15;
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $25 = (($24) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $25;
 STACKTOP = sp;return;
}
function _DSRA_867($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (_bitshift64Ashr(($7|0),($10|0),($13|0))|0);
 $15 = (getTempRet0() | 0);
 $16 = $0;
 $17 = $16 >>> 11;
 $18 = $17 & 31;
 $19 = ((gb + (8409952) | 0) + ($18<<3)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = $14;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $15;
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $25 = (($24) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $25;
 STACKTOP = sp;return;
}
function _DSLL32_868($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (32 + ($13))|0;
 $15 = (_bitshift64Shl(($7|0),($10|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = $0;
 $18 = $17 >>> 11;
 $19 = $18 & 31;
 $20 = ((gb + (8409952) | 0) + ($19<<3)|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $26;
 STACKTOP = sp;return;
}
function _DSRL32_869($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (32 + ($13))|0;
 $15 = (_bitshift64Lshr(($7|0),($10|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = $0;
 $18 = $17 >>> 11;
 $19 = $18 & 31;
 $20 = ((gb + (8409952) | 0) + ($19<<3)|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $26;
 STACKTOP = sp;return;
}
function _DSRA32_870($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 6;
 $13 = $12 & 31;
 $14 = (32 + ($13))|0;
 $15 = (_bitshift64Ashr(($7|0),($10|0),($14|0))|0);
 $16 = (getTempRet0() | 0);
 $17 = $0;
 $18 = $17 >>> 11;
 $19 = $18 & 31;
 $20 = ((gb + (8409952) | 0) + ($19<<3)|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $15;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $16;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $26;
 STACKTOP = sp;return;
}
function _RESERVED_871($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $2 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $3 = (_fast_mem_access($2)|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 _DebugMessage(1,(gb + (19184) | 0),$vararg_buffer);
 HEAP32[(gb + (10523004) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _BLTZ_IDLE_872($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = $take_jump;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $25 = $0;
  _BLTZ_873($25);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $15 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $17 = (($15) - ($16))|0;
 $skip = $17;
 $18 = $skip;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = $skip;
  $21 = $20 & -4;
  $22 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $23 = (($22) + ($21))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $24 = $0;
  _BLTZ_873($24);
  STACKTOP = sp;return;
 }
}
function _BLTZ_873($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = $0;
 $15 = $14&65535;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + 1)|0;
 $18 = $17<<2;
 $19 = (($13) + ($18))|0;
 $jump_target = $19;
 $link_register = (gb + (8409952) | 0);
 $20 = $link_register;
 $21 = ($20|0)!=((gb + (8409952) | 0)|0);
 if ($21) {
  $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $23 = (($22) + 8)|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $26 = $link_register;
  $27 = $26;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $25;
 }
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $33 = $take_jump;
 $34 = ($33|0)==(0);
 $35 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $36 = ($35|0)!=(0);
 $or$cond = $34 | $36;
 if (!($or$cond)) {
  $37 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $37;
 }
 $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $38;
 $39 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $40 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $41 = ($39>>>0)<=($40>>>0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZ_IDLE_874($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGEZ_875($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGEZ_875($28);
  STACKTOP = sp;return;
 }
}
function _BGEZ_875($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $36 = (($35) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $37 = $take_jump;
 $38 = ($37|0)==(0);
 $39 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond = $38 | $40;
 if (!($or$cond)) {
  $41 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $41;
 }
 $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $42;
 $43 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $44 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $45 = ($43>>>0)<=($44>>>0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZL_IDLE_876($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = $take_jump;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $25 = $0;
  _BLTZL_877($25);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $15 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $17 = (($15) - ($16))|0;
 $skip = $17;
 $18 = $skip;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = $skip;
  $21 = $20 & -4;
  $22 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $23 = (($22) + ($21))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $24 = $0;
  _BLTZL_877($24);
  STACKTOP = sp;return;
 }
}
function _BLTZL_877($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = $0;
 $15 = $14&65535;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + 1)|0;
 $18 = $17<<2;
 $19 = (($13) + ($18))|0;
 $jump_target = $19;
 $link_register = (gb + (8409952) | 0);
 $20 = $link_register;
 $21 = ($20|0)!=((gb + (8409952) | 0)|0);
 if ($21) {
  $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $23 = (($22) + 8)|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $26 = $link_register;
  $27 = $26;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $25;
 }
 $31 = $take_jump;
 $32 = ($31|0)!=(0);
 $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($32) {
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $35 = $take_jump;
  $36 = ($35|0)==(0);
  $37 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $38 = ($37|0)!=(0);
  $or$cond = $36 | $38;
  if (!($or$cond)) {
   $39 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  }
 } else {
  $40 = (($33) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
  _cp0_update_count();
 }
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $41;
 $42 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $43 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $44 = ($42>>>0)<=($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZL_IDLE_878($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGEZL_879($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGEZL_879($28);
  STACKTOP = sp;return;
 }
}
function _BGEZL_879($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($36) {
  $38 = (($37) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $39 = $take_jump;
  $40 = ($39|0)==(0);
  $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $42 = ($41|0)!=(0);
  $or$cond = $40 | $42;
  if (!($or$cond)) {
   $43 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
  }
 } else {
  $44 = (($37) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
  _cp0_update_count();
 }
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $45;
 $46 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $47 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $48 = ($46>>>0)<=($47>>>0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZAL_IDLE_880($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = $take_jump;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $25 = $0;
  _BLTZAL_881($25);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $15 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $17 = (($15) - ($16))|0;
 $skip = $17;
 $18 = $skip;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = $skip;
  $21 = $20 & -4;
  $22 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $23 = (($22) + ($21))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $24 = $0;
  _BLTZAL_881($24);
  STACKTOP = sp;return;
 }
}
function _BLTZAL_881($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = $0;
 $15 = $14&65535;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + 1)|0;
 $18 = $17<<2;
 $19 = (($13) + ($18))|0;
 $jump_target = $19;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $20 = $link_register;
 $21 = ($20|0)!=((gb + (8409952) | 0)|0);
 if ($21) {
  $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $23 = (($22) + 8)|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $26 = $link_register;
  $27 = $26;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $25;
 }
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $33 = $take_jump;
 $34 = ($33|0)==(0);
 $35 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $36 = ($35|0)!=(0);
 $or$cond = $34 | $36;
 if (!($or$cond)) {
  $37 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $37;
 }
 $38 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $38;
 $39 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $40 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $41 = ($39>>>0)<=($40>>>0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZAL_IDLE_882($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGEZAL_883($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGEZAL_883($28);
  STACKTOP = sp;return;
 }
}
function _BGEZAL_883($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $36 = (($35) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $37 = $take_jump;
 $38 = ($37|0)==(0);
 $39 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond = $38 | $40;
 if (!($or$cond)) {
  $41 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $41;
 }
 $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $42;
 $43 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $44 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $45 = ($43>>>0)<=($44>>>0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLTZALL_IDLE_884($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = $take_jump;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $25 = $0;
  _BLTZALL_885($25);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $15 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $17 = (($15) - ($16))|0;
 $skip = $17;
 $18 = $skip;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = $skip;
  $21 = $20 & -4;
  $22 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $23 = (($22) + ($21))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $24 = $0;
  _BLTZALL_885($24);
  STACKTOP = sp;return;
 }
}
function _BLTZALL_885($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11&1;
 $take_jump = $12;
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = $0;
 $15 = $14&65535;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + 1)|0;
 $18 = $17<<2;
 $19 = (($13) + ($18))|0;
 $jump_target = $19;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $20 = $link_register;
 $21 = ($20|0)!=((gb + (8409952) | 0)|0);
 if ($21) {
  $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $23 = (($22) + 8)|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $26 = $link_register;
  $27 = $26;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $25;
 }
 $31 = $take_jump;
 $32 = ($31|0)!=(0);
 $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($32) {
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $35 = $take_jump;
  $36 = ($35|0)==(0);
  $37 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $38 = ($37|0)!=(0);
  $or$cond = $36 | $38;
  if (!($or$cond)) {
   $39 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $39;
  }
 } else {
  $40 = (($33) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
  _cp0_update_count();
 }
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $41;
 $42 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $43 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $44 = ($42>>>0)<=($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGEZALL_IDLE_886($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGEZALL_887($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGEZALL_887($28);
  STACKTOP = sp;return;
 }
}
function _BGEZALL_887($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($36) {
  $38 = (($37) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $39 = $take_jump;
  $40 = ($39|0)==(0);
  $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $42 = ($41|0)!=(0);
  $or$cond = $40 | $42;
  if (!($or$cond)) {
   $43 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
  }
 } else {
  $44 = (($37) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
  _cp0_update_count();
 }
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $45;
 $46 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $47 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $48 = ($46>>>0)<=($47>>>0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _J_IDLE_888($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 _cp0_update_count();
 $1 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $2 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $3 = (($1) - ($2))|0;
 $skip = $3;
 $4 = $skip;
 $5 = ($4|0)>(3);
 if ($5) {
  $6 = $skip;
  $7 = $6 & -4;
  $8 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $9 = (($8) + ($7))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  _J_889($10);
  STACKTOP = sp;return;
 }
}
function _J_889($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 $1 = $0;
 $2 = $1 & 67108863;
 $3 = $2 << 2;
 $4 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $5 = (($4) + 4)|0;
 $6 = $5 & -268435456;
 $7 = $3 | $6;
 $jump_target = $7;
 $link_register = (gb + (8409952) | 0);
 $8 = $link_register;
 $9 = ($8|0)!=((gb + (8409952) | 0)|0);
 if ($9) {
  $10 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $11 = (($10) + 8)|0;
  $12 = ($11|0)<(0);
  $13 = $12 << 31 >> 31;
  $14 = $link_register;
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $11;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $13;
 }
 $19 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $20 = (($19) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $20;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $21 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 }
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $24;
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = ($25>>>0)<=($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _JAL_IDLE_890($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 _cp0_update_count();
 $1 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $2 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $3 = (($1) - ($2))|0;
 $skip = $3;
 $4 = $skip;
 $5 = ($4|0)>(3);
 if ($5) {
  $6 = $skip;
  $7 = $6 & -4;
  $8 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $9 = (($8) + ($7))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  _JAL_891($10);
  STACKTOP = sp;return;
 }
}
function _JAL_891($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $take_jump = 1;
 $1 = $0;
 $2 = $1 & 67108863;
 $3 = $2 << 2;
 $4 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $5 = (($4) + 4)|0;
 $6 = $5 & -268435456;
 $7 = $3 | $6;
 $jump_target = $7;
 $link_register = ((((gb + (8409952) | 0)) + 248|0));
 $8 = $link_register;
 $9 = ($8|0)!=((gb + (8409952) | 0)|0);
 if ($9) {
  $10 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $11 = (($10) + 8)|0;
  $12 = ($11|0)<(0);
  $13 = $12 << 31 >> 31;
  $14 = $link_register;
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $11;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $13;
 }
 $19 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $20 = (($19) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $20;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $21 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 }
 $24 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $24;
 $25 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $27 = ($25>>>0)<=($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BEQ_IDLE_892($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)==($17|0);
 $22 = ($10|0)==($20|0);
 $23 = $21 & $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $37 = $0;
  _BEQ_893($37);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = (($27) - ($28))|0;
 $skip = $29;
 $30 = $skip;
 $31 = ($30|0)>(3);
 if ($31) {
  $32 = $skip;
  $33 = $32 & -4;
  $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $35 = (($34) + ($33))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $0;
  _BEQ_893($36);
  STACKTOP = sp;return;
 }
}
function _BEQ_893($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)==($17|0);
 $22 = ($10|0)==($20|0);
 $23 = $21 & $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = $0;
 $27 = $26&65535;
 $28 = $27 << 16 >> 16;
 $29 = (($28) + 1)|0;
 $30 = $29<<2;
 $31 = (($25) + ($30))|0;
 $jump_target = $31;
 $link_register = (gb + (8409952) | 0);
 $32 = $link_register;
 $33 = ($32|0)!=((gb + (8409952) | 0)|0);
 if ($33) {
  $34 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $35 = (($34) + 8)|0;
  $36 = ($35|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = $link_register;
  $39 = $38;
  $40 = $39;
  HEAP32[$40>>2] = $35;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $37;
 }
 $43 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $44 = (($43) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $45 = $take_jump;
 $46 = ($45|0)==(0);
 $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $48 = ($47|0)!=(0);
 $or$cond = $46 | $48;
 if (!($or$cond)) {
  $49 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $49;
 }
 $50 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNE_IDLE_894($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)!=($17|0);
 $22 = ($10|0)!=($20|0);
 $23 = $21 | $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $37 = $0;
  _BNE_895($37);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = (($27) - ($28))|0;
 $skip = $29;
 $30 = $skip;
 $31 = ($30|0)>(3);
 if ($31) {
  $32 = $skip;
  $33 = $32 & -4;
  $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $35 = (($34) + ($33))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $0;
  _BNE_895($36);
  STACKTOP = sp;return;
 }
}
function _BNE_895($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)!=($17|0);
 $22 = ($10|0)!=($20|0);
 $23 = $21 | $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = $0;
 $27 = $26&65535;
 $28 = $27 << 16 >> 16;
 $29 = (($28) + 1)|0;
 $30 = $29<<2;
 $31 = (($25) + ($30))|0;
 $jump_target = $31;
 $link_register = (gb + (8409952) | 0);
 $32 = $link_register;
 $33 = ($32|0)!=((gb + (8409952) | 0)|0);
 if ($33) {
  $34 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $35 = (($34) + 8)|0;
  $36 = ($35|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = $link_register;
  $39 = $38;
  $40 = $39;
  HEAP32[$40>>2] = $35;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $37;
 }
 $43 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $44 = (($43) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $45 = $take_jump;
 $46 = ($45|0)==(0);
 $47 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $48 = ($47|0)!=(0);
 $or$cond = $46 | $48;
 if (!($or$cond)) {
  $49 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $49;
 }
 $50 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $50;
 $51 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $52 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $53 = ($51>>>0)<=($52>>>0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZ_IDLE_896($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = ($7>>>0)<=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BLEZ_897($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BLEZ_897($28);
  STACKTOP = sp;return;
 }
}
function _BLEZ_897($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = ($7>>>0)<=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $36 = (($35) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $37 = $take_jump;
 $38 = ($37|0)==(0);
 $39 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond = $38 | $40;
 if (!($or$cond)) {
  $41 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $41;
 }
 $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $42;
 $43 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $44 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $45 = ($43>>>0)<=($44>>>0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZ_IDLE_898($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGTZ_899($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGTZ_899($28);
  STACKTOP = sp;return;
 }
}
function _BGTZ_899($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $36 = (($35) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $36;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $37 = $take_jump;
 $38 = ($37|0)==(0);
 $39 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond = $38 | $40;
 if (!($or$cond)) {
  $41 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $41;
 }
 $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $42;
 $43 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $44 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $45 = ($43>>>0)<=($44>>>0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _ADDI_900($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = $0;
 $13 = $12 >>> 16;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $21 = (($20) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 STACKTOP = sp;return;
}
function _ADDIU_901($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = $0;
 $13 = $12 >>> 16;
 $14 = $13 & 31;
 $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $9;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $11;
 $20 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $21 = (($20) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $21;
 STACKTOP = sp;return;
}
function _SLTI_902($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($10|0)<($15|0);
 $17 = ($7>>>0)<($13>>>0);
 $18 = ($10|0)==($15|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = $0;
 $22 = $21 >>> 16;
 $23 = $22 & 31;
 $24 = ((gb + (8409952) | 0) + ($23<<3)|0);
 if ($20) {
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = 1;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  STACKTOP = sp;return;
 } else {
  $29 = $24;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  STACKTOP = sp;return;
 }
}
function _SLTIU_903($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($10>>>0)<($15>>>0);
 $17 = ($7>>>0)<($13>>>0);
 $18 = ($10|0)==($15|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = $0;
 $22 = $21 >>> 16;
 $23 = $22 & 31;
 $24 = ((gb + (8409952) | 0) + ($23<<3)|0);
 if ($20) {
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = 1;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  STACKTOP = sp;return;
 } else {
  $29 = $24;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $34 = (($33) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  STACKTOP = sp;return;
 }
}
function _ANDI_904($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $7 & $13;
 $15 = $0;
 $16 = $15 >>> 16;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _ORI_905($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $7 | $13;
 $15 = $0;
 $16 = $15 >>> 16;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $10;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _XORI_906($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $7 ^ $13;
 $15 = $0;
 $16 = $15 >>> 16;
 $17 = $16 & 31;
 $18 = ((gb + (8409952) | 0) + ($17<<3)|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $10;
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _LUI_907($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 << 16 >> 16;
 $4 = $3 << 16;
 $5 = ($4|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = $0;
 $8 = $7 >>> 16;
 $9 = $8 & 31;
 $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $4;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $6;
 $15 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $16 = (($15) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $16;
 STACKTOP = sp;return;
}
function _MFC0_908($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 switch ($3|0) {
 case 1:  {
  _DebugMessage(1,(gb + (19128) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
  break;
 }
 case 9:  {
  _cp0_update_count();
  label = 4;
  break;
 }
 default: {
  label = 4;
 }
 }
 if ((label|0) == 4) {
  $4 = $0;
  $5 = $4 >>> 11;
  $6 = $5 & 31;
  $7 = ((gb + (14717332) | 0) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<(0);
  $10 = $9 << 31 >> 31;
  $11 = $0;
  $12 = $11 >>> 16;
  $13 = $12 & 31;
  $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $8;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $10;
 }
 $19 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $20 = (($19) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $20;
 STACKTOP = sp;return;
}
function _MTC0_909($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = $0;
   $5 = $4 >>> 16;
   $6 = $5 & 31;
   $7 = ((gb + (8409952) | 0) + ($6<<3)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & -2147483585;
   HEAP32[(gb + (14717332) | 0)>>2] = $9;
   $10 = HEAP32[(gb + (14717332) | 0)>>2]|0;
   $11 = $10 & 63;
   $12 = ($11>>>0)>(31);
   if ($12) {
    _DebugMessage(1,(gb + (18980) | 0),$vararg_buffer);
    HEAP32[(gb + (10523004) | 0)>>2] = 1;
   }
   break;
  }
  case 15: case 8: case 1:  {
   break;
  }
  case 2:  {
   $13 = $0;
   $14 = $13 >>> 16;
   $15 = $14 & 31;
   $16 = ((gb + (8409952) | 0) + ($15<<3)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 1073741823;
   HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2] = $18;
   break;
  }
  case 3:  {
   $19 = $0;
   $20 = $19 >>> 16;
   $21 = $20 & 31;
   $22 = ((gb + (8409952) | 0) + ($21<<3)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & 1073741823;
   HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2] = $24;
   break;
  }
  case 4:  {
   $25 = $0;
   $26 = $25 >>> 16;
   $27 = $26 & 31;
   $28 = ((gb + (8409952) | 0) + ($27<<3)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & -8388608;
   $31 = HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2]|0;
   $32 = $31 & 8388592;
   $33 = $30 | $32;
   HEAP32[((((gb + (14717332) | 0)) + 16|0))>>2] = $33;
   break;
  }
  case 5:  {
   $34 = $0;
   $35 = $34 >>> 16;
   $36 = $35 & 31;
   $37 = ((gb + (8409952) | 0) + ($36<<3)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 33546240;
   HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2] = $39;
   break;
  }
  case 6:  {
   $40 = $0;
   $41 = $40 >>> 16;
   $42 = $41 & 31;
   $43 = ((gb + (8409952) | 0) + ($42<<3)|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2] = $44;
   HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2] = 31;
   break;
  }
  case 9:  {
   _cp0_update_count();
   HEAP32[(gb + (14717724) | 0)>>2] = 1;
   $45 = HEAP32[(gb + (10523016) | 0)>>2]|0;
   $46 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $47 = ($45>>>0)<=($46>>>0);
   if ($47) {
    _gen_interupt();
   }
   HEAP32[(gb + (14717724) | 0)>>2] = 0;
   $48 = $0;
   $49 = $48 >>> 16;
   $50 = $49 & 31;
   $51 = ((gb + (8409952) | 0) + ($50<<3)|0);
   $52 = HEAP32[$51>>2]|0;
   _translate_event_queue($52);
   $53 = $0;
   $54 = $53 >>> 16;
   $55 = $54 & 31;
   $56 = ((gb + (8409952) | 0) + ($55<<3)|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $57;
   break;
  }
  case 10:  {
   $58 = $0;
   $59 = $58 >>> 16;
   $60 = $59 & 31;
   $61 = ((gb + (8409952) | 0) + ($60<<3)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 & -7937;
   HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2] = $63;
   break;
  }
  case 11:  {
   _cp0_update_count();
   _remove_event(2);
   $64 = $0;
   $65 = $64 >>> 16;
   $66 = $65 & 31;
   $67 = ((gb + (8409952) | 0) + ($66<<3)|0);
   $68 = HEAP32[$67>>2]|0;
   _add_interupt_event_count(2,$68);
   $69 = $0;
   $70 = $69 >>> 16;
   $71 = $70 & 31;
   $72 = ((gb + (8409952) | 0) + ($71<<3)|0);
   $73 = HEAP32[$72>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 44|0))>>2] = $73;
   $74 = HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2]|0;
   $75 = $74 & -32769;
   HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $75;
   break;
  }
  case 12:  {
   $76 = $0;
   $77 = $76 >>> 16;
   $78 = $77 & 31;
   $79 = ((gb + (8409952) | 0) + ($78<<3)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 & 67108864;
   $82 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
   $83 = $82 & 67108864;
   $84 = ($81|0)!=($83|0);
   if ($84) {
    $85 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
    $86 = $0;
    $87 = $86 >>> 16;
    $88 = $87 & 31;
    $89 = ((gb + (8409952) | 0) + ($88<<3)|0);
    $90 = HEAP32[$89>>2]|0;
    _shuffle_fpr_data($85,$90);
    $91 = $0;
    $92 = $91 >>> 16;
    $93 = $92 & 31;
    $94 = ((gb + (8409952) | 0) + ($93<<3)|0);
    $95 = HEAP32[$94>>2]|0;
    _set_fpr_pointers($95);
   }
   $96 = $0;
   $97 = $96 >>> 16;
   $98 = $97 & 31;
   $99 = ((gb + (8409952) | 0) + ($98<<3)|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $100;
   _cp0_update_count();
   $101 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
   $102 = (($101) + 4)|0;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $102;
   _check_interupt();
   HEAP32[(gb + (14717724) | 0)>>2] = 1;
   $103 = HEAP32[(gb + (10523016) | 0)>>2]|0;
   $104 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
   $105 = ($103>>>0)<=($104>>>0);
   if ($105) {
    _gen_interupt();
   }
   HEAP32[(gb + (14717724) | 0)>>2] = 0;
   $106 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
   $107 = (($106) + -4)|0;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $107;
   break;
  }
  case 13:  {
   $108 = $0;
   $109 = $108 >>> 16;
   $110 = $109 & 31;
   $111 = ((gb + (8409952) | 0) + ($110<<3)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(0);
   if ($113) {
    _DebugMessage(1,(gb + (19040) | 0),$vararg_buffer1);
    HEAP32[(gb + (10523004) | 0)>>2] = 1;
    break L1;
   } else {
    $114 = $0;
    $115 = $114 >>> 16;
    $116 = $115 & 31;
    $117 = ((gb + (8409952) | 0) + ($116<<3)|0);
    $118 = HEAP32[$117>>2]|0;
    HEAP32[((((gb + (14717332) | 0)) + 52|0))>>2] = $118;
    break L1;
   }
   break;
  }
  case 14:  {
   $119 = $0;
   $120 = $119 >>> 16;
   $121 = $120 & 31;
   $122 = ((gb + (8409952) | 0) + ($121<<3)|0);
   $123 = HEAP32[$122>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2] = $123;
   break;
  }
  case 16:  {
   $124 = $0;
   $125 = $124 >>> 16;
   $126 = $125 & 31;
   $127 = ((gb + (8409952) | 0) + ($126<<3)|0);
   $128 = HEAP32[$127>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 64|0))>>2] = $128;
   break;
  }
  case 18:  {
   $129 = $0;
   $130 = $129 >>> 16;
   $131 = $130 & 31;
   $132 = ((gb + (8409952) | 0) + ($131<<3)|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 72|0))>>2] = $133;
   break;
  }
  case 19:  {
   $134 = $0;
   $135 = $134 >>> 16;
   $136 = $135 & 31;
   $137 = ((gb + (8409952) | 0) + ($136<<3)|0);
   $138 = HEAP32[$137>>2]|0;
   HEAP32[((((gb + (14717332) | 0)) + 76|0))>>2] = $138;
   break;
  }
  case 28:  {
   $139 = $0;
   $140 = $139 >>> 16;
   $141 = $140 & 31;
   $142 = ((gb + (8409952) | 0) + ($141<<3)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 & 268435392;
   HEAP32[((((gb + (14717332) | 0)) + 112|0))>>2] = $144;
   break;
  }
  case 29:  {
   HEAP32[((((gb + (14717332) | 0)) + 116|0))>>2] = 0;
   break;
  }
  default: {
   $145 = $0;
   $146 = $145 >>> 11;
   $147 = $146 & 31;
   HEAP32[$vararg_buffer3>>2] = $147;
   _DebugMessage(1,(gb + (19105) | 0),$vararg_buffer3);
   HEAP32[(gb + (10523004) | 0)>>2] = 1;
  }
  }
 } while(0);
 $148 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $149 = (($148) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $149;
 STACKTOP = sp;return;
}
function _TLBR_910($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $2 = $1 & 31;
 $index = $2;
 $3 = $index;
 $4 = ((gb + (23106792) | 0) + (($3*52)|0)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = $6 << 13;
 HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2] = $7;
 $8 = $index;
 $9 = ((gb + (23106792) | 0) + (($8*52)|0)|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 13;
 $13 = $index;
 $14 = ((gb + (23106792) | 0) + (($13*52)|0)|0);
 $15 = ((($14)) + 9|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $12 | $17;
 HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2] = $18;
 $19 = $index;
 $20 = ((gb + (23106792) | 0) + (($19*52)|0)|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 << 6;
 $24 = $index;
 $25 = ((gb + (23106792) | 0) + (($24*52)|0)|0);
 $26 = ((($25)) + 16|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = $28 << 3;
 $30 = $23 | $29;
 $31 = $index;
 $32 = ((gb + (23106792) | 0) + (($31*52)|0)|0);
 $33 = ((($32)) + 17|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = $35 << 2;
 $37 = $30 | $36;
 $38 = $index;
 $39 = ((gb + (23106792) | 0) + (($38*52)|0)|0);
 $40 = ((($39)) + 18|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 << 24 >> 24;
 $43 = $42 << 1;
 $44 = $37 | $43;
 $45 = $index;
 $46 = ((gb + (23106792) | 0) + (($45*52)|0)|0);
 $47 = ((($46)) + 8|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48 << 24 >> 24;
 $50 = $44 | $49;
 HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2] = $50;
 $51 = $index;
 $52 = ((gb + (23106792) | 0) + (($51*52)|0)|0);
 $53 = ((($52)) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 << 6;
 $56 = $index;
 $57 = ((gb + (23106792) | 0) + (($56*52)|0)|0);
 $58 = ((($57)) + 24|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59 << 24 >> 24;
 $61 = $60 << 3;
 $62 = $55 | $61;
 $63 = $index;
 $64 = ((gb + (23106792) | 0) + (($63*52)|0)|0);
 $65 = ((($64)) + 25|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66 << 24 >> 24;
 $68 = $67 << 2;
 $69 = $62 | $68;
 $70 = $index;
 $71 = ((gb + (23106792) | 0) + (($70*52)|0)|0);
 $72 = ((($71)) + 26|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73 << 24 >> 24;
 $75 = $74 << 1;
 $76 = $69 | $75;
 $77 = $index;
 $78 = ((gb + (23106792) | 0) + (($77*52)|0)|0);
 $79 = ((($78)) + 8|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80 << 24 >> 24;
 $82 = $76 | $81;
 HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2] = $82;
 $83 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $84 = (($83) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $84;
 STACKTOP = sp;return;
}
function _TLBWI_911($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $2 = $1 & 63;
 _TLBWrite_1120($2);
 $3 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $4 = (($3) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $4;
 STACKTOP = sp;return;
}
function _TLBWR_912($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 _cp0_update_count();
 $1 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $2 = (($1>>>0) / 2)&-1;
 $3 = HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2]|0;
 $4 = (32 - ($3))|0;
 $5 = (($2>>>0) % ($4>>>0))&-1;
 $6 = HEAP32[((((gb + (14717332) | 0)) + 24|0))>>2]|0;
 $7 = (($5) + ($6))|0;
 HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2] = $7;
 $8 = HEAP32[((((gb + (14717332) | 0)) + 4|0))>>2]|0;
 _TLBWrite_1120($8);
 $9 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $10 = (($9) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $10;
 STACKTOP = sp;return;
}
function _TLBP_913($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717332) | 0)>>2]|0;
 $2 = $1 | -2147483648;
 HEAP32[(gb + (14717332) | 0)>>2] = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(32);
  if (!($4)) {
   label = 8;
   break;
  }
  $5 = $i;
  $6 = ((gb + (23106792) | 0) + (($5*52)|0)|0);
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = ((gb + (23106792) | 0) + (($9*52)|0)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = $12 ^ -1;
  $14 = $8 & $13;
  $15 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
  $16 = $15 & -8192;
  $17 = $16 >>> 13;
  $18 = $i;
  $19 = ((gb + (23106792) | 0) + (($18*52)|0)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = $21 ^ -1;
  $23 = $17 & $22;
  $24 = ($14|0)==($23|0);
  if ($24) {
   $25 = $i;
   $26 = ((gb + (23106792) | 0) + (($25*52)|0)|0);
   $27 = ((($26)) + 8|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(0);
   if ($30) {
    break;
   }
   $31 = $i;
   $32 = ((gb + (23106792) | 0) + (($31*52)|0)|0);
   $33 = ((($32)) + 9|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
   $37 = $36 & 255;
   $38 = ($35|0)==($37|0);
   if ($38) {
    break;
   }
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 8) {
  $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $43 = (($42) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
  STACKTOP = sp;return;
 }
 $39 = $i;
 HEAP32[(gb + (14717332) | 0)>>2] = $39;
 $42 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $43 = (($42) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
 STACKTOP = sp;return;
}
function _ERET_914($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 _cp0_update_count();
 $1 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 if ($3) {
  _DebugMessage(1,(gb + (18966) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 } else {
  $4 = HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2]|0;
  $5 = $4 & -3;
  HEAP32[((((gb + (14717332) | 0)) + 48|0))>>2] = $5;
  $6 = HEAP32[((((gb + (14717332) | 0)) + 56|0))>>2]|0;
  _generic_jump_to($6);
 }
 HEAP32[(gb + (10522032) | 0)>>2] = 0;
 _check_interupt();
 $7 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $7;
 $8 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $9 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $10 = ($8>>>0)<=($9>>>0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _MFC1_915($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $8;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $10;
 $19 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $20 = (($19) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $20;
 STACKTOP = sp;return;
}
function _DMFC1_916($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = $14 >>> 16;
 $16 = $15 & 31;
 $17 = ((gb + (8409952) | 0) + ($16<<3)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $10;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $13;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _CFC1_917($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ($5|0)==(31);
 if ($6) {
  $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
  $8 = ($7|0)<(0);
  $8 << 31 >> 31;
  $9 = $0;
  $10 = $9 >>> 16;
  $11 = $10 & 31;
  $12 = ((gb + (8409952) | 0) + ($11<<3)|0);
  HEAP32[$12>>2] = $7;
 }
 $13 = $0;
 $14 = $13 >>> 11;
 $15 = $14 & 31;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = HEAP32[(gb + (14717716) | 0)>>2]|0;
  $18 = ($17|0)<(0);
  $18 << 31 >> 31;
  $19 = $0;
  $20 = $19 >>> 16;
  $21 = $20 & 31;
  $22 = ((gb + (8409952) | 0) + ($21<<3)|0);
  HEAP32[$22>>2] = $17;
 }
 $23 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $24 = (($23) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $24;
 STACKTOP = sp;return;
}
function _MTC1_918($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 16;
 $5 = $4 & 31;
 $6 = ((gb + (8409952) | 0) + ($5<<3)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 11;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $7;
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _DMTC1_919($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 16;
 $5 = $4 & 31;
 $6 = ((gb + (8409952) | 0) + ($5<<3)|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 11;
 $15 = $14 & 31;
 $16 = ((gb + (14717588) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $9;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $12;
 $22 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $23 = (($22) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $23;
 STACKTOP = sp;return;
}
function _CTC1_920($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ($5|0)==(31);
 if ($6) {
  $7 = $0;
  $8 = $7 >>> 16;
  $9 = $8 & 31;
  $10 = ((gb + (8409952) | 0) + ($9<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[(gb + (14717720) | 0)>>2] = $11;
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (8409952) | 0) + ($14<<3)|0);
  $16 = HEAP32[$15>>2]|0;
  _update_x86_rounding_mode($16);
 }
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = (($17) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $18;
 STACKTOP = sp;return;
}
function _BC1F_IDLE_921($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = (_check_cop1_unusable()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $take_jump;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $19 = $0;
  _BC1F_922($19);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $9 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = (($9) - ($10))|0;
 $skip = $11;
 $12 = $skip;
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = $skip;
  $15 = $14 & -4;
  $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = $0;
  _BC1F_922($18);
  STACKTOP = sp;return;
 }
}
function _BC1F_922($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($8) + 1)|0;
 $10 = $9<<2;
 $11 = (($5) + ($10))|0;
 $jump_target = $11;
 $link_register = (gb + (8409952) | 0);
 $12 = (_check_cop1_unusable()|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $link_register;
 $15 = ($14|0)!=((gb + (8409952) | 0)|0);
 if ($15) {
  $16 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $17 = (($16) + 8)|0;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = $link_register;
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
 }
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $26;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = $take_jump;
 $28 = ($27|0)==(0);
 $29 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $30 = ($29|0)!=(0);
 $or$cond = $28 | $30;
 if (!($or$cond)) {
  $31 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $31;
 }
 $32 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $32;
 $33 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $35 = ($33>>>0)<=($34>>>0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1T_IDLE_923($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = (_check_cop1_unusable()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $take_jump;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $19 = $0;
  _BC1T_924($19);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $9 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = (($9) - ($10))|0;
 $skip = $11;
 $12 = $skip;
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = $skip;
  $15 = $14 & -4;
  $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = $0;
  _BC1T_924($18);
  STACKTOP = sp;return;
 }
}
function _BC1T_924($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($8) + 1)|0;
 $10 = $9<<2;
 $11 = (($5) + ($10))|0;
 $jump_target = $11;
 $link_register = (gb + (8409952) | 0);
 $12 = (_check_cop1_unusable()|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $link_register;
 $15 = ($14|0)!=((gb + (8409952) | 0)|0);
 if ($15) {
  $16 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $17 = (($16) + 8)|0;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = $link_register;
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
 }
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = (($25) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $26;
 HEAP32[(gb + (10523000) | 0)>>2] = 1;
 _InterpretOpcode();
 _cp0_update_count();
 HEAP32[(gb + (10523000) | 0)>>2] = 0;
 $27 = $take_jump;
 $28 = ($27|0)==(0);
 $29 = HEAP32[(gb + (10522020) | 0)>>2]|0;
 $30 = ($29|0)!=(0);
 $or$cond = $28 | $30;
 if (!($or$cond)) {
  $31 = $jump_target;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $31;
 }
 $32 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $32;
 $33 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $35 = ($33>>>0)<=($34>>>0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1FL_IDLE_925($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = (_check_cop1_unusable()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $take_jump;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $19 = $0;
  _BC1FL_926($19);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $9 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = (($9) - ($10))|0;
 $skip = $11;
 $12 = $skip;
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = $skip;
  $15 = $14 & -4;
  $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = $0;
  _BC1FL_926($18);
  STACKTOP = sp;return;
 }
}
function _BC1FL_926($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0;
 var $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($8) + 1)|0;
 $10 = $9<<2;
 $11 = (($5) + ($10))|0;
 $jump_target = $11;
 $link_register = (gb + (8409952) | 0);
 $12 = (_check_cop1_unusable()|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $link_register;
 $15 = ($14|0)!=((gb + (8409952) | 0)|0);
 if ($15) {
  $16 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $17 = (($16) + 8)|0;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = $link_register;
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
 }
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 $27 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($26) {
  $28 = (($27) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $28;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $29 = $take_jump;
  $30 = ($29|0)==(0);
  $31 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $32 = ($31|0)!=(0);
  $or$cond = $30 | $32;
  if (!($or$cond)) {
   $33 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $33;
  }
 } else {
  $34 = (($27) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  _cp0_update_count();
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $35;
 $36 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $37 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $38 = ($36>>>0)<=($37>>>0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BC1TL_IDLE_927($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = (_check_cop1_unusable()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $take_jump;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $19 = $0;
  _BC1TL_928($19);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $9 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $10 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $11 = (($9) - ($10))|0;
 $skip = $11;
 $12 = $skip;
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = $skip;
  $15 = $14 & -4;
  $16 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = $0;
  _BC1TL_928($18);
  STACKTOP = sp;return;
 }
}
function _BC1TL_928($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0;
 var $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $2 = $1 & 8388608;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $take_jump = $4;
 $5 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($8) + 1)|0;
 $10 = $9<<2;
 $11 = (($5) + ($10))|0;
 $jump_target = $11;
 $link_register = (gb + (8409952) | 0);
 $12 = (_check_cop1_unusable()|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $link_register;
 $15 = ($14|0)!=((gb + (8409952) | 0)|0);
 if ($15) {
  $16 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $17 = (($16) + 8)|0;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = $link_register;
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
 }
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 $27 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($26) {
  $28 = (($27) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $28;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $29 = $take_jump;
  $30 = ($29|0)==(0);
  $31 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $32 = ($31|0)!=(0);
  $or$cond = $30 | $32;
  if (!($or$cond)) {
   $33 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $33;
  }
 } else {
  $34 = (($27) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $34;
  _cp0_update_count();
 }
 $35 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $35;
 $36 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $37 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $38 = ($36>>>0)<=($37>>>0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _ADD_S_929($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717460) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _add_s_1118($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _SUB_S_930($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717460) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _sub_s_1117($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _MUL_S_931($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717460) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _mul_s_1116($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _DIV_S_932($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = $6 >>> 16;
  $8 = $7 & 31;
  $9 = ((gb + (14717460) | 0) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = +HEAPF32[$10>>2];
  $12 = $11 == 0.0;
  if ($12) {
   _DebugMessage(1,(gb + (18955) | 0),$vararg_buffer);
  }
 }
 $13 = $0;
 $14 = $13 >>> 11;
 $15 = $14 & 31;
 $16 = ((gb + (14717460) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = $18 >>> 16;
 $20 = $19 & 31;
 $21 = ((gb + (14717460) | 0) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = $23 >>> 6;
 $25 = $24 & 31;
 $26 = ((gb + (14717460) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 _div_s_1115($17,$22,$27);
 $28 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $29 = (($28) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $29;
 STACKTOP = sp;return;
}
function _SQRT_S_933($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _sqrt_s_1113($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ABS_S_934($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _abs_s_1112($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _MOV_S_935($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _mov_s_1111($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _NEG_S_936($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _neg_s_1110($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ROUND_L_S_937($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _round_l_s_1100($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _TRUNC_L_S_938($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _trunc_l_s_1101($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CEIL_L_S_939($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _ceil_l_s_1102($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _FLOOR_L_S_940($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _floor_l_s_1103($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ROUND_W_S_941($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _round_w_s_1105($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _TRUNC_W_S_942($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _trunc_w_s_1106($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CEIL_W_S_943($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _ceil_w_s_1107($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _FLOOR_W_S_944($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _floor_w_s_1108($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_D_S_945($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_d_s_1109($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_W_S_946($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_w_s_1104($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_L_S_947($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_l_s_1099($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_F_S_948($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _c_f_s_1098();
 $3 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $4 = (($3) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $4;
 STACKTOP = sp;return;
}
function _C_UN_S_949($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_un_s_1097($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_EQ_S_950($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_eq_s_1096($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_UEQ_S_951($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ueq_s_1095($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_OLT_S_952($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_olt_s_1094($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_ULT_S_953($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ult_s_1093($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_OLE_S_954($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ole_s_1092($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_ULE_S_955($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ule_s_1091($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_SF_S_956($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_sf_s_1090($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_NGLE_S_957($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_ngle_s_1089($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_SEQ_S_958($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_seq_s_1088($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_NGL_S_959($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_ngl_s_1087($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_LT_S_960($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_lt_s_1086($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_NGE_S_961($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_nge_s_1085($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_LE_S_962($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_le_s_1084($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _C_NGT_S_963($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = (___FLOAT_BITS_1044($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10>>>0)>(2139095040);
 if ($11) {
  label = 4;
 } else {
  $12 = $0;
  $13 = $12 >>> 16;
  $14 = $13 & 31;
  $15 = ((gb + (14717460) | 0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = (___FLOAT_BITS_1044($17)|0);
  $19 = $18 & 2147483647;
  $20 = ($19>>>0)>(2139095040);
  if ($20) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $21 = $0;
 $22 = $21 >>> 11;
 $23 = $22 & 31;
 $24 = ((gb + (14717460) | 0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26 >>> 16;
 $28 = $27 & 31;
 $29 = ((gb + (14717460) | 0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 _c_ngt_s_1083($25,$30);
 $31 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $32 = (($31) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $32;
 STACKTOP = sp;return;
}
function _ADD_D_964($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717588) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _add_d_1082($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _SUB_D_965($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717588) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _sub_d_1081($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _MUL_D_966($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = ((gb + (14717588) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 _mul_d_1080($7,$12,$17);
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _DIV_D_967($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = $6 >>> 16;
  $8 = $7 & 31;
  $9 = ((gb + (14717588) | 0) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 0.0;
  if ($12) {
   _DebugMessage(1,(gb + (18944) | 0),$vararg_buffer);
  }
 }
 $13 = $0;
 $14 = $13 >>> 11;
 $15 = $14 & 31;
 $16 = ((gb + (14717588) | 0) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = $18 >>> 16;
 $20 = $19 & 31;
 $21 = ((gb + (14717588) | 0) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = $23 >>> 6;
 $25 = $24 & 31;
 $26 = ((gb + (14717588) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 _div_d_1079($17,$22,$27);
 $28 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $29 = (($28) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $29;
 STACKTOP = sp;return;
}
function _SQRT_D_968($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _sqrt_d_1077($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ABS_D_969($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _abs_d_1076($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _MOV_D_970($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _mov_d_1075($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _NEG_D_971($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _neg_d_1074($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ROUND_L_D_972($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _round_l_d_1064($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _TRUNC_L_D_973($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _trunc_l_d_1065($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CEIL_L_D_974($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _ceil_l_d_1066($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _FLOOR_L_D_975($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _floor_l_d_1067($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _ROUND_W_D_976($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _round_w_d_1069($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _TRUNC_W_D_977($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _trunc_w_d_1070($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CEIL_W_D_978($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _ceil_w_d_1071($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _FLOOR_W_D_979($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _floor_w_d_1072($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_S_D_980($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_s_d_1073($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_W_D_981($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_w_d_1068($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_L_D_982($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_l_d_1063($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_F_D_983($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _c_f_d_1062();
 $3 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $4 = (($3) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $4;
 STACKTOP = sp;return;
}
function _C_UN_D_984($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_un_d_1061($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_EQ_D_985($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_eq_d_1060($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_UEQ_D_986($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ueq_d_1059($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_OLT_D_987($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_olt_d_1058($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_ULT_D_988($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ult_d_1057($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_OLE_D_989($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ole_d_1056($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_ULE_D_990($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _c_ule_d_1055($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _C_SF_D_991($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 $4 = ((gb + (14717588) | 0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF64[$5>>3];
 $7 = (___DOUBLE_BITS_1045($6)|0);
 $8 = (getTempRet0() | 0);
 $9 = $8 & 2147483647;
 $10 = ($9>>>0)>(2146435072);
 $11 = ($7>>>0)>(0);
 $12 = ($9|0)==(2146435072);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  label = 3;
 } else {
  $15 = $0;
  $16 = $15 >>> 16;
  $17 = $16 & 31;
  $18 = ((gb + (14717588) | 0) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = +HEAPF64[$19>>3];
  $21 = (___DOUBLE_BITS_1045($20)|0);
  $22 = (getTempRet0() | 0);
  $23 = $22 & 2147483647;
  $24 = ($23>>>0)>(2146435072);
  $25 = ($21>>>0)>(0);
  $26 = ($23|0)==(2146435072);
  $27 = $26 & $25;
  $28 = $24 | $27;
  if ($28) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $29 = $0;
 $30 = $29 >>> 11;
 $31 = $30 & 31;
 $32 = ((gb + (14717588) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = $34 >>> 16;
 $36 = $35 & 31;
 $37 = ((gb + (14717588) | 0) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 _c_sf_d_1054($33,$38);
 $39 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $40 = (($39) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
 STACKTOP = sp;return;
}
function _C_NGLE_D_992($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 $4 = ((gb + (14717588) | 0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF64[$5>>3];
 $7 = (___DOUBLE_BITS_1045($6)|0);
 $8 = (getTempRet0() | 0);
 $9 = $8 & 2147483647;
 $10 = ($9>>>0)>(2146435072);
 $11 = ($7>>>0)>(0);
 $12 = ($9|0)==(2146435072);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  label = 3;
 } else {
  $15 = $0;
  $16 = $15 >>> 16;
  $17 = $16 & 31;
  $18 = ((gb + (14717588) | 0) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = +HEAPF64[$19>>3];
  $21 = (___DOUBLE_BITS_1045($20)|0);
  $22 = (getTempRet0() | 0);
  $23 = $22 & 2147483647;
  $24 = ($23>>>0)>(2146435072);
  $25 = ($21>>>0)>(0);
  $26 = ($23|0)==(2146435072);
  $27 = $26 & $25;
  $28 = $24 | $27;
  if ($28) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $29 = $0;
 $30 = $29 >>> 11;
 $31 = $30 & 31;
 $32 = ((gb + (14717588) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = $34 >>> 16;
 $36 = $35 & 31;
 $37 = ((gb + (14717588) | 0) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 _c_ngle_d_1053($33,$38);
 $39 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $40 = (($39) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
 STACKTOP = sp;return;
}
function _C_SEQ_D_993($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 $4 = ((gb + (14717588) | 0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF64[$5>>3];
 $7 = (___DOUBLE_BITS_1045($6)|0);
 $8 = (getTempRet0() | 0);
 $9 = $8 & 2147483647;
 $10 = ($9>>>0)>(2146435072);
 $11 = ($7>>>0)>(0);
 $12 = ($9|0)==(2146435072);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  label = 3;
 } else {
  $15 = $0;
  $16 = $15 >>> 16;
  $17 = $16 & 31;
  $18 = ((gb + (14717588) | 0) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = +HEAPF64[$19>>3];
  $21 = (___DOUBLE_BITS_1045($20)|0);
  $22 = (getTempRet0() | 0);
  $23 = $22 & 2147483647;
  $24 = ($23>>>0)>(2146435072);
  $25 = ($21>>>0)>(0);
  $26 = ($23|0)==(2146435072);
  $27 = $26 & $25;
  $28 = $24 | $27;
  if ($28) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $29 = $0;
 $30 = $29 >>> 11;
 $31 = $30 & 31;
 $32 = ((gb + (14717588) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = $34 >>> 16;
 $36 = $35 & 31;
 $37 = ((gb + (14717588) | 0) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 _c_seq_d_1052($33,$38);
 $39 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $40 = (($39) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
 STACKTOP = sp;return;
}
function _C_NGL_D_994($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 11;
 $3 = $2 & 31;
 $4 = ((gb + (14717588) | 0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF64[$5>>3];
 $7 = (___DOUBLE_BITS_1045($6)|0);
 $8 = (getTempRet0() | 0);
 $9 = $8 & 2147483647;
 $10 = ($9>>>0)>(2146435072);
 $11 = ($7>>>0)>(0);
 $12 = ($9|0)==(2146435072);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  label = 3;
 } else {
  $15 = $0;
  $16 = $15 >>> 16;
  $17 = $16 & 31;
  $18 = ((gb + (14717588) | 0) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = +HEAPF64[$19>>3];
  $21 = (___DOUBLE_BITS_1045($20)|0);
  $22 = (getTempRet0() | 0);
  $23 = $22 & 2147483647;
  $24 = ($23>>>0)>(2146435072);
  $25 = ($21>>>0)>(0);
  $26 = ($23|0)==(2146435072);
  $27 = $26 & $25;
  $28 = $24 | $27;
  if ($28) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $29 = $0;
 $30 = $29 >>> 11;
 $31 = $30 & 31;
 $32 = ((gb + (14717588) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = $34 >>> 16;
 $36 = $35 & 31;
 $37 = ((gb + (14717588) | 0) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 _c_ngl_d_1051($33,$38);
 $39 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $40 = (($39) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $40;
 STACKTOP = sp;return;
}
function _C_LT_D_995($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = (___DOUBLE_BITS_1045($8)|0);
 $10 = (getTempRet0() | 0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2146435072);
 $13 = ($9>>>0)>(0);
 $14 = ($11|0)==(2146435072);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  label = 4;
 } else {
  $17 = $0;
  $18 = $17 >>> 16;
  $19 = $18 & 31;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS_1045($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = $0;
 $32 = $31 >>> 11;
 $33 = $32 & 31;
 $34 = ((gb + (14717588) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = $36 >>> 16;
 $38 = $37 & 31;
 $39 = ((gb + (14717588) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 _c_lt_d_1050($35,$40);
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $42 = (($41) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
 STACKTOP = sp;return;
}
function _C_NGE_D_996($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = (___DOUBLE_BITS_1045($8)|0);
 $10 = (getTempRet0() | 0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2146435072);
 $13 = ($9>>>0)>(0);
 $14 = ($11|0)==(2146435072);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  label = 4;
 } else {
  $17 = $0;
  $18 = $17 >>> 16;
  $19 = $18 & 31;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS_1045($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = $0;
 $32 = $31 >>> 11;
 $33 = $32 & 31;
 $34 = ((gb + (14717588) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = $36 >>> 16;
 $38 = $37 & 31;
 $39 = ((gb + (14717588) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 _c_nge_d_1049($35,$40);
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $42 = (($41) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
 STACKTOP = sp;return;
}
function _C_LE_D_997($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = (___DOUBLE_BITS_1045($8)|0);
 $10 = (getTempRet0() | 0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2146435072);
 $13 = ($9>>>0)>(0);
 $14 = ($11|0)==(2146435072);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  label = 4;
 } else {
  $17 = $0;
  $18 = $17 >>> 16;
  $19 = $18 & 31;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS_1045($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = $0;
 $32 = $31 >>> 11;
 $33 = $32 & 31;
 $34 = ((gb + (14717588) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = $36 >>> 16;
 $38 = $37 & 31;
 $39 = ((gb + (14717588) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 _c_le_d_1048($35,$40);
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $42 = (($41) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
 STACKTOP = sp;return;
}
function _C_NGT_D_998($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = (___DOUBLE_BITS_1045($8)|0);
 $10 = (getTempRet0() | 0);
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2146435072);
 $13 = ($9>>>0)>(0);
 $14 = ($11|0)==(2146435072);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  label = 4;
 } else {
  $17 = $0;
  $18 = $17 >>> 16;
  $19 = $18 & 31;
  $20 = ((gb + (14717588) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = (___DOUBLE_BITS_1045($22)|0);
  $24 = (getTempRet0() | 0);
  $25 = $24 & 2147483647;
  $26 = ($25>>>0)>(2146435072);
  $27 = ($23>>>0)>(0);
  $28 = ($25|0)==(2146435072);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _DebugMessage(1,(gb + (18904) | 0),$vararg_buffer);
  HEAP32[(gb + (10523004) | 0)>>2] = 1;
 }
 $31 = $0;
 $32 = $31 >>> 11;
 $33 = $32 & 31;
 $34 = ((gb + (14717588) | 0) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = $36 >>> 16;
 $38 = $37 & 31;
 $39 = ((gb + (14717588) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 _c_ngt_d_1047($35,$40);
 $41 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $42 = (($41) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $42;
 STACKTOP = sp;return;
}
function _CVT_S_W_999($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_s_w_1043($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_D_W_1000($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717460) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_d_w_1042($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_S_L_1001($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717460) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_s_l_1041($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _CVT_D_L_1002($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = (_check_cop1_unusable()|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = $3 >>> 11;
 $5 = $4 & 31;
 $6 = ((gb + (14717588) | 0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8 >>> 6;
 $10 = $9 & 31;
 $11 = ((gb + (14717588) | 0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 _cvt_d_l_1039($7,$12);
 $13 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $14 = (($13) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $14;
 STACKTOP = sp;return;
}
function _BEQL_IDLE_1003($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)==($17|0);
 $22 = ($10|0)==($20|0);
 $23 = $21 & $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $37 = $0;
  _BEQL_1004($37);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = (($27) - ($28))|0;
 $skip = $29;
 $30 = $skip;
 $31 = ($30|0)>(3);
 if ($31) {
  $32 = $skip;
  $33 = $32 & -4;
  $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $35 = (($34) + ($33))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $0;
  _BEQL_1004($36);
  STACKTOP = sp;return;
 }
}
function _BEQL_1004($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)==($17|0);
 $22 = ($10|0)==($20|0);
 $23 = $21 & $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = $0;
 $27 = $26&65535;
 $28 = $27 << 16 >> 16;
 $29 = (($28) + 1)|0;
 $30 = $29<<2;
 $31 = (($25) + ($30))|0;
 $jump_target = $31;
 $link_register = (gb + (8409952) | 0);
 $32 = $link_register;
 $33 = ($32|0)!=((gb + (8409952) | 0)|0);
 if ($33) {
  $34 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $35 = (($34) + 8)|0;
  $36 = ($35|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = $link_register;
  $39 = $38;
  $40 = $39;
  HEAP32[$40>>2] = $35;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $37;
 }
 $43 = $take_jump;
 $44 = ($43|0)!=(0);
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($44) {
  $46 = (($45) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $46;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $47 = $take_jump;
  $48 = ($47|0)==(0);
  $49 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $50 = ($49|0)!=(0);
  $or$cond = $48 | $50;
  if (!($or$cond)) {
   $51 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $51;
  }
 } else {
  $52 = (($45) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $52;
  _cp0_update_count();
 }
 $53 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BNEL_IDLE_1005($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)!=($17|0);
 $22 = ($10|0)!=($20|0);
 $23 = $21 | $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = $take_jump;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $37 = $0;
  _BNEL_1006($37);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $27 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $28 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $29 = (($27) - ($28))|0;
 $skip = $29;
 $30 = $skip;
 $31 = ($30|0)>(3);
 if ($31) {
  $32 = $skip;
  $33 = $32 & -4;
  $34 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $35 = (($34) + ($33))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $36 = $0;
  _BNEL_1006($36);
  STACKTOP = sp;return;
 }
}
function _BNEL_1006($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0;
 var $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11 >>> 16;
 $13 = $12 & 31;
 $14 = ((gb + (8409952) | 0) + ($13<<3)|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($7|0)!=($17|0);
 $22 = ($10|0)!=($20|0);
 $23 = $21 | $22;
 $24 = $23&1;
 $take_jump = $24;
 $25 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $26 = $0;
 $27 = $26&65535;
 $28 = $27 << 16 >> 16;
 $29 = (($28) + 1)|0;
 $30 = $29<<2;
 $31 = (($25) + ($30))|0;
 $jump_target = $31;
 $link_register = (gb + (8409952) | 0);
 $32 = $link_register;
 $33 = ($32|0)!=((gb + (8409952) | 0)|0);
 if ($33) {
  $34 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $35 = (($34) + 8)|0;
  $36 = ($35|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = $link_register;
  $39 = $38;
  $40 = $39;
  HEAP32[$40>>2] = $35;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $37;
 }
 $43 = $take_jump;
 $44 = ($43|0)!=(0);
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($44) {
  $46 = (($45) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $46;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $47 = $take_jump;
  $48 = ($47|0)==(0);
  $49 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $50 = ($49|0)!=(0);
  $or$cond = $48 | $50;
  if (!($or$cond)) {
   $51 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $51;
  }
 } else {
  $52 = (($45) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $52;
  _cp0_update_count();
 }
 $53 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $53;
 $54 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $55 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $56 = ($54>>>0)<=($55>>>0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BLEZL_IDLE_1007($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = ($7>>>0)<=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BLEZL_1008($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BLEZL_1008($28);
  STACKTOP = sp;return;
 }
}
function _BLEZL_1008($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = ($7>>>0)<=(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($36) {
  $38 = (($37) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $39 = $take_jump;
  $40 = ($39|0)==(0);
  $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $42 = ($41|0)!=(0);
  $or$cond = $40 | $42;
  if (!($or$cond)) {
   $43 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
  }
 } else {
  $44 = (($37) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
  _cp0_update_count();
 }
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $45;
 $46 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $47 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $48 = ($46>>>0)<=($47>>>0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _BGTZL_IDLE_1009($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $skip = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = $take_jump;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $29 = $0;
  _BGTZL_1010($29);
  STACKTOP = sp;return;
 }
 _cp0_update_count();
 $19 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $20 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $21 = (($19) - ($20))|0;
 $skip = $21;
 $22 = $skip;
 $23 = ($22|0)>(3);
 if ($23) {
  $24 = $skip;
  $25 = $24 & -4;
  $26 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  _BGTZL_1010($28);
  STACKTOP = sp;return;
 }
}
function _BGTZL_1010($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jump_target = 0, $link_register = 0, $or$cond = 0, $take_jump = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($7>>>0)>(0);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = $15&1;
 $take_jump = $16;
 $17 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $18 = $0;
 $19 = $18&65535;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $jump_target = $23;
 $link_register = (gb + (8409952) | 0);
 $24 = $link_register;
 $25 = ($24|0)!=((gb + (8409952) | 0)|0);
 if ($25) {
  $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
  $27 = (($26) + 8)|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = $link_register;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
 }
 $35 = $take_jump;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 if ($36) {
  $38 = (($37) + 4)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $38;
  HEAP32[(gb + (10523000) | 0)>>2] = 1;
  _InterpretOpcode();
  _cp0_update_count();
  HEAP32[(gb + (10523000) | 0)>>2] = 0;
  $39 = $take_jump;
  $40 = ($39|0)==(0);
  $41 = HEAP32[(gb + (10522020) | 0)>>2]|0;
  $42 = ($41|0)!=(0);
  $or$cond = $40 | $42;
  if (!($or$cond)) {
   $43 = $jump_target;
   HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $43;
  }
 } else {
  $44 = (($37) + 8)|0;
  HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $44;
  _cp0_update_count();
 }
 $45 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 HEAP32[(gb + (10523012) | 0)>>2] = $45;
 $46 = HEAP32[(gb + (10523016) | 0)>>2]|0;
 $47 = HEAP32[((((gb + (14717332) | 0)) + 36|0))>>2]|0;
 $48 = ($46>>>0)<=($47>>>0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _gen_interupt();
 STACKTOP = sp;return;
}
function _DADDI_1011($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = (_i64Add(($7|0),($10|0),($13|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = $0;
 $19 = $18 >>> 16;
 $20 = $19 & 31;
 $21 = ((gb + (8409952) | 0) + ($20<<3)|0);
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $27 = (($26) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $27;
 STACKTOP = sp;return;
}
function _DADDIU_1012($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $11&65535;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = (_i64Add(($7|0),($10|0),($13|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $18 = $0;
 $19 = $18 >>> 16;
 $20 = $19 & 31;
 $21 = ((gb + (8409952) | 0) + ($20<<3)|0);
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $17;
 $26 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $27 = (($26) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $27;
 STACKTOP = sp;return;
}
function _LDL_1013($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp + 8|0;
 $old_mask = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 7;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $24;
  $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $26 = $25 >>> 16;
  $27 = ((gb + (9210772) | 0) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  mftCall_v($28|0);
  STACKTOP = sp;return;
 }
 $29 = $23 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $29;
 HEAP32[(gb + (8424332) | 0)>>2] = $word;
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 16;
 $32 = ((gb + (9210772) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $lsaddr;
 $37 = $36 & 7;
 $38 = $37<<3;
 $39 = (_bitshift64Shl(1,0,($38|0))|0);
 $40 = (getTempRet0() | 0);
 $41 = (_i64Subtract(($39|0),($40|0),1,0)|0);
 $42 = (getTempRet0() | 0);
 $43 = $old_mask;
 $44 = $43;
 HEAP32[$44>>2] = $41;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $47 = $lsaddr;
 $48 = $47 & 7;
 $49 = $48<<3;
 $new_shift = $49;
 $50 = $lsrtp;
 $51 = $50;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = $old_mask;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $53 & $59;
 $64 = $56 & $62;
 $65 = $word;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = $new_shift;
 $72 = (_bitshift64Shl(($67|0),($70|0),($71|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = $63 | $72;
 $75 = $64 | $73;
 $76 = $lsrtp;
 $77 = $76;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $75;
 STACKTOP = sp;return;
}
function _LDR_1014($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp + 8|0;
 $old_mask = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 7;
 $24 = ($23|0)==(7);
 if ($24) {
  $25 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $25;
  $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $27 = $26 >>> 16;
  $28 = ((gb + (9210772) | 0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  mftCall_v($29|0);
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $word;
 $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $31 = $30 >>> 16;
 $32 = ((gb + (9210772) | 0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 mftCall_v($33|0);
 $34 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $lsaddr;
 $37 = $36 & 7;
 $38 = (($37) + 1)|0;
 $39 = $38<<3;
 $40 = (_bitshift64Shl(1,0,($39|0))|0);
 $41 = (getTempRet0() | 0);
 $42 = (_i64Subtract(($40|0),($41|0),1,0)|0);
 $43 = (getTempRet0() | 0);
 $44 = $42 ^ -1;
 $45 = $43 ^ -1;
 $46 = $old_mask;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $lsaddr;
 $51 = $50 & 7;
 $52 = (7 - ($51))|0;
 $53 = $52<<3;
 $new_shift = $53;
 $54 = $lsrtp;
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $old_mask;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $57 & $63;
 $68 = $60 & $66;
 $69 = $word;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = $new_shift;
 $76 = (_bitshift64Lshr(($71|0),($74|0),($75|0))|0);
 $77 = (getTempRet0() | 0);
 $78 = $67 | $76;
 $79 = $68 | $77;
 $80 = $lsrtp;
 $81 = $80;
 $82 = $81;
 HEAP32[$82>>2] = $78;
 $83 = (($81) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = $79;
 STACKTOP = sp;return;
}
function _LB_1015($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8686484) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $27&255;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)<(0);
 $34 = $33 << 31 >> 31;
 $35 = $lsrtp;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 STACKTOP = sp;return;
}
function _LH_1016($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8948628) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $27&65535;
 $32 = $31 << 16 >> 16;
 $33 = ($32|0)<(0);
 $34 = $33 << 31 >> 31;
 $35 = $lsrtp;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 STACKTOP = sp;return;
}
function _LWL_1017($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 3;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $24;
  $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $26 = $25 >>> 16;
  $27 = ((gb + (8424340) | 0) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  mftCall_v($28|0);
  $29 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = $lsrtp;
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = $lsrtp;
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = $34;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $45 = $23 & -4;
  HEAP32[(gb + (8424328) | 0)>>2] = $45;
  HEAP32[(gb + (8424332) | 0)>>2] = $word;
  $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $47 = $46 >>> 16;
  $48 = ((gb + (8424340) | 0) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  mftCall_v($49|0);
  $50 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $lsaddr;
  $53 = $52 & 3;
  $54 = $53<<3;
  $55 = 1 << $54;
  $56 = (($55) - 1)|0;
  $old_mask = $56;
  $57 = $lsaddr;
  $58 = $57 & 3;
  $59 = $58<<3;
  $new_shift = $59;
  $60 = $lsrtp;
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $old_mask;
  $68 = $63 & $67;
  $69 = $word;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $new_shift;
  $76 = $71 << $75;
  $77 = $68 | $76;
  $78 = ($77|0)<(0);
  $79 = $78 << 31 >> 31;
  $80 = $lsrtp;
  $81 = $80;
  $82 = $81;
  HEAP32[$82>>2] = $77;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  STACKTOP = sp;return;
 }
}
function _LW_1018($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = $lsrtp;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $27;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 STACKTOP = sp;return;
}
function _LBU_1019($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8686484) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _LHU_1020($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8948628) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _LWR_1021($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $word = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 3;
 $24 = ($23|0)==(3);
 if ($24) {
  $25 = $lsrtp;
  HEAP32[(gb + (8424332) | 0)>>2] = $25;
  $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $27 = $26 >>> 16;
  $28 = ((gb + (8424340) | 0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  mftCall_v($29|0);
  $30 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = $lsrtp;
  $33 = $32;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $lsrtp;
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = $35;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $40;
  STACKTOP = sp;return;
 } else {
  HEAP32[(gb + (8424332) | 0)>>2] = $word;
  $46 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $47 = $46 >>> 16;
  $48 = ((gb + (8424340) | 0) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  mftCall_v($49|0);
  $50 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $lsaddr;
  $53 = $52 & 3;
  $54 = (($53) + 1)|0;
  $55 = $54<<3;
  $56 = 1 << $55;
  $57 = (($56) - 1)|0;
  $58 = $57 ^ -1;
  $old_mask = $58;
  $59 = $lsaddr;
  $60 = $59 & 3;
  $61 = (3 - ($60))|0;
  $62 = $61<<3;
  $new_shift = $62;
  $63 = $lsrtp;
  $64 = $63;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = $old_mask;
  $71 = $66 & $70;
  $72 = $word;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = $new_shift;
  $79 = $74 >>> $78;
  $80 = $71 | $79;
  $81 = ($80|0)<(0);
  $82 = $81 << 31 >> 31;
  $83 = $lsrtp;
  $84 = $83;
  $85 = $84;
  HEAP32[$85>>2] = $80;
  $86 = (($84) + 4)|0;
  $87 = $86;
  HEAP32[$87>>2] = $82;
  STACKTOP = sp;return;
 }
}
function _LWU_1022($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _SB_1023($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&255;
 HEAP8[(gb + (23109845) | 0)>>0] = $24;
 $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $26 = $25 >>> 16;
 $27 = ((gb + (9735060) | 0) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 mftCall_v($28|0);
 STACKTOP = sp;return;
}
function _SH_1024($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&65535;
 HEAP16[(gb + (23108460) | 0)>>1] = $24;
 $25 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $26 = $25 >>> 16;
 $27 = ((gb + (10259348) | 0) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 mftCall_v($28|0);
 STACKTOP = sp;return;
}
function _SWL_1025($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $old_word = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 3;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[(gb + (8424336) | 0)>>2] = $27;
  $31 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $32 = $31 >>> 16;
  $33 = ((gb + (9472916) | 0) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  mftCall_v($34|0);
  STACKTOP = sp;return;
 }
 $35 = $23 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $35;
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $37 = $36 >>> 16;
 $38 = ((gb + (8424340) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 mftCall_v($39|0);
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $lsaddr;
 $43 = $42 & 3;
 $44 = (4 - ($43))|0;
 $45 = $44<<3;
 $46 = 1 << $45;
 $47 = (($46) - 1)|0;
 $48 = $47 ^ -1;
 $old_mask = $48;
 $49 = $lsaddr;
 $50 = $49 & 3;
 $51 = $50<<3;
 $new_shift = $51;
 $52 = $old_word;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $old_mask;
 $59 = $54 & $58;
 $60 = $lsrtp;
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $new_shift;
 $68 = $63 >>> $67;
 $69 = $59 | $68;
 HEAP32[(gb + (8424336) | 0)>>2] = $69;
 $70 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $71 = $70 >>> 16;
 $72 = ((gb + (9472916) | 0) + ($71<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 mftCall_v($73|0);
 STACKTOP = sp;return;
}
function _SW_1026($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[(gb + (8424336) | 0)>>2] = $20;
 $24 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $25 = $24 >>> 16;
 $26 = ((gb + (9472916) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 mftCall_v($27|0);
 STACKTOP = sp;return;
}
function _SDL_1027($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0;
 var $old_mask = 0, $old_word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp + 8|0;
 $old_mask = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & 7;
 $22 = ($21|0)==(0);
 $23 = $lsaddr;
 if ($22) {
  HEAP32[(gb + (8424328) | 0)>>2] = $23;
  $24 = $lsrtp;
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (gb + (8409944) | 0);
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $30;
  $35 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $36 = $35 >>> 16;
  $37 = ((gb + (9997204) | 0) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  mftCall_v($38|0);
  STACKTOP = sp;return;
 }
 $39 = $23 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $39;
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = $40 >>> 16;
 $42 = ((gb + (9210772) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 mftCall_v($43|0);
 $44 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $lsaddr;
 $47 = $46 & 7;
 $48 = (8 - ($47))|0;
 $49 = $48<<3;
 $50 = (_bitshift64Shl(1,0,($49|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = (_i64Subtract(($50|0),($51|0),1,0)|0);
 $53 = (getTempRet0() | 0);
 $54 = $52 ^ -1;
 $55 = $53 ^ -1;
 $56 = $old_mask;
 $57 = $56;
 HEAP32[$57>>2] = $54;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = $55;
 $60 = $lsaddr;
 $61 = $60 & 7;
 $62 = $61<<3;
 $new_shift = $62;
 $63 = $old_word;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + 4)|0;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = $old_mask;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = $65 & $71;
 $76 = $68 & $74;
 $77 = $lsrtp;
 $78 = $77;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = $new_shift;
 $85 = (_bitshift64Lshr(($80|0),($83|0),($84|0))|0);
 $86 = (getTempRet0() | 0);
 $87 = $75 | $85;
 $88 = $76 | $86;
 $89 = (gb + (8409944) | 0);
 $90 = $89;
 HEAP32[$90>>2] = $87;
 $91 = (($89) + 4)|0;
 $92 = $91;
 HEAP32[$92>>2] = $88;
 $93 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $94 = $93 >>> 16;
 $95 = ((gb + (9997204) | 0) + ($94<<2)|0);
 $96 = HEAP32[$95>>2]|0;
 mftCall_v($96|0);
 STACKTOP = sp;return;
}
function _SDR_1028($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0;
 var $old_word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp + 8|0;
 $old_mask = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -8;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 7;
 $24 = ($23|0)==(7);
 if ($24) {
  $25 = $lsrtp;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (gb + (8409944) | 0);
  $33 = $32;
  HEAP32[$33>>2] = $28;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $37 = $36 >>> 16;
  $38 = ((gb + (9997204) | 0) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  mftCall_v($39|0);
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = $40 >>> 16;
 $42 = ((gb + (9210772) | 0) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 mftCall_v($43|0);
 $44 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $lsaddr;
 $47 = $46 & 7;
 $48 = (7 - ($47))|0;
 $49 = $48<<3;
 $50 = (_bitshift64Shl(1,0,($49|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = (_i64Subtract(($50|0),($51|0),1,0)|0);
 $53 = (getTempRet0() | 0);
 $54 = $old_mask;
 $55 = $54;
 HEAP32[$55>>2] = $52;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 $58 = $lsaddr;
 $59 = $58 & 7;
 $60 = (7 - ($59))|0;
 $61 = $60<<3;
 $new_shift = $61;
 $62 = $old_word;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = $old_mask;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $64 & $70;
 $75 = $67 & $73;
 $76 = $lsrtp;
 $77 = $76;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = $new_shift;
 $84 = (_bitshift64Shl(($79|0),($82|0),($83|0))|0);
 $85 = (getTempRet0() | 0);
 $86 = $74 | $84;
 $87 = $75 | $85;
 $88 = (gb + (8409944) | 0);
 $89 = $88;
 HEAP32[$89>>2] = $86;
 $90 = (($88) + 4)|0;
 $91 = $90;
 HEAP32[$91>>2] = $87;
 $92 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $93 = $92 >>> 16;
 $94 = ((gb + (9997204) | 0) + ($93<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 mftCall_v($95|0);
 STACKTOP = sp;return;
}
function _SWR_1029($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, $new_shift = 0, $old_mask = 0, $old_word = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $old_word = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = $old_word;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $19;
 $20 = $lsaddr;
 $21 = $20 & -4;
 HEAP32[(gb + (8424328) | 0)>>2] = $21;
 $22 = $lsaddr;
 $23 = $22 & 3;
 $24 = ($23|0)==(3);
 if ($24) {
  $25 = $lsrtp;
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  HEAP32[(gb + (8424336) | 0)>>2] = $28;
  $32 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $33 = $32 >>> 16;
  $34 = ((gb + (9472916) | 0) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  mftCall_v($35|0);
  STACKTOP = sp;return;
 }
 HEAP32[(gb + (8424332) | 0)>>2] = $old_word;
 $36 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $37 = $36 >>> 16;
 $38 = ((gb + (8424340) | 0) + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 mftCall_v($39|0);
 $40 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $lsaddr;
 $43 = $42 & 3;
 $44 = (3 - ($43))|0;
 $45 = $44<<3;
 $46 = 1 << $45;
 $47 = (($46) - 1)|0;
 $old_mask = $47;
 $48 = $lsaddr;
 $49 = $48 & 3;
 $50 = (3 - ($49))|0;
 $51 = $50<<3;
 $new_shift = $51;
 $52 = $old_word;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $old_mask;
 $59 = $54 & $58;
 $60 = $lsrtp;
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $new_shift;
 $68 = $63 << $67;
 $69 = $59 | $68;
 HEAP32[(gb + (8424336) | 0)>>2] = $69;
 $70 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $71 = $70 >>> 16;
 $72 = ((gb + (9472916) | 0) + ($71<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 mftCall_v($73|0);
 STACKTOP = sp;return;
}
function _CACHE_1030($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $2 = (($1) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $2;
 STACKTOP = sp;return;
}
function _LL_1031($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (8424340) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 $22 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $lsrtp;
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = $lsrtp;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $27;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 HEAP32[(gb + (10522032) | 0)>>2] = 1;
 STACKTOP = sp;return;
}
function _LWC1_1032($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $lslfaddr = 0, $lslfft = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = $3&255;
 $lslfft = $4;
 $5 = $0;
 $6 = $5 >>> 21;
 $7 = $6 & 31;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 << 16 >> 16;
 $18 = (($11) + ($17))|0;
 $lslfaddr = $18;
 $19 = (_check_cop1_unusable()|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $22 = (($21) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $22;
 $23 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $23;
 HEAP32[(gb + (8424332) | 0)>>2] = $temp;
 $24 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $25 = $24 >>> 16;
 $26 = ((gb + (8424340) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 mftCall_v($27|0);
 $28 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[(gb + (8424332) | 0)>>2]|0;
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = $lslfft;
 $38 = $37&255;
 $39 = ((gb + (14717460) | 0) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$40>>2] = $33;
 STACKTOP = sp;return;
}
function _LDC1_1033($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = $3&255;
 $lslfft = $4;
 $5 = $0;
 $6 = $5 >>> 21;
 $7 = $6 & 31;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 << 16 >> 16;
 $18 = (($11) + ($17))|0;
 $lslfaddr = $18;
 $19 = (_check_cop1_unusable()|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $22 = (($21) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $22;
 $23 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $23;
 $24 = $lslfft;
 $25 = $24&255;
 $26 = ((gb + (14717588) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[(gb + (8424332) | 0)>>2] = $27;
 $28 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $29 = $28 >>> 16;
 $30 = ((gb + (9210772) | 0) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 mftCall_v($31|0);
 STACKTOP = sp;return;
}
function _LD_1034($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 HEAP32[(gb + (8424332) | 0)>>2] = $17;
 $18 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $19 = $18 >>> 16;
 $20 = ((gb + (9210772) | 0) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 mftCall_v($21|0);
 STACKTOP = sp;return;
}
function _SC_1035($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = HEAP32[(gb + (10522032) | 0)>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $lsaddr;
  HEAP32[(gb + (8424328) | 0)>>2] = $18;
  $19 = $lsrtp;
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  HEAP32[(gb + (8424336) | 0)>>2] = $22;
  $26 = HEAP32[(gb + (8424328) | 0)>>2]|0;
  $27 = $26 >>> 16;
  $28 = ((gb + (9472916) | 0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  mftCall_v($29|0);
  HEAP32[(gb + (10522032) | 0)>>2] = 0;
  $30 = $lsrtp;
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = 1;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $35 = $lsrtp;
  $36 = $35;
  $37 = $36;
  HEAP32[$37>>2] = 0;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _SWC1_1036($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = $3&255;
 $lslfft = $4;
 $5 = $0;
 $6 = $5 >>> 21;
 $7 = $6 & 31;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 << 16 >> 16;
 $18 = (($11) + ($17))|0;
 $lslfaddr = $18;
 $19 = (_check_cop1_unusable()|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $22 = (($21) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $22;
 $23 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $23;
 $24 = $lslfft;
 $25 = $24&255;
 $26 = ((gb + (14717460) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[(gb + (8424336) | 0)>>2] = $28;
 $29 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $30 = $29 >>> 16;
 $31 = ((gb + (9472916) | 0) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 mftCall_v($32|0);
 STACKTOP = sp;return;
}
function _SDC1_1037($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $lslfaddr = 0, $lslfft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = $3&255;
 $lslfft = $4;
 $5 = $0;
 $6 = $5 >>> 21;
 $7 = $6 & 31;
 $8 = ((gb + (8409952) | 0) + ($7<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 << 16 >> 16;
 $18 = (($11) + ($17))|0;
 $lslfaddr = $18;
 $19 = (_check_cop1_unusable()|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $22 = (($21) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $22;
 $23 = $lslfaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $23;
 $24 = $lslfft;
 $25 = $24&255;
 $26 = ((gb + (14717588) | 0) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (gb + (8409944) | 0);
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $39 = $38 >>> 16;
 $40 = ((gb + (9997204) | 0) + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 mftCall_v($41|0);
 STACKTOP = sp;return;
}
function _SD_1038($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lsaddr = 0, $lsrtp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $0;
 $2 = $1 >>> 21;
 $3 = $2 & 31;
 $4 = ((gb + (8409952) | 0) + ($3<<3)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $6&65535;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($8))|0;
 $lsaddr = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 31;
 $13 = ((gb + (8409952) | 0) + ($12<<3)|0);
 $lsrtp = $13;
 $14 = HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2]|0;
 $15 = (($14) + 4)|0;
 HEAP32[((((gb + (14717996) | 0)) + 20|0))>>2] = $15;
 $16 = $lsaddr;
 HEAP32[(gb + (8424328) | 0)>>2] = $16;
 $17 = $lsrtp;
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (gb + (8409944) | 0);
 $25 = $24;
 HEAP32[$25>>2] = $20;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = HEAP32[(gb + (8424328) | 0)>>2]|0;
 $29 = $28 >>> 16;
 $30 = ((gb + (9997204) | 0) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 mftCall_v($31|0);
 STACKTOP = sp;return;
}
function _cvt_d_l_1039($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding_1040();
 $2 = $0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
 $10 = $1;
 HEAPF64[$10>>3] = $9;
 STACKTOP = sp;return;
}
function _set_rounding_1040() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & 3;
 switch ($1|0) {
 case 0:  {
  (_fesetround(0)|0);
  return;
  break;
 }
 case 1:  {
  (_fesetround(3072)|0);
  return;
  break;
 }
 case 2:  {
  (_fesetround(2048)|0);
  return;
  break;
 }
 case 3:  {
  (_fesetround(1024)|0);
  return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function _cvt_s_l_1041($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding_1040();
 $2 = $0;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
 $10 = $1;
 HEAPF32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _cvt_d_w_1042($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _cvt_s_w_1043($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding_1040();
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function ___FLOAT_BITS_1044($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS_1045($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 setTempRet0(($7) | 0);
 STACKTOP = sp;return ($4|0);
}
function _c_ngt_d_1047($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_le_d_1048($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_nge_d_1049($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_lt_d_1050($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngl_d_1051($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_seq_d_1052($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngle_d_1053($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_sf_d_1054($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_ule_d_1055($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 <= $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ole_d_1056($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 <= $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ult_d_1057($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 < $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_olt_d_1058($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 < $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_ueq_d_1059($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 == $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_eq_d_1060($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = $0;
   $25 = +HEAPF64[$24>>3];
   $26 = $1;
   $27 = +HEAPF64[$26>>3];
   $28 = $25 == $27;
   $29 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $30 = $29 | 8388608;
   $31 = $29 & -8388609;
   $32 = $28 ? $30 : $31;
   HEAP32[(gb + (14717720) | 0)>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $23;
 STACKTOP = sp;return;
}
function _c_un_d_1061($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (___DOUBLE_BITS_1045($3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2146435072);
 $8 = ($4>>>0)>(0);
 $9 = ($6|0)==(2146435072);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if (!($11)) {
  $12 = $1;
  $13 = +HEAPF64[$12>>3];
  $14 = (___DOUBLE_BITS_1045($13)|0);
  $15 = (getTempRet0() | 0);
  $16 = $15 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($14>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if (!($21)) {
   $24 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $25 = $24 & -8388609;
   $26 = $25;
   HEAP32[(gb + (14717720) | 0)>>2] = $26;
   STACKTOP = sp;return;
  }
 }
 $22 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $23 = $22 | 8388608;
 $26 = $23;
 HEAP32[(gb + (14717720) | 0)>>2] = $26;
 STACKTOP = sp;return;
}
function _c_f_d_1062() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $1;
 return;
}
function _cvt_l_d_1063($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_l_d_1064($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_l_d_1065($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_l_d_1066($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_l_d_1067($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _round_l_d_1064($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_round((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _trunc_l_d_1065($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_trunc((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _ceil_l_d_1066($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _floor_l_d_1067($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_floor((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _cvt_w_d_1068($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_w_d_1069($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_w_d_1070($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_w_d_1071($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_w_d_1072($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _round_w_d_1069($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_round((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _trunc_w_d_1070($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+_trunc((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _ceil_w_d_1071($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _floor_w_d_1072($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _cvt_s_d_1073($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 _set_rounding_1040();
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $3;
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _neg_d_1074($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _mov_d_1075($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function _abs_d_1076($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_abs((+$3)));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _sqrt_d_1077($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 _set_rounding_1040();
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = (+Math_sqrt((+$3)));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _div_d_1079($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 / $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _mul_d_1080($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 * $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _sub_d_1081($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _add_d_1082($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 + $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _c_ngt_s_1083($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_le_s_1084($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 <= $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_nge_s_1085($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_lt_s_1086($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 < $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngl_s_1087($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_seq_s_1088($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 == $5;
 $7 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $8 = $7 | 8388608;
 $9 = $7 & -8388609;
 $10 = $6 ? $8 : $9;
 HEAP32[(gb + (14717720) | 0)>>2] = $10;
 STACKTOP = sp;return;
}
function _c_ngle_s_1089($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_sf_s_1090($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $3;
 STACKTOP = sp;return;
}
function _c_ule_s_1091($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 <= $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ole_s_1092($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 <= $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ult_s_1093($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 < $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_olt_s_1094($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 < $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_ueq_s_1095($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 == $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_eq_s_1096($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = $0;
   $15 = +HEAPF32[$14>>2];
   $16 = $1;
   $17 = +HEAPF32[$16>>2];
   $18 = $15 == $17;
   $19 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $20 = $19 | 8388608;
   $21 = $19 & -8388609;
   $22 = $18 ? $20 : $21;
   HEAP32[(gb + (14717720) | 0)>>2] = $22;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $13;
 STACKTOP = sp;return;
}
function _c_un_s_1097($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (___FLOAT_BITS_1044($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 if (!($6)) {
  $7 = $1;
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS_1044($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2139095040);
  if (!($11)) {
   $14 = HEAP32[(gb + (14717720) | 0)>>2]|0;
   $15 = $14 & -8388609;
   $16 = $15;
   HEAP32[(gb + (14717720) | 0)>>2] = $16;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $13 = $12 | 8388608;
 $16 = $13;
 HEAP32[(gb + (14717720) | 0)>>2] = $16;
 STACKTOP = sp;return;
}
function _c_f_s_1098() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $1 = $0 & -8388609;
 HEAP32[(gb + (14717720) | 0)>>2] = $1;
 return;
}
function _cvt_l_s_1099($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_l_s_1100($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_l_s_1101($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_l_s_1102($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_l_s_1103($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _round_l_s_1100($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_roundf((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _trunc_l_s_1101($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_truncf((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _ceil_l_s_1102($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _floor_l_s_1103($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_floor((+$3)));
 $5 = (~~$4)>>>0;
 $6 = +Math_abs($4) >= 1.0 ? $4 > 0.0 ? (~~+Math_min(+Math_floor($4 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($4 - +(~~$4 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function _cvt_w_s_1104($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = HEAP32[(gb + (14717720) | 0)>>2]|0;
 $3 = $2 & 3;
 switch ($3|0) {
 case 0:  {
  $4 = $0;
  $5 = $1;
  _round_w_s_1105($4,$5);
  break;
 }
 case 1:  {
  $6 = $0;
  $7 = $1;
  _trunc_w_s_1106($6,$7);
  break;
 }
 case 2:  {
  $8 = $0;
  $9 = $1;
  _ceil_w_s_1107($8,$9);
  break;
 }
 case 3:  {
  $10 = $0;
  $11 = $1;
  _floor_w_s_1108($10,$11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _round_w_s_1105($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_roundf((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _trunc_w_s_1106($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+_truncf((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _ceil_w_s_1107($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _floor_w_s_1108($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4)));
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _cvt_d_s_1109($source,$dest) {
 $source = $source|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $dest;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 STACKTOP = sp;return;
}
function _neg_s_1110($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _mov_s_1111($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 HEAPF32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function _abs_s_1112($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_abs((+$3)));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _sqrt_s_1113($source,$target) {
 $source = $source|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $target;
 _set_rounding_1040();
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_sqrt((+$3)));
 $5 = $1;
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _div_s_1115($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 / $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _mul_s_1116($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _sub_s_1117($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _add_s_1118($source1,$source2,$target) {
 $source1 = $source1|0;
 $source2 = $source2|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source1;
 $1 = $source2;
 $2 = $target;
 _set_rounding_1040();
 $3 = $0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 $8 = $2;
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _TLBWrite_1120($idx) {
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $idx;
 $1 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $2 = ($1|0)!=(0);
 L1: do {
  if ($2) {
   $3 = $0;
   $4 = ((gb + (23106792) | 0) + (($3*52)|0)|0);
   $5 = ((($4)) + 18|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   L3: do {
    if ($7) {
     $8 = $0;
     $9 = ((gb + (23106792) | 0) + (($8*52)|0)|0);
     $10 = ((($9)) + 28|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = $11 >>> 12;
     $i = $12;
     while(1) {
      $13 = $i;
      $14 = $0;
      $15 = ((gb + (23106792) | 0) + (($14*52)|0)|0);
      $16 = ((($15)) + 32|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = $17 >>> 12;
      $19 = ($13>>>0)<=($18>>>0);
      if (!($19)) {
       break L3;
      }
      $20 = $i;
      $21 = ((gb + (23109846) | 0) + ($20)|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)!=(0);
      do {
       if (!($23)) {
        $24 = $i;
        $25 = ((gb + (14718184) | 0) + ($24<<2)|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = $26 >>> 12;
        $28 = ((gb + (23109846) | 0) + ($27)|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = $29 << 24 >> 24;
        $31 = ($30|0)!=(0);
        if (!($31)) {
         $32 = $i;
         $33 = ((gb + (14718184) | 0) + ($32<<2)|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = $34 >>> 12;
         $36 = (($35) + 131072)|0;
         $37 = ((gb + (23109846) | 0) + ($36)|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = $38 << 24 >> 24;
         $40 = ($39|0)!=(0);
         if (!($40)) {
          break;
         }
        }
        $41 = $i;
        $42 = ((gb + (23109846) | 0) + ($41)|0);
        HEAP8[$42>>0] = 1;
       }
      } while(0);
      $43 = $i;
      $44 = ((gb + (23109846) | 0) + ($43)|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = ($45<<24>>24)!=(0);
      $47 = $i;
      if ($46) {
       $60 = ((gb + (10523024) | 0) + ($47<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)!=(0|0);
       if ($62) {
        $63 = $i;
        $64 = ((gb + (10523024) | 0) + ($63<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ((($65)) + 40|0);
        HEAP32[$66>>2] = 0;
       }
      } else {
       $48 = ((gb + (14718184) | 0) + ($47<<2)|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $49 & 8384512;
       $51 = (($50>>>0) / 4)&-1;
       $52 = ((gb + (21216) | 0) + ($51<<2)|0);
       $53 = (_adler32(0,($52|0),4096)|0);
       $54 = $i;
       $55 = ((gb + (10523024) | 0) + ($54<<2)|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ((($56)) + 40|0);
       HEAP32[$57>>2] = $53;
       $58 = $i;
       $59 = ((gb + (23109846) | 0) + ($58)|0);
       HEAP8[$59>>0] = 1;
      }
      $67 = $i;
      $68 = (($67) + 1)|0;
      $i = $68;
     }
    }
   } while(0);
   $69 = $0;
   $70 = ((gb + (23106792) | 0) + (($69*52)|0)|0);
   $71 = ((($70)) + 26|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)!=(0);
   if ($73) {
    $74 = $0;
    $75 = ((gb + (23106792) | 0) + (($74*52)|0)|0);
    $76 = ((($75)) + 40|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 >>> 12;
    $i = $78;
    while(1) {
     $79 = $i;
     $80 = $0;
     $81 = ((gb + (23106792) | 0) + (($80*52)|0)|0);
     $82 = ((($81)) + 44|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $83 >>> 12;
     $85 = ($79>>>0)<=($84>>>0);
     if (!($85)) {
      break L1;
     }
     $86 = $i;
     $87 = ((gb + (23109846) | 0) + ($86)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)!=(0);
     do {
      if (!($89)) {
       $90 = $i;
       $91 = ((gb + (14718184) | 0) + ($90<<2)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 >>> 12;
       $94 = ((gb + (23109846) | 0) + ($93)|0);
       $95 = HEAP8[$94>>0]|0;
       $96 = $95 << 24 >> 24;
       $97 = ($96|0)!=(0);
       if (!($97)) {
        $98 = $i;
        $99 = ((gb + (14718184) | 0) + ($98<<2)|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = $100 >>> 12;
        $102 = (($101) + 131072)|0;
        $103 = ((gb + (23109846) | 0) + ($102)|0);
        $104 = HEAP8[$103>>0]|0;
        $105 = $104 << 24 >> 24;
        $106 = ($105|0)!=(0);
        if (!($106)) {
         break;
        }
       }
       $107 = $i;
       $108 = ((gb + (23109846) | 0) + ($107)|0);
       HEAP8[$108>>0] = 1;
      }
     } while(0);
     $109 = $i;
     $110 = ((gb + (23109846) | 0) + ($109)|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)!=(0);
     $113 = $i;
     if ($112) {
      $126 = ((gb + (10523024) | 0) + ($113<<2)|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)!=(0|0);
      if ($128) {
       $129 = $i;
       $130 = ((gb + (10523024) | 0) + ($129<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ((($131)) + 40|0);
       HEAP32[$132>>2] = 0;
      }
     } else {
      $114 = ((gb + (14718184) | 0) + ($113<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115 & 8384512;
      $117 = (($116>>>0) / 4)&-1;
      $118 = ((gb + (21216) | 0) + ($117<<2)|0);
      $119 = (_adler32(0,($118|0),4096)|0);
      $120 = $i;
      $121 = ((gb + (10523024) | 0) + ($120<<2)|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 40|0);
      HEAP32[$123>>2] = $119;
      $124 = $i;
      $125 = ((gb + (23109846) | 0) + ($124)|0);
      HEAP8[$125>>0] = 1;
     }
     $133 = $i;
     $134 = (($133) + 1)|0;
     $i = $134;
    }
   }
  }
 } while(0);
 $135 = $0;
 $136 = ((gb + (23106792) | 0) + (($135*52)|0)|0);
 _tlb_unmap($136);
 $137 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $138 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $139 = $137 & $138;
 $140 = $139 & 1;
 $141 = $140&255;
 $142 = $0;
 $143 = ((gb + (23106792) | 0) + (($142*52)|0)|0);
 $144 = ((($143)) + 8|0);
 HEAP8[$144>>0] = $141;
 $145 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $146 = $145 & 1073741760;
 $147 = $146 >>> 6;
 $148 = $0;
 $149 = ((gb + (23106792) | 0) + (($148*52)|0)|0);
 $150 = ((($149)) + 12|0);
 HEAP32[$150>>2] = $147;
 $151 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $152 = $151 & 1073741760;
 $153 = $152 >>> 6;
 $154 = $0;
 $155 = ((gb + (23106792) | 0) + (($154*52)|0)|0);
 $156 = ((($155)) + 20|0);
 HEAP32[$156>>2] = $153;
 $157 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $158 = $157 & 56;
 $159 = $158 >>> 3;
 $160 = $159&255;
 $161 = $0;
 $162 = ((gb + (23106792) | 0) + (($161*52)|0)|0);
 $163 = ((($162)) + 16|0);
 HEAP8[$163>>0] = $160;
 $164 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $165 = $164 & 56;
 $166 = $165 >>> 3;
 $167 = $166&255;
 $168 = $0;
 $169 = ((gb + (23106792) | 0) + (($168*52)|0)|0);
 $170 = ((($169)) + 24|0);
 HEAP8[$170>>0] = $167;
 $171 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $172 = $171 & 4;
 $173 = $172 >>> 2;
 $174 = $173&255;
 $175 = $0;
 $176 = ((gb + (23106792) | 0) + (($175*52)|0)|0);
 $177 = ((($176)) + 17|0);
 HEAP8[$177>>0] = $174;
 $178 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $179 = $178 & 4;
 $180 = $179 >>> 2;
 $181 = $180&255;
 $182 = $0;
 $183 = ((gb + (23106792) | 0) + (($182*52)|0)|0);
 $184 = ((($183)) + 25|0);
 HEAP8[$184>>0] = $181;
 $185 = HEAP32[((((gb + (14717332) | 0)) + 8|0))>>2]|0;
 $186 = $185 & 2;
 $187 = $186 >>> 1;
 $188 = $187&255;
 $189 = $0;
 $190 = ((gb + (23106792) | 0) + (($189*52)|0)|0);
 $191 = ((($190)) + 18|0);
 HEAP8[$191>>0] = $188;
 $192 = HEAP32[((((gb + (14717332) | 0)) + 12|0))>>2]|0;
 $193 = $192 & 2;
 $194 = $193 >>> 1;
 $195 = $194&255;
 $196 = $0;
 $197 = ((gb + (23106792) | 0) + (($196*52)|0)|0);
 $198 = ((($197)) + 26|0);
 HEAP8[$198>>0] = $195;
 $199 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
 $200 = $199 & 255;
 $201 = $200&255;
 $202 = $0;
 $203 = ((gb + (23106792) | 0) + (($202*52)|0)|0);
 $204 = ((($203)) + 9|0);
 HEAP8[$204>>0] = $201;
 $205 = HEAP32[((((gb + (14717332) | 0)) + 40|0))>>2]|0;
 $206 = $205 & -8192;
 $207 = $206 >>> 13;
 $208 = $0;
 $209 = ((gb + (23106792) | 0) + (($208*52)|0)|0);
 $210 = ((($209)) + 4|0);
 HEAP32[$210>>2] = $207;
 $211 = HEAP32[((((gb + (14717332) | 0)) + 20|0))>>2]|0;
 $212 = $211 & 33546240;
 $213 = $212 >>> 13;
 $214 = $213&65535;
 $215 = $0;
 $216 = ((gb + (23106792) | 0) + (($215*52)|0)|0);
 HEAP16[$216>>1] = $214;
 $217 = $0;
 $218 = ((gb + (23106792) | 0) + (($217*52)|0)|0);
 $219 = ((($218)) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = $220 << 13;
 $222 = $0;
 $223 = ((gb + (23106792) | 0) + (($222*52)|0)|0);
 $224 = ((($223)) + 28|0);
 HEAP32[$224>>2] = $221;
 $225 = $0;
 $226 = ((gb + (23106792) | 0) + (($225*52)|0)|0);
 $227 = ((($226)) + 28|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = $0;
 $230 = ((gb + (23106792) | 0) + (($229*52)|0)|0);
 $231 = HEAP16[$230>>1]|0;
 $232 = $231 << 16 >> 16;
 $233 = $232 << 12;
 $234 = (($228) + ($233))|0;
 $235 = (($234) + 4095)|0;
 $236 = $0;
 $237 = ((gb + (23106792) | 0) + (($236*52)|0)|0);
 $238 = ((($237)) + 32|0);
 HEAP32[$238>>2] = $235;
 $239 = $0;
 $240 = ((gb + (23106792) | 0) + (($239*52)|0)|0);
 $241 = ((($240)) + 12|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = $242 << 12;
 $244 = $0;
 $245 = ((gb + (23106792) | 0) + (($244*52)|0)|0);
 $246 = ((($245)) + 36|0);
 HEAP32[$246>>2] = $243;
 $247 = $0;
 $248 = ((gb + (23106792) | 0) + (($247*52)|0)|0);
 $249 = ((($248)) + 32|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($250) + 1)|0;
 $252 = $0;
 $253 = ((gb + (23106792) | 0) + (($252*52)|0)|0);
 $254 = ((($253)) + 40|0);
 HEAP32[$254>>2] = $251;
 $255 = $0;
 $256 = ((gb + (23106792) | 0) + (($255*52)|0)|0);
 $257 = ((($256)) + 40|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = $0;
 $260 = ((gb + (23106792) | 0) + (($259*52)|0)|0);
 $261 = HEAP16[$260>>1]|0;
 $262 = $261 << 16 >> 16;
 $263 = $262 << 12;
 $264 = (($258) + ($263))|0;
 $265 = (($264) + 4095)|0;
 $266 = $0;
 $267 = ((gb + (23106792) | 0) + (($266*52)|0)|0);
 $268 = ((($267)) + 44|0);
 HEAP32[$268>>2] = $265;
 $269 = $0;
 $270 = ((gb + (23106792) | 0) + (($269*52)|0)|0);
 $271 = ((($270)) + 20|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272 << 12;
 $274 = $0;
 $275 = ((gb + (23106792) | 0) + (($274*52)|0)|0);
 $276 = ((($275)) + 48|0);
 HEAP32[$276>>2] = $273;
 $277 = $0;
 $278 = ((gb + (23106792) | 0) + (($277*52)|0)|0);
 _tlb_map($278);
 $279 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $280 = ($279|0)!=(0);
 if (!($280)) {
  STACKTOP = sp;return;
 }
 $281 = $0;
 $282 = ((gb + (23106792) | 0) + (($281*52)|0)|0);
 $283 = ((($282)) + 18|0);
 $284 = HEAP8[$283>>0]|0;
 $285 = ($284<<24>>24)!=(0);
 L39: do {
  if ($285) {
   $286 = $0;
   $287 = ((gb + (23106792) | 0) + (($286*52)|0)|0);
   $288 = ((($287)) + 28|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 >>> 12;
   $i1 = $290;
   while(1) {
    $291 = $i1;
    $292 = $0;
    $293 = ((gb + (23106792) | 0) + (($292*52)|0)|0);
    $294 = ((($293)) + 32|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = $295 >>> 12;
    $297 = ($291>>>0)<=($296>>>0);
    if (!($297)) {
     break L39;
    }
    $298 = $i1;
    $299 = ((gb + (10523024) | 0) + ($298<<2)|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)!=(0|0);
    if ($301) {
     $302 = $i1;
     $303 = ((gb + (10523024) | 0) + ($302<<2)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($304)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($306|0)!=(0);
     if ($307) {
      $308 = $i1;
      $309 = ((gb + (10523024) | 0) + ($308<<2)|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = ((($310)) + 40|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = $i1;
      $314 = ((gb + (14718184) | 0) + ($313<<2)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $315 & 8384512;
      $317 = (($316>>>0) / 4)&-1;
      $318 = ((gb + (21216) | 0) + ($317<<2)|0);
      $319 = (_adler32(0,($318|0),4096)|0);
      $320 = ($312|0)==($319|0);
      if ($320) {
       $321 = $i1;
       $322 = ((gb + (23109846) | 0) + ($321)|0);
       HEAP8[$322>>0] = 0;
      }
     }
    }
    $323 = $i1;
    $324 = (($323) + 1)|0;
    $i1 = $324;
   }
  }
 } while(0);
 $325 = $0;
 $326 = ((gb + (23106792) | 0) + (($325*52)|0)|0);
 $327 = ((($326)) + 26|0);
 $328 = HEAP8[$327>>0]|0;
 $329 = ($328<<24>>24)!=(0);
 if (!($329)) {
  STACKTOP = sp;return;
 }
 $330 = $0;
 $331 = ((gb + (23106792) | 0) + (($330*52)|0)|0);
 $332 = ((($331)) + 40|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = $333 >>> 12;
 $i1 = $334;
 while(1) {
  $335 = $i1;
  $336 = $0;
  $337 = ((gb + (23106792) | 0) + (($336*52)|0)|0);
  $338 = ((($337)) + 44|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $339 >>> 12;
  $341 = ($335>>>0)<=($340>>>0);
  if (!($341)) {
   break;
  }
  $342 = $i1;
  $343 = ((gb + (10523024) | 0) + ($342<<2)|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344|0)!=(0|0);
  if ($345) {
   $346 = $i1;
   $347 = ((gb + (10523024) | 0) + ($346<<2)|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ((($348)) + 40|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)!=(0);
   if ($351) {
    $352 = $i1;
    $353 = ((gb + (10523024) | 0) + ($352<<2)|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ((($354)) + 40|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = $i1;
    $358 = ((gb + (14718184) | 0) + ($357<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $359 & 8384512;
    $361 = (($360>>>0) / 4)&-1;
    $362 = ((gb + (21216) | 0) + ($361<<2)|0);
    $363 = (_adler32(0,($362|0),4096)|0);
    $364 = ($356|0)==($363|0);
    if ($364) {
     $365 = $i1;
     $366 = ((gb + (23109846) | 0) + ($365)|0);
     HEAP8[$366>>0] = 0;
    }
   }
  }
  $367 = $i1;
  $368 = (($367) + 1)|0;
  $i1 = $368;
 }
 STACKTOP = sp;return;
}
function _init_r4300($r4300) {
 $r4300 = $r4300|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r4300;
 $1 = $0;
 _init_mi($1);
 STACKTOP = sp;return;
}
function _r4300_regs() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (8409952) | 0)|0);
}
function _r4300_mult_hi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (8410208) | 0)|0);
}
function _r4300_mult_lo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (8410216) | 0)|0);
}
function _r4300_llbit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (10522032) | 0)|0);
}
function _r4300_pc() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522028) | 0)>>2]|0;
 $1 = ((($0)) + 20|0);
 return ($1|0);
}
function _r4300_last_addr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (10523012) | 0)|0);
}
function _r4300_next_interrupt() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((gb + (10523016) | 0)|0);
}
function _get_r4300_emumode() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 return ($0|0);
}
function _invalidate_r4300_cached_code($address,$size) {
 $address = $address|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $size;
 $2 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 _invalidate_cached_code_hacktarux($4,$5);
 STACKTOP = sp;return;
}
function _savestates_load_set_pc($pc) {
 $pc = $pc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pc;
 $1 = $0;
 _generic_jump_to($1);
 _invalidate_r4300_cached_code(0,0);
 STACKTOP = sp;return;
}
function _init_block($block) {
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $already_exist = 0, $alt_addr = 0, $i = 0, $length = 0, $memsize = 0, $paddr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $block;
 $already_exist = 1;
 $1 = $0;
 $2 = (_get_block_length($1)|0);
 $length = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = $0;
  $7 = (_get_block_memsize($6)|0);
  $memsize = $7;
  $8 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $9 = ($8|0)==(2);
  $10 = $memsize;
  if ($9) {
   $11 = (_malloc_exec($10)|0);
   $12 = $0;
   HEAP32[$12>>2] = $11;
   $13 = $0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    _DebugMessage(1,(gb + (19343) | 0),$vararg_buffer);
    STACKTOP = sp;return;
   }
  } else {
   $16 = (_malloc(($10|0))|0);
   $17 = $0;
   HEAP32[$17>>2] = $16;
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0|0);
   if (!($20)) {
    _DebugMessage(1,(gb + (19449) | 0),$vararg_buffer1);
    STACKTOP = sp;return;
   }
  }
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = $memsize;
  _memset(($22|0),0,($23|0))|0;
  $already_exist = 0;
 }
 $24 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $25 = ($24|0)==(2);
 if ($25) {
  $26 = $0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $34 = $0;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[(gb + (14718132) | 0)>>2] = $36;
  } else {
   HEAP32[(gb + (14718132) | 0)>>2] = 32768;
   $30 = HEAP32[(gb + (14718132) | 0)>>2]|0;
   $31 = (_malloc_exec($30)|0);
   $32 = $0;
   $33 = ((($32)) + 12|0);
   HEAP32[$33>>2] = $31;
  }
  HEAP32[(gb + (14718136) | 0)>>2] = 0;
  $37 = $0;
  $38 = ((($37)) + 12|0);
  HEAP32[(gb + (14718140) | 0)>>2] = $38;
  $39 = $0;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = $0;
   $44 = ((($43)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   _free(($45|0));
   $46 = $0;
   $47 = ((($46)) + 24|0);
   HEAP32[$47>>2] = 0;
  }
  $48 = $0;
  $49 = ((($48)) + 32|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = $0;
   $53 = ((($52)) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   _free(($54|0));
   $55 = $0;
   $56 = ((($55)) + 32|0);
   HEAP32[$56>>2] = 0;
  }
  _init_assembler(0,0,0,0);
  $57 = $0;
  $58 = HEAP32[$57>>2]|0;
  _init_cache($58);
 }
 $59 = $already_exist;
 $60 = ($59|0)!=(0);
 L25: do {
  if ($60) {
   $87 = HEAP32[(gb + (14718164) | 0)>>2]|0;
   HEAP32[(gb + (14718136) | 0)>>2] = $87;
   $i = 0;
   while(1) {
    $88 = $i;
    $89 = $length;
    $90 = ($88|0)<($89|0);
    if (!($90)) {
     break L25;
    }
    $91 = $0;
    $92 = HEAP32[$91>>2]|0;
    $93 = $i;
    $94 = (($92) + (($93*132)|0)|0);
    HEAP32[(gb + (14718144) | 0)>>2] = $94;
    $95 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $96 = ((($95)) + 28|0);
    HEAP32[$96>>2] = 0;
    $97 = $i;
    $98 = HEAP32[(gb + (14718164) | 0)>>2]|0;
    $99 = $length;
    $100 = (($98|0) / ($99|0))&-1;
    $101 = Math_imul($97, $100)|0;
    $102 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $103 = ((($102)) + 24|0);
    HEAP32[$103>>2] = $101;
    $104 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
    $105 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    HEAP32[$105>>2] = $104;
    $106 = $i;
    $107 = (($106) + 1)|0;
    $i = $107;
   }
  } else {
   $i = 0;
   while(1) {
    $61 = $i;
    $62 = $length;
    $63 = ($61|0)<($62|0);
    if (!($63)) {
     break;
    }
    $64 = $0;
    $65 = HEAP32[$64>>2]|0;
    $66 = $i;
    $67 = (($65) + (($66*132)|0)|0);
    HEAP32[(gb + (14718144) | 0)>>2] = $67;
    $68 = $0;
    $69 = ((($68)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $i;
    $72 = $71<<2;
    $73 = (($70) + ($72))|0;
    $74 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $75 = ((($74)) + 20|0);
    HEAP32[$75>>2] = $73;
    $76 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $77 = ((($76)) + 28|0);
    HEAP32[$77>>2] = 0;
    $78 = HEAP32[(gb + (14718136) | 0)>>2]|0;
    $79 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $80 = ((($79)) + 24|0);
    HEAP32[$80>>2] = $78;
    _RNOTCOMPILED();
    $81 = HEAP32[(gb + (10522016) | 0)>>2]|0;
    $82 = ($81|0)==(2);
    if ($82) {
     $83 = HEAP32[(gb + (14718160) | 0)>>2]|0;
     mftCall_v($83|0);
    }
    $84 = $i;
    $85 = (($84) + 1)|0;
    $i = $85;
   }
   $86 = HEAP32[(gb + (14718136) | 0)>>2]|0;
   HEAP32[(gb + (14718164) | 0)>>2] = $86;
  }
 } while(0);
 $108 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $109 = ($108|0)==(2);
 if ($109) {
  _free_all_registers();
  $110 = HEAP32[(gb + (14718136) | 0)>>2]|0;
  $111 = $0;
  $112 = ((($111)) + 16|0);
  HEAP32[$112>>2] = $110;
  $113 = HEAP32[(gb + (14718132) | 0)>>2]|0;
  $114 = $0;
  $115 = ((($114)) + 20|0);
  HEAP32[$115>>2] = $113;
  $116 = $0;
  $117 = ((($116)) + 24|0);
  $118 = $0;
  $119 = ((($118)) + 28|0);
  $120 = $0;
  $121 = ((($120)) + 32|0);
  $122 = $0;
  $123 = ((($122)) + 36|0);
  _free_assembler($117,$119,$121,$123);
 }
 $124 = $0;
 $125 = ((($124)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 >>> 12;
 $128 = ((gb + (23109846) | 0) + ($127)|0);
 HEAP8[$128>>0] = 0;
 $129 = $0;
 $130 = ((($129)) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131>>>0)<(2147483648);
 if (!($132)) {
  $133 = $0;
  $134 = ((($133)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135>>>0)>=(3221225472);
  if (!($136)) {
   $251 = $0;
   $252 = ((($251)) + 4|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 ^ 536870912;
   $alt_addr = $254;
   $255 = $alt_addr;
   $256 = $255 >>> 12;
   $257 = ((gb + (23109846) | 0) + ($256)|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = ($258<<24>>24)!=(0);
   if (!($259)) {
    STACKTOP = sp;return;
   }
   $260 = $alt_addr;
   $261 = $260 >>> 12;
   $262 = ((gb + (10523024) | 0) + ($261<<2)|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = ($263|0)!=(0|0);
   if (!($264)) {
    $265 = (_malloc(44)|0);
    $266 = $alt_addr;
    $267 = $266 >>> 12;
    $268 = ((gb + (10523024) | 0) + ($267<<2)|0);
    HEAP32[$268>>2] = $265;
    $269 = $alt_addr;
    $270 = $269 >>> 12;
    $271 = ((gb + (10523024) | 0) + ($270<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($272)) + 12|0);
    HEAP32[$273>>2] = 0;
    $274 = $alt_addr;
    $275 = $274 >>> 12;
    $276 = ((gb + (10523024) | 0) + ($275<<2)|0);
    $277 = HEAP32[$276>>2]|0;
    HEAP32[$277>>2] = 0;
    $278 = $alt_addr;
    $279 = $278 >>> 12;
    $280 = ((gb + (10523024) | 0) + ($279<<2)|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = ((($281)) + 24|0);
    HEAP32[$282>>2] = 0;
    $283 = $alt_addr;
    $284 = $283 >>> 12;
    $285 = ((gb + (10523024) | 0) + ($284<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ((($286)) + 32|0);
    HEAP32[$287>>2] = 0;
    $288 = $alt_addr;
    $289 = $288 & -4096;
    $290 = $alt_addr;
    $291 = $290 >>> 12;
    $292 = ((gb + (10523024) | 0) + ($291<<2)|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ((($293)) + 4|0);
    HEAP32[$294>>2] = $289;
    $295 = $alt_addr;
    $296 = $295 & -4096;
    $297 = (($296) + 4096)|0;
    $298 = $alt_addr;
    $299 = $298 >>> 12;
    $300 = ((gb + (10523024) | 0) + ($299<<2)|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = ((($301)) + 8|0);
    HEAP32[$302>>2] = $297;
   }
   $303 = $alt_addr;
   $304 = $303 >>> 12;
   $305 = ((gb + (10523024) | 0) + ($304<<2)|0);
   $306 = HEAP32[$305>>2]|0;
   _init_block($306);
   STACKTOP = sp;return;
  }
 }
 $137 = $0;
 $138 = ((($137)) + 4|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (_virtual_to_physical_address($139,2)|0);
 $paddr = $140;
 $141 = $paddr;
 $142 = $141 >>> 12;
 $143 = ((gb + (23109846) | 0) + ($142)|0);
 HEAP8[$143>>0] = 0;
 $144 = $paddr;
 $145 = $144 >>> 12;
 $146 = ((gb + (10523024) | 0) + ($145<<2)|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  $149 = (_malloc(44)|0);
  $150 = $paddr;
  $151 = $150 >>> 12;
  $152 = ((gb + (10523024) | 0) + ($151<<2)|0);
  HEAP32[$152>>2] = $149;
  $153 = $paddr;
  $154 = $153 >>> 12;
  $155 = ((gb + (10523024) | 0) + ($154<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 12|0);
  HEAP32[$157>>2] = 0;
  $158 = $paddr;
  $159 = $158 >>> 12;
  $160 = ((gb + (10523024) | 0) + ($159<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$161>>2] = 0;
  $162 = $paddr;
  $163 = $162 >>> 12;
  $164 = ((gb + (10523024) | 0) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ((($165)) + 24|0);
  HEAP32[$166>>2] = 0;
  $167 = $paddr;
  $168 = $167 >>> 12;
  $169 = ((gb + (10523024) | 0) + ($168<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ((($170)) + 32|0);
  HEAP32[$171>>2] = 0;
  $172 = $paddr;
  $173 = $172 & -4096;
  $174 = $paddr;
  $175 = $174 >>> 12;
  $176 = ((gb + (10523024) | 0) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($177)) + 4|0);
  HEAP32[$178>>2] = $173;
  $179 = $paddr;
  $180 = $179 & -4096;
  $181 = (($180) + 4096)|0;
  $182 = $paddr;
  $183 = $182 >>> 12;
  $184 = ((gb + (10523024) | 0) + ($183<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($185)) + 8|0);
  HEAP32[$186>>2] = $181;
 }
 $187 = $paddr;
 $188 = $187 >>> 12;
 $189 = ((gb + (10523024) | 0) + ($188<<2)|0);
 $190 = HEAP32[$189>>2]|0;
 _init_block($190);
 $191 = $0;
 $192 = ((($191)) + 8|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = $0;
 $195 = ((($194)) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (($193) - ($196))|0;
 $198 = (($197) - 4)|0;
 $199 = $paddr;
 $200 = (($199) + ($198))|0;
 $paddr = $200;
 $201 = $paddr;
 $202 = $201 >>> 12;
 $203 = ((gb + (23109846) | 0) + ($202)|0);
 HEAP8[$203>>0] = 0;
 $204 = $paddr;
 $205 = $204 >>> 12;
 $206 = ((gb + (10523024) | 0) + ($205<<2)|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)!=(0|0);
 if (!($208)) {
  $209 = (_malloc(44)|0);
  $210 = $paddr;
  $211 = $210 >>> 12;
  $212 = ((gb + (10523024) | 0) + ($211<<2)|0);
  HEAP32[$212>>2] = $209;
  $213 = $paddr;
  $214 = $213 >>> 12;
  $215 = ((gb + (10523024) | 0) + ($214<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 12|0);
  HEAP32[$217>>2] = 0;
  $218 = $paddr;
  $219 = $218 >>> 12;
  $220 = ((gb + (10523024) | 0) + ($219<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  HEAP32[$221>>2] = 0;
  $222 = $paddr;
  $223 = $222 >>> 12;
  $224 = ((gb + (10523024) | 0) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ((($225)) + 24|0);
  HEAP32[$226>>2] = 0;
  $227 = $paddr;
  $228 = $227 >>> 12;
  $229 = ((gb + (10523024) | 0) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($230)) + 32|0);
  HEAP32[$231>>2] = 0;
  $232 = $paddr;
  $233 = $232 & -4096;
  $234 = $paddr;
  $235 = $234 >>> 12;
  $236 = ((gb + (10523024) | 0) + ($235<<2)|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ((($237)) + 4|0);
  HEAP32[$238>>2] = $233;
  $239 = $paddr;
  $240 = $239 & -4096;
  $241 = (($240) + 4096)|0;
  $242 = $paddr;
  $243 = $242 >>> 12;
  $244 = ((gb + (10523024) | 0) + ($243<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ((($245)) + 8|0);
  HEAP32[$246>>2] = $241;
 }
 $247 = $paddr;
 $248 = $247 >>> 12;
 $249 = ((gb + (10523024) | 0) + ($248<<2)|0);
 $250 = HEAP32[$249>>2]|0;
 _init_block($250);
 STACKTOP = sp;return;
}
function _free_block($block) {
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $memsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block;
 $1 = $0;
 $2 = (_get_block_memsize($1)|0);
 $memsize = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $7 = ($6|0)==(2);
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  if ($7) {
   $10 = $memsize;
   _free_exec($9,$10);
  } else {
   _free(($9|0));
  }
  $11 = $0;
  HEAP32[$11>>2] = 0;
 }
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _free_exec($18,$21);
  $22 = $0;
  $23 = ((($22)) + 12|0);
  HEAP32[$23>>2] = 0;
 }
 $24 = $0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $0;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  _free(($30|0));
  $31 = $0;
  $32 = ((($31)) + 24|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = $0;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $0;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 _free(($39|0));
 $40 = $0;
 $41 = ((($40)) + 32|0);
 HEAP32[$41>>2] = 0;
 STACKTOP = sp;return;
}
function _recompile_block($source,$block,$func) {
 $source = $source|0;
 $block = $block|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $address2 = 0, $finished = 0, $i = 0, $length = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $block;
 $2 = $func;
 $finished = 0;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) - ($8))|0;
 $10 = (($9>>>0) / 4)&-1;
 $length = $10;
 $11 = $1;
 HEAP32[(gb + (14718148) | 0)>>2] = $11;
 $12 = $1;
 $13 = ((($12)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $15 = ($14|0)==(2);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[(gb + (14718136) | 0)>>2] = $18;
  $19 = $1;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[(gb + (14718132) | 0)>>2] = $21;
  $22 = $1;
  $23 = ((($22)) + 12|0);
  HEAP32[(gb + (14718140) | 0)>>2] = $23;
  $24 = $1;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = ((($30)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  _init_assembler($26,$29,$32,$35);
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = $38 & 4095;
  $40 = (($39>>>0) / 4)&-1;
  $41 = (($37) + (($40*132)|0)|0);
  _init_cache($41);
 }
 $42 = $2;
 $43 = $42 & 4095;
 $44 = (($43>>>0) / 4)&-1;
 $i = $44;
 while(1) {
  $45 = $finished;
  $46 = ($45|0)!=(2);
  if (!($46)) {
   break;
  }
  $47 = $1;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49>>>0)<(2147483648);
  if ($50) {
   label = 7;
  } else {
   $51 = $1;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53>>>0)>=(3221225472);
   if ($54) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $55 = $1;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $i;
   $59 = $58<<2;
   $60 = (($57) + ($59))|0;
   $61 = (_virtual_to_physical_address($60,0)|0);
   $address2 = $61;
   $62 = $address2;
   $63 = $62 & 4095;
   $64 = (($63>>>0) / 4)&-1;
   $65 = $address2;
   $66 = $65 >>> 12;
   $67 = ((gb + (10523024) | 0) + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + (($64*132)|0)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
   $73 = ($71|0)==($72|0);
   if ($73) {
    $74 = HEAP32[((((gb + (10522036) | 0)) + 960|0))>>2]|0;
    $75 = $address2;
    $76 = $75 & 4095;
    $77 = (($76>>>0) / 4)&-1;
    $78 = $address2;
    $79 = $78 >>> 12;
    $80 = ((gb + (10523024) | 0) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + (($77*132)|0)|0);
    HEAP32[$83>>2] = $74;
   }
  }
  $84 = $0;
  $85 = $i;
  $86 = (($84) + ($85<<2)|0);
  HEAP32[(gb + (14718168) | 0)>>2] = $86;
  $87 = $i;
  $88 = $0;
  $89 = (($88) + ($87<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  HEAP32[(gb + (14718152) | 0)>>2] = $90;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $93 = $0;
  $94 = (($93) + ($92<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)==(0);
  $97 = $96&1;
  HEAP32[(gb + (14718172) | 0)>>2] = $97;
  $98 = $1;
  $99 = HEAP32[$98>>2]|0;
  $100 = $i;
  $101 = (($99) + (($100*132)|0)|0);
  HEAP32[(gb + (14718144) | 0)>>2] = $101;
  $102 = $1;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $i;
  $106 = $105<<2;
  $107 = (($104) + ($106))|0;
  $108 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $109 = ((($108)) + 20|0);
  HEAP32[$109>>2] = $107;
  $110 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $111 = ((($110)) + 28|0);
  HEAP32[$111>>2] = 0;
  $112 = HEAP32[(gb + (14718136) | 0)>>2]|0;
  $113 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $114 = ((($113)) + 24|0);
  HEAP32[$114>>2] = $112;
  HEAP32[(gb + (14718160) | 0)>>2] = 0;
  $115 = HEAP32[(gb + (14718152) | 0)>>2]|0;
  $116 = $115 >>> 26;
  $117 = $116 & 63;
  $118 = ((gb + (1460) | 0) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  mftCall_v($119|0);
  $120 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $121 = ($120|0)==(2);
  if ($121) {
   $122 = HEAP32[(gb + (14718160) | 0)>>2]|0;
   mftCall_v($122|0);
  }
  $123 = $1;
  $124 = HEAP32[$123>>2]|0;
  $125 = $i;
  $126 = (($124) + (($125*132)|0)|0);
  HEAP32[(gb + (14718144) | 0)>>2] = $126;
  $127 = HEAP32[(gb + (14718176) | 0)>>2]|0;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = HEAP32[(gb + (14718176) | 0)>>2]|0;
   $130 = (($129) + -1)|0;
   HEAP32[(gb + (14718176) | 0)>>2] = $130;
   _free_all_registers();
  }
  $131 = $i;
  $132 = $length;
  $133 = (($132) - 2)|0;
  $134 = $length;
  $135 = $134 >> 2;
  $136 = (($133) + ($135))|0;
  $137 = ($131>>>0)>=($136>>>0);
  if ($137) {
   $finished = 2;
  }
  $138 = $i;
  $139 = $length;
  $140 = (($139) - 1)|0;
  $141 = ($138>>>0)>=($140>>>0);
  do {
   if ($141) {
    $142 = $1;
    $143 = ((($142)) + 4|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==(-1543503872);
    if (!($145)) {
     $146 = $1;
     $147 = ((($146)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148>>>0)>=(3221225472);
     if (!($149)) {
      $150 = $1;
      $151 = ((($150)) + 8|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152>>>0)<(2147483648);
      if (!($153)) {
       break;
      }
     }
    }
    $finished = 2;
   }
  } while(0);
  $154 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $155 = HEAP32[$154>>2]|0;
  $156 = HEAP32[((((gb + (10522036) | 0)) + 568|0))>>2]|0;
  $157 = ($155|0)==($156|0);
  $158 = $finished;
  $159 = ($158|0)==(1);
  $or$cond = $157 | $159;
  if ($or$cond) {
   $finished = 2;
  }
  $160 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $161 = HEAP32[$160>>2]|0;
  $162 = HEAP32[((((gb + (10522036) | 0)) + 232|0))>>2]|0;
  $163 = ($161|0)==($162|0);
  if ($163) {
   label = 25;
  } else {
   $164 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $165 = HEAP32[$164>>2]|0;
   $166 = HEAP32[((((gb + (10522036) | 0)) + 236|0))>>2]|0;
   $167 = ($165|0)==($166|0);
   if ($167) {
    label = 25;
   } else {
    $168 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $169 = HEAP32[$168>>2]|0;
    $170 = HEAP32[((((gb + (10522036) | 0)) + 256|0))>>2]|0;
    $171 = ($169|0)==($170|0);
    if ($171) {
     label = 25;
    }
   }
  }
  do {
   if ((label|0) == 25) {
    label = 0;
    $172 = $i;
    $173 = $length;
    $174 = (($173) - 1)|0;
    $175 = ($172>>>0)>=($174>>>0);
    if ($175) {
     $176 = $1;
     $177 = ((($176)) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($178>>>0)>=(3221225472);
     if ($179) {
      break;
     }
     $180 = $1;
     $181 = ((($180)) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ($182>>>0)<(2147483648);
     if ($183) {
      break;
     }
    }
    $finished = 1;
   }
  } while(0);
  $184 = $i;
  $185 = (($184) + 1)|0;
  $i = $185;
 }
 $186 = $i;
 $187 = $length;
 $188 = ($186>>>0)>=($187>>>0);
 if ($188) {
  $189 = $1;
  $190 = HEAP32[$189>>2]|0;
  $191 = $i;
  $192 = (($190) + (($191*132)|0)|0);
  HEAP32[(gb + (14718144) | 0)>>2] = $192;
  $193 = $1;
  $194 = ((($193)) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $i;
  $197 = $196<<2;
  $198 = (($195) + ($197))|0;
  $199 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $200 = ((($199)) + 20|0);
  HEAP32[$200>>2] = $198;
  $201 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $202 = ((($201)) + 28|0);
  HEAP32[$202>>2] = 0;
  $203 = HEAP32[(gb + (14718136) | 0)>>2]|0;
  $204 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  $205 = ((($204)) + 24|0);
  HEAP32[$205>>2] = $203;
  _RFIN_BLOCK();
  $206 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $207 = ($206|0)==(2);
  if ($207) {
   $208 = HEAP32[(gb + (14718160) | 0)>>2]|0;
   mftCall_v($208|0);
  }
  $209 = $i;
  $210 = (($209) + 1)|0;
  $i = $210;
  $211 = $i;
  $212 = $length;
  $213 = (($212) - 1)|0;
  $214 = $length;
  $215 = $214 >> 2;
  $216 = (($213) + ($215))|0;
  $217 = ($211>>>0)<($216>>>0);
  if ($217) {
   $218 = $1;
   $219 = HEAP32[$218>>2]|0;
   $220 = $i;
   $221 = (($219) + (($220*132)|0)|0);
   HEAP32[(gb + (14718144) | 0)>>2] = $221;
   $222 = $1;
   $223 = ((($222)) + 4|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $i;
   $226 = $225<<2;
   $227 = (($224) + ($226))|0;
   $228 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $229 = ((($228)) + 20|0);
   HEAP32[$229>>2] = $227;
   $230 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $231 = ((($230)) + 28|0);
   HEAP32[$231>>2] = 0;
   $232 = HEAP32[(gb + (14718136) | 0)>>2]|0;
   $233 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $234 = ((($233)) + 24|0);
   HEAP32[$234>>2] = $232;
   _RFIN_BLOCK();
   $235 = HEAP32[(gb + (10522016) | 0)>>2]|0;
   $236 = ($235|0)==(2);
   if ($236) {
    $237 = HEAP32[(gb + (14718160) | 0)>>2]|0;
    mftCall_v($237|0);
   }
   $238 = $i;
   $239 = (($238) + 1)|0;
   $i = $239;
  }
 } else {
  $240 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $241 = ($240|0)==(2);
  if ($241) {
   _genlink_subblock();
  }
 }
 $242 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $243 = ($242|0)==(2);
 if (!($243)) {
  STACKTOP = sp;return;
 }
 _free_all_registers();
 $244 = $1;
 $245 = HEAP32[$244>>2]|0;
 $246 = $2;
 $247 = $246 & 4095;
 $248 = (($247>>>0) / 4)&-1;
 $249 = $i;
 $250 = $1;
 _passe2($245,$248,$249,$250);
 $251 = HEAP32[(gb + (14718136) | 0)>>2]|0;
 $252 = $1;
 $253 = ((($252)) + 16|0);
 HEAP32[$253>>2] = $251;
 $254 = HEAP32[(gb + (14718132) | 0)>>2]|0;
 $255 = $1;
 $256 = ((($255)) + 20|0);
 HEAP32[$256>>2] = $254;
 $257 = $1;
 $258 = ((($257)) + 24|0);
 $259 = $1;
 $260 = ((($259)) + 28|0);
 $261 = $1;
 $262 = ((($261)) + 32|0);
 $263 = $1;
 $264 = ((($263)) + 36|0);
 _free_assembler($258,$260,$262,$264);
 STACKTOP = sp;return;
}
function _recompile_opcode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718168) | 0)>>2]|0;
 $1 = ((($0)) + 4|0);
 HEAP32[(gb + (14718168) | 0)>>2] = $1;
 $2 = HEAP32[(gb + (14718168) | 0)>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[(gb + (14718152) | 0)>>2] = $3;
 $4 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $5 = ((($4)) + 132|0);
 HEAP32[(gb + (14718144) | 0)>>2] = $5;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + -132|0);
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4)|0;
 $11 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $14 = ((($13)) + 28|0);
 HEAP32[$14>>2] = 0;
 $15 = (_is_jump()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  _RNOP();
  $25 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $26 = ($25|0)==(2);
  if (!($26)) {
   HEAP32[(gb + (14718176) | 0)>>2] = 2;
   return;
  }
  $27 = HEAP32[(gb + (14718160) | 0)>>2]|0;
  mftCall_v($27|0);
  HEAP32[(gb + (14718176) | 0)>>2] = 2;
  return;
 } else {
  HEAP32[(gb + (14718160) | 0)>>2] = 0;
  $17 = HEAP32[(gb + (14718152) | 0)>>2]|0;
  $18 = $17 >>> 26;
  $19 = $18 & 63;
  $20 = ((gb + (1460) | 0) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  mftCall_v($21|0);
  $22 = HEAP32[(gb + (10522016) | 0)>>2]|0;
  $23 = ($22|0)==(2);
  if (!($23)) {
   HEAP32[(gb + (14718176) | 0)>>2] = 2;
   return;
  }
  $24 = HEAP32[(gb + (14718160) | 0)>>2]|0;
  mftCall_v($24|0);
  HEAP32[(gb + (14718176) | 0)>>2] = 2;
  return;
 }
}
function _realloc_exec($ptr,$oldsize,$newsize) {
 $ptr = $ptr|0;
 $oldsize = $oldsize|0;
 $newsize = $newsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $copysize = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $oldsize;
 $2 = $newsize;
 $3 = $2;
 $4 = (_malloc_exec($3)|0);
 $block = $4;
 $5 = $block;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = $2;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $10 = $1;
   $copysize = $10;
  } else {
   $11 = $2;
   $copysize = $11;
  }
  $12 = $block;
  $13 = $0;
  $14 = $copysize;
  _memcpy(($12|0),($13|0),($14|0))|0;
 }
 $15 = $0;
 $16 = $1;
 _free_exec($15,$16);
 $17 = $block;
 STACKTOP = sp;return ($17|0);
}
function _get_block_length($block) {
 $block = $block|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) - ($6))|0;
 $8 = (($7>>>0) / 4)&-1;
 STACKTOP = sp;return ($8|0);
}
function _get_block_memsize($block) {
 $block = $block|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block;
 $1 = $0;
 $2 = (_get_block_length($1)|0);
 $length = $2;
 $3 = $length;
 $4 = (($3) + 1)|0;
 $5 = $length;
 $6 = $5 >> 2;
 $7 = (($4) + ($6))|0;
 $8 = ($7*132)|0;
 STACKTOP = sp;return ($8|0);
}
function _malloc_exec($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $block = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $size;
 $2 = $1;
 $3 = (_mmap((0|0),($2|0),7,34,-1,0)|0);
 $block = $3;
 $4 = $block;
 $5 = ($4|0)==((-1)|0);
 if ($5) {
  $6 = $1;
  HEAP32[$vararg_buffer>>2] = $6;
  _DebugMessage(1,(gb + (19512) | 0),$vararg_buffer);
  $0 = 0;
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = $block;
  $0 = $7;
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _RNOTCOMPILED() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 956|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (712) | 0);
 return;
}
function _free_exec($ptr,$length) {
 $ptr = $ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $length;
 $2 = $0;
 $3 = $1;
 (_munmap(($2|0),($3|0))|0);
 STACKTOP = sp;return;
}
function _RFIN_BLOCK() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 952|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (713) | 0);
 return;
}
function _is_jump() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 26;
 $2 = $1 & 63;
 $3 = ((gb + (1460) | 0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 mftCall_v($4|0);
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[((((gb + (10522036) | 0)) + 232|0))>>2]|0;
 $8 = ($6|0)==($7|0);
 do {
  if ($8) {
   $278 = 1;
  } else {
   $9 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[((((gb + (10522036) | 0)) + 236|0))>>2]|0;
   $12 = ($10|0)==($11|0);
   if ($12) {
    $278 = 1;
   } else {
    $13 = HEAP32[(gb + (14718144) | 0)>>2]|0;
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[((((gb + (10522036) | 0)) + 240|0))>>2]|0;
    $16 = ($14|0)==($15|0);
    if ($16) {
     $278 = 1;
    } else {
     $17 = HEAP32[(gb + (14718144) | 0)>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[((((gb + (10522036) | 0)) + 244|0))>>2]|0;
     $20 = ($18|0)==($19|0);
     if ($20) {
      $278 = 1;
     } else {
      $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = HEAP32[((((gb + (10522036) | 0)) + 248|0))>>2]|0;
      $24 = ($22|0)==($23|0);
      if ($24) {
       $278 = 1;
      } else {
       $25 = HEAP32[(gb + (14718144) | 0)>>2]|0;
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[((((gb + (10522036) | 0)) + 252|0))>>2]|0;
       $28 = ($26|0)==($27|0);
       if ($28) {
        $278 = 1;
       } else {
        $29 = HEAP32[(gb + (14718144) | 0)>>2]|0;
        $30 = HEAP32[$29>>2]|0;
        $31 = HEAP32[((((gb + (10522036) | 0)) + 264|0))>>2]|0;
        $32 = ($30|0)==($31|0);
        if ($32) {
         $278 = 1;
        } else {
         $33 = HEAP32[(gb + (14718144) | 0)>>2]|0;
         $34 = HEAP32[$33>>2]|0;
         $35 = HEAP32[((((gb + (10522036) | 0)) + 268|0))>>2]|0;
         $36 = ($34|0)==($35|0);
         if ($36) {
          $278 = 1;
         } else {
          $37 = HEAP32[(gb + (14718144) | 0)>>2]|0;
          $38 = HEAP32[$37>>2]|0;
          $39 = HEAP32[((((gb + (10522036) | 0)) + 272|0))>>2]|0;
          $40 = ($38|0)==($39|0);
          if ($40) {
           $278 = 1;
          } else {
           $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
           $42 = HEAP32[$41>>2]|0;
           $43 = HEAP32[((((gb + (10522036) | 0)) + 276|0))>>2]|0;
           $44 = ($42|0)==($43|0);
           if ($44) {
            $278 = 1;
           } else {
            $45 = HEAP32[(gb + (14718144) | 0)>>2]|0;
            $46 = HEAP32[$45>>2]|0;
            $47 = HEAP32[((((gb + (10522036) | 0)) + 280|0))>>2]|0;
            $48 = ($46|0)==($47|0);
            if ($48) {
             $278 = 1;
            } else {
             $49 = HEAP32[(gb + (14718144) | 0)>>2]|0;
             $50 = HEAP32[$49>>2]|0;
             $51 = HEAP32[((((gb + (10522036) | 0)) + 284|0))>>2]|0;
             $52 = ($50|0)==($51|0);
             if ($52) {
              $278 = 1;
             } else {
              $53 = HEAP32[(gb + (14718144) | 0)>>2]|0;
              $54 = HEAP32[$53>>2]|0;
              $55 = HEAP32[((((gb + (10522036) | 0)) + 288|0))>>2]|0;
              $56 = ($54|0)==($55|0);
              if ($56) {
               $278 = 1;
              } else {
               $57 = HEAP32[(gb + (14718144) | 0)>>2]|0;
               $58 = HEAP32[$57>>2]|0;
               $59 = HEAP32[((((gb + (10522036) | 0)) + 292|0))>>2]|0;
               $60 = ($58|0)==($59|0);
               if ($60) {
                $278 = 1;
               } else {
                $61 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                $62 = HEAP32[$61>>2]|0;
                $63 = HEAP32[((((gb + (10522036) | 0)) + 296|0))>>2]|0;
                $64 = ($62|0)==($63|0);
                if ($64) {
                 $278 = 1;
                } else {
                 $65 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                 $66 = HEAP32[$65>>2]|0;
                 $67 = HEAP32[((((gb + (10522036) | 0)) + 300|0))>>2]|0;
                 $68 = ($66|0)==($67|0);
                 if ($68) {
                  $278 = 1;
                 } else {
                  $69 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                  $70 = HEAP32[$69>>2]|0;
                  $71 = HEAP32[((((gb + (10522036) | 0)) + 304|0))>>2]|0;
                  $72 = ($70|0)==($71|0);
                  if ($72) {
                   $278 = 1;
                  } else {
                   $73 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                   $74 = HEAP32[$73>>2]|0;
                   $75 = HEAP32[((((gb + (10522036) | 0)) + 308|0))>>2]|0;
                   $76 = ($74|0)==($75|0);
                   if ($76) {
                    $278 = 1;
                   } else {
                    $77 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                    $78 = HEAP32[$77>>2]|0;
                    $79 = HEAP32[((((gb + (10522036) | 0)) + 360|0))>>2]|0;
                    $80 = ($78|0)==($79|0);
                    if ($80) {
                     $278 = 1;
                    } else {
                     $81 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $82 = HEAP32[$81>>2]|0;
                     $83 = HEAP32[((((gb + (10522036) | 0)) + 364|0))>>2]|0;
                     $84 = ($82|0)==($83|0);
                     if ($84) {
                      $278 = 1;
                      break;
                     }
                     $85 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $86 = HEAP32[$85>>2]|0;
                     $87 = HEAP32[((((gb + (10522036) | 0)) + 368|0))>>2]|0;
                     $88 = ($86|0)==($87|0);
                     if ($88) {
                      $278 = 1;
                      break;
                     }
                     $89 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $90 = HEAP32[$89>>2]|0;
                     $91 = HEAP32[((((gb + (10522036) | 0)) + 372|0))>>2]|0;
                     $92 = ($90|0)==($91|0);
                     if ($92) {
                      $278 = 1;
                      break;
                     }
                     $93 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $94 = HEAP32[$93>>2]|0;
                     $95 = HEAP32[((((gb + (10522036) | 0)) + 376|0))>>2]|0;
                     $96 = ($94|0)==($95|0);
                     if ($96) {
                      $278 = 1;
                      break;
                     }
                     $97 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $98 = HEAP32[$97>>2]|0;
                     $99 = HEAP32[((((gb + (10522036) | 0)) + 380|0))>>2]|0;
                     $100 = ($98|0)==($99|0);
                     if ($100) {
                      $278 = 1;
                      break;
                     }
                     $101 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $102 = HEAP32[$101>>2]|0;
                     $103 = HEAP32[((((gb + (10522036) | 0)) + 384|0))>>2]|0;
                     $104 = ($102|0)==($103|0);
                     if ($104) {
                      $278 = 1;
                      break;
                     }
                     $105 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $106 = HEAP32[$105>>2]|0;
                     $107 = HEAP32[((((gb + (10522036) | 0)) + 388|0))>>2]|0;
                     $108 = ($106|0)==($107|0);
                     if ($108) {
                      $278 = 1;
                      break;
                     }
                     $109 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $110 = HEAP32[$109>>2]|0;
                     $111 = HEAP32[((((gb + (10522036) | 0)) + 392|0))>>2]|0;
                     $112 = ($110|0)==($111|0);
                     if ($112) {
                      $278 = 1;
                      break;
                     }
                     $113 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $114 = HEAP32[$113>>2]|0;
                     $115 = HEAP32[((((gb + (10522036) | 0)) + 396|0))>>2]|0;
                     $116 = ($114|0)==($115|0);
                     if ($116) {
                      $278 = 1;
                      break;
                     }
                     $117 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $118 = HEAP32[$117>>2]|0;
                     $119 = HEAP32[((((gb + (10522036) | 0)) + 400|0))>>2]|0;
                     $120 = ($118|0)==($119|0);
                     if ($120) {
                      $278 = 1;
                      break;
                     }
                     $121 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $122 = HEAP32[$121>>2]|0;
                     $123 = HEAP32[((((gb + (10522036) | 0)) + 404|0))>>2]|0;
                     $124 = ($122|0)==($123|0);
                     if ($124) {
                      $278 = 1;
                      break;
                     }
                     $125 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $126 = HEAP32[$125>>2]|0;
                     $127 = HEAP32[((((gb + (10522036) | 0)) + 256|0))>>2]|0;
                     $128 = ($126|0)==($127|0);
                     if ($128) {
                      $278 = 1;
                      break;
                     }
                     $129 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $130 = HEAP32[$129>>2]|0;
                     $131 = HEAP32[((((gb + (10522036) | 0)) + 260|0))>>2]|0;
                     $132 = ($130|0)==($131|0);
                     if ($132) {
                      $278 = 1;
                      break;
                     }
                     $133 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $134 = HEAP32[$133>>2]|0;
                     $135 = HEAP32[((((gb + (10522036) | 0)) + 312|0))>>2]|0;
                     $136 = ($134|0)==($135|0);
                     if ($136) {
                      $278 = 1;
                      break;
                     }
                     $137 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $138 = HEAP32[$137>>2]|0;
                     $139 = HEAP32[((((gb + (10522036) | 0)) + 316|0))>>2]|0;
                     $140 = ($138|0)==($139|0);
                     if ($140) {
                      $278 = 1;
                      break;
                     }
                     $141 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $142 = HEAP32[$141>>2]|0;
                     $143 = HEAP32[((((gb + (10522036) | 0)) + 320|0))>>2]|0;
                     $144 = ($142|0)==($143|0);
                     if ($144) {
                      $278 = 1;
                      break;
                     }
                     $145 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $146 = HEAP32[$145>>2]|0;
                     $147 = HEAP32[((((gb + (10522036) | 0)) + 324|0))>>2]|0;
                     $148 = ($146|0)==($147|0);
                     if ($148) {
                      $278 = 1;
                      break;
                     }
                     $149 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $150 = HEAP32[$149>>2]|0;
                     $151 = HEAP32[((((gb + (10522036) | 0)) + 328|0))>>2]|0;
                     $152 = ($150|0)==($151|0);
                     if ($152) {
                      $278 = 1;
                      break;
                     }
                     $153 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $154 = HEAP32[$153>>2]|0;
                     $155 = HEAP32[((((gb + (10522036) | 0)) + 332|0))>>2]|0;
                     $156 = ($154|0)==($155|0);
                     if ($156) {
                      $278 = 1;
                      break;
                     }
                     $157 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $158 = HEAP32[$157>>2]|0;
                     $159 = HEAP32[((((gb + (10522036) | 0)) + 408|0))>>2]|0;
                     $160 = ($158|0)==($159|0);
                     if ($160) {
                      $278 = 1;
                      break;
                     }
                     $161 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $162 = HEAP32[$161>>2]|0;
                     $163 = HEAP32[((((gb + (10522036) | 0)) + 412|0))>>2]|0;
                     $164 = ($162|0)==($163|0);
                     if ($164) {
                      $278 = 1;
                      break;
                     }
                     $165 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $166 = HEAP32[$165>>2]|0;
                     $167 = HEAP32[((((gb + (10522036) | 0)) + 416|0))>>2]|0;
                     $168 = ($166|0)==($167|0);
                     if ($168) {
                      $278 = 1;
                      break;
                     }
                     $169 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $170 = HEAP32[$169>>2]|0;
                     $171 = HEAP32[((((gb + (10522036) | 0)) + 420|0))>>2]|0;
                     $172 = ($170|0)==($171|0);
                     if ($172) {
                      $278 = 1;
                      break;
                     }
                     $173 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $174 = HEAP32[$173>>2]|0;
                     $175 = HEAP32[((((gb + (10522036) | 0)) + 424|0))>>2]|0;
                     $176 = ($174|0)==($175|0);
                     if ($176) {
                      $278 = 1;
                      break;
                     }
                     $177 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $178 = HEAP32[$177>>2]|0;
                     $179 = HEAP32[((((gb + (10522036) | 0)) + 428|0))>>2]|0;
                     $180 = ($178|0)==($179|0);
                     if ($180) {
                      $278 = 1;
                      break;
                     }
                     $181 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $182 = HEAP32[$181>>2]|0;
                     $183 = HEAP32[((((gb + (10522036) | 0)) + 336|0))>>2]|0;
                     $184 = ($182|0)==($183|0);
                     if ($184) {
                      $278 = 1;
                      break;
                     }
                     $185 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $186 = HEAP32[$185>>2]|0;
                     $187 = HEAP32[((((gb + (10522036) | 0)) + 340|0))>>2]|0;
                     $188 = ($186|0)==($187|0);
                     if ($188) {
                      $278 = 1;
                      break;
                     }
                     $189 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $190 = HEAP32[$189>>2]|0;
                     $191 = HEAP32[((((gb + (10522036) | 0)) + 344|0))>>2]|0;
                     $192 = ($190|0)==($191|0);
                     if ($192) {
                      $278 = 1;
                      break;
                     }
                     $193 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $194 = HEAP32[$193>>2]|0;
                     $195 = HEAP32[((((gb + (10522036) | 0)) + 348|0))>>2]|0;
                     $196 = ($194|0)==($195|0);
                     if ($196) {
                      $278 = 1;
                      break;
                     }
                     $197 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $198 = HEAP32[$197>>2]|0;
                     $199 = HEAP32[((((gb + (10522036) | 0)) + 352|0))>>2]|0;
                     $200 = ($198|0)==($199|0);
                     if ($200) {
                      $278 = 1;
                      break;
                     }
                     $201 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $202 = HEAP32[$201>>2]|0;
                     $203 = HEAP32[((((gb + (10522036) | 0)) + 356|0))>>2]|0;
                     $204 = ($202|0)==($203|0);
                     if ($204) {
                      $278 = 1;
                      break;
                     }
                     $205 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $206 = HEAP32[$205>>2]|0;
                     $207 = HEAP32[((((gb + (10522036) | 0)) + 432|0))>>2]|0;
                     $208 = ($206|0)==($207|0);
                     if ($208) {
                      $278 = 1;
                      break;
                     }
                     $209 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $210 = HEAP32[$209>>2]|0;
                     $211 = HEAP32[((((gb + (10522036) | 0)) + 436|0))>>2]|0;
                     $212 = ($210|0)==($211|0);
                     if ($212) {
                      $278 = 1;
                      break;
                     }
                     $213 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $214 = HEAP32[$213>>2]|0;
                     $215 = HEAP32[((((gb + (10522036) | 0)) + 440|0))>>2]|0;
                     $216 = ($214|0)==($215|0);
                     if ($216) {
                      $278 = 1;
                      break;
                     }
                     $217 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $218 = HEAP32[$217>>2]|0;
                     $219 = HEAP32[((((gb + (10522036) | 0)) + 444|0))>>2]|0;
                     $220 = ($218|0)==($219|0);
                     if ($220) {
                      $278 = 1;
                      break;
                     }
                     $221 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $222 = HEAP32[$221>>2]|0;
                     $223 = HEAP32[((((gb + (10522036) | 0)) + 448|0))>>2]|0;
                     $224 = ($222|0)==($223|0);
                     if ($224) {
                      $278 = 1;
                      break;
                     }
                     $225 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $226 = HEAP32[$225>>2]|0;
                     $227 = HEAP32[((((gb + (10522036) | 0)) + 452|0))>>2]|0;
                     $228 = ($226|0)==($227|0);
                     if ($228) {
                      $278 = 1;
                      break;
                     }
                     $229 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $230 = HEAP32[$229>>2]|0;
                     $231 = HEAP32[((((gb + (10522036) | 0)) + 608|0))>>2]|0;
                     $232 = ($230|0)==($231|0);
                     if ($232) {
                      $278 = 1;
                      break;
                     }
                     $233 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $234 = HEAP32[$233>>2]|0;
                     $235 = HEAP32[((((gb + (10522036) | 0)) + 612|0))>>2]|0;
                     $236 = ($234|0)==($235|0);
                     if ($236) {
                      $278 = 1;
                      break;
                     }
                     $237 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $238 = HEAP32[$237>>2]|0;
                     $239 = HEAP32[((((gb + (10522036) | 0)) + 616|0))>>2]|0;
                     $240 = ($238|0)==($239|0);
                     if ($240) {
                      $278 = 1;
                      break;
                     }
                     $241 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $242 = HEAP32[$241>>2]|0;
                     $243 = HEAP32[((((gb + (10522036) | 0)) + 596|0))>>2]|0;
                     $244 = ($242|0)==($243|0);
                     if ($244) {
                      $278 = 1;
                      break;
                     }
                     $245 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $246 = HEAP32[$245>>2]|0;
                     $247 = HEAP32[((((gb + (10522036) | 0)) + 600|0))>>2]|0;
                     $248 = ($246|0)==($247|0);
                     if ($248) {
                      $278 = 1;
                      break;
                     }
                     $249 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $250 = HEAP32[$249>>2]|0;
                     $251 = HEAP32[((((gb + (10522036) | 0)) + 604|0))>>2]|0;
                     $252 = ($250|0)==($251|0);
                     if ($252) {
                      $278 = 1;
                      break;
                     }
                     $253 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $254 = HEAP32[$253>>2]|0;
                     $255 = HEAP32[((((gb + (10522036) | 0)) + 468|0))>>2]|0;
                     $256 = ($254|0)==($255|0);
                     if ($256) {
                      $278 = 1;
                      break;
                     }
                     $257 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $258 = HEAP32[$257>>2]|0;
                     $259 = HEAP32[((((gb + (10522036) | 0)) + 472|0))>>2]|0;
                     $260 = ($258|0)==($259|0);
                     if ($260) {
                      $278 = 1;
                      break;
                     }
                     $261 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $262 = HEAP32[$261>>2]|0;
                     $263 = HEAP32[((((gb + (10522036) | 0)) + 476|0))>>2]|0;
                     $264 = ($262|0)==($263|0);
                     if ($264) {
                      $278 = 1;
                      break;
                     }
                     $265 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $266 = HEAP32[$265>>2]|0;
                     $267 = HEAP32[((((gb + (10522036) | 0)) + 456|0))>>2]|0;
                     $268 = ($266|0)==($267|0);
                     if ($268) {
                      $278 = 1;
                      break;
                     }
                     $269 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $270 = HEAP32[$269>>2]|0;
                     $271 = HEAP32[((((gb + (10522036) | 0)) + 460|0))>>2]|0;
                     $272 = ($270|0)==($271|0);
                     if ($272) {
                      $278 = 1;
                      break;
                     }
                     $273 = HEAP32[(gb + (14718144) | 0)>>2]|0;
                     $274 = HEAP32[$273>>2]|0;
                     $275 = HEAP32[((((gb + (10522036) | 0)) + 464|0))>>2]|0;
                     $276 = ($274|0)==($275|0);
                     $278 = $276;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $277 = $278&1;
 return ($277|0);
}
function _RNOP() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 940|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (714) | 0);
 return;
}
function _RSPECIAL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (3396) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RREGIMM() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 16;
 $2 = $1 & 31;
 $3 = ((gb + (3268) | 0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 mftCall_v($4|0);
 return;
}
function _RJ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 232|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (715) | 0);
 _recompile_standard_j_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -268435456;
 $10 = $5 | $9;
 $target = $10;
 $11 = $target;
 $12 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = HEAP32[((((gb + (10522036) | 0)) + 240|0))>>2]|0;
  $19 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$19>>2] = $18;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (716) | 0);
  STACKTOP = sp;return;
 }
 $20 = $target;
 $21 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)<($23>>>0);
 if (!($24)) {
  $25 = $target;
  $26 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)>=($28>>>0);
  if (!($29)) {
   $30 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) - 4)|0;
   $37 = ($32|0)==($36|0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
  }
 }
 $38 = HEAP32[((((gb + (10522036) | 0)) + 236|0))>>2]|0;
 $39 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$39>>2] = $38;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (717) | 0);
 STACKTOP = sp;return;
}
function _RJAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 244|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (718) | 0);
 _recompile_standard_j_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -268435456;
 $10 = $5 | $9;
 $target = $10;
 $11 = $target;
 $12 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = HEAP32[((((gb + (10522036) | 0)) + 252|0))>>2]|0;
  $19 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$19>>2] = $18;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (719) | 0);
  STACKTOP = sp;return;
 }
 $20 = $target;
 $21 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)<($23>>>0);
 if (!($24)) {
  $25 = $target;
  $26 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)>=($28>>>0);
  if (!($29)) {
   $30 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) - 4)|0;
   $37 = ($32|0)==($36|0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
  }
 }
 $38 = HEAP32[((((gb + (10522036) | 0)) + 248|0))>>2]|0;
 $39 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$39>>2] = $38;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (720) | 0);
 STACKTOP = sp;return;
}
function _RBEQ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 264|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (721) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 272|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (722) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 268|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (723) | 0);
 STACKTOP = sp;return;
}
function _RBNE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 276|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (724) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 284|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (725) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 280|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (726) | 0);
 STACKTOP = sp;return;
}
function _RBLEZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 288|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (727) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 296|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (728) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 292|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (729) | 0);
 STACKTOP = sp;return;
}
function _RBGTZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 300|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (730) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 308|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (731) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 304|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (732) | 0);
 STACKTOP = sp;return;
}
function _RADDI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 88|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (733) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RADDIU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 92|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (734) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSLTI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 96|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (735) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSLTIU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 100|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (736) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RANDI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 104|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (737) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RORI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 108|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (738) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RXORI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 112|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (739) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLUI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 116|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (740) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RCOP0() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 21;
 $2 = $1 & 31;
 $3 = ((gb + (2884) | 0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 mftCall_v($4|0);
 return;
}
function _RCOP1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 21;
 $2 = $1 & 31;
 $3 = ((gb + (1716) | 0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 mftCall_v($4|0);
 return;
}
function _RSV() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 944|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (741) | 0);
 return;
}
function _RBEQL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 360|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (742) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 368|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (743) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 364|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (744) | 0);
 STACKTOP = sp;return;
}
function _RBNEL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 372|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (745) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 380|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (746) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 376|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (747) | 0);
 STACKTOP = sp;return;
}
function _RBLEZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 384|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (748) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 392|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (749) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 388|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (750) | 0);
 STACKTOP = sp;return;
}
function _RBGTZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 396|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (751) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 404|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (752) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 400|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (753) | 0);
 STACKTOP = sp;return;
}
function _RDADDI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 120|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (754) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDADDIU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 124|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (755) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLDL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 52|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (756) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLDR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 56|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (757) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLB() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (10522036) | 0)>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (758) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLH() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 8|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (759) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLWL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 20|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (760) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLW() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 16|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (761) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLBU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 4|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (762) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLHU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 12|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (763) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLWR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 24|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (764) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLWU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 64|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (765) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSB() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 28|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (766) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSH() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 32|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (767) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSWL() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 40|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (768) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSW() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 36|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (769) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSDL() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 76|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (770) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSDR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 80|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (771) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSWR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 44|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (772) | 0);
 _recompile_standard_i_type();
 return;
}
function _RCACHE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (773) | 0);
 $0 = HEAP32[((((gb + (10522036) | 0)) + 564|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 return;
}
function _RLL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (774) | 0);
 $0 = HEAP32[((((gb + (10522036) | 0)) + 60|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RLWC1() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 572|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (775) | 0);
 _recompile_standard_lf_type();
 return;
}
function _RLLD() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 _recompile_standard_i_type();
 return;
}
function _RLDC1() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 628|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (777) | 0);
 _recompile_standard_lf_type();
 return;
}
function _RLD() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 48|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (778) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSC() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 68|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (779) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSWC1() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 576|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (780) | 0);
 _recompile_standard_lf_type();
 return;
}
function _RSCD() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 _recompile_standard_i_type();
 return;
}
function _RSDC1() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 632|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (781) | 0);
 _recompile_standard_lf_type();
 return;
}
function _RSD() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 72|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (782) | 0);
 _recompile_standard_i_type();
 return;
}
function _recompile_standard_i_type() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 21;
 $2 = $1 & 31;
 $3 = ((gb + (8409952) | 0) + ($2<<3)|0);
 $4 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $9;
 $13 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $14 = $13&65535;
 $15 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 8|0);
 HEAP16[$17>>1] = $14;
 return;
}
function _recompile_standard_lf_type() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 21;
 $2 = $1 & 31;
 $3 = $2&255;
 $4 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = $3;
 $6 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = $8&255;
 $10 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $9;
 $13 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $14 = $13 & 65535;
 $15 = $14&65535;
 $16 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = ((($17)) + 2|0);
 HEAP16[$18>>1] = $15;
 return;
}
function _RMFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 584|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (783) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 $9 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==((gb + (8409952) | 0)|0);
 if (!($13)) {
  return;
 }
 _RNOP();
 return;
}
function _RDMFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 620|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (784) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 $9 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==((gb + (8409952) | 0)|0);
 if (!($13)) {
  return;
 }
 _RNOP();
 return;
}
function _RCFC1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 592|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (785) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 $9 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==((gb + (8409952) | 0)|0);
 if (!($13)) {
  return;
 }
 _RNOP();
 return;
}
function _RMTC1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 580|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 _recompile_standard_r_type();
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (786) | 0);
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 return;
}
function _RDMTC1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 624|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 _recompile_standard_r_type();
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (787) | 0);
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 return;
}
function _RCTC1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 588|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 _recompile_standard_r_type();
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (788) | 0);
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 return;
}
function _RBC() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 16;
 $2 = $1 & 3;
 $3 = ((gb + (2868) | 0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 mftCall_v($4|0);
 return;
}
function _RS() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (2612) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RD() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (2356) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RW() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (2100) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (1844) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RCVT_S_L() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 644|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (789) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_D_L() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 656|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (790) | 0);
 _recompile_standard_cf_type();
 return;
}
function _recompile_standard_cf_type() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 16;
 $2 = $1 & 31;
 $3 = $2&255;
 $4 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = $3;
 $6 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $7 = $6 >>> 11;
 $8 = $7 & 31;
 $9 = $8&255;
 $10 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $9;
 $13 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $14 = $13 >>> 6;
 $15 = $14 & 31;
 $16 = $15&255;
 $17 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $16;
 return;
}
function _RCVT_S_W() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 640|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (791) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_D_W() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 652|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (792) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RADD_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 744|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (793) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RSUB_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 752|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (794) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RMUL_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 760|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (795) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RDIV_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 768|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (796) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RSQRT_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 800|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (797) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RABS_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 776|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (798) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RMOV_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 784|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (799) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RNEG_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 792|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (800) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RROUND_L_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 688|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (801) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RTRUNC_L_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 704|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (802) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCEIL_L_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 720|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (803) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RFLOOR_L_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 736|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (804) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RROUND_W_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 680|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (805) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RTRUNC_W_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 696|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (806) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCEIL_W_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 712|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (807) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RFLOOR_W_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 728|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (808) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_S_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 636|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (809) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_W_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 664|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (810) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_L_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 672|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (811) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_F_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 808|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (812) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_UN_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 816|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (813) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_EQ_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 824|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (814) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_UEQ_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 832|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (815) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_OLT_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 840|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (816) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_ULT_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 848|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (817) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_OLE_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 856|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (818) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_ULE_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 864|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (819) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_SF_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 872|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (820) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGLE_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 880|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (821) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_SEQ_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 888|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (822) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGL_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 896|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (823) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_LT_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 904|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (824) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGE_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 912|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (825) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_LE_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 920|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (826) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGT_D() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 928|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (827) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RADD_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 740|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (828) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RSUB_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 748|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (829) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RMUL_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 756|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (830) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RDIV_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 764|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (831) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RSQRT_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 796|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (832) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RABS_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 772|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (833) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RMOV_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 780|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (834) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RNEG_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 788|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (835) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RROUND_L_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 684|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (836) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RTRUNC_L_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 700|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (837) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCEIL_L_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 716|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (838) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RFLOOR_L_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 732|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (839) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RROUND_W_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 676|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (840) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RTRUNC_W_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 692|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (841) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCEIL_W_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 708|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (842) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RFLOOR_W_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 724|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (843) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_D_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 648|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (844) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_W_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 660|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (845) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RCVT_L_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 668|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (846) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_F_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 804|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (847) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_UN_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 812|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (848) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_EQ_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 820|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (849) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_UEQ_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 828|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (850) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_OLT_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 836|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (851) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_ULT_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 844|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (852) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_OLE_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 852|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (853) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_ULE_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 860|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (854) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_SF_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 868|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (855) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGLE_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 876|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (856) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_SEQ_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 884|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (857) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGL_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 892|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (858) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_LT_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 900|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (859) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGE_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 908|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (860) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_LE_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 916|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (861) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RC_NGT_S() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 924|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (862) | 0);
 _recompile_standard_cf_type();
 return;
}
function _RBC1F() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 608|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (863) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 616|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (864) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 612|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (865) | 0);
 STACKTOP = sp;return;
}
function _RBC1T() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 596|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (866) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 604|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (867) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 600|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (868) | 0);
 STACKTOP = sp;return;
}
function _RBC1FL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 468|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (869) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 476|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (870) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 472|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (871) | 0);
 STACKTOP = sp;return;
}
function _RBC1TL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 456|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (872) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 464|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (873) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 460|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (874) | 0);
 STACKTOP = sp;return;
}
function _recompile_standard_r_type() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 >>> 21;
 $2 = $1 & 31;
 $3 = ((gb + (8409952) | 0) + ($2<<3)|0);
 $4 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $7 = $6 >>> 16;
 $8 = $7 & 31;
 $9 = ((gb + (8409952) | 0) + ($8<<3)|0);
 $10 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $9;
 $13 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $14 = $13 >>> 11;
 $15 = $14 & 31;
 $16 = ((gb + (8409952) | 0) + ($15<<3)|0);
 $17 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $16;
 $20 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $21 = $20 >>> 6;
 $22 = $21 & 31;
 $23 = $22&255;
 $24 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = ((($25)) + 12|0);
 HEAP8[$26>>0] = $23;
 return;
}
function _RMFC0() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 544|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (875) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = ((gb + (14717332) | 0) + ($4<<2)|0);
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & 31;
 $12 = $11&255;
 $13 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 13|0);
 HEAP8[$15>>0] = $12;
 $16 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==((gb + (8409952) | 0)|0);
 if (!($20)) {
  return;
 }
 _RNOP();
 return;
}
function _RMTC0() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 540|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (876) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 31;
 $5 = $4&255;
 $6 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = ((($7)) + 13|0);
 HEAP8[$8>>0] = $5;
 return;
}
function _RTLB() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 63;
 $2 = ((gb + (3012) | 0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 mftCall_v($3|0);
 return;
}
function _RTLBR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 548|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (877) | 0);
 return;
}
function _RTLBWI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 552|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (878) | 0);
 return;
}
function _RTLBWR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 556|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (879) | 0);
 return;
}
function _RTLBP() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 560|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (880) | 0);
 return;
}
function _RERET() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 568|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (881) | 0);
 return;
}
function _recompile_standard_j_type() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(gb + (14718152) | 0)>>2]|0;
 $1 = $0 & 67108863;
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _RBLTZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 312|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (882) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 320|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (883) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 316|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (884) | 0);
 STACKTOP = sp;return;
}
function _RBGEZ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 324|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (885) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 332|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (886) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 328|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (887) | 0);
 STACKTOP = sp;return;
}
function _RBLTZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 408|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (888) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 416|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (889) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 412|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (890) | 0);
 STACKTOP = sp;return;
}
function _RBGEZL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 420|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (891) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 428|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (892) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 424|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (893) | 0);
 STACKTOP = sp;return;
}
function _RTGEI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTGEIU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTLTI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTLTIU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTEQI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTNEI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RBLTZAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 336|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (894) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 344|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (895) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 340|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (896) | 0);
 STACKTOP = sp;return;
}
function _RBGEZAL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 348|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (897) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 356|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (898) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 352|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (899) | 0);
 STACKTOP = sp;return;
}
function _RBLTZALL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 432|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (900) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 440|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (901) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 436|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (902) | 0);
 STACKTOP = sp;return;
}
function _RBGEZALL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (10522036) | 0)) + 444|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (903) | 0);
 _recompile_standard_i_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9<<2;
 $11 = (($4) + ($10))|0;
 $12 = (($11) + 4)|0;
 $target = $12;
 $13 = $target;
 $14 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[(gb + (14718172) | 0)>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = HEAP32[((((gb + (10522036) | 0)) + 452|0))>>2]|0;
  $21 = HEAP32[(gb + (14718144) | 0)>>2]|0;
  HEAP32[$21>>2] = $20;
  HEAP32[(gb + (14718160) | 0)>>2] = (fb + (904) | 0);
  STACKTOP = sp;return;
 }
 $22 = $target;
 $23 = HEAP32[(gb + (14718148) | 0)>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  $27 = $target;
  $28 = HEAP32[(gb + (14718148) | 0)>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if (!($31)) {
   $32 = HEAP32[(gb + (14718144) | 0)>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(gb + (14718148) | 0)>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 4)|0;
   $39 = ($34|0)==($38|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[((((gb + (10522036) | 0)) + 448|0))>>2]|0;
 $41 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$41>>2] = $40;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (905) | 0);
 STACKTOP = sp;return;
}
function _RSLL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 480|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (906) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSRL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 484|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (907) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSRA() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 488|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (908) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSLLV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 492|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (909) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSRLV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 496|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (910) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSRAV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 500|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (911) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RJR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 256|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (912) | 0);
 _recompile_standard_i_type();
 return;
}
function _RJALR() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 260|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (913) | 0);
 _recompile_standard_r_type();
 return;
}
function _RSYSCALL() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 932|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (914) | 0);
 return;
}
function _RBREAK() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RSYNC() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 84|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (915) | 0);
 return;
}
function _RMFHI() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 200|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (916) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RMTHI() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 204|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (917) | 0);
 _recompile_standard_r_type();
 return;
}
function _RMFLO() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 208|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (918) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RMTLO() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 212|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (919) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDSLLV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 516|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (920) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRLV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 520|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (921) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRAV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 524|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (922) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RMULT() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 184|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (923) | 0);
 _recompile_standard_r_type();
 return;
}
function _RMULTU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 188|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (924) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDIV() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 192|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (925) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDIVU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 196|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (926) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDMULT() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 216|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (927) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDMULTU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 220|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (928) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDDIV() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 224|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (929) | 0);
 _recompile_standard_r_type();
 return;
}
function _RDDIVU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 228|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (930) | 0);
 _recompile_standard_r_type();
 return;
}
function _RADD() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 128|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (931) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RADDU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 132|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (932) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSUB() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 136|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (933) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSUBU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 140|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (934) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RAND() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 152|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (935) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _ROR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 156|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (936) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RXOR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 160|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (937) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RNOR() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 164|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (938) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSLT() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 144|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (939) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RSLTU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 148|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (940) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDADD() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 168|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (941) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDADDU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 172|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (942) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSUB() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 176|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (943) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSUBU() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 180|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (944) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RTGE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTGEU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTLT() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTLTU() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RTEQ() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 936|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (945) | 0);
 _recompile_standard_r_type();
 return;
}
function _RTNE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 948|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (776) | 0);
 return;
}
function _RDSLL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 504|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (946) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 508|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (947) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRA() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 512|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (948) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSLL32() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 528|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (949) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRL32() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 532|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (950) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _RDSRA32() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((((gb + (10522036) | 0)) + 536|0))>>2]|0;
 $1 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 HEAP32[$1>>2] = $0;
 HEAP32[(gb + (14718160) | 0)>>2] = (fb + (951) | 0);
 _recompile_standard_r_type();
 $2 = HEAP32[(gb + (14718144) | 0)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((gb + (8409952) | 0)|0);
 if (!($6)) {
  return;
 }
 _RNOP();
 return;
}
function _reset_hard() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_init_memory()|0);
 _r4300_reset_hard();
 _r4300_reset_soft();
 HEAP32[(gb + (10523012) | 0)>>2] = -1543503808;
 HEAP32[(gb + (10523016) | 0)>>2] = 624999;
 _init_interupt();
 $0 = HEAP32[(gb + (10522016) | 0)>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _free_blocks();
  _init_blocks();
 }
 $2 = HEAP32[(gb + (10523012) | 0)>>2]|0;
 _generic_jump_to($2);
 return;
}
function _reset_soft() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _add_interupt_event(512,0);
 _add_interupt_event(1024,50000000);
 return;
}
function _tlb_unmap($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 L1: do {
  if ($4) {
   $5 = $0;
   $6 = ((($5)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $i = $7;
   while(1) {
    $8 = $i;
    $9 = $0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($8>>>0)<($11>>>0);
    if (!($12)) {
     break;
    }
    $13 = $i;
    $14 = $13 >>> 12;
    $15 = ((gb + (14718184) | 0) + ($14<<2)|0);
    HEAP32[$15>>2] = 0;
    $16 = $i;
    $17 = (($16) + 4096)|0;
    $i = $17;
   }
   $18 = $0;
   $19 = ((($18)) + 17|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)!=(0);
   if ($21) {
    $22 = $0;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $i = $24;
    while(1) {
     $25 = $i;
     $26 = $0;
     $27 = ((($26)) + 32|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25>>>0)<($28>>>0);
     if (!($29)) {
      break L1;
     }
     $30 = $i;
     $31 = $30 >>> 12;
     $32 = ((gb + (18912488) | 0) + ($31<<2)|0);
     HEAP32[$32>>2] = 0;
     $33 = $i;
     $34 = (($33) + 4096)|0;
     $i = $34;
    }
   }
  }
 } while(0);
 $35 = $0;
 $36 = ((($35)) + 26|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)!=(0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = $0;
 $40 = ((($39)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $i = $41;
 while(1) {
  $42 = $i;
  $43 = $0;
  $44 = ((($43)) + 44|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $i;
  $48 = $47 >>> 12;
  $49 = ((gb + (14718184) | 0) + ($48<<2)|0);
  HEAP32[$49>>2] = 0;
  $50 = $i;
  $51 = (($50) + 4096)|0;
  $i = $51;
 }
 $52 = $0;
 $53 = ((($52)) + 25|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)!=(0);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = $0;
 $57 = ((($56)) + 40|0);
 $58 = HEAP32[$57>>2]|0;
 $i = $58;
 while(1) {
  $59 = $i;
  $60 = $0;
  $61 = ((($60)) + 44|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($59>>>0)<($62>>>0);
  if (!($63)) {
   break;
  }
  $64 = $i;
  $65 = $64 >>> 12;
  $66 = ((gb + (18912488) | 0) + ($65<<2)|0);
  HEAP32[$66>>2] = 0;
  $67 = $i;
  $68 = (($67) + 4096)|0;
  $i = $68;
 }
 STACKTOP = sp;return;
}
function _tlb_map($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 L1: do {
  if ($4) {
   $5 = $0;
   $6 = ((($5)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $0;
   $9 = ((($8)) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7>>>0)<($10>>>0);
   if ($11) {
    $12 = $0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14>>>0)>=(2147483648);
    if ($15) {
     $16 = $0;
     $17 = ((($16)) + 32|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18>>>0)<(3221225472);
     if ($19) {
      break;
     }
    }
    $20 = $0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22>>>0)<(536870912);
    if ($23) {
     $24 = $0;
     $25 = ((($24)) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $i = $26;
     while(1) {
      $27 = $i;
      $28 = $0;
      $29 = ((($28)) + 32|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($27>>>0)<($30>>>0);
      $32 = $0;
      if (!($31)) {
       break;
      }
      $33 = ((($32)) + 36|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $i;
      $36 = $0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($35) - ($38))|0;
      $40 = (($34) + ($39))|0;
      $41 = (($40) + 4095)|0;
      $42 = -2147483648 | $41;
      $43 = $i;
      $44 = $43 >>> 12;
      $45 = ((gb + (14718184) | 0) + ($44<<2)|0);
      HEAP32[$45>>2] = $42;
      $46 = $i;
      $47 = (($46) + 4096)|0;
      $i = $47;
     }
     $48 = ((($32)) + 17|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)!=(0);
     if ($50) {
      $51 = $0;
      $52 = ((($51)) + 28|0);
      $53 = HEAP32[$52>>2]|0;
      $i = $53;
      while(1) {
       $54 = $i;
       $55 = $0;
       $56 = ((($55)) + 32|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($54>>>0)<($57>>>0);
       if (!($58)) {
        break L1;
       }
       $59 = $0;
       $60 = ((($59)) + 36|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = $i;
       $63 = $0;
       $64 = ((($63)) + 28|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($62) - ($65))|0;
       $67 = (($61) + ($66))|0;
       $68 = (($67) + 4095)|0;
       $69 = -2147483648 | $68;
       $70 = $i;
       $71 = $70 >>> 12;
       $72 = ((gb + (18912488) | 0) + ($71<<2)|0);
       HEAP32[$72>>2] = $69;
       $73 = $i;
       $74 = (($73) + 4096)|0;
       $i = $74;
      }
     }
    }
   }
  }
 } while(0);
 $75 = $0;
 $76 = ((($75)) + 26|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77<<24>>24)!=(0);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $79 = $0;
 $80 = ((($79)) + 40|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $0;
 $83 = ((($82)) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($81>>>0)<($84>>>0);
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = $0;
 $87 = ((($86)) + 40|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88>>>0)>=(2147483648);
 if ($89) {
  $90 = $0;
  $91 = ((($90)) + 44|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92>>>0)<(3221225472);
  if ($93) {
   STACKTOP = sp;return;
  }
 }
 $94 = $0;
 $95 = ((($94)) + 48|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96>>>0)<(536870912);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = $0;
 $99 = ((($98)) + 40|0);
 $100 = HEAP32[$99>>2]|0;
 $i = $100;
 while(1) {
  $101 = $i;
  $102 = $0;
  $103 = ((($102)) + 44|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($101>>>0)<($104>>>0);
  $106 = $0;
  if (!($105)) {
   break;
  }
  $107 = ((($106)) + 48|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $i;
  $110 = $0;
  $111 = ((($110)) + 40|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($109) - ($112))|0;
  $114 = (($108) + ($113))|0;
  $115 = (($114) + 4095)|0;
  $116 = -2147483648 | $115;
  $117 = $i;
  $118 = $117 >>> 12;
  $119 = ((gb + (14718184) | 0) + ($118<<2)|0);
  HEAP32[$119>>2] = $116;
  $120 = $i;
  $121 = (($120) + 4096)|0;
  $i = $121;
 }
 $122 = ((($106)) + 25|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = ($123<<24>>24)!=(0);
 if (!($124)) {
  STACKTOP = sp;return;
 }
 $125 = $0;
 $126 = ((($125)) + 40|0);
 $127 = HEAP32[$126>>2]|0;
 $i = $127;
 while(1) {
  $128 = $i;
  $129 = $0;
  $130 = ((($129)) + 44|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($128>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $0;
  $134 = ((($133)) + 48|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $i;
  $137 = $0;
  $138 = ((($137)) + 40|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($136) - ($139))|0;
  $141 = (($135) + ($140))|0;
  $142 = (($141) + 4095)|0;
  $143 = -2147483648 | $142;
  $144 = $i;
  $145 = $144 >>> 12;
  $146 = ((gb + (18912488) | 0) + ($145<<2)|0);
  HEAP32[$146>>2] = $143;
  $147 = $i;
  $148 = (($147) + 4096)|0;
  $i = $148;
 }
 STACKTOP = sp;return;
}
function _virtual_to_physical_address($addresse,$w) {
 $addresse = $addresse|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addresse;
 $2 = $w;
 $3 = $1;
 $4 = ($3>>>0)>=(2130706432);
 $5 = $1;
 $6 = ($5>>>0)<(2147483648);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = HEAP8[(gb + (23109550) | 0)>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = HEAP16[((((gb + (8422116) | 0)) + 62|0))>>1]|0;
   $11 = $10&65535;
   $12 = $11 & 255;
   switch ($12|0) {
   case 69:  {
    $13 = $1;
    $14 = $13 & 16777215;
    $15 = (-1341961424 + ($14))|0;
    $0 = $15;
    $53 = $0;
    STACKTOP = sp;return ($53|0);
    break;
   }
   case 74:  {
    $16 = $1;
    $17 = $16 & 16777215;
    $18 = (-1341961360 + ($17))|0;
    $0 = $18;
    $53 = $0;
    STACKTOP = sp;return ($53|0);
    break;
   }
   case 80:  {
    $19 = $1;
    $20 = $19 & 16777215;
    $21 = (-1341969936 + ($20))|0;
    $0 = $21;
    $53 = $0;
    STACKTOP = sp;return ($53|0);
    break;
   }
   default: {
    $22 = $1;
    $23 = $22 & 16777215;
    $24 = (-1341961424 + ($23))|0;
    $0 = $24;
    $53 = $0;
    STACKTOP = sp;return ($53|0);
   }
   }
  }
 }
 $25 = $2;
 $26 = ($25|0)==(1);
 $27 = $1;
 $28 = $27 >>> 12;
 if ($26) {
  $29 = ((gb + (18912488) | 0) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $1;
   $33 = $32 >>> 12;
   $34 = ((gb + (18912488) | 0) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & -4096;
   $37 = $1;
   $38 = $37 & 4095;
   $39 = $36 | $38;
   $0 = $39;
   $53 = $0;
   STACKTOP = sp;return ($53|0);
  }
 } else {
  $40 = ((gb + (14718184) | 0) + ($28<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $1;
   $44 = $43 >>> 12;
   $45 = ((gb + (14718184) | 0) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 & -4096;
   $48 = $1;
   $49 = $48 & 4095;
   $50 = $47 | $49;
   $0 = $50;
   $53 = $0;
   STACKTOP = sp;return ($53|0);
  }
 }
 $51 = $1;
 $52 = $2;
 _TLB_refill_exception($51,$52);
 $0 = 0;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _init_fb($fb) {
 $fb = $fb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fb;
 $1 = $0;
 _memset(($1|0),0,2148)|0;
 $2 = $0;
 $3 = ((($2)) + 2144|0);
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function _read_rdram_fb($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $dp = $3;
 $4 = $dp;
 $5 = ((($4)) + 48|0);
 $6 = $1;
 _pre_framebuffer_read($5,$6);
 $7 = $dp;
 $8 = ((($7)) + 2204|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $2;
 $12 = (_read_rdram_dram($9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _write_rdram_fb($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $dp = $4;
 $5 = $dp;
 $6 = ((($5)) + 48|0);
 $7 = $1;
 _pre_framebuffer_write($6,$7);
 $8 = $dp;
 $9 = ((($8)) + 2204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = (_write_rdram_dram($10,$11,$12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _protect_framebuffers($dp) {
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $end1 = 0, $fb = 0, $i = 0, $j = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $start = 0, $start1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $fb = $2;
 $3 = HEAP32[((((gb + (10521540) | 0)) + 68|0))>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = HEAP32[((((gb + (10521540) | 0)) + 60|0))>>2]|0;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = HEAP32[((((gb + (10521540) | 0)) + 64|0))>>2]|0;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if ($or$cond3) {
  $9 = HEAP32[((((gb + (10521540) | 0)) + 68|0))>>2]|0;
  $10 = $fb;
  $11 = ((($10)) + 2048|0);
  mftCall_vi($9|0,($11|0));
 }
 $12 = HEAP32[((((gb + (10521540) | 0)) + 68|0))>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = HEAP32[((((gb + (10521540) | 0)) + 60|0))>>2]|0;
 $15 = ($14|0)!=(0|0);
 $or$cond5 = $13 & $15;
 $16 = HEAP32[((((gb + (10521540) | 0)) + 64|0))>>2]|0;
 $17 = ($16|0)!=(0|0);
 $or$cond7 = $or$cond5 & $17;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $18 = $fb;
 $19 = ((($18)) + 2048|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22>>>0)<(6);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $fb;
  $26 = ((($25)) + 2048|0);
  $27 = (($26) + ($24<<4)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $i;
   $31 = $fb;
   $32 = ((($31)) + 2048|0);
   $33 = (($32) + ($30<<4)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 & 8388607;
   $start = $35;
   $36 = $start;
   $37 = $i;
   $38 = $fb;
   $39 = ((($38)) + 2048|0);
   $40 = (($39) + ($37<<4)|0);
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $i;
   $44 = $fb;
   $45 = ((($44)) + 2048|0);
   $46 = (($45) + ($43<<4)|0);
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = Math_imul($42, $48)|0;
   $50 = $i;
   $51 = $fb;
   $52 = ((($51)) + 2048|0);
   $53 = (($52) + ($50<<4)|0);
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = Math_imul($49, $55)|0;
   $57 = (($36) + ($56))|0;
   $58 = (($57) - 1)|0;
   $end = $58;
   $59 = $start;
   $start1 = $59;
   $60 = $end;
   $end1 = $60;
   $61 = $start;
   $62 = $61 >> 16;
   $start = $62;
   $63 = $end;
   $64 = $63 >> 16;
   $end = $64;
   $65 = $start;
   $j = $65;
   while(1) {
    $66 = $j;
    $67 = $end;
    $68 = ($66|0)<=($67|0);
    if (!($68)) {
     break;
    }
    $69 = $j;
    $70 = (32768 + ($69))|0;
    $71 = $70&65535;
    _map_region($71,2,(fb + (952) | 0),(fb + (953) | 0),(fb + (954) | 0),(fb + (955) | 0),(fb + (956) | 0),(fb + (957) | 0),(fb + (958) | 0),(fb + (959) | 0));
    $72 = $j;
    $73 = (40960 + ($72))|0;
    $74 = $73&65535;
    _map_region($74,2,(fb + (952) | 0),(fb + (953) | 0),(fb + (954) | 0),(fb + (955) | 0),(fb + (956) | 0),(fb + (957) | 0),(fb + (958) | 0),(fb + (959) | 0));
    $75 = $j;
    $76 = (($75) + 1)|0;
    $j = $76;
   }
   $77 = $start;
   $78 = $77 << 4;
   $start = $78;
   $79 = $end;
   $80 = $79 << 4;
   $end = $80;
   $81 = $start;
   $j = $81;
   while(1) {
    $82 = $j;
    $83 = $end;
    $84 = ($82|0)<=($83|0);
    if (!($84)) {
     break;
    }
    $85 = $j;
    $86 = $start1;
    $87 = ($85|0)>=($86|0);
    if ($87) {
     $88 = $j;
     $89 = $end1;
     $90 = ($88|0)<=($89|0);
     if ($90) {
      $91 = $j;
      $92 = $fb;
      $93 = (($92) + ($91)|0);
      HEAP8[$93>>0] = 1;
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    if ((label|0) == 16) {
     label = 0;
     $94 = $j;
     $95 = $fb;
     $96 = (($95) + ($94)|0);
     HEAP8[$96>>0] = 0;
    }
    $97 = $j;
    $98 = (($97) + 1)|0;
    $j = $98;
   }
   $99 = $fb;
   $100 = ((($99)) + 2144|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = $fb;
    $104 = ((($103)) + 2144|0);
    HEAP32[$104>>2] = 0;
    HEAP32[(gb + (14718156) | 0)>>2] = 0;
    _invalidate_r4300_cached_code(0,0);
   }
  }
  $105 = $i;
  $106 = (($105) + 1)|0;
  $i = $106;
 }
 STACKTOP = sp;return;
}
function _unprotect_framebuffers($dp) {
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $fb = 0, $i = 0, $j = 0, $or$cond = 0, $or$cond3 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $fb = $2;
 $3 = HEAP32[((((gb + (10521540) | 0)) + 68|0))>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = HEAP32[((((gb + (10521540) | 0)) + 60|0))>>2]|0;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 $7 = HEAP32[((((gb + (10521540) | 0)) + 64|0))>>2]|0;
 $8 = ($7|0)!=(0|0);
 $or$cond3 = $or$cond & $8;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $9 = $fb;
 $10 = ((($9)) + 2048|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13>>>0)<(6);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $fb;
  $17 = ((($16)) + 2048|0);
  $18 = (($17) + ($15<<4)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  L10: do {
   if ($20) {
    $21 = $i;
    $22 = $fb;
    $23 = ((($22)) + 2048|0);
    $24 = (($23) + ($21<<4)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 8388607;
    $start = $26;
    $27 = $start;
    $28 = $i;
    $29 = $fb;
    $30 = ((($29)) + 2048|0);
    $31 = (($30) + ($28<<4)|0);
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $i;
    $35 = $fb;
    $36 = ((($35)) + 2048|0);
    $37 = (($36) + ($34<<4)|0);
    $38 = ((($37)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = Math_imul($33, $39)|0;
    $41 = $i;
    $42 = $fb;
    $43 = ((($42)) + 2048|0);
    $44 = (($43) + ($41<<4)|0);
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = Math_imul($40, $46)|0;
    $48 = (($27) + ($47))|0;
    $49 = (($48) - 1)|0;
    $end = $49;
    $50 = $start;
    $51 = $50 >> 16;
    $start = $51;
    $52 = $end;
    $53 = $52 >> 16;
    $end = $53;
    $54 = $start;
    $j = $54;
    while(1) {
     $55 = $j;
     $56 = $end;
     $57 = ($55|0)<=($56|0);
     if (!($57)) {
      break L10;
     }
     $58 = $j;
     $59 = (32768 + ($58))|0;
     $60 = $59&65535;
     _map_region($60,2,(fb + (535) | 0),(fb + (536) | 0),(fb + (537) | 0),(fb + (538) | 0),(fb + (539) | 0),(fb + (540) | 0),(fb + (541) | 0),(fb + (542) | 0));
     $61 = $j;
     $62 = (40960 + ($61))|0;
     $63 = $62&65535;
     _map_region($63,2,(fb + (535) | 0),(fb + (536) | 0),(fb + (537) | 0),(fb + (538) | 0),(fb + (539) | 0),(fb + (540) | 0),(fb + (541) | 0),(fb + (542) | 0));
     $64 = $j;
     $65 = (($64) + 1)|0;
     $j = $65;
    }
   }
  } while(0);
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 STACKTOP = sp;return;
}
function _pre_framebuffer_read($fb,$address) {
 $fb = $fb|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $i = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fb;
 $1 = $address;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(6);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = ((($5)) + 2048|0);
  $7 = (($6) + ($4<<4)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $i;
   $11 = $0;
   $12 = ((($11)) + 2048|0);
   $13 = (($12) + ($10<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8388607;
   $start = $15;
   $16 = $start;
   $17 = $i;
   $18 = $0;
   $19 = ((($18)) + 2048|0);
   $20 = (($19) + ($17<<4)|0);
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $i;
   $24 = $0;
   $25 = ((($24)) + 2048|0);
   $26 = (($25) + ($23<<4)|0);
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = Math_imul($22, $28)|0;
   $30 = $i;
   $31 = $0;
   $32 = ((($31)) + 2048|0);
   $33 = (($32) + ($30<<4)|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($29, $35)|0;
   $37 = (($16) + ($36))|0;
   $38 = (($37) - 1)|0;
   $end = $38;
   $39 = $1;
   $40 = $39 & 8388607;
   $41 = $start;
   $42 = ($40>>>0)>=($41>>>0);
   if ($42) {
    $43 = $1;
    $44 = $43 & 8388607;
    $45 = $end;
    $46 = ($44>>>0)<=($45>>>0);
    if ($46) {
     $47 = $1;
     $48 = $47 & 8388607;
     $49 = $48 >>> 12;
     $50 = $0;
     $51 = (($50) + ($49)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = ($53|0)!=(0);
     if ($54) {
      $55 = HEAP32[((((gb + (10521540) | 0)) + 60|0))>>2]|0;
      $56 = $1;
      mftCall_vi($55|0,($56|0));
      $57 = $1;
      $58 = $57 & 8388607;
      $59 = $58 >>> 12;
      $60 = $0;
      $61 = (($60) + ($59)|0);
      HEAP8[$61>>0] = 0;
     }
    }
   }
  }
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 STACKTOP = sp;return;
}
function _pre_framebuffer_write($fb,$address) {
 $fb = $fb|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $i = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fb;
 $1 = $address;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(6);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = ((($5)) + 2048|0);
  $7 = (($6) + ($4<<4)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $i;
   $11 = $0;
   $12 = ((($11)) + 2048|0);
   $13 = (($12) + ($10<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8388607;
   $start = $15;
   $16 = $start;
   $17 = $i;
   $18 = $0;
   $19 = ((($18)) + 2048|0);
   $20 = (($19) + ($17<<4)|0);
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $i;
   $24 = $0;
   $25 = ((($24)) + 2048|0);
   $26 = (($25) + ($23<<4)|0);
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = Math_imul($22, $28)|0;
   $30 = $i;
   $31 = $0;
   $32 = ((($31)) + 2048|0);
   $33 = (($32) + ($30<<4)|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($29, $35)|0;
   $37 = (($16) + ($36))|0;
   $38 = (($37) - 1)|0;
   $end = $38;
   $39 = $1;
   $40 = $39 & 8388607;
   $41 = $start;
   $42 = ($40>>>0)>=($41>>>0);
   if ($42) {
    $43 = $1;
    $44 = $43 & 8388607;
    $45 = $end;
    $46 = ($44>>>0)<=($45>>>0);
    if ($46) {
     $47 = HEAP32[((((gb + (10521540) | 0)) + 64|0))>>2]|0;
     $48 = $1;
     mftCall_vii($47|0,($48|0),4);
    }
   }
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return;
}
function _connect_rdp($dp,$r4300,$sp,$ri) {
 $dp = $dp|0;
 $r4300 = $r4300|0;
 $sp = $sp|0;
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $r4300;
 $2 = $sp;
 $3 = $ri;
 $4 = $1;
 $5 = $0;
 $6 = ((($5)) + 2196|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = $0;
 $9 = ((($8)) + 2200|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $0;
 $12 = ((($11)) + 2204|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _init_rdp($dp) {
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;HEAP32[$1+28>>2]=0|0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $4 = $0;
 $5 = ((($4)) + 48|0);
 _init_fb($5);
 STACKTOP = sp;return;
}
function _read_dpc_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $dp = $3;
 $4 = $1;
 $5 = (_dpc_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $dp;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_dpc_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $dp = $5;
 $6 = $2;
 $7 = (_dpc_reg($6)|0);
 $reg = $7;
 $8 = $reg;
 switch ($8|0) {
 case 3:  {
  $9 = $dp;
  $10 = $3;
  $11 = $4;
  $12 = $10 & $11;
  $13 = (_update_dpc_status($9,$12)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $dp;
   $16 = ((($15)) + 2200|0);
   $17 = HEAP32[$16>>2]|0;
   _do_SP_Task($17);
  }
  break;
 }
 case 7: case 6: case 5: case 4: case 2:  {
  break;
 }
 default: {
  $18 = $reg;
  $19 = $dp;
  $20 = (($19) + ($18<<2)|0);
  $21 = $3;
  $22 = $4;
  _masked_write_1202($20,$21,$22);
  $23 = $reg;
  switch ($23|0) {
  case 0:  {
   $24 = $dp;
   $25 = HEAP32[$24>>2]|0;
   $26 = $dp;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = $25;
   break;
  }
  case 1:  {
   $28 = HEAP32[((((gb + (10521540) | 0)) + 20|0))>>2]|0;
   mftCall_v($28|0);
   $29 = $dp;
   $30 = ((($29)) + 2196|0);
   $31 = HEAP32[$30>>2]|0;
   _signal_rcp_interrupt($31,32);
   break;
  }
  default: {
  }
  }
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _read_dps_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $dp = $3;
 $4 = $1;
 $5 = (_dps_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $dp;
 $8 = ((($7)) + 32|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return 0;
}
function _write_dps_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $dp = $4;
 $5 = $1;
 $6 = (_dps_reg($5)|0);
 $reg = $6;
 $7 = $reg;
 $8 = $dp;
 $9 = ((($8)) + 32|0);
 $10 = (($9) + ($7<<2)|0);
 $11 = $2;
 $12 = $3;
 _masked_write_1202($10,$11,$12);
 STACKTOP = sp;return 0;
}
function _rdp_interrupt_event($dp) {
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -3;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 129;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 2196|0);
 $11 = HEAP32[$10>>2]|0;
 _raise_rcp_interrupt($11,32);
 STACKTOP = sp;return;
}
function _dpc_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _update_dpc_status($dp,$w) {
 $dp = $dp|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $do_sp_task_on_unfreeze = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $w;
 $do_sp_task_on_unfreeze = 0;
 $2 = $1;
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  HEAP32[$6>>2] = $8;
 }
 $9 = $1;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 1;
  HEAP32[$13>>2] = $15;
 }
 $16 = $1;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & -3;
  HEAP32[$20>>2] = $22;
  $23 = $0;
  $24 = ((($23)) + 2200|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8192|0);
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 3;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   $do_sp_task_on_unfreeze = 1;
  }
 }
 $31 = $1;
 $32 = $31 & 8;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $0;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 | 2;
  HEAP32[$35>>2] = $37;
 }
 $38 = $1;
 $39 = $38 & 16;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & -5;
  HEAP32[$42>>2] = $44;
 }
 $45 = $1;
 $46 = $45 & 32;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $52 = $do_sp_task_on_unfreeze;
  STACKTOP = sp;return ($52|0);
 }
 $48 = $0;
 $49 = ((($48)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 | 4;
 HEAP32[$49>>2] = $51;
 $52 = $do_sp_task_on_unfreeze;
 STACKTOP = sp;return ($52|0);
}
function _masked_write_1202($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _dps_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _connect_rdram($rdram,$dram,$dram_size) {
 $rdram = $rdram|0;
 $dram = $dram|0;
 $dram_size = $dram_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rdram;
 $1 = $dram;
 $2 = $dram_size;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 40|0);
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 44|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _init_rdram($rdram) {
 $rdram = $rdram|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rdram;
 $1 = $0;
 dest=$1; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 _memset(($4|0),0,($7|0))|0;
 STACKTOP = sp;return;
}
function _read_rdram_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $ri = $3;
 $4 = $1;
 $5 = (_rdram_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $ri;
 $8 = ((($7)) + 32|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return 0;
}
function _write_rdram_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $ri = $4;
 $5 = $1;
 $6 = (_rdram_reg($5)|0);
 $reg = $6;
 $7 = $reg;
 $8 = $ri;
 $9 = ((($8)) + 32|0);
 $10 = (($9) + ($7<<2)|0);
 $11 = $2;
 $12 = $3;
 _masked_write_1211($10,$11,$12);
 STACKTOP = sp;return 0;
}
function _read_rdram_dram($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $ri = $3;
 $4 = $1;
 $5 = (_rdram_dram_address($4)|0);
 $addr = $5;
 $6 = $addr;
 $7 = $ri;
 $8 = ((($7)) + 32|0);
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($6<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return 0;
}
function _write_rdram_dram($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $ri = $4;
 $5 = $1;
 $6 = (_rdram_dram_address($5)|0);
 $addr = $6;
 $7 = $addr;
 $8 = $ri;
 $9 = ((($8)) + 32|0);
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($7<<2)|0);
 $13 = $2;
 $14 = $3;
 _masked_write_1211($12,$13,$14);
 STACKTOP = sp;return 0;
}
function _rdram_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 1023;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1211($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _rdram_dram_address($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 16777215;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _force_detected_rdram_size_hack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $address = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[((((gb + (8410672) | 0)) + 248|0))>>2]|0;
 $1 = ($0|0)!=(3);
 $2 = $1 ? 792 : 1008;
 $address = $2;
 $3 = HEAP32[((((gb + (8421480) | 0)) + 76|0))>>2]|0;
 $4 = $address;
 $5 = (($4>>>0) / 4)&-1;
 $6 = HEAP32[((((gb + (8421480) | 0)) + 72|0))>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 HEAP32[$7>>2] = $3;
 STACKTOP = sp;return;
}
function _connect_ri($ri,$dram,$dram_size) {
 $ri = $ri|0;
 $dram = $dram|0;
 $dram_size = $dram_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ri;
 $1 = $dram;
 $2 = $dram_size;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = $1;
 $6 = $2;
 _connect_rdram($4,$5,$6);
 STACKTOP = sp;return;
}
function _init_ri($ri) {
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ri;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;HEAP32[$1+28>>2]=0|0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 _init_rdram($3);
 STACKTOP = sp;return;
}
function _read_ri_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $ri = $3;
 $4 = $1;
 $5 = (_ri_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $ri;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_ri_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $ri = $4;
 $5 = $1;
 $6 = (_ri_reg($5)|0);
 $reg = $6;
 $7 = $reg;
 $8 = $ri;
 $9 = (($8) + ($7<<2)|0);
 $10 = $2;
 $11 = $3;
 _masked_write_1222($9,$10,$11);
 STACKTOP = sp;return 0;
}
function _ri_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1222($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _connect_rsp($sp,$r4300,$dp,$ri) {
 $sp = $sp|0;
 $r4300 = $r4300|0;
 $dp = $dp|0;
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $r4300;
 $2 = $dp;
 $3 = $ri;
 $4 = $1;
 $5 = $0;
 $6 = ((($5)) + 8232|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = $0;
 $9 = ((($8)) + 8236|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $0;
 $12 = ((($11)) + 8240|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _init_rsp($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 _memset(($1|0),0,8192)|0;
 $2 = $0;
 $3 = ((($2)) + 8192|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;HEAP32[$3+24>>2]=0|0;HEAP32[$3+28>>2]=0|0;
 $4 = $0;
 $5 = ((($4)) + 8224|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $6 = $0;
 $7 = ((($6)) + 8192|0);
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = 1;
 STACKTOP = sp;return;
}
function _read_rsp_mem($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $sp = $3;
 $4 = $1;
 $5 = (_rsp_mem_address($4)|0);
 $addr = $5;
 $6 = $addr;
 $7 = $sp;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_rsp_mem($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $sp = $4;
 $5 = $1;
 $6 = (_rsp_mem_address($5)|0);
 $addr = $6;
 $7 = $addr;
 $8 = $sp;
 $9 = (($8) + ($7<<2)|0);
 $10 = $2;
 $11 = $3;
 _masked_write_1243($9,$10,$11);
 STACKTOP = sp;return 0;
}
function _read_rsp_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $sp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $sp = $3;
 $4 = $1;
 $5 = (_rsp_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $sp;
 $8 = ((($7)) + 8192|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 HEAP32[$11>>2] = $10;
 $12 = $reg;
 $13 = ($12|0)==(7);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $sp;
 $15 = ((($14)) + 8192|0);
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 1;
 STACKTOP = sp;return 0;
}
function _write_rsp_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $sp = $5;
 $6 = $2;
 $7 = (_rsp_reg($6)|0);
 $reg = $7;
 $8 = $reg;
 switch ($8|0) {
 case 4:  {
  $9 = $sp;
  $10 = $3;
  $11 = $4;
  $12 = $10 & $11;
  _update_sp_status($9,$12);
  break;
 }
 case 6: case 5:  {
  break;
 }
 default: {
  $13 = $reg;
  $14 = $sp;
  $15 = ((($14)) + 8192|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = $3;
  $18 = $4;
  _masked_write_1243($16,$17,$18);
  $19 = $reg;
  switch ($19|0) {
  case 2:  {
   $20 = $sp;
   _dma_sp_write($20);
   break;
  }
  case 3:  {
   $21 = $sp;
   _dma_sp_read($21);
   break;
  }
  case 7:  {
   $22 = $sp;
   $23 = ((($22)) + 8192|0);
   $24 = ((($23)) + 28|0);
   HEAP32[$24>>2] = 0;
   break;
  }
  default: {
  }
  }
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 }
 $0 = 0;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _read_rsp_regs2($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $sp = $3;
 $4 = $1;
 $5 = (_rsp_reg2($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $sp;
 $8 = ((($7)) + 8224|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return 0;
}
function _write_rsp_regs2($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $sp = $4;
 $5 = $1;
 $6 = (_rsp_reg2($5)|0);
 $reg = $6;
 $7 = $reg;
 $8 = $sp;
 $9 = ((($8)) + 8224|0);
 $10 = (($9) + ($7<<2)|0);
 $11 = $2;
 $12 = $3;
 _masked_write_1243($10,$11,$12);
 STACKTOP = sp;return 0;
}
function _do_SP_Task($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $save_pc = 0, $task = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 $2 = ((($1)) + 8224|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -4096;
 $save_pc = $4;
 $5 = $0;
 $6 = ((($5)) + 4032|0);
 $7 = HEAP32[$6>>2]|0;
 $task = $7;
 $8 = $0;
 $9 = ((($8)) + 8192|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = $0;
   $15 = ((($14)) + 8192|0);
   $16 = ((($15)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 2;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $task;
    $21 = ($20|0)==(1);
    if ($21) {
     $22 = $0;
     $23 = ((($22)) + 8236|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $26 & 2;
     $28 = ($27|0)!=(0);
     if ($28) {
      STACKTOP = sp;return;
     }
     $29 = $0;
     $30 = ((($29)) + 8236|0);
     $31 = HEAP32[$30>>2]|0;
     _unprotect_framebuffers($31);
     _new_frame();
     _cp0_update_count();
     $32 = $0;
     $33 = ((($32)) + 8232|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 1;
     $38 = ($37|0)!=(0);
     if ($38) {
      _add_interupt_event(128,1000);
     }
     $39 = $0;
     $40 = ((($39)) + 8232|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $43 & -2;
     HEAP32[$42>>2] = $44;
     $45 = $0;
     $46 = ((($45)) + 8192|0);
     $47 = ((($46)) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48 & -769;
     HEAP32[$47>>2] = $49;
     $50 = $0;
     $51 = ((($50)) + 8236|0);
     $52 = HEAP32[$51>>2]|0;
     _protect_framebuffers($52);
     break;
    }
    $53 = $task;
    $54 = ($53|0)==(2);
    _cp0_update_count();
    $55 = $0;
    $56 = ((($55)) + 8232|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 1;
    $61 = ($60|0)!=(0);
    if ($54) {
     if ($61) {
      _add_interupt_event(128,4000);
     }
     $62 = $0;
     $63 = ((($62)) + 8232|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $66 & -2;
     HEAP32[$65>>2] = $67;
     $68 = $0;
     $69 = ((($68)) + 8192|0);
     $70 = ((($69)) + 16|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71 & -769;
     HEAP32[$70>>2] = $72;
     break;
    } else {
     if ($61) {
      _add_interupt_event(128,0);
     }
     $73 = $0;
     $74 = ((($73)) + 8232|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 & -2;
     HEAP32[$76>>2] = $78;
     $79 = $0;
     $80 = ((($79)) + 8192|0);
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $82 & -513;
     HEAP32[$81>>2] = $83;
     break;
    }
   }
  }
 } while(0);
 $84 = $0;
 $85 = ((($84)) + 8224|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & 4095;
 HEAP32[$85>>2] = $87;
 $88 = HEAP32[((((gb + (10521708) | 0)) + 4|0))>>2]|0;
 (mftCall_ii($88|0,-1)|0);
 $89 = $save_pc;
 $90 = $0;
 $91 = ((($90)) + 8224|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 | $89;
 HEAP32[$91>>2] = $93;
 $94 = $task;
 $95 = ($94|0)==(1);
 if ($95) {
  $96 = $0;
  $97 = ((($96)) + 8232|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 & 32;
  $102 = ($101|0)!=(0);
  if ($102) {
   _add_interupt_event(256,1000);
   $103 = $0;
   $104 = ((($103)) + 8232|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 & -33;
   HEAP32[$106>>2] = $108;
  }
 }
 $109 = $0;
 $110 = ((($109)) + 8192|0);
 $111 = ((($110)) + 16|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = $0;
  $116 = ((($115)) + 8192|0);
  $117 = ((($116)) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 & 2;
  $120 = ($119|0)==(0);
  if ($120) {
   _add_interupt_event(128,512);
   $121 = $0;
   $122 = ((($121)) + 8192|0);
   $123 = ((($122)) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 & -4;
   HEAP32[$123>>2] = $125;
   STACKTOP = sp;return;
  }
 }
 $126 = $0;
 $127 = ((($126)) + 8192|0);
 $128 = ((($127)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 | 3;
 HEAP32[$128>>2] = $130;
 STACKTOP = sp;return;
}
function _rsp_interrupt_event($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 $2 = ((($1)) + 8192|0);
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 | 515;
 HEAP32[$3>>2] = $5;
 $6 = $0;
 $7 = ((($6)) + 8192|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 64;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 8232|0);
 $14 = HEAP32[$13>>2]|0;
 _raise_rcp_interrupt($14,1);
 STACKTOP = sp;return;
}
function _rsp_mem_address($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 8191;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1243($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _rsp_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _update_sp_status($sp,$w) {
 $sp = $sp|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $w;
 $2 = $1;
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 8192|0);
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  HEAP32[$7>>2] = $9;
 }
 $10 = $1;
 $11 = $10 & 2;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = ((($13)) + 8192|0);
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 | 1;
  HEAP32[$15>>2] = $17;
 }
 $18 = $1;
 $19 = $18 & 4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $0;
  $22 = ((($21)) + 8192|0);
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & -3;
  HEAP32[$23>>2] = $25;
 }
 $26 = $1;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $0;
  $30 = ((($29)) + 8232|0);
  $31 = HEAP32[$30>>2]|0;
  _clear_rcp_interrupt($31,1);
 }
 $32 = $1;
 $33 = $32 & 16;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $0;
  $36 = ((($35)) + 8232|0);
  $37 = HEAP32[$36>>2]|0;
  _signal_rcp_interrupt($37,1);
 }
 $38 = $1;
 $39 = $38 & 32;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $0;
  $42 = ((($41)) + 8192|0);
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & -33;
  HEAP32[$43>>2] = $45;
 }
 $46 = $1;
 $47 = $46 & 64;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $0;
  $50 = ((($49)) + 8192|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 | 32;
  HEAP32[$51>>2] = $53;
 }
 $54 = $1;
 $55 = $54 & 128;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $0;
  $58 = ((($57)) + 8192|0);
  $59 = ((($58)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 & -65;
  HEAP32[$59>>2] = $61;
 }
 $62 = $1;
 $63 = $62 & 256;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $0;
  $66 = ((($65)) + 8192|0);
  $67 = ((($66)) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 | 64;
  HEAP32[$67>>2] = $69;
 }
 $70 = $1;
 $71 = $70 & 512;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $0;
  $74 = ((($73)) + 8192|0);
  $75 = ((($74)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 & -129;
  HEAP32[$75>>2] = $77;
 }
 $78 = $1;
 $79 = $78 & 1024;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $0;
  $82 = ((($81)) + 8192|0);
  $83 = ((($82)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 | 128;
  HEAP32[$83>>2] = $85;
 }
 $86 = $1;
 $87 = $86 & 2048;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $0;
  $90 = ((($89)) + 8192|0);
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 & -257;
  HEAP32[$91>>2] = $93;
 }
 $94 = $1;
 $95 = $94 & 4096;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $0;
  $98 = ((($97)) + 8192|0);
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 | 256;
  HEAP32[$99>>2] = $101;
 }
 $102 = $1;
 $103 = $102 & 8192;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $0;
  $106 = ((($105)) + 8192|0);
  $107 = ((($106)) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 & -513;
  HEAP32[$107>>2] = $109;
 }
 $110 = $1;
 $111 = $110 & 16384;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $0;
  $114 = ((($113)) + 8192|0);
  $115 = ((($114)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 | 512;
  HEAP32[$115>>2] = $117;
 }
 $118 = $1;
 $119 = $118 & 32768;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $0;
  $122 = ((($121)) + 8192|0);
  $123 = ((($122)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 & -1025;
  HEAP32[$123>>2] = $125;
 }
 $126 = $1;
 $127 = $126 & 65536;
 $128 = ($127|0)!=(0);
 if ($128) {
  $129 = $0;
  $130 = ((($129)) + 8192|0);
  $131 = ((($130)) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 | 1024;
  HEAP32[$131>>2] = $133;
 }
 $134 = $1;
 $135 = $134 & 131072;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $0;
  $138 = ((($137)) + 8192|0);
  $139 = ((($138)) + 16|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $140 & -2049;
  HEAP32[$139>>2] = $141;
 }
 $142 = $1;
 $143 = $142 & 262144;
 $144 = ($143|0)!=(0);
 if ($144) {
  $145 = $0;
  $146 = ((($145)) + 8192|0);
  $147 = ((($146)) + 16|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 | 2048;
  HEAP32[$147>>2] = $149;
 }
 $150 = $1;
 $151 = $150 & 524288;
 $152 = ($151|0)!=(0);
 if ($152) {
  $153 = $0;
  $154 = ((($153)) + 8192|0);
  $155 = ((($154)) + 16|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 & -4097;
  HEAP32[$155>>2] = $157;
 }
 $158 = $1;
 $159 = $158 & 1048576;
 $160 = ($159|0)!=(0);
 if ($160) {
  $161 = $0;
  $162 = ((($161)) + 8192|0);
  $163 = ((($162)) + 16|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 4096;
  HEAP32[$163>>2] = $165;
 }
 $166 = $1;
 $167 = $166 & 2097152;
 $168 = ($167|0)!=(0);
 if ($168) {
  $169 = $0;
  $170 = ((($169)) + 8192|0);
  $171 = ((($170)) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $172 & -8193;
  HEAP32[$171>>2] = $173;
 }
 $174 = $1;
 $175 = $174 & 4194304;
 $176 = ($175|0)!=(0);
 if ($176) {
  $177 = $0;
  $178 = ((($177)) + 8192|0);
  $179 = ((($178)) + 16|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $180 | 8192;
  HEAP32[$179>>2] = $181;
 }
 $182 = $1;
 $183 = $182 & 8388608;
 $184 = ($183|0)!=(0);
 if ($184) {
  $185 = $0;
  $186 = ((($185)) + 8192|0);
  $187 = ((($186)) + 16|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $188 & -16385;
  HEAP32[$187>>2] = $189;
 }
 $190 = $1;
 $191 = $190 & 16777216;
 $192 = ($191|0)!=(0);
 if ($192) {
  $193 = $0;
  $194 = ((($193)) + 8192|0);
  $195 = ((($194)) + 16|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $196 | 16384;
  HEAP32[$195>>2] = $197;
 }
 $198 = $1;
 $199 = $198 & 1;
 $200 = ($199|0)!=(0);
 do {
  if (!($200)) {
   $201 = $1;
   $202 = $201 & 4;
   $203 = ($202|0)!=(0);
   if ($203) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $204 = $0;
 $205 = ((($204)) + 8192|0);
 $206 = ((($205)) + 16|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & 3;
 $209 = ($208|0)!=(0);
 if ($209) {
  STACKTOP = sp;return;
 }
 $210 = $0;
 _do_SP_Task($210);
 STACKTOP = sp;return;
}
function _dma_sp_write($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count = 0, $dram = 0, $dramaddr = 0, $i = 0, $j = 0, $l = 0, $length = 0, $memaddr = 0, $skip = 0, $spmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 $2 = ((($1)) + 8192|0);
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = $5 & 4095;
 $7 = $6 | 7;
 $8 = (($7) + 1)|0;
 $length = $8;
 $9 = $l;
 $10 = $9 >>> 12;
 $11 = $10 & 255;
 $12 = (($11) + 1)|0;
 $count = $12;
 $13 = $l;
 $14 = $13 >>> 20;
 $15 = $14 & 4095;
 $skip = $15;
 $16 = $0;
 $17 = ((($16)) + 8192|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 4095;
 $memaddr = $19;
 $20 = $0;
 $21 = ((($20)) + 8192|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 16777215;
 $dramaddr = $24;
 $25 = $0;
 $26 = $0;
 $27 = ((($26)) + 8192|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 4096;
 $30 = (($25) + ($29)|0);
 $spmem = $30;
 $31 = $0;
 $32 = ((($31)) + 8240|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = ((($34)) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $dram = $36;
 $j = 0;
 while(1) {
  $37 = $j;
  $38 = $count;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $i = 0;
  while(1) {
   $40 = $i;
   $41 = $length;
   $42 = ($40>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = $dramaddr;
   $44 = $43 ^ 3;
   $45 = $dram;
   $46 = (($45) + ($44)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $memaddr;
   $49 = $48 ^ 3;
   $50 = $spmem;
   $51 = (($50) + ($49)|0);
   HEAP8[$51>>0] = $47;
   $52 = $memaddr;
   $53 = (($52) + 1)|0;
   $memaddr = $53;
   $54 = $dramaddr;
   $55 = (($54) + 1)|0;
   $dramaddr = $55;
   $56 = $i;
   $57 = (($56) + 1)|0;
   $i = $57;
  }
  $58 = $skip;
  $59 = $dramaddr;
  $60 = (($59) + ($58))|0;
  $dramaddr = $60;
  $61 = $j;
  $62 = (($61) + 1)|0;
  $j = $62;
 }
 STACKTOP = sp;return;
}
function _dma_sp_read($sp) {
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count = 0, $dram = 0, $dramaddr = 0, $i = 0, $j = 0, $l = 0, $length = 0, $memaddr = 0, $skip = 0, $spmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sp;
 $1 = $0;
 $2 = ((($1)) + 8192|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = $5 & 4095;
 $7 = $6 | 7;
 $8 = (($7) + 1)|0;
 $length = $8;
 $9 = $l;
 $10 = $9 >>> 12;
 $11 = $10 & 255;
 $12 = (($11) + 1)|0;
 $count = $12;
 $13 = $l;
 $14 = $13 >>> 20;
 $15 = $14 & 4095;
 $skip = $15;
 $16 = $0;
 $17 = ((($16)) + 8192|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 4095;
 $memaddr = $19;
 $20 = $0;
 $21 = ((($20)) + 8192|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 16777215;
 $dramaddr = $24;
 $25 = $0;
 $26 = $0;
 $27 = ((($26)) + 8192|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 4096;
 $30 = (($25) + ($29)|0);
 $spmem = $30;
 $31 = $0;
 $32 = ((($31)) + 8240|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = ((($34)) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $dram = $36;
 $j = 0;
 while(1) {
  $37 = $j;
  $38 = $count;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $i = 0;
  while(1) {
   $40 = $i;
   $41 = $length;
   $42 = ($40>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = $memaddr;
   $44 = $43 ^ 3;
   $45 = $spmem;
   $46 = (($45) + ($44)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $dramaddr;
   $49 = $48 ^ 3;
   $50 = $dram;
   $51 = (($50) + ($49)|0);
   HEAP8[$51>>0] = $47;
   $52 = $memaddr;
   $53 = (($52) + 1)|0;
   $memaddr = $53;
   $54 = $dramaddr;
   $55 = (($54) + 1)|0;
   $dramaddr = $55;
   $56 = $i;
   $57 = (($56) + 1)|0;
   $i = $57;
  }
  $58 = $skip;
  $59 = $dramaddr;
  $60 = (($59) + ($58))|0;
  $dramaddr = $60;
  $61 = $j;
  $62 = (($61) + 1)|0;
  $j = $62;
 }
 STACKTOP = sp;return;
}
function _rsp_reg2($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _af_rtc_get_time($rtc) {
 $rtc = $rtc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rtc;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (mftCall_ii($3|0,($5|0))|0);
 STACKTOP = sp;return ($6|0);
}
function _af_rtc_status_command($rtc,$cmd) {
 $rtc = $rtc|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rtc;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 HEAP8[$3>>0] = 0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = 16;
 $6 = $1;
 $7 = ((($6)) + 5|0);
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function _af_rtc_read_command($rtc,$cmd) {
 $rtc = $rtc|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $rtc_time = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $rtc;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 switch ($5|0) {
 case 0:  {
  $6 = $1;
  $7 = ((($6)) + 4|0);
  HEAP8[$7>>0] = 0;
  $8 = $1;
  $9 = ((($8)) + 5|0);
  HEAP8[$9>>0] = 2;
  $10 = $1;
  $11 = ((($10)) + 12|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _DebugMessage(1,(gb + (19582) | 0),$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $12 = $0;
  $13 = (_af_rtc_get_time($12)|0);
  $rtc_time = $13;
  $14 = $rtc_time;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_byte2bcd($15)|0);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  HEAP8[$18>>0] = $16;
  $19 = $rtc_time;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_byte2bcd($21)|0);
  $23 = $1;
  $24 = ((($23)) + 5|0);
  HEAP8[$24>>0] = $22;
  $25 = $rtc_time;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_byte2bcd($27)|0);
  $29 = $28&255;
  $30 = (128 + ($29))|0;
  $31 = $30&255;
  $32 = $1;
  $33 = ((($32)) + 6|0);
  HEAP8[$33>>0] = $31;
  $34 = $rtc_time;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_byte2bcd($36)|0);
  $38 = $1;
  $39 = ((($38)) + 7|0);
  HEAP8[$39>>0] = $37;
  $40 = $rtc_time;
  $41 = ((($40)) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_byte2bcd($42)|0);
  $44 = $1;
  $45 = ((($44)) + 8|0);
  HEAP8[$45>>0] = $43;
  $46 = $rtc_time;
  $47 = ((($46)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 1)|0;
  $50 = (_byte2bcd($49)|0);
  $51 = $1;
  $52 = ((($51)) + 9|0);
  HEAP8[$52>>0] = $50;
  $53 = $rtc_time;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (_byte2bcd($55)|0);
  $57 = $1;
  $58 = ((($57)) + 10|0);
  HEAP8[$58>>0] = $56;
  $59 = $rtc_time;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61|0) / 100)&-1;
  $63 = (_byte2bcd($62)|0);
  $64 = $1;
  $65 = ((($64)) + 11|0);
  HEAP8[$65>>0] = $63;
  $66 = $1;
  $67 = ((($66)) + 12|0);
  HEAP8[$67>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _af_rtc_write_command($rtc,$cmd) {
 $rtc = $rtc|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $rtc;
 $1 = $cmd;
 _DebugMessage(1,(gb + (19623) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function _byte2bcd($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = (($1|0) % 100)&-1;
 $0 = $2;
 $3 = $0;
 $4 = (($3|0) / 10)&-1;
 $5 = $4 << 4;
 $6 = $0;
 $7 = (($6|0) % 10)&-1;
 $8 = $5 | $7;
 $9 = $8&255;
 STACKTOP = sp;return ($9|0);
}
function _init_cic_using_ipl3($cic,$ipl3) {
 $cic = $cic|0;
 $ipl3 = $ipl3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $crc = 0, $i = 0, $switch$split102D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split2D = 0, $switch$split72D = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $crc = sp;
 $0 = $cic;
 $1 = $ipl3;
 $2 = $crc;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6>>>0)<(1008);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $crc;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_i64Add(($14|0),($17|0),($11|0),0)|0);
  $19 = (getTempRet0() | 0);
  $20 = $crc;
  $21 = $20;
  HEAP32[$21>>2] = $18;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $crc;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $switch$split2D = ($28|0)<(1233011019);
 L5: do {
  if ($switch$split2D) {
   $switch$split72D = ($28|0)<(-77393373);
   if ($switch$split72D) {
    switch ($28|0) {
    case -708946560:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $cond2 = ($31|0)==(214);
    if (!($cond2)) {
     label = 11;
     break;
    }
    $i = 4;
    break;
   }
   $switch$split132D = ($28|0)<(41934641);
   if ($switch$split132D) {
    switch ($28|0) {
    case -77393373:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $cond = ($31|0)==(207);
    if (!($cond)) {
     label = 11;
     break;
    }
   } else {
    switch ($28|0) {
    case 41934641:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $cond6 = ($31|0)==(208);
    if (!($cond6)) {
     label = 11;
     break;
    }
   }
   $i = 0;
  } else {
   $switch$split102D = ($28|0)<(1240862358);
   if ($switch$split102D) {
    switch ($28|0) {
    case 1233011019:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $cond5 = ($31|0)==(214);
    if (!($cond5)) {
     label = 11;
     break;
    }
    $i = 2;
    break;
   }
   $switch$split162D = ($28|0)<(1472746052);
   if (!($switch$split162D)) {
    switch ($28|0) {
    case 1472746052:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $cond3 = ($31|0)==(208);
    if ($cond3) {
     label = 12;
     break;
    } else {
     label = 11;
     break;
    }
   }
   switch ($28|0) {
   case 1240862358:  {
    break;
   }
   default: {
    label = 11;
    break L5;
   }
   }
   $cond4 = ($31|0)==(282);
   if ($cond4) {
    $i = 3;
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $32 = $crc;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $vararg_buffer;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  _DebugMessage(2,(gb + (19665) | 0),$vararg_buffer);
  label = 12;
 }
 if ((label|0) == 12) {
  $i = 1;
 }
 $42 = $0;
 $43 = $i;
 $44 = ((gb + (3652) | 0) + ($43<<3)|0);
 ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;HEAP32[$42+4>>2]=HEAP32[$44+4>>2]|0;
 STACKTOP = sp;return;
}
function _eeprom_save($eeprom) {
 $eeprom = $eeprom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eeprom;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 mftCall_vi($3|0,($5|0));
 STACKTOP = sp;return;
}
function _format_eeprom($eeprom,$size) {
 $eeprom = $eeprom|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eeprom;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 _memset(($2|0),-1,($3|0))|0;
 STACKTOP = sp;return;
}
function _eeprom_status_command($eeprom,$cmd) {
 $eeprom = $eeprom|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eeprom;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(3);
 if (!($6)) {
  $49 = $0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51&65535;
  $53 = $52 & 255;
  $54 = $53&255;
  $55 = $1;
  $56 = ((($55)) + 3|0);
  HEAP8[$56>>0] = $54;
  $57 = $0;
  $58 = ((($57)) + 16|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = $60 >> 8;
  $62 = $61&255;
  $63 = $1;
  $64 = ((($63)) + 4|0);
  HEAP8[$64>>0] = $62;
  $65 = $1;
  $66 = ((($65)) + 5|0);
  HEAP8[$66>>0] = 0;
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 & 3;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 & 255;
  $24 = $23&255;
  $25 = $1;
  $26 = ((($25)) + 3|0);
  HEAP8[$26>>0] = $24;
 }
 $27 = $1;
 $28 = ((($27)) + 1|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 3;
 $32 = ($31|0)>(1);
 if ($32) {
  $33 = $0;
  $34 = ((($33)) + 16|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = $36 >> 8;
  $38 = $37&255;
  $39 = $1;
  $40 = ((($39)) + 4|0);
  HEAP8[$40>>0] = $38;
 }
 $41 = $1;
 $42 = ((($41)) + 1|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 & 3;
 $46 = ($45|0)>(2);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $1;
 $48 = ((($47)) + 5|0);
 HEAP8[$48>>0] = 0;
 STACKTOP = sp;return;
}
function _eeprom_read_command($eeprom,$cmd) {
 $eeprom = $eeprom|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, $data = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $eeprom;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5<<3;
 $7 = $6&65535;
 $address = $7;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $data = $9;
 $10 = $address;
 $11 = $10&65535;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)<($14>>>0);
 if ($15) {
  $16 = $data;
  $17 = $address;
  $18 = $17&65535;
  $19 = $0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18)|0);
  ;HEAP8[$16>>0]=HEAP8[$22>>0]|0;HEAP8[$16+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$22+7>>0]|0;
  STACKTOP = sp;return;
 } else {
  $23 = $address;
  $24 = $23&65535;
  HEAP32[$vararg_buffer>>2] = $24;
  _DebugMessage(2,(gb + (19709) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _eeprom_write_command($eeprom,$cmd) {
 $eeprom = $eeprom|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, $data = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $eeprom;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5<<3;
 $7 = $6&65535;
 $address = $7;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $data = $9;
 $10 = $address;
 $11 = $10&65535;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)<($14>>>0);
 $16 = $address;
 $17 = $16&65535;
 if ($15) {
  $18 = $0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17)|0);
  $22 = $data;
  ;HEAP8[$21>>0]=HEAP8[$22>>0]|0;HEAP8[$21+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$21+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$21+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$21+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$21+7>>0]=HEAP8[$22+7>>0]|0;
  $23 = $0;
  _eeprom_save($23);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $17;
  _DebugMessage(2,(gb + (19709) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _game_controller_is_connected($cont,$pak) {
 $cont = $cont|0;
 $pak = $pak|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cont;
 $1 = $pak;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (mftCall_iii($4|0,($6|0),($7|0))|0);
 STACKTOP = sp;return ($8|0);
}
function _game_controller_get_input($cont) {
 $cont = $cont|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cont;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (mftCall_ii($3|0,($5|0))|0);
 STACKTOP = sp;return ($6|0);
}
function _process_controller_command($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cont;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 switch ($5|0) {
 case 255: case 0:  {
  $6 = $0;
  $7 = $1;
  _controller_status_command($6,$7);
  break;
 }
 case 1:  {
  $8 = $0;
  $9 = $1;
  _controller_read_buttons_command($8,$9);
  break;
 }
 case 2:  {
  $10 = $0;
  $11 = $1;
  _controller_read_pak_command($10,$11);
  break;
 }
 case 3:  {
  $12 = $0;
  $13 = $1;
  _controller_write_pak_command($12,$13);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _read_controller($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cont;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $cond = ($5|0)==(1);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 _read_controller_read_buttons($6,$7);
 STACKTOP = sp;return;
}
function _controller_status_command($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $connected = 0, $pak = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pak = sp + 4|0;
 $0 = $cont;
 $1 = $cmd;
 $2 = $0;
 $3 = (_game_controller_is_connected($2,$pak)|0);
 $connected = $3;
 $4 = $1;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 128;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $connected;
 $11 = ($10|0)!=(0);
 $12 = $1;
 if (!($11)) {
  $13 = ((($12)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 | 128;
  $17 = $16&255;
  HEAP8[$13>>0] = $17;
  STACKTOP = sp;return;
 }
 $18 = ((($12)) + 3|0);
 HEAP8[$18>>0] = 5;
 $19 = $1;
 $20 = ((($19)) + 4|0);
 HEAP8[$20>>0] = 0;
 $21 = HEAP32[$pak>>2]|0;
 $$off = (($21) + -1)|0;
 $switch = ($$off>>>0)<(3);
 $22 = $1;
 $23 = ((($22)) + 5|0);
 if ($switch) {
  HEAP8[$23>>0] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP8[$23>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _controller_read_buttons_command($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $connected = 0, $pak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pak = sp + 4|0;
 $0 = $cont;
 $1 = $cmd;
 $2 = $0;
 $3 = (_game_controller_is_connected($2,$pak)|0);
 $connected = $3;
 $4 = $connected;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 | 128;
 $11 = $10&255;
 HEAP8[$7>>0] = $11;
 STACKTOP = sp;return;
}
function _controller_read_pak_command($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $connected = 0, $pak = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pak = sp + 8|0;
 $0 = $cont;
 $1 = $cmd;
 $2 = $0;
 $3 = (_game_controller_is_connected($2,$pak)|0);
 $connected = $3;
 $4 = $connected;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $1;
  $7 = ((($6)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $9 | 128;
  $11 = $10&255;
  HEAP8[$7>>0] = $11;
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$pak>>2]|0;
 switch ($12|0) {
 case 0:  {
  $13 = $1;
  $14 = ((($13)) + 5|0);
  dest=$14; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $15 = $0;
  $16 = ((($15)) + 12|0);
  $17 = $1;
  _mempak_read_command($16,$17);
  break;
 }
 case 2:  {
  $18 = $0;
  $19 = ((($18)) + 24|0);
  $20 = $1;
  _rumblepak_read_command($19,$20);
  break;
 }
 case 3:  {
  break;
 }
 default: {
  $21 = HEAP32[$pak>>2]|0;
  HEAP32[$vararg_buffer>>2] = $21;
  _DebugMessage(2,(gb + (19747) | 0),$vararg_buffer);
 }
 }
 $22 = $1;
 $23 = ((($22)) + 5|0);
 $24 = (_pak_data_crc($23)|0);
 $25 = $1;
 $26 = ((($25)) + 37|0);
 HEAP8[$26>>0] = $24;
 STACKTOP = sp;return;
}
function _controller_write_pak_command($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $connected = 0, $pak = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pak = sp + 8|0;
 $0 = $cont;
 $1 = $cmd;
 $2 = $0;
 $3 = (_game_controller_is_connected($2,$pak)|0);
 $connected = $3;
 $4 = $connected;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $1;
  $7 = ((($6)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $9 | 128;
  $11 = $10&255;
  HEAP8[$7>>0] = $11;
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$pak>>2]|0;
 switch ($12|0) {
 case 3: case 0:  {
  break;
 }
 case 1:  {
  $13 = $0;
  $14 = ((($13)) + 12|0);
  $15 = $1;
  _mempak_write_command($14,$15);
  break;
 }
 case 2:  {
  $16 = $0;
  $17 = ((($16)) + 24|0);
  $18 = $1;
  _rumblepak_write_command($17,$18);
  break;
 }
 default: {
  $19 = HEAP32[$pak>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  _DebugMessage(2,(gb + (19747) | 0),$vararg_buffer);
 }
 }
 $20 = $1;
 $21 = ((($20)) + 5|0);
 $22 = (_pak_data_crc($21)|0);
 $23 = $1;
 $24 = ((($23)) + 37|0);
 HEAP8[$24>>0] = $22;
 STACKTOP = sp;return;
}
function _read_controller_read_buttons($cont,$cmd) {
 $cont = $cont|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $connected = 0, $pak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pak = sp + 4|0;
 $0 = $cont;
 $1 = $cmd;
 $2 = $0;
 $3 = (_game_controller_is_connected($2,$pak)|0);
 $connected = $3;
 $4 = $connected;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (_game_controller_get_input($6)|0);
 $8 = $1;
 $9 = ((($8)) + 3|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _pak_data_crc($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $crc = 0, $i = 0, $mask = 0, $xor_tap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $crc = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<=(32);
  if (!($2)) {
   break;
  }
  $mask = 128;
  while(1) {
   $3 = $mask;
   $4 = ($3|0)>=(1);
   if (!($4)) {
    break;
   }
   $5 = $crc;
   $6 = $5&255;
   $7 = $6 & 128;
   $8 = ($7|0)!=(0);
   $9 = $8 ? 133 : 0;
   $10 = $9&255;
   $xor_tap = $10;
   $11 = $crc;
   $12 = $11&255;
   $13 = $12 << 1;
   $14 = $13&255;
   $crc = $14;
   $15 = $i;
   $16 = ($15|0)!=(32);
   if ($16) {
    $17 = $i;
    $18 = $0;
    $19 = (($18) + ($17)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $mask;
    $23 = $21 & $22;
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = $crc;
     $26 = $25&255;
     $27 = $26 | 1;
     $28 = $27&255;
     $crc = $28;
    }
   }
   $29 = $xor_tap;
   $30 = $29&255;
   $31 = $crc;
   $32 = $31&255;
   $33 = $32 ^ $30;
   $34 = $33&255;
   $crc = $34;
   $35 = $mask;
   $36 = $35 >> 1;
   $mask = $36;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $crc;
 STACKTOP = sp;return ($39|0);
}
function _mempak_save($mpk) {
 $mpk = $mpk|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 mftCall_vi($3|0,($5|0));
 STACKTOP = sp;return;
}
function _format_mempak($mpk_data) {
 $mpk_data = $mpk_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk_data;
 $1 = $0;
 _memcpy(($1|0),((gb + (19770) | 0)|0),272)|0;
 $i = 272;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(32768);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = (($5) + ($4)|0);
  HEAP8[$6>>0] = 0;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  HEAP8[$10>>0] = 3;
  $11 = $i;
  $12 = (($11) + 2)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _mempak_read_command($mpk,$cmd) {
 $mpk = $mpk|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 224;
 $12 = $6 | $11;
 $13 = $12&65535;
 $address = $13;
 $14 = $address;
 $15 = $14&65535;
 $16 = ($15|0)<(32768);
 $17 = $1;
 $18 = ((($17)) + 5|0);
 if ($16) {
  $19 = $address;
  $20 = $19&65535;
  $21 = $0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20)|0);
  dest=$18; src=$24; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  dest=$18; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function _mempak_write_command($mpk,$cmd) {
 $mpk = $mpk|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mpk;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 224;
 $12 = $6 | $11;
 $13 = $12&65535;
 $address = $13;
 $14 = $address;
 $15 = $14&65535;
 $16 = ($15|0)<(32768);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $address;
 $18 = $17&65535;
 $19 = $0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18)|0);
 $23 = $1;
 $24 = ((($23)) + 5|0);
 dest=$22; src=$24; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $25 = $0;
 _mempak_save($25);
 STACKTOP = sp;return;
}
function _n64_cic_nus_6105($chl,$rsp,$len) {
 $chl = $chl|0;
 $rsp = $rsp|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, $key = 0, $lut = 0, $mag = 0, $mod = 0, $sgn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chl;
 $1 = $rsp;
 $2 = $len;
 $key = 11;
 $lut = (gb + (20042) | 0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $key;
  $7 = $6 << 24 >> 24;
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12*5)|0;
  $14 = (($7) + ($13))|0;
  $15 = $14 & 15;
  $16 = $15&255;
  $17 = $i;
  $18 = $1;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $16;
  $20 = $i;
  $21 = $1;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = $lut;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $key = $27;
  $28 = $i;
  $29 = $1;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = $32 >> 3;
  $34 = $33 & 1;
  $sgn = $34;
  $35 = $sgn;
  $36 = ($35|0)==(1);
  $37 = $i;
  $38 = $1;
  $39 = (($38) + ($37)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = $41 ^ -1;
  $43 = $36 ? $42 : $41;
  $44 = $43 & 7;
  $mag = $44;
  $45 = $mag;
  $46 = (($45|0) % 3)&-1;
  $47 = ($46|0)==(1);
  $48 = $sgn;
  $49 = (1 - ($48))|0;
  $50 = $47 ? $48 : $49;
  $mod = $50;
  $51 = $lut;
  $52 = ($51|0)==((gb + (20058) | 0)|0);
  do {
   if ($52) {
    $53 = $i;
    $54 = $1;
    $55 = (($54) + ($53)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = ($57|0)==(1);
    if (!($58)) {
     $59 = $i;
     $60 = $1;
     $61 = (($60) + ($59)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = ($63|0)==(9);
     if (!($64)) {
      break;
     }
    }
    $mod = 1;
   }
  } while(0);
  $65 = $lut;
  $66 = ($65|0)==((gb + (20058) | 0)|0);
  do {
   if ($66) {
    $67 = $i;
    $68 = $1;
    $69 = (($68) + ($67)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = ($71|0)==(11);
    if (!($72)) {
     $73 = $i;
     $74 = $1;
     $75 = (($74) + ($73)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)==(14);
     if (!($78)) {
      break;
     }
    }
    $mod = 0;
   }
  } while(0);
  $79 = $mod;
  $80 = ($79|0)==(1);
  $81 = $80 ? (gb + (20058) | 0) : (gb + (20042) | 0);
  $lut = $81;
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 STACKTOP = sp;return;
}
function _init_pif($pif) {
 $pif = $pif|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pif;
 $1 = $0;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _read_pif_ram($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $si = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $1;
 $si = $4;
 $5 = $2;
 $6 = (_pif_ram_address($5)|0);
 $addr = $6;
 $7 = $addr;
 $8 = ($7>>>0)>=(64);
 if ($8) {
  $9 = $2;
  HEAP32[$vararg_buffer>>2] = $9;
  _DebugMessage(1,(gb + (20074) | 0),$vararg_buffer);
  $10 = $3;
  HEAP32[$10>>2] = 0;
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $11 = $3;
  $12 = $si;
  $13 = ((($12)) + 28|0);
  $14 = $addr;
  $15 = (($13) + ($14)|0);
  ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;HEAP8[$11+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$15+3>>0]|0;
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 255;
  $19 = $18 << 24;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 65280;
  $23 = $22 << 8;
  $24 = $19 | $23;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 16711680;
  $28 = $27 >>> 8;
  $29 = $24 | $28;
  $30 = $3;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & -16777216;
  $33 = $32 >>> 24;
  $34 = $29 | $33;
  $35 = $3;
  HEAP32[$35>>2] = $34;
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _write_pif_ram($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $addr = 0, $si = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $si = $5;
 $6 = $2;
 $7 = (_pif_ram_address($6)|0);
 $addr = $7;
 $8 = $addr;
 $9 = ($8>>>0)>=(64);
 if ($9) {
  $10 = $2;
  HEAP32[$vararg_buffer>>2] = $10;
  _DebugMessage(1,(gb + (20074) | 0),$vararg_buffer);
  $0 = -1;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $11 = $addr;
 $12 = $si;
 $13 = ((($12)) + 28|0);
 $14 = (($13) + ($11)|0);
 $15 = $3;
 $16 = $15 & 255;
 $17 = $16 << 24;
 $18 = $3;
 $19 = $18 & 65280;
 $20 = $19 << 8;
 $21 = $17 | $20;
 $22 = $3;
 $23 = $22 & 16711680;
 $24 = $23 >>> 8;
 $25 = $21 | $24;
 $26 = $3;
 $27 = $26 & -16777216;
 $28 = $27 >>> 24;
 $29 = $25 | $28;
 $30 = $4;
 $31 = $30 & 255;
 $32 = $31 << 24;
 $33 = $4;
 $34 = $33 & 65280;
 $35 = $34 << 8;
 $36 = $32 | $35;
 $37 = $4;
 $38 = $37 & 16711680;
 $39 = $38 >>> 8;
 $40 = $36 | $39;
 $41 = $4;
 $42 = $41 & -16777216;
 $43 = $42 >>> 24;
 $44 = $40 | $43;
 _masked_write_1264($14,$29,$44);
 $45 = $addr;
 $46 = ($45|0)==(60);
 do {
  if ($46) {
   $47 = $4;
   $48 = $47 & 255;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $si;
    $51 = ((($50)) + 28|0);
    $52 = ((($51)) + 63|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)==(8);
    $56 = $si;
    if ($55) {
     $57 = ((($56)) + 28|0);
     $58 = ((($57)) + 63|0);
     HEAP8[$58>>0] = 0;
     _cp0_update_count();
     _add_interupt_event(8,2304);
     break;
    } else {
     _update_pif_write($56);
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _update_pif_write($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $challenge = 0, $channel = 0, $i = 0, $pif = 0, $response = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $challenge = sp + 58|0;
 $response = sp + 28|0;
 $0 = $si;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $pif = $2;
 $i = 0;
 $channel = 0;
 $3 = $pif;
 $4 = ((($3)) + 63|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)>(1);
 if ($7) {
  $8 = $pif;
  $9 = ((($8)) + 63|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  switch ($11|0) {
  case 2:  {
   $i = 0;
   while(1) {
    $12 = $i;
    $13 = ($12|0)<(15);
    if (!($13)) {
     break;
    }
    $14 = $i;
    $15 = (48 + ($14))|0;
    $16 = $pif;
    $17 = (($16) + ($15)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 >> 4;
    $21 = $20 & 15;
    $22 = $21&255;
    $23 = $i;
    $24 = $23<<1;
    $25 = (($challenge) + ($24)|0);
    HEAP8[$25>>0] = $22;
    $26 = $i;
    $27 = (48 + ($26))|0;
    $28 = $pif;
    $29 = (($28) + ($27)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $31 & 15;
    $33 = $32&255;
    $34 = $i;
    $35 = $34<<1;
    $36 = (($35) + 1)|0;
    $37 = (($challenge) + ($36)|0);
    HEAP8[$37>>0] = $33;
    $38 = $i;
    $39 = (($38) + 1)|0;
    $i = $39;
   }
   _n64_cic_nus_6105($challenge,$response,30);
   $40 = $pif;
   $41 = ((($40)) + 46|0);
   HEAP8[$41>>0] = 0;
   $42 = $pif;
   $43 = ((($42)) + 47|0);
   HEAP8[$43>>0] = 0;
   $i = 0;
   while(1) {
    $44 = $i;
    $45 = ($44|0)<(15);
    if (!($45)) {
     break;
    }
    $46 = $i;
    $47 = $46<<1;
    $48 = (($response) + ($47)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = $50 << 4;
    $52 = $i;
    $53 = $52<<1;
    $54 = (($53) + 1)|0;
    $55 = (($response) + ($54)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = (($51) + ($57))|0;
    $59 = $58&255;
    $60 = $i;
    $61 = (48 + ($60))|0;
    $62 = $pif;
    $63 = (($62) + ($61)|0);
    HEAP8[$63>>0] = $59;
    $64 = $i;
    $65 = (($64) + 1)|0;
    $i = $65;
   }
   $66 = $pif;
   $67 = ((($66)) + 63|0);
   HEAP8[$67>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $68 = $pif;
   $69 = ((($68)) + 63|0);
   HEAP8[$69>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $70 = $pif;
   $71 = ((($70)) + 63|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   HEAP32[$vararg_buffer>>2] = $73;
   _DebugMessage(1,(gb + (20100) | 0),$vararg_buffer);
   STACKTOP = sp;return;
  }
  }
 }
 while(1) {
  $74 = $i;
  $75 = ($74|0)<(64);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = $pif;
  $78 = (($77) + ($76)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  L21: do {
   switch ($80|0) {
   case 0:  {
    $81 = $channel;
    $82 = (($81) + 1)|0;
    $channel = $82;
    $83 = $channel;
    $84 = ($83|0)>(6);
    if ($84) {
     $i = 64;
    }
    break;
   }
   case 255:  {
    break;
   }
   default: {
    $85 = $i;
    $86 = $pif;
    $87 = (($86) + ($85)|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = $89 & 192;
    $91 = ($90|0)!=(0);
    if ($91) {
     $i = 64;
     break L21;
    }
    $92 = $channel;
    $93 = ($92|0)<(4);
    $94 = $channel;
    do {
     if ($93) {
      $95 = ((gb + (10521492) | 0) + (($94*12)|0)|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)!=(0);
      if ($97) {
       $98 = $channel;
       $99 = ((gb + (10521492) | 0) + (($98*12)|0)|0);
       $100 = ((($99)) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)!=(0);
       if ($102) {
        $103 = HEAP32[((((gb + (10521668) | 0)) + 4|0))>>2]|0;
        $104 = $channel;
        $105 = $i;
        $106 = $pif;
        $107 = (($106) + ($105)|0);
        mftCall_vii($103|0,($104|0),($107|0));
        break;
       }
      }
      $108 = $channel;
      $109 = $pif;
      $110 = ((($109)) + 64|0);
      $111 = (($110) + ($108<<5)|0);
      $112 = $i;
      $113 = $pif;
      $114 = (($113) + ($112)|0);
      _process_controller_command($111,$114);
     } else {
      $115 = ($94|0)==(4);
      if ($115) {
       $116 = $pif;
       $117 = $i;
       $118 = $pif;
       $119 = (($118) + ($117)|0);
       _process_cart_command($116,$119);
       break;
      } else {
       _DebugMessage(1,(gb + (20132) | 0),$vararg_buffer1);
       break;
      }
     }
    } while(0);
    $120 = $i;
    $121 = $pif;
    $122 = (($121) + ($120)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = $i;
    $126 = (($125) + 1)|0;
    $127 = $pif;
    $128 = (($127) + ($126)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $130 & 63;
    $132 = (($124) + ($131))|0;
    $133 = (($132) + 1)|0;
    $134 = $i;
    $135 = (($134) + ($133))|0;
    $i = $135;
    $136 = $channel;
    $137 = (($136) + 1)|0;
    $channel = $137;
   }
   }
  } while(0);
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $140 = HEAP32[((((gb + (10521668) | 0)) + 4|0))>>2]|0;
 mftCall_vii($140|0,-1,(0|0));
 STACKTOP = sp;return;
}
function _update_pif_read($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $channel = 0, $i = 0, $pif = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $si;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $pif = $2;
 $i = 0;
 $channel = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(64);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $pif;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  L4: do {
   switch ($9|0) {
   case 0:  {
    $10 = $channel;
    $11 = (($10) + 1)|0;
    $channel = $11;
    $12 = $channel;
    $13 = ($12|0)>(6);
    if ($13) {
     $i = 64;
    }
    break;
   }
   case 254:  {
    $i = 64;
    break;
   }
   case 184: case 86: case 180: case 255:  {
    break;
   }
   default: {
    $14 = $i;
    $15 = $pif;
    $16 = (($15) + ($14)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $18 & 192;
    $20 = ($19|0)!=(0);
    if ($20) {
     $i = 64;
     break L4;
    }
    $21 = $channel;
    $22 = ($21|0)<(4);
    do {
     if ($22) {
      $23 = $channel;
      $24 = ((gb + (10521492) | 0) + (($23*12)|0)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)!=(0);
      if ($26) {
       $27 = $channel;
       $28 = ((gb + (10521492) | 0) + (($27*12)|0)|0);
       $29 = ((($28)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)!=(0);
       if ($31) {
        $32 = HEAP32[((((gb + (10521668) | 0)) + 16|0))>>2]|0;
        $33 = $channel;
        $34 = $i;
        $35 = $pif;
        $36 = (($35) + ($34)|0);
        mftCall_vii($32|0,($33|0),($36|0));
        break;
       }
      }
      $37 = $channel;
      $38 = $pif;
      $39 = ((($38)) + 64|0);
      $40 = (($39) + ($37<<5)|0);
      $41 = $i;
      $42 = $pif;
      $43 = (($42) + ($41)|0);
      _read_controller($40,$43);
     }
    } while(0);
    $44 = $i;
    $45 = $pif;
    $46 = (($45) + ($44)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $i;
    $50 = (($49) + 1)|0;
    $51 = $pif;
    $52 = (($51) + ($50)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $54 & 63;
    $56 = (($48) + ($55))|0;
    $57 = (($56) + 1)|0;
    $58 = $i;
    $59 = (($58) + ($57))|0;
    $i = $59;
    $60 = $channel;
    $61 = (($60) + 1)|0;
    $channel = $61;
   }
   }
  } while(0);
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 $64 = HEAP32[((((gb + (10521668) | 0)) + 16|0))>>2]|0;
 mftCall_vii($64|0,-1,(0|0));
 STACKTOP = sp;return;
}
function _pif_ram_address($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65532;
 $3 = (($2) - 1984)|0;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1264($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _process_cart_command($pif,$cmd) {
 $pif = $pif|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pif;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 switch ($5|0) {
 case 0:  {
  $6 = $0;
  $7 = ((($6)) + 192|0);
  $8 = $1;
  _eeprom_status_command($7,$8);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $9 = $0;
  $10 = ((($9)) + 192|0);
  $11 = $1;
  _eeprom_read_command($10,$11);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $12 = $0;
  $13 = ((($12)) + 192|0);
  $14 = $1;
  _eeprom_write_command($13,$14);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $15 = $0;
  $16 = ((($15)) + 212|0);
  $17 = $1;
  _af_rtc_status_command($16,$17);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $18 = $0;
  $19 = ((($18)) + 212|0);
  $20 = $1;
  _af_rtc_read_command($19,$20);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $21 = $0;
  $22 = ((($21)) + 212|0);
  $23 = $1;
  _af_rtc_write_command($22,$23);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $24 = $1;
  $25 = ((($24)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  HEAP32[$vararg_buffer>>2] = $27;
  _DebugMessage(1,(gb + (20165) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function _rumblepak_rumble($rpk,$action) {
 $rpk = $rpk|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rpk;
 $1 = $action;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 mftCall_vii($4|0,($6|0),($7|0));
 STACKTOP = sp;return;
}
function _rumblepak_read_command($rpk,$cmd) {
 $rpk = $rpk|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $address = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rpk;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 224;
 $12 = $6 | $11;
 $13 = $12&65535;
 $address = $13;
 $14 = $address;
 $15 = $14&65535;
 $16 = ($15|0)>=(32768);
 if ($16) {
  $17 = $address;
  $18 = $17&65535;
  $19 = ($18|0)<(36864);
  if ($19) {
   $data = -128;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $data = 0;
 }
 $20 = $1;
 $21 = ((($20)) + 5|0);
 $22 = $data;
 $23 = $22&255;
 $24 = $23&255;
 _memset(($21|0),($24|0),32)|0;
 STACKTOP = sp;return;
}
function _rumblepak_write_command($rpk,$cmd) {
 $rpk = $rpk|0;
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $address = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rpk;
 $1 = $cmd;
 $2 = $1;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 224;
 $12 = $6 | $11;
 $13 = $12&65535;
 $address = $13;
 $14 = $address;
 $15 = $14&65535;
 $16 = ($15|0)==(49152);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ((($17)) + 5|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(0);
 $22 = $21 ? 0 : 1;
 $action = $22;
 $23 = $0;
 $24 = $action;
 _rumblepak_rumble($23,$24);
 STACKTOP = sp;return;
}
function _connect_si($si,$r4300,$ri) {
 $si = $si|0;
 $r4300 = $r4300|0;
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $si;
 $1 = $r4300;
 $2 = $ri;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 256|0);
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 260|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _init_si($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $si;
 $1 = $0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 _init_pif($3);
 STACKTOP = sp;return;
}
function _read_si_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $si = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $si = $3;
 $4 = $1;
 $5 = (_si_reg($4)|0);
 $reg = $5;
 $6 = $reg;
 $7 = $si;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return 0;
}
function _write_si_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $si = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $mask;
 $4 = $0;
 $si = $4;
 $5 = $1;
 $6 = (_si_reg($5)|0);
 $reg = $6;
 $7 = $reg;
 switch ($7|0) {
 case 0:  {
  $8 = $si;
  $9 = $2;
  $10 = $3;
  _masked_write_1284($8,$9,$10);
  STACKTOP = sp;return 0;
  break;
 }
 case 1:  {
  $11 = $si;
  $12 = ((($11)) + 4|0);
  $13 = $2;
  $14 = $3;
  _masked_write_1284($12,$13,$14);
  $15 = $si;
  _dma_si_read($15);
  STACKTOP = sp;return 0;
  break;
 }
 case 4:  {
  $16 = $si;
  $17 = ((($16)) + 16|0);
  $18 = $2;
  $19 = $3;
  _masked_write_1284($17,$18,$19);
  $20 = $si;
  _dma_si_write($20);
  STACKTOP = sp;return 0;
  break;
 }
 case 6:  {
  $21 = $si;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & -4097;
  HEAP32[$22>>2] = $24;
  $25 = $si;
  $26 = ((($25)) + 256|0);
  $27 = HEAP32[$26>>2]|0;
  _clear_rcp_interrupt($27,2);
  STACKTOP = sp;return 0;
  break;
 }
 default: {
  STACKTOP = sp;return 0;
 }
 }
 return (0)|0;
}
function _si_end_of_dma_event($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $si;
 _main_check_inputs();
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 63|0);
 HEAP8[$3>>0] = 0;
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 4096;
 HEAP32[$5>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 256|0);
 $10 = HEAP32[$9>>2]|0;
 _raise_rcp_interrupt($10,2);
 STACKTOP = sp;return;
}
function _si_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1284($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _dma_si_read($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $si;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(532678592);
 if ($4) {
  _DebugMessage(1,(gb + (20222) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 $5 = $0;
 _update_pif_read($5);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(64);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = ((($9)) + 28|0);
  $11 = (($10) + ($8)|0);
  $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8)|(HEAPU8[$11+2>>0]<<16)|(HEAPU8[$11+3>>0]<<24);
  $13 = $12 & 255;
  $14 = $13 << 24;
  $15 = $i;
  $16 = $0;
  $17 = ((($16)) + 28|0);
  $18 = (($17) + ($15)|0);
  $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
  $20 = $19 & 65280;
  $21 = $20 << 8;
  $22 = $14 | $21;
  $23 = $i;
  $24 = $0;
  $25 = ((($24)) + 28|0);
  $26 = (($25) + ($23)|0);
  $27 = HEAPU8[$26>>0]|(HEAPU8[$26+1>>0]<<8)|(HEAPU8[$26+2>>0]<<16)|(HEAPU8[$26+3>>0]<<24);
  $28 = $27 & 16711680;
  $29 = $28 >>> 8;
  $30 = $22 | $29;
  $31 = $i;
  $32 = $0;
  $33 = ((($32)) + 28|0);
  $34 = (($33) + ($31)|0);
  $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
  $36 = $35 & -16777216;
  $37 = $36 >>> 24;
  $38 = $30 | $37;
  $39 = $0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $i;
  $42 = (($40) + ($41))|0;
  $43 = (($42>>>0) / 4)&-1;
  $44 = $0;
  $45 = ((($44)) + 260|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 32|0);
  $48 = ((($47)) + 40|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($43<<2)|0);
  HEAP32[$50>>2] = $38;
  $51 = $i;
  $52 = (($51) + 4)|0;
  $i = $52;
 }
 _cp0_update_count();
 $53 = HEAP32[(gb + (8410664) | 0)>>2]|0;
 $54 = ($53|0)!=(0);
 if ($54) {
  _add_interupt_event(8,2304);
  STACKTOP = sp;return;
 } else {
  $55 = $0;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 | 4096;
  HEAP32[$56>>2] = $58;
  $59 = $0;
  $60 = ((($59)) + 256|0);
  $61 = HEAP32[$60>>2]|0;
  _signal_rcp_interrupt($61,2);
  STACKTOP = sp;return;
 }
}
function _dma_si_write($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $si;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(532678592);
 if ($4) {
  _DebugMessage(1,(gb + (20191) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(64);
  $7 = $0;
  if (!($6)) {
   break;
  }
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = (($8) + ($9))|0;
  $11 = (($10>>>0) / 4)&-1;
  $12 = $0;
  $13 = ((($12)) + 260|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 32|0);
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($11<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 255;
  $21 = $20 << 24;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $i;
  $25 = (($23) + ($24))|0;
  $26 = (($25>>>0) / 4)&-1;
  $27 = $0;
  $28 = ((($27)) + 260|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 32|0);
  $31 = ((($30)) + 40|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($26<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 65280;
  $36 = $35 << 8;
  $37 = $21 | $36;
  $38 = $0;
  $39 = HEAP32[$38>>2]|0;
  $40 = $i;
  $41 = (($39) + ($40))|0;
  $42 = (($41>>>0) / 4)&-1;
  $43 = $0;
  $44 = ((($43)) + 260|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 32|0);
  $47 = ((($46)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($42<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 16711680;
  $52 = $51 >>> 8;
  $53 = $37 | $52;
  $54 = $0;
  $55 = HEAP32[$54>>2]|0;
  $56 = $i;
  $57 = (($55) + ($56))|0;
  $58 = (($57>>>0) / 4)&-1;
  $59 = $0;
  $60 = ((($59)) + 260|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 32|0);
  $63 = ((($62)) + 40|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($58<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & -16777216;
  $68 = $67 >>> 24;
  $69 = $53 | $68;
  $70 = $i;
  $71 = $0;
  $72 = ((($71)) + 28|0);
  $73 = (($72) + ($70)|0);
  HEAP8[$73>>0]=$69&255;HEAP8[$73+1>>0]=($69>>8)&255;HEAP8[$73+2>>0]=($69>>16)&255;HEAP8[$73+3>>0]=$69>>24;
  $74 = $i;
  $75 = (($74) + 4)|0;
  $i = $75;
 }
 _update_pif_write($7);
 _cp0_update_count();
 $76 = HEAP32[(gb + (8410664) | 0)>>2]|0;
 $77 = ($76|0)!=(0);
 if ($77) {
  _add_interupt_event(8,2304);
  STACKTOP = sp;return;
 } else {
  $78 = $0;
  $79 = ((($78)) + 24|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80 | 4096;
  HEAP32[$79>>2] = $81;
  $82 = $0;
  $83 = ((($82)) + 256|0);
  $84 = HEAP32[$83>>2]|0;
  _signal_rcp_interrupt($84,2);
  STACKTOP = sp;return;
 }
}
function _connect_vi($vi,$r4300) {
 $vi = $vi|0;
 $r4300 = $r4300|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $r4300;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 68|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _init_vi($vi) {
 $vi = $vi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $0;
 dest=$1; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = ((($2)) + 56|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = ((($4)) + 64|0);
 HEAP32[$5>>2] = 5000;
 $6 = $0;
 $7 = ((($6)) + 60|0);
 HEAP32[$7>>2] = 5000;
 STACKTOP = sp;return;
}
function _read_vi_regs($opaque,$address,$value) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp0_regs = 0, $reg = 0;
 var $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $address;
 $2 = $value;
 $3 = $0;
 $vi = $3;
 $4 = $1;
 $5 = (_vi_reg($4)|0);
 $reg = $5;
 $6 = (_r4300_cp0_regs()|0);
 $cp0_regs = $6;
 $7 = $reg;
 $8 = ($7|0)==(4);
 if (!($8)) {
  $33 = $reg;
  $34 = $vi;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $2;
  HEAP32[$37>>2] = $36;
  STACKTOP = sp;return 0;
 }
 _cp0_update_count();
 $9 = $vi;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $vi;
 $13 = ((($12)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $cp0_regs;
 $16 = ((($15)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) - ($17))|0;
 $19 = (($11) - ($18))|0;
 $20 = (($19>>>0) / 1500)&-1;
 $21 = $vi;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = $20;
 $23 = $vi;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & -2;
 $27 = $vi;
 $28 = ((($27)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26 | $29;
 $31 = $vi;
 $32 = ((($31)) + 16|0);
 HEAP32[$32>>2] = $30;
 $33 = $reg;
 $34 = $vi;
 $35 = (($34) + ($33<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 HEAP32[$37>>2] = $36;
 STACKTOP = sp;return 0;
}
function _write_vi_regs($opaque,$address,$value,$mask) {
 $opaque = $opaque|0;
 $address = $address|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $address;
 $3 = $value;
 $4 = $mask;
 $5 = $1;
 $vi = $5;
 $6 = $2;
 $7 = (_vi_reg($6)|0);
 $reg = $7;
 $8 = $reg;
 switch ($8|0) {
 case 0:  {
  $9 = $vi;
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = $10 & $11;
  $13 = $3;
  $14 = $4;
  $15 = $13 & $14;
  $16 = ($12|0)!=($15|0);
  if ($16) {
   $17 = $vi;
   $18 = $3;
   $19 = $4;
   _masked_write_1297($17,$18,$19);
   $20 = HEAP32[((((gb + (10521540) | 0)) + 40|0))>>2]|0;
   mftCall_v($20|0);
  }
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
  break;
 }
 case 2:  {
  $21 = $vi;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = $23 & $24;
  $26 = $3;
  $27 = $4;
  $28 = $26 & $27;
  $29 = ($25|0)!=($28|0);
  if ($29) {
   $30 = $vi;
   $31 = ((($30)) + 8|0);
   $32 = $3;
   $33 = $4;
   _masked_write_1297($31,$32,$33);
   $34 = HEAP32[((((gb + (10521540) | 0)) + 44|0))>>2]|0;
   mftCall_v($34|0);
  }
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
  break;
 }
 case 4:  {
  $35 = $vi;
  $36 = ((($35)) + 68|0);
  $37 = HEAP32[$36>>2]|0;
  _clear_rcp_interrupt($37,8);
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
  break;
 }
 default: {
  $38 = $reg;
  $39 = $vi;
  $40 = (($39) + ($38<<2)|0);
  $41 = $3;
  $42 = $4;
  _masked_write_1297($40,$41,$42);
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 }
 return (0)|0;
}
function _vi_vertical_interrupt_event($vi) {
 $vi = $vi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = HEAP32[((((gb + (10521540) | 0)) + 36|0))>>2]|0;
 mftCall_v($1|0);
 _new_vi();
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 6;
 $5 = $4 & 1;
 $6 = $0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 ^ $5;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $21 = 500000;
 } else {
  $14 = $0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  $18 = ($17*1500)|0;
  $21 = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 60|0);
 HEAP32[$20>>2] = $21;
 $22 = $0;
 $23 = ((($22)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = ((($25)) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24))|0;
 HEAP32[$26>>2] = $28;
 $29 = $0;
 $30 = ((($29)) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 _add_interupt_event_count(1,$31);
 $32 = $0;
 $33 = ((($32)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 _raise_rcp_interrupt($34,8);
 STACKTOP = sp;return;
}
function _vi_reg($address) {
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >>> 2;
 STACKTOP = sp;return ($3|0);
}
function _masked_write_1297($dst,$value,$mask) {
 $dst = $dst|0;
 $value = $value|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $value;
 $2 = $mask;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5 ^ -1;
 $7 = $4 & $6;
 $8 = $1;
 $9 = $2;
 $10 = $8 & $9;
 $11 = $7 | $10;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _osal_dynlib_getproc($LibHandle,$pccProcedureName) {
 $LibHandle = $LibHandle|0;
 $pccProcedureName = $pccProcedureName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $LibHandle;
 $2 = $pccProcedureName;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
 } else {
  $5 = $1;
  $6 = $2;
  $7 = (_dlsym(($5|0),($6|0))|0);
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _osal_mkdirp($dirpath,$mode) {
 $dirpath = $dirpath|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $currpath = 0, $fileinfo = 0, $mypath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fileinfo = sp;
 $1 = $dirpath;
 $2 = $mode;
 $3 = $1;
 $4 = (_stat(($3|0),($fileinfo|0))|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($fileinfo)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 61440;
  $9 = ($8|0)==(16384);
  if ($9) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $10 = $1;
 $11 = (_strdup(($10|0))|0);
 $currpath = $11;
 $mypath = $11;
 $12 = $mypath;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 while(1) {
  $14 = $currpath;
  $15 = ((($14)) + 1|0);
  $16 = (_strpbrk(($15|0),((gb + (21123) | 0)|0))|0);
  $currpath = $16;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $currpath;
  HEAP8[$18>>0] = 0;
  $19 = $mypath;
  $20 = (_stat(($19|0),($fileinfo|0))|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $mypath;
   $23 = $2;
   $24 = (_mkdir(($22|0),($23|0))|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    break;
   }
  } else {
   $26 = ((($fileinfo)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 & 61440;
   $29 = ($28|0)==(16384);
   if (!($29)) {
    break;
   }
  }
  $30 = HEAP8[(gb + (21123) | 0)>>0]|0;
  $31 = $currpath;
  HEAP8[$31>>0] = $30;
 }
 $32 = $mypath;
 _free(($32|0));
 $33 = $currpath;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $35 = $1;
 $36 = (_stat(($35|0),($fileinfo|0))|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $1;
  $39 = $2;
  $40 = (_mkdir(($38|0),($39|0))|0);
  $41 = ($40|0)!=(0);
  if ($41) {
   $0 = 1;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _osal_get_shared_filepath($filename,$firstsearch,$secondsearch) {
 $filename = $filename|0;
 $firstsearch = $firstsearch|0;
 $secondsearch = $secondsearch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filename;
 $2 = $firstsearch;
 $3 = $secondsearch;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = $1;
  $8 = (_search_dir_file((gb + (24158422) | 0),$6,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $0 = (gb + (24158422) | 0);
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $3;
  $13 = $1;
  $14 = (_search_dir_file((gb + (24158422) | 0),$12,$13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $0 = (gb + (24158422) | 0);
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(3);
  if (!($17)) {
   label = 12;
   break;
  }
  $18 = $i;
  $19 = ((gb + (3692) | 0) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = (_search_dir_file((gb + (24158422) | 0),$20,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   label = 10;
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 10) {
  $0 = (gb + (24158422) | 0);
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _osal_get_user_configpath() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = (_get_xdg_dir((gb + (24162518) | 0),(gb + (20252) | 0),(gb + (20268) | 0))|0);
 $rval = $1;
 $2 = $rval;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = (gb + (24162518) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = (_get_xdg_dir((gb + (24162518) | 0),(gb + (20281) | 0),(gb + (20286) | 0))|0);
 $rval = $4;
 $5 = $rval;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = (gb + (24162518) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $7 = $rval;
 $8 = ($7|0)<(3);
 if ($8) {
  _DebugMessage(1,(gb + (20307) | 0),$vararg_buffer);
 }
 $0 = 0;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _osal_get_user_datapath() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = (_get_xdg_dir((gb + (24166614) | 0),(gb + (20377) | 0),(gb + (20268) | 0))|0);
 $rval = $1;
 $2 = $rval;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = (gb + (24166614) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = (_get_xdg_dir((gb + (24166614) | 0),(gb + (20281) | 0),(gb + (20391) | 0))|0);
 $rval = $4;
 $5 = $rval;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = (gb + (24166614) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $7 = $rval;
 $8 = ($7|0)<(3);
 if ($8) {
  _DebugMessage(1,(gb + (20417) | 0),$vararg_buffer);
 }
 $0 = 0;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _osal_get_user_cachepath() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rval = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = (_get_xdg_dir((gb + (24170710) | 0),(gb + (20478) | 0),(gb + (20268) | 0))|0);
 $rval = $1;
 $2 = $rval;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = (gb + (24170710) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $4 = (_get_xdg_dir((gb + (24170710) | 0),(gb + (20281) | 0),(gb + (20493) | 0))|0);
 $rval = $4;
 $5 = $rval;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = (gb + (24170710) | 0);
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 $7 = $rval;
 $8 = ($7|0)<(3);
 if ($8) {
  _DebugMessage(1,(gb + (20513) | 0),$vararg_buffer);
 }
 $0 = 0;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _search_dir_file($destpath,$path,$filename) {
 $destpath = $destpath|0;
 $path = $path|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fileinfo = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fileinfo = sp;
 $1 = $destpath;
 $2 = $path;
 $3 = $filename;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $6 = $2;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 $or$cond3 = $or$cond | $9;
 if ($or$cond3) {
  $0 = 1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $1;
 $11 = $2;
 (_strcpy(($10|0),($11|0))|0);
 $12 = $1;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = (_strlen(($16|0))|0);
  $18 = (($17) - 1)|0;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(47);
  if ($23) {
   $24 = $1;
   (_strcat(($24|0),((gb + (21123) | 0)|0))|0);
  }
 }
 $25 = $1;
 $26 = $3;
 (_strcat(($25|0),($26|0))|0);
 $27 = $1;
 $28 = (_stat(($27|0),($fileinfo|0))|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $0 = 2;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $30 = ((($fileinfo)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 61440;
 $33 = ($32|0)==(32768);
 if ($33) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $0 = 3;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _get_xdg_dir($destpath,$envvar,$subdir) {
 $destpath = $destpath|0;
 $envvar = $envvar|0;
 $subdir = $subdir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $envpath = 0, $fileinfo = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fileinfo = sp + 8|0;
 $1 = $destpath;
 $2 = $envvar;
 $3 = $subdir;
 $4 = $2;
 $5 = (_getenv(($4|0))|0);
 $envpath = $5;
 $6 = $envpath;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $envpath;
  $9 = (_strlen(($8|0))|0);
  $10 = ($9>>>0)<(1);
  if (!($10)) {
   $11 = $envpath;
   $12 = (_stat(($11|0),($fileinfo|0))|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    $14 = ((($fileinfo)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 61440;
    $17 = ($16|0)==(16384);
    if ($17) {
     $18 = $1;
     $19 = $envpath;
     (_strcpy(($18|0),($19|0))|0);
     $20 = $1;
     $21 = (_strlen(($20|0))|0);
     $22 = (($21) - 1)|0;
     $23 = $1;
     $24 = (($23) + ($22)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = ($26|0)!=(47);
     if ($27) {
      $28 = $1;
      (_strcat(($28|0),((gb + (21123) | 0)|0))|0);
     }
     $29 = $1;
     $30 = $3;
     (_strcat(($29|0),($30|0))|0);
     $31 = $1;
     $32 = (_osal_mkdirp($31,448)|0);
     $33 = ($32|0)!=(0);
     if ($33) {
      $34 = $1;
      HEAP32[$vararg_buffer>>2] = $34;
      _DebugMessage(1,(gb + (20575) | 0),$vararg_buffer);
      $0 = 3;
      $35 = $0;
      STACKTOP = sp;return ($35|0);
     } else {
      $0 = 0;
      $35 = $0;
      STACKTOP = sp;return ($35|0);
     }
    }
   }
   $0 = 2;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 $0 = 1;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _init_assembler($block_jumps_table,$block_jumps_number,$block_riprel_table,$block_riprel_number) {
 $block_jumps_table = $block_jumps_table|0;
 $block_jumps_number = $block_jumps_number|0;
 $block_riprel_table = $block_riprel_table|0;
 $block_riprel_number = $block_riprel_number|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block_jumps_table;
 $1 = $block_jumps_number;
 $2 = $block_riprel_table;
 $3 = $block_riprel_number;
 STACKTOP = sp;return;
}
function _free_assembler($block_jumps_table,$block_jumps_number,$block_riprel_table,$block_riprel_number) {
 $block_jumps_table = $block_jumps_table|0;
 $block_jumps_number = $block_jumps_number|0;
 $block_riprel_table = $block_riprel_table|0;
 $block_riprel_number = $block_riprel_number|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $block_jumps_table;
 $1 = $block_jumps_number;
 $2 = $block_riprel_table;
 $3 = $block_riprel_number;
 STACKTOP = sp;return;
}
function _passe2($dest,$start,$end,$block) {
 $dest = $dest|0;
 $start = $start|0;
 $end = $end|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $start;
 $2 = $end;
 $3 = $block;
 STACKTOP = sp;return;
}
function _genbc1f() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1f_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1f_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1t() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1t_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1t_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1fl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1fl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1fl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1tl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1tl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbc1tl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmfc0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmtc0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmfc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendmfc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencfc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmtc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendmtc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genctc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genadd_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensub_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmul_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendiv_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensqrt_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genabs_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmov_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genneg_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genround_l_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentrunc_l_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genceil_l_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genfloor_l_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genround_w_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentrunc_w_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genceil_w_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genfloor_w_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_s_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_w_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_l_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_f_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_un_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_eq_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ueq_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_olt_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ult_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ole_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ule_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_sf_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngle_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_seq_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngl_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_lt_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_nge_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_le_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngt_d() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_s_l() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_d_l() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genadd_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensub_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmul_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendiv_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensqrt_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genabs_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmov_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genneg_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genround_l_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentrunc_l_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genceil_l_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genfloor_l_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genround_w_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentrunc_w_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genceil_w_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genfloor_w_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_d_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_w_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_l_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_f_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_un_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_eq_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ueq_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_olt_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ult_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ole_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ule_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_sf_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngle_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_seq_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngl_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_lt_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_nge_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_le_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genc_ngt_s() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_s_w() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencvt_d_w() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gennotcompiled() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlink_subblock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genni() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genreserved() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genfin_block() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gennop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genj() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genj_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genj_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genjal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genjal_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genjal_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbne() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbne_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbne_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblez() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblez_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtz() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtz_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtz_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genaddi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genaddiu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genslti() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensltiu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genandi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genori() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genxori() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlui() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeql() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeql_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeql_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeq() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeq_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbeq_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbnel() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbnel_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbnel_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblezl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblezl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblezl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtzl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtzl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgtzl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendaddi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendaddiu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genldl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genldr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlb() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlh() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlwl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlbu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlhu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlwr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlwu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensb() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensh() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genswl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensdl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensdr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genswr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genlwc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genldc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gencache() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genld() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genswc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensdc1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genll() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genblez_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltz() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltz_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltz_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgez() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgez_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgez_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezl_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezl_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzal_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzal_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezal_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezal_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzall() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzall_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbltzall_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezall() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezall_out() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genbgezall_idle() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensll() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensrl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensra() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensllv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensrlv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensrav() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genjr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genjalr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensyscall() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensync() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmfhi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmthi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmflo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmtlo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsllv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsrlv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsrav() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmult() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genmultu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendiv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendivu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendmult() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendmultu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genddiv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genddivu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genadd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genaddu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensub() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensubu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genand() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genxor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gennor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genslt() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gensltu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendadd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendaddu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsub() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsubu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _genteq() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsll() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsrl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsra() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsll32() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsrl32() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gendsra32() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentlbwi() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentlbp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentlbr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _generet() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gentlbwr() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _init_cache($start) {
 $start = $start|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 STACKTOP = sp;return;
}
function _free_all_registers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dyna_jump() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dyna_stop() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _call_zopen64($pfilefunc,$filename,$mode) {
 $pfilefunc = $pfilefunc|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pfilefunc;
 $2 = $filename;
 $3 = $mode;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = $3;
  $14 = (mftCall_iiii($8|0,($11|0),($12|0),($13|0))|0);
  $0 = $14;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $15 = ((($7)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = $3;
  $22 = (mftCall_iiii($16|0,($19|0),($20|0),($21|0))|0);
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _call_zseek64($pfilefunc,$filestream,$0,$1,$origin) {
 $pfilefunc = $pfilefunc|0;
 $filestream = $filestream|0;
 $0 = $0|0;
 $1 = $1|0;
 $origin = $origin|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offsetTruncated = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $pfilefunc;
 $4 = $filestream;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $6 = $origin;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $4;
  $22 = $5;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = (mftCall_iiiiii($17|0,($20|0),($21|0),($24|0),($27|0),($28|0))|0);
  $2 = $29;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $30 = $5;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $offsetTruncated = $32;
 $36 = $offsetTruncated;
 $37 = $5;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($36|0)!=($39|0);
 $44 = (0)!=($42|0);
 $45 = $43 | $44;
 if ($45) {
  $2 = -1;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $46 = $3;
  $47 = ((($46)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = ((($49)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $4;
  $53 = $offsetTruncated;
  $54 = $6;
  $55 = (mftCall_iiiii($48|0,($51|0),($52|0),($53|0),($54|0))|0);
  $2 = $55;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _call_ztell64($pfilefunc,$filestream) {
 $pfilefunc = $pfilefunc|0;
 $filestream = $filestream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tell_uLong = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $pfilefunc;
 $2 = $filestream;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 do {
  if ($6) {
   $8 = ((($7)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $1;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $2;
   $14 = (mftCall_iii($9|0,($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $0;
   $17 = $16;
   HEAP32[$17>>2] = $14;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = $15;
  } else {
   $20 = ((($7)) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $2;
   $26 = (mftCall_iii($21|0,($24|0),($25|0))|0);
   $tell_uLong = $26;
   $27 = $tell_uLong;
   $28 = ($27|0)==(-1);
   if ($28) {
    $29 = $0;
    $30 = $29;
    HEAP32[$30>>2] = -1;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = -1;
    break;
   } else {
    $33 = $tell_uLong;
    $34 = $0;
    $35 = $34;
    HEAP32[$35>>2] = $33;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = 0;
    break;
   }
  }
 } while(0);
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 setTempRet0(($43) | 0);
 STACKTOP = sp;return ($40|0);
}
function _fill_zlib_filefunc64_32_def_from_filefunc32($p_filefunc64_32,$p_filefunc32) {
 $p_filefunc64_32 = $p_filefunc64_32|0;
 $p_filefunc32 = $p_filefunc32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p_filefunc64_32;
 $1 = $p_filefunc32;
 $2 = $0;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = 0;
 $24 = $0;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = 0;
 $26 = $1;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = ((($29)) + 20|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = ((($39)) + 28|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $0;
 $45 = ((($44)) + 40|0);
 HEAP32[$45>>2] = $43;
 $46 = $1;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $0;
 $50 = ((($49)) + 36|0);
 HEAP32[$50>>2] = $48;
 STACKTOP = sp;return;
}
function _fill_fopen_filefunc($pzlib_filefunc_def) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pzlib_filefunc_def;
 $1 = $0;
 HEAP32[$1>>2] = (fb + (960) | 0);
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = (fb + (961) | 0);
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = (fb + (962) | 0);
 $6 = $0;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = (fb + (963) | 0);
 $8 = $0;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = (fb + (964) | 0);
 $10 = $0;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = (fb + (965) | 0);
 $12 = $0;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = (fb + (966) | 0);
 $14 = $0;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _fill_fopen64_filefunc($pzlib_filefunc_def) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pzlib_filefunc_def;
 $1 = $0;
 HEAP32[$1>>2] = (fb + (967) | 0);
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = (fb + (961) | 0);
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = (fb + (962) | 0);
 $6 = $0;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = (fb + (968) | 0);
 $8 = $0;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = (fb + (969) | 0);
 $10 = $0;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = (fb + (965) | 0);
 $12 = $0;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = (fb + (966) | 0);
 $14 = $0;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _fopen_file_func($opaque,$filename,$mode) {
 $opaque = $opaque|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $file = 0, $mode_fopen = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $filename;
 $2 = $mode;
 $file = 0;
 $mode_fopen = 0;
 $3 = $2;
 $4 = $3 & 3;
 $5 = ($4|0)==(1);
 do {
  if ($5) {
   $mode_fopen = (gb + (20660) | 0);
  } else {
   $6 = $2;
   $7 = $6 & 4;
   $8 = ($7|0)!=(0);
   if ($8) {
    $mode_fopen = (gb + (20663) | 0);
    break;
   }
   $9 = $2;
   $10 = $9 & 8;
   $11 = ($10|0)!=(0);
   if ($11) {
    $mode_fopen = (gb + (20964) | 0);
   }
  }
 } while(0);
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 $14 = $mode_fopen;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 if (!($or$cond)) {
  $19 = $file;
  STACKTOP = sp;return ($19|0);
 }
 $16 = $1;
 $17 = $mode_fopen;
 $18 = (_fopen(($16|0),($17|0))|0);
 $file = $18;
 $19 = $file;
 STACKTOP = sp;return ($19|0);
}
function _fread_file_func($opaque,$stream,$buf,$size) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $stream;
 $2 = $buf;
 $3 = $size;
 $4 = $2;
 $5 = $3;
 $6 = $1;
 $7 = (_fread(($4|0),1,($5|0),($6|0))|0);
 $ret = $7;
 $8 = $ret;
 STACKTOP = sp;return ($8|0);
}
function _fwrite_file_func($opaque,$stream,$buf,$size) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $stream;
 $2 = $buf;
 $3 = $size;
 $4 = $2;
 $5 = $3;
 $6 = $1;
 $7 = (_fwrite(($4|0),1,($5|0),($6|0))|0);
 $ret = $7;
 $8 = $ret;
 STACKTOP = sp;return ($8|0);
}
function _ftell_file_func($opaque,$stream) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $stream;
 $2 = $1;
 $3 = (_ftell(($2|0))|0);
 $ret = $3;
 $4 = $ret;
 STACKTOP = sp;return ($4|0);
}
function _fseek_file_func($opaque,$stream,$offset,$origin) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 $offset = $offset|0;
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fseek_origin = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $stream;
 $3 = $offset;
 $4 = $origin;
 $fseek_origin = 0;
 $5 = $4;
 switch ($5|0) {
 case 1:  {
  $fseek_origin = 1;
  break;
 }
 case 2:  {
  $fseek_origin = 2;
  break;
 }
 case 0:  {
  $fseek_origin = 0;
  break;
 }
 default: {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 }
 $ret = 0;
 $6 = $2;
 $7 = $3;
 $8 = $fseek_origin;
 $9 = (_fseek(($6|0),($7|0),($8|0))|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $ret = -1;
 }
 $11 = $ret;
 $0 = $11;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _fclose_file_func($opaque,$stream) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $stream;
 $2 = $1;
 $3 = (_fclose(($2|0))|0);
 $ret = $3;
 $4 = $ret;
 STACKTOP = sp;return ($4|0);
}
function _ferror_file_func($opaque,$stream) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $stream;
 $2 = $1;
 $3 = (_ferror(($2|0))|0);
 $ret = $3;
 $4 = $ret;
 STACKTOP = sp;return ($4|0);
}
function _fopen64_file_func($opaque,$filename,$mode) {
 $opaque = $opaque|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $file = 0, $mode_fopen = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $filename;
 $2 = $mode;
 $file = 0;
 $mode_fopen = 0;
 $3 = $2;
 $4 = $3 & 3;
 $5 = ($4|0)==(1);
 do {
  if ($5) {
   $mode_fopen = (gb + (20660) | 0);
  } else {
   $6 = $2;
   $7 = $6 & 4;
   $8 = ($7|0)!=(0);
   if ($8) {
    $mode_fopen = (gb + (20663) | 0);
    break;
   }
   $9 = $2;
   $10 = $9 & 8;
   $11 = ($10|0)!=(0);
   if ($11) {
    $mode_fopen = (gb + (20964) | 0);
   }
  }
 } while(0);
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 $14 = $mode_fopen;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 if (!($or$cond)) {
  $19 = $file;
  STACKTOP = sp;return ($19|0);
 }
 $16 = $1;
 $17 = $mode_fopen;
 $18 = (_fopen(($16|0),($17|0))|0);
 $file = $18;
 $19 = $file;
 STACKTOP = sp;return ($19|0);
}
function _ftell64_file_func($opaque,$stream) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = sp;
 $0 = $opaque;
 $1 = $stream;
 $2 = $1;
 $3 = (_ftello(($2|0))|0);
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 $6 = $ret;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $ret;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 setTempRet0(($15) | 0);
 STACKTOP = sp;return ($12|0);
}
function _fseek64_file_func($opaque,$stream,$0,$1,$origin) {
 $opaque = $opaque|0;
 $stream = $stream|0;
 $0 = $0|0;
 $1 = $1|0;
 $origin = $origin|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fseek_origin = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $opaque;
 $4 = $stream;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $6 = $origin;
 $fseek_origin = 0;
 $11 = $6;
 switch ($11|0) {
 case 1:  {
  $fseek_origin = 1;
  break;
 }
 case 2:  {
  $fseek_origin = 2;
  break;
 }
 case 0:  {
  $fseek_origin = 0;
  break;
 }
 default: {
  $2 = -1;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 }
 $ret = 0;
 $12 = $4;
 $13 = $5;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $fseek_origin;
 $20 = (_fseeko(($12|0),($15|0),($19|0))|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $ret = -1;
 }
 $22 = $ret;
 $2 = $22;
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _LoadCentralDirectoryRecord($pziinit) {
 $pziinit = $pziinit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $VersionMadeBy = 0, $VersionNeeded = 0, $buf_read = 0, $buf_size = 0, $byte_before_the_zipfile = 0, $central_pos = 0, $err = 0, $hasZIP64Record = 0, $number_disk = 0, $number_disk_with_CD = 0, $number_entry = 0, $number_entry_CD = 0, $offset_central_dir = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $read_this = 0, $sizeEndOfCentralDirectory = 0, $size_central_dir = 0, $size_central_dir_to_read = 0, $size_comment = 0, $uL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byte_before_the_zipfile = sp + 64|0;
 $size_central_dir = sp + 56|0;
 $offset_central_dir = sp + 48|0;
 $central_pos = sp + 40|0;
 $uL = sp + 104|0;
 $number_disk = sp + 100|0;
 $number_disk_with_CD = sp + 96|0;
 $number_entry = sp + 32|0;
 $number_entry_CD = sp + 24|0;
 $VersionMadeBy = sp + 92|0;
 $VersionNeeded = sp + 88|0;
 $size_comment = sp + 84|0;
 $sizeEndOfCentralDirectory = sp + 16|0;
 $size_central_dir_to_read = sp + 8|0;
 $read_this = sp;
 $1 = $pziinit;
 $err = 0;
 $hasZIP64Record = 0;
 $2 = $1;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_zip64local_SearchCentralDir64($2,$5)|0);
 $7 = (getTempRet0() | 0);
 $8 = $central_pos;
 $9 = $8;
 HEAP32[$9>>2] = $6;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $central_pos;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(0);
 $19 = ($14>>>0)>(0);
 $20 = ($17|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  $hasZIP64Record = 1;
 } else {
  $23 = $central_pos;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)==(0);
  $30 = ($28|0)==(0);
  $31 = $29 & $30;
  if ($31) {
   $32 = $1;
   $33 = $1;
   $34 = ((($33)) + 44|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_zip64local_SearchCentralDir($32,$35)|0);
   $37 = (getTempRet0() | 0);
   $38 = $central_pos;
   $39 = $38;
   HEAP32[$39>>2] = $36;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = $37;
  }
 }
 $42 = $hasZIP64Record;
 $43 = ($42|0)!=(0);
 $44 = $1;
 $45 = $1;
 $46 = ((($45)) + 44|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $central_pos;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_call_zseek64($44,$47,$50,$53,0)|0);
 $55 = ($54|0)!=(0);
 if ($43) {
  if ($55) {
   $err = -1;
  }
  $56 = $1;
  $57 = $1;
  $58 = ((($57)) + 44|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_zip64local_getLong($56,$59,$uL)|0);
  $61 = ($60|0)!=(0);
  if ($61) {
   $err = -1;
  }
  $62 = $1;
  $63 = $1;
  $64 = ((($63)) + 44|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_zip64local_getLong64($62,$65,$sizeEndOfCentralDirectory)|0);
  $67 = ($66|0)!=(0);
  if ($67) {
   $err = -1;
  }
  $68 = $1;
  $69 = $1;
  $70 = ((($69)) + 44|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_zip64local_getShort($68,$71,$VersionMadeBy)|0);
  $73 = ($72|0)!=(0);
  if ($73) {
   $err = -1;
  }
  $74 = $1;
  $75 = $1;
  $76 = ((($75)) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_zip64local_getShort($74,$77,$VersionNeeded)|0);
  $79 = ($78|0)!=(0);
  if ($79) {
   $err = -1;
  }
  $80 = $1;
  $81 = $1;
  $82 = ((($81)) + 44|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_zip64local_getLong($80,$83,$number_disk)|0);
  $85 = ($84|0)!=(0);
  if ($85) {
   $err = -1;
  }
  $86 = $1;
  $87 = $1;
  $88 = ((($87)) + 44|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_zip64local_getLong($86,$89,$number_disk_with_CD)|0);
  $91 = ($90|0)!=(0);
  if ($91) {
   $err = -1;
  }
  $92 = $1;
  $93 = $1;
  $94 = ((($93)) + 44|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_zip64local_getLong64($92,$95,$number_entry)|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $err = -1;
  }
  $98 = $1;
  $99 = $1;
  $100 = ((($99)) + 44|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_zip64local_getLong64($98,$101,$number_entry_CD)|0);
  $103 = ($102|0)!=(0);
  if ($103) {
   $err = -1;
  }
  $104 = $number_entry_CD;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + 4)|0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = $number_entry;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($106|0)!=($112|0);
  $117 = ($109|0)!=($115|0);
  $118 = $116 | $117;
  $119 = HEAP32[$number_disk_with_CD>>2]|0;
  $120 = ($119|0)!=(0);
  $or$cond = $118 | $120;
  $121 = HEAP32[$number_disk>>2]|0;
  $122 = ($121|0)!=(0);
  $or$cond3 = $or$cond | $122;
  if ($or$cond3) {
   $err = -103;
  }
  $123 = $1;
  $124 = $1;
  $125 = ((($124)) + 44|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (_zip64local_getLong64($123,$126,$size_central_dir)|0);
  $128 = ($127|0)!=(0);
  if ($128) {
   $err = -1;
  }
  $129 = $1;
  $130 = $1;
  $131 = ((($130)) + 44|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (_zip64local_getLong64($129,$132,$offset_central_dir)|0);
  $134 = ($133|0)!=(0);
  if ($134) {
   $err = -1;
  }
  HEAP32[$size_comment>>2] = 0;
 } else {
  if ($55) {
   $err = -1;
  }
  $135 = $1;
  $136 = $1;
  $137 = ((($136)) + 44|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (_zip64local_getLong($135,$138,$uL)|0);
  $140 = ($139|0)!=(0);
  if ($140) {
   $err = -1;
  }
  $141 = $1;
  $142 = $1;
  $143 = ((($142)) + 44|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (_zip64local_getShort($141,$144,$number_disk)|0);
  $146 = ($145|0)!=(0);
  if ($146) {
   $err = -1;
  }
  $147 = $1;
  $148 = $1;
  $149 = ((($148)) + 44|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (_zip64local_getShort($147,$150,$number_disk_with_CD)|0);
  $152 = ($151|0)!=(0);
  if ($152) {
   $err = -1;
  }
  $153 = $number_entry;
  $154 = $153;
  HEAP32[$154>>2] = 0;
  $155 = (($153) + 4)|0;
  $156 = $155;
  HEAP32[$156>>2] = 0;
  $157 = $1;
  $158 = $1;
  $159 = ((($158)) + 44|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (_zip64local_getShort($157,$160,$uL)|0);
  $162 = ($161|0)!=(0);
  if ($162) {
   $err = -1;
  } else {
   $163 = HEAP32[$uL>>2]|0;
   $164 = $number_entry;
   $165 = $164;
   HEAP32[$165>>2] = $163;
   $166 = (($164) + 4)|0;
   $167 = $166;
   HEAP32[$167>>2] = 0;
  }
  $168 = $number_entry_CD;
  $169 = $168;
  HEAP32[$169>>2] = 0;
  $170 = (($168) + 4)|0;
  $171 = $170;
  HEAP32[$171>>2] = 0;
  $172 = $1;
  $173 = $1;
  $174 = ((($173)) + 44|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (_zip64local_getShort($172,$175,$uL)|0);
  $177 = ($176|0)!=(0);
  if ($177) {
   $err = -1;
  } else {
   $178 = HEAP32[$uL>>2]|0;
   $179 = $number_entry_CD;
   $180 = $179;
   HEAP32[$180>>2] = $178;
   $181 = (($179) + 4)|0;
   $182 = $181;
   HEAP32[$182>>2] = 0;
  }
  $183 = $number_entry_CD;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($183) + 4)|0;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = $number_entry;
  $190 = $189;
  $191 = HEAP32[$190>>2]|0;
  $192 = (($189) + 4)|0;
  $193 = $192;
  $194 = HEAP32[$193>>2]|0;
  $195 = ($185|0)!=($191|0);
  $196 = ($188|0)!=($194|0);
  $197 = $195 | $196;
  $198 = HEAP32[$number_disk_with_CD>>2]|0;
  $199 = ($198|0)!=(0);
  $or$cond5 = $197 | $199;
  $200 = HEAP32[$number_disk>>2]|0;
  $201 = ($200|0)!=(0);
  $or$cond7 = $or$cond5 | $201;
  if ($or$cond7) {
   $err = -103;
  }
  $202 = $size_central_dir;
  $203 = $202;
  HEAP32[$203>>2] = 0;
  $204 = (($202) + 4)|0;
  $205 = $204;
  HEAP32[$205>>2] = 0;
  $206 = $1;
  $207 = $1;
  $208 = ((($207)) + 44|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = (_zip64local_getLong($206,$209,$uL)|0);
  $211 = ($210|0)!=(0);
  if ($211) {
   $err = -1;
  } else {
   $212 = HEAP32[$uL>>2]|0;
   $213 = $size_central_dir;
   $214 = $213;
   HEAP32[$214>>2] = $212;
   $215 = (($213) + 4)|0;
   $216 = $215;
   HEAP32[$216>>2] = 0;
  }
  $217 = $offset_central_dir;
  $218 = $217;
  HEAP32[$218>>2] = 0;
  $219 = (($217) + 4)|0;
  $220 = $219;
  HEAP32[$220>>2] = 0;
  $221 = $1;
  $222 = $1;
  $223 = ((($222)) + 44|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (_zip64local_getLong($221,$224,$uL)|0);
  $226 = ($225|0)!=(0);
  if ($226) {
   $err = -1;
  } else {
   $227 = HEAP32[$uL>>2]|0;
   $228 = $offset_central_dir;
   $229 = $228;
   HEAP32[$229>>2] = $227;
   $230 = (($228) + 4)|0;
   $231 = $230;
   HEAP32[$231>>2] = 0;
  }
  $232 = $1;
  $233 = $1;
  $234 = ((($233)) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (_zip64local_getShort($232,$235,$size_comment)|0);
  $237 = ($236|0)!=(0);
  if ($237) {
   $err = -1;
  }
 }
 $238 = $central_pos;
 $239 = $238;
 $240 = HEAP32[$239>>2]|0;
 $241 = (($238) + 4)|0;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 $244 = $offset_central_dir;
 $245 = $244;
 $246 = HEAP32[$245>>2]|0;
 $247 = (($244) + 4)|0;
 $248 = $247;
 $249 = HEAP32[$248>>2]|0;
 $250 = $size_central_dir;
 $251 = $250;
 $252 = HEAP32[$251>>2]|0;
 $253 = (($250) + 4)|0;
 $254 = $253;
 $255 = HEAP32[$254>>2]|0;
 $256 = (_i64Add(($246|0),($249|0),($252|0),($255|0))|0);
 $257 = (getTempRet0() | 0);
 $258 = ($243>>>0)<($257>>>0);
 $259 = ($240>>>0)<($256>>>0);
 $260 = ($243|0)==($257|0);
 $261 = $260 & $259;
 $262 = $258 | $261;
 $263 = $err;
 $264 = ($263|0)==(0);
 $or$cond9 = $262 & $264;
 if ($or$cond9) {
  $err = -103;
 }
 $265 = $err;
 $266 = ($265|0)!=(0);
 if ($266) {
  $267 = $1;
  $268 = ((($267)) + 20|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $1;
  $271 = ((($270)) + 28|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $1;
  $274 = ((($273)) + 44|0);
  $275 = HEAP32[$274>>2]|0;
  (mftCall_iii($269|0,($272|0),($275|0))|0);
  $0 = -1;
  $525 = $0;
  STACKTOP = sp;return ($525|0);
 }
 $276 = HEAP32[$size_comment>>2]|0;
 $277 = ($276>>>0)>(0);
 if ($277) {
  $278 = HEAP32[$size_comment>>2]|0;
  $279 = (($278) + 1)|0;
  $280 = (_malloc(($279|0))|0);
  $281 = $1;
  $282 = ((($281)) + 65768|0);
  HEAP32[$282>>2] = $280;
  $283 = $1;
  $284 = ((($283)) + 65768|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = ($285|0)!=(0|0);
  if ($286) {
   $287 = $1;
   $288 = ((($287)) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $1;
   $291 = ((($290)) + 28|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $1;
   $294 = ((($293)) + 44|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $1;
   $297 = ((($296)) + 65768|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = HEAP32[$size_comment>>2]|0;
   $300 = (mftCall_iiiii($289|0,($292|0),($295|0),($298|0),($299|0))|0);
   HEAP32[$size_comment>>2] = $300;
   $301 = HEAP32[$size_comment>>2]|0;
   $302 = $1;
   $303 = ((($302)) + 65768|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304) + ($301)|0);
   HEAP8[$305>>0] = 0;
  }
 }
 $306 = $central_pos;
 $307 = $306;
 $308 = HEAP32[$307>>2]|0;
 $309 = (($306) + 4)|0;
 $310 = $309;
 $311 = HEAP32[$310>>2]|0;
 $312 = $offset_central_dir;
 $313 = $312;
 $314 = HEAP32[$313>>2]|0;
 $315 = (($312) + 4)|0;
 $316 = $315;
 $317 = HEAP32[$316>>2]|0;
 $318 = $size_central_dir;
 $319 = $318;
 $320 = HEAP32[$319>>2]|0;
 $321 = (($318) + 4)|0;
 $322 = $321;
 $323 = HEAP32[$322>>2]|0;
 $324 = (_i64Add(($314|0),($317|0),($320|0),($323|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = (_i64Subtract(($308|0),($311|0),($324|0),($325|0))|0);
 $327 = (getTempRet0() | 0);
 $328 = $byte_before_the_zipfile;
 $329 = $328;
 HEAP32[$329>>2] = $326;
 $330 = (($328) + 4)|0;
 $331 = $330;
 HEAP32[$331>>2] = $327;
 $332 = $byte_before_the_zipfile;
 $333 = $332;
 $334 = HEAP32[$333>>2]|0;
 $335 = (($332) + 4)|0;
 $336 = $335;
 $337 = HEAP32[$336>>2]|0;
 $338 = $1;
 $339 = ((($338)) + 65752|0);
 $340 = $339;
 $341 = $340;
 HEAP32[$341>>2] = $334;
 $342 = (($340) + 4)|0;
 $343 = $342;
 HEAP32[$343>>2] = $337;
 $344 = $size_central_dir;
 $345 = $344;
 $346 = HEAP32[$345>>2]|0;
 $347 = (($344) + 4)|0;
 $348 = $347;
 $349 = HEAP32[$348>>2]|0;
 $350 = $size_central_dir_to_read;
 $351 = $350;
 HEAP32[$351>>2] = $346;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = $349;
 $buf_size = 4080;
 $354 = $buf_size;
 $355 = (_malloc(($354|0))|0);
 $buf_read = $355;
 $356 = $1;
 $357 = $1;
 $358 = ((($357)) + 44|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = $offset_central_dir;
 $361 = $360;
 $362 = HEAP32[$361>>2]|0;
 $363 = (($360) + 4)|0;
 $364 = $363;
 $365 = HEAP32[$364>>2]|0;
 $366 = $byte_before_the_zipfile;
 $367 = $366;
 $368 = HEAP32[$367>>2]|0;
 $369 = (($366) + 4)|0;
 $370 = $369;
 $371 = HEAP32[$370>>2]|0;
 $372 = (_i64Add(($362|0),($365|0),($368|0),($371|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = (_call_zseek64($356,$359,$372,$373,0)|0);
 $375 = ($374|0)!=(0);
 if ($375) {
  $err = -1;
 }
 while(1) {
  $376 = $size_central_dir_to_read;
  $377 = $376;
  $378 = HEAP32[$377>>2]|0;
  $379 = (($376) + 4)|0;
  $380 = $379;
  $381 = HEAP32[$380>>2]|0;
  $382 = ($381>>>0)>(0);
  $383 = ($378>>>0)>(0);
  $384 = ($381|0)==(0);
  $385 = $384 & $383;
  $386 = $382 | $385;
  $387 = $err;
  $388 = ($387|0)==(0);
  $389 = $386 ? $388 : 0;
  if (!($389)) {
   break;
  }
  $390 = $read_this;
  $391 = $390;
  HEAP32[$391>>2] = 4080;
  $392 = (($390) + 4)|0;
  $393 = $392;
  HEAP32[$393>>2] = 0;
  $394 = $read_this;
  $395 = $394;
  $396 = HEAP32[$395>>2]|0;
  $397 = (($394) + 4)|0;
  $398 = $397;
  $399 = HEAP32[$398>>2]|0;
  $400 = $size_central_dir_to_read;
  $401 = $400;
  $402 = HEAP32[$401>>2]|0;
  $403 = (($400) + 4)|0;
  $404 = $403;
  $405 = HEAP32[$404>>2]|0;
  $406 = ($399>>>0)>($405>>>0);
  $407 = ($396>>>0)>($402>>>0);
  $408 = ($399|0)==($405|0);
  $409 = $408 & $407;
  $410 = $406 | $409;
  if ($410) {
   $411 = $size_central_dir_to_read;
   $412 = $411;
   $413 = HEAP32[$412>>2]|0;
   $414 = (($411) + 4)|0;
   $415 = $414;
   $416 = HEAP32[$415>>2]|0;
   $417 = $read_this;
   $418 = $417;
   HEAP32[$418>>2] = $413;
   $419 = (($417) + 4)|0;
   $420 = $419;
   HEAP32[$420>>2] = $416;
  }
  $421 = $1;
  $422 = ((($421)) + 4|0);
  $423 = HEAP32[$422>>2]|0;
  $424 = $1;
  $425 = ((($424)) + 28|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = $1;
  $428 = ((($427)) + 44|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = $buf_read;
  $431 = $read_this;
  $432 = $431;
  $433 = HEAP32[$432>>2]|0;
  $434 = (($431) + 4)|0;
  $435 = $434;
  $436 = HEAP32[$435>>2]|0;
  $437 = (mftCall_iiiii($423|0,($426|0),($429|0),($430|0),($433|0))|0);
  $438 = $read_this;
  $439 = $438;
  $440 = HEAP32[$439>>2]|0;
  $441 = (($438) + 4)|0;
  $442 = $441;
  $443 = HEAP32[$442>>2]|0;
  $444 = ($437|0)!=($440|0);
  $445 = (0)!=($443|0);
  $446 = $444 | $445;
  if ($446) {
   $err = -1;
  }
  $447 = $err;
  $448 = ($447|0)==(0);
  if ($448) {
   $449 = $1;
   $450 = ((($449)) + 48|0);
   $451 = $buf_read;
   $452 = $read_this;
   $453 = $452;
   $454 = HEAP32[$453>>2]|0;
   $455 = (($452) + 4)|0;
   $456 = $455;
   $457 = HEAP32[$456>>2]|0;
   $458 = (_add_data_in_datablock($450,$451,$454)|0);
   $err = $458;
  }
  $459 = $read_this;
  $460 = $459;
  $461 = HEAP32[$460>>2]|0;
  $462 = (($459) + 4)|0;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = $size_central_dir_to_read;
  $466 = $465;
  $467 = HEAP32[$466>>2]|0;
  $468 = (($465) + 4)|0;
  $469 = $468;
  $470 = HEAP32[$469>>2]|0;
  $471 = (_i64Subtract(($467|0),($470|0),($461|0),($464|0))|0);
  $472 = (getTempRet0() | 0);
  $473 = $size_central_dir_to_read;
  $474 = $473;
  HEAP32[$474>>2] = $471;
  $475 = (($473) + 4)|0;
  $476 = $475;
  HEAP32[$476>>2] = $472;
 }
 $477 = $buf_read;
 $478 = ($477|0)!=(0|0);
 if ($478) {
  $479 = $buf_read;
  _free(($479|0));
 }
 $480 = $byte_before_the_zipfile;
 $481 = $480;
 $482 = HEAP32[$481>>2]|0;
 $483 = (($480) + 4)|0;
 $484 = $483;
 $485 = HEAP32[$484>>2]|0;
 $486 = $1;
 $487 = ((($486)) + 65744|0);
 $488 = $487;
 $489 = $488;
 HEAP32[$489>>2] = $482;
 $490 = (($488) + 4)|0;
 $491 = $490;
 HEAP32[$491>>2] = $485;
 $492 = $number_entry_CD;
 $493 = $492;
 $494 = HEAP32[$493>>2]|0;
 $495 = (($492) + 4)|0;
 $496 = $495;
 $497 = HEAP32[$496>>2]|0;
 $498 = $1;
 $499 = ((($498)) + 65760|0);
 $500 = $499;
 $501 = $500;
 HEAP32[$501>>2] = $494;
 $502 = (($500) + 4)|0;
 $503 = $502;
 HEAP32[$503>>2] = $497;
 $504 = $1;
 $505 = $1;
 $506 = ((($505)) + 44|0);
 $507 = HEAP32[$506>>2]|0;
 $508 = $offset_central_dir;
 $509 = $508;
 $510 = HEAP32[$509>>2]|0;
 $511 = (($508) + 4)|0;
 $512 = $511;
 $513 = HEAP32[$512>>2]|0;
 $514 = $byte_before_the_zipfile;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (($514) + 4)|0;
 $518 = $517;
 $519 = HEAP32[$518>>2]|0;
 $520 = (_i64Add(($510|0),($513|0),($516|0),($519|0))|0);
 $521 = (getTempRet0() | 0);
 $522 = (_call_zseek64($504,$507,$520,$521,0)|0);
 $523 = ($522|0)!=(0);
 if ($523) {
  $err = -1;
 }
 $524 = $err;
 $0 = $524;
 $525 = $0;
 STACKTOP = sp;return ($525|0);
}
function _zipOpen3($pathname,$append,$globalcomment,$pzlib_filefunc64_32_def) {
 $pathname = $pathname|0;
 $append = $append|0;
 $globalcomment = $globalcomment|0;
 $pzlib_filefunc64_32_def = $pzlib_filefunc64_32_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $err = 0, $zi = 0, $ziinit = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65808|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ziinit = sp;
 $1 = $pathname;
 $2 = $append;
 $3 = $globalcomment;
 $4 = $pzlib_filefunc64_32_def;
 $err = 0;
 $5 = ((($ziinit)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($ziinit)) + 36|0);
 HEAP32[$6>>2] = 0;
 $7 = $4;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _fill_fopen64_filefunc($ziinit);
 } else {
  $9 = $4;
  dest=$ziinit; src=$9; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $10 = $1;
 $11 = $2;
 $12 = ($11|0)==(0);
 $13 = $12 ? 11 : 7;
 $14 = (_call_zopen64($ziinit,$10,$13)|0);
 $15 = ((($ziinit)) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($ziinit)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $19 = $2;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = ((($ziinit)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  (_call_zseek64($ziinit,$22,0,0,2)|0);
 }
 $23 = ((($ziinit)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_call_ztell64($ziinit,$24)|0);
 $26 = (getTempRet0() | 0);
 $27 = ((($ziinit)) + 65744|0);
 $28 = $27;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = $26;
 $32 = ((($ziinit)) + 56|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($ziinit)) + 64|0);
 $34 = ((($33)) + 56|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($ziinit)) + 65760|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = ((($ziinit)) + 65752|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = ((($ziinit)) + 48|0);
 _init_linkedlist($45);
 $46 = (_malloc(65776)|0);
 $zi = $46;
 $47 = $zi;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $49 = ((($ziinit)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($ziinit)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($ziinit)) + 44|0);
  $54 = HEAP32[$53>>2]|0;
  (mftCall_iii($50|0,($52|0),($54|0))|0);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $55 = ((($ziinit)) + 65768|0);
 HEAP32[$55>>2] = 0;
 $56 = $2;
 $57 = ($56|0)==(2);
 if ($57) {
  $58 = (_LoadCentralDirectoryRecord($ziinit)|0);
  $err = $58;
 }
 $59 = $3;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = ((($ziinit)) + 65768|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $3;
  HEAP32[$63>>2] = $62;
 }
 $64 = $err;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $74 = $zi;
  _memcpy(($74|0),($ziinit|0),65776)|0;
  $75 = $zi;
  $0 = $75;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $66 = ((($ziinit)) + 65768|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = ((($ziinit)) + 65768|0);
  $70 = HEAP32[$69>>2]|0;
  _free(($70|0));
 }
 $71 = $zi;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = $zi;
  _free(($73|0));
 }
 $0 = 0;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _zipOpen2($pathname,$append,$globalcomment,$pzlib_filefunc32_def) {
 $pathname = $pathname|0;
 $append = $append|0;
 $globalcomment = $globalcomment|0;
 $pzlib_filefunc32_def = $pzlib_filefunc32_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zlib_filefunc64_32_def_fill = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zlib_filefunc64_32_def_fill = sp;
 $1 = $pathname;
 $2 = $append;
 $3 = $globalcomment;
 $4 = $pzlib_filefunc32_def;
 $5 = $4;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $4;
  _fill_zlib_filefunc64_32_def_from_filefunc32($zlib_filefunc64_32_def_fill,$7);
  $8 = $1;
  $9 = $2;
  $10 = $3;
  $11 = (_zipOpen3($8,$9,$10,$zlib_filefunc64_32_def_fill)|0);
  $0 = $11;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = (_zipOpen3($12,$13,$14,0)|0);
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _zipOpen2_64($pathname,$append,$globalcomment,$pzlib_filefunc_def) {
 $pathname = $pathname|0;
 $append = $append|0;
 $globalcomment = $globalcomment|0;
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zlib_filefunc64_32_def_fill = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zlib_filefunc64_32_def_fill = sp;
 $1 = $pathname;
 $2 = $append;
 $3 = $globalcomment;
 $4 = $pzlib_filefunc_def;
 $5 = $4;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $4;
  ;HEAP32[$zlib_filefunc64_32_def_fill>>2]=HEAP32[$7>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+28>>2]=HEAP32[$7+28>>2]|0;
  $8 = ((($zlib_filefunc64_32_def_fill)) + 36|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($zlib_filefunc64_32_def_fill)) + 40|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = $2;
  $12 = $3;
  $13 = (_zipOpen3($10,$11,$12,$zlib_filefunc64_32_def_fill)|0);
  $0 = $13;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = (_zipOpen3($14,$15,$16,0)|0);
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _zipOpen($pathname,$append) {
 $pathname = $pathname|0;
 $append = $append|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pathname;
 $1 = $append;
 $2 = $0;
 $3 = $1;
 $4 = (_zipOpen3($2,$3,0,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _zipOpen64($pathname,$append) {
 $pathname = $pathname|0;
 $append = $append|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pathname;
 $1 = $append;
 $2 = $0;
 $3 = $1;
 $4 = (_zipOpen3($2,$3,0,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _Write_LocalFileHeader($zi,$filename,$size_extrafield_local,$extrafield_local) {
 $zi = $zi|0;
 $filename = $filename|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_local = $extrafield_local|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CompressedSize = 0;
 var $DataSize = 0, $HeaderID = 0, $UncompressedSize = 0, $err = 0, $or$cond = 0, $or$cond3 = 0, $size_extrafield = 0, $size_filename = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $CompressedSize = sp + 8|0;
 $UncompressedSize = sp;
 $0 = $zi;
 $1 = $filename;
 $2 = $size_extrafield_local;
 $3 = $extrafield_local;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $size_filename = $5;
 $6 = $2;
 $size_extrafield = $6;
 $7 = $0;
 $8 = $0;
 $9 = ((($8)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_zip64local_putValue($7,$10,67324752,0,4)|0);
 $err = $11;
 $12 = $err;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = $0;
   $15 = ((($14)) + 64|0);
   $16 = ((($15)) + 65648|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   $19 = $0;
   $20 = $0;
   $21 = ((($20)) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   if ($18) {
    $23 = (_zip64local_putValue($19,$22,45,0,2)|0);
    $err = $23;
    break;
   } else {
    $24 = (_zip64local_putValue($19,$22,20,0,2)|0);
    $err = $24;
    break;
   }
  }
 } while(0);
 $25 = $err;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $0;
  $28 = $0;
  $29 = ((($28)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = ((($31)) + 64|0);
  $33 = ((($32)) + 88|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_zip64local_putValue($27,$30,$34,0,2)|0);
  $err = $35;
 }
 $36 = $err;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $0;
  $39 = $0;
  $40 = ((($39)) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $0;
  $43 = ((($42)) + 64|0);
  $44 = ((($43)) + 92|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_zip64local_putValue($38,$41,$45,0,2)|0);
  $err = $46;
 }
 $47 = $err;
 $48 = ($47|0)==(0);
 if ($48) {
  $49 = $0;
  $50 = $0;
  $51 = ((($50)) + 44|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  $54 = ((($53)) + 64|0);
  $55 = ((($54)) + 65636|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_zip64local_putValue($49,$52,$56,0,4)|0);
  $err = $57;
 }
 $58 = $err;
 $59 = ($58|0)==(0);
 if ($59) {
  $60 = $0;
  $61 = $0;
  $62 = ((($61)) + 44|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (_zip64local_putValue($60,$63,0,0,4)|0);
  $err = $64;
 }
 $65 = $err;
 $66 = ($65|0)==(0);
 do {
  if ($66) {
   $67 = $0;
   $68 = ((($67)) + 64|0);
   $69 = ((($68)) + 65648|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0);
   $72 = $0;
   $73 = $0;
   $74 = ((($73)) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   if ($71) {
    $76 = (_zip64local_putValue($72,$75,-1,0,4)|0);
    $err = $76;
    break;
   } else {
    $77 = (_zip64local_putValue($72,$75,0,0,4)|0);
    $err = $77;
    break;
   }
  }
 } while(0);
 $78 = $err;
 $79 = ($78|0)==(0);
 do {
  if ($79) {
   $80 = $0;
   $81 = ((($80)) + 64|0);
   $82 = ((($81)) + 65648|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)!=(0);
   $85 = $0;
   $86 = $0;
   $87 = ((($86)) + 44|0);
   $88 = HEAP32[$87>>2]|0;
   if ($84) {
    $89 = (_zip64local_putValue($85,$88,-1,0,4)|0);
    $err = $89;
    break;
   } else {
    $90 = (_zip64local_putValue($85,$88,0,0,4)|0);
    $err = $90;
    break;
   }
  }
 } while(0);
 $91 = $err;
 $92 = ($91|0)==(0);
 if ($92) {
  $93 = $0;
  $94 = $0;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $size_filename;
  $98 = (_zip64local_putValue($93,$96,$97,0,2)|0);
  $err = $98;
 }
 $99 = $0;
 $100 = ((($99)) + 64|0);
 $101 = ((($100)) + 65648|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = $size_extrafield;
  $105 = (($104) + 20)|0;
  $size_extrafield = $105;
 }
 $106 = $err;
 $107 = ($106|0)==(0);
 if ($107) {
  $108 = $0;
  $109 = $0;
  $110 = ((($109)) + 44|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $size_extrafield;
  $113 = (_zip64local_putValue($108,$111,$112,0,2)|0);
  $err = $113;
 }
 $114 = $err;
 $115 = ($114|0)==(0);
 $116 = $size_filename;
 $117 = ($116>>>0)>(0);
 $or$cond = $115 & $117;
 if ($or$cond) {
  $118 = $0;
  $119 = ((($118)) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $0;
  $122 = ((($121)) + 28|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $0;
  $125 = ((($124)) + 44|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $1;
  $128 = $size_filename;
  $129 = (mftCall_iiiii($120|0,($123|0),($126|0),($127|0),($128|0))|0);
  $130 = $size_filename;
  $131 = ($129|0)!=($130|0);
  if ($131) {
   $err = -1;
  }
 }
 $132 = $err;
 $133 = ($132|0)==(0);
 $134 = $2;
 $135 = ($134>>>0)>(0);
 $or$cond3 = $133 & $135;
 if ($or$cond3) {
  $136 = $0;
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $0;
  $140 = ((($139)) + 28|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $0;
  $143 = ((($142)) + 44|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $3;
  $146 = $2;
  $147 = (mftCall_iiiii($138|0,($141|0),($144|0),($145|0),($146|0))|0);
  $148 = $2;
  $149 = ($147|0)!=($148|0);
  if ($149) {
   $err = -1;
  }
 }
 $150 = $err;
 $151 = ($150|0)==(0);
 if (!($151)) {
  $218 = $err;
  STACKTOP = sp;return ($218|0);
 }
 $152 = $0;
 $153 = ((($152)) + 64|0);
 $154 = ((($153)) + 65648|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0);
 if (!($156)) {
  $218 = $err;
  STACKTOP = sp;return ($218|0);
 }
 $HeaderID = 1;
 $DataSize = 16;
 $157 = $CompressedSize;
 $158 = $157;
 HEAP32[$158>>2] = 0;
 $159 = (($157) + 4)|0;
 $160 = $159;
 HEAP32[$160>>2] = 0;
 $161 = $UncompressedSize;
 $162 = $161;
 HEAP32[$162>>2] = 0;
 $163 = (($161) + 4)|0;
 $164 = $163;
 HEAP32[$164>>2] = 0;
 $165 = $0;
 $166 = $0;
 $167 = ((($166)) + 44|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (_call_ztell64($165,$168)|0);
 $170 = (getTempRet0() | 0);
 $171 = $0;
 $172 = ((($171)) + 64|0);
 $173 = ((($172)) + 65656|0);
 $174 = $173;
 $175 = $174;
 HEAP32[$175>>2] = $169;
 $176 = (($174) + 4)|0;
 $177 = $176;
 HEAP32[$177>>2] = $170;
 $178 = $0;
 $179 = $0;
 $180 = ((($179)) + 44|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $HeaderID;
 $183 = $182 << 16 >> 16;
 $184 = ($183|0)<(0);
 $185 = $184 << 31 >> 31;
 $186 = (_zip64local_putValue($178,$181,$183,$185,2)|0);
 $err = $186;
 $187 = $0;
 $188 = $0;
 $189 = ((($188)) + 44|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $DataSize;
 $192 = $191 << 16 >> 16;
 $193 = ($192|0)<(0);
 $194 = $193 << 31 >> 31;
 $195 = (_zip64local_putValue($187,$190,$192,$194,2)|0);
 $err = $195;
 $196 = $0;
 $197 = $0;
 $198 = ((($197)) + 44|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = $UncompressedSize;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = (($200) + 4)|0;
 $204 = $203;
 $205 = HEAP32[$204>>2]|0;
 $206 = (_zip64local_putValue($196,$199,$202,$205,8)|0);
 $err = $206;
 $207 = $0;
 $208 = $0;
 $209 = ((($208)) + 44|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $CompressedSize;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (($211) + 4)|0;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = (_zip64local_putValue($207,$210,$213,$216,8)|0);
 $err = $217;
 $218 = $err;
 STACKTOP = sp;return ($218|0);
}
function _zipOpenNewFileInZip4_64($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw,$windowBits,$memLevel,$strategy,$password,$crcForCrypting,$versionMadeBy,$flagBase,$zip64) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $password = $password|0;
 $crcForCrypting = $crcForCrypting|0;
 $versionMadeBy = $versionMadeBy|0;
 $flagBase = $flagBase|0;
 $zip64 = $zip64|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $i = 0, $or$cond = 0;
 var $or$cond3 = 0, $size_comment = 0, $size_filename = 0, $zi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $filename;
 $3 = $zipfi;
 $4 = $extrafield_local;
 $5 = $size_extrafield_local;
 $6 = $extrafield_global;
 $7 = $size_extrafield_global;
 $8 = $comment;
 $9 = $method;
 $10 = $level;
 $11 = $raw;
 $12 = $windowBits;
 $13 = $memLevel;
 $14 = $strategy;
 $15 = $password;
 $16 = $crcForCrypting;
 $17 = $versionMadeBy;
 $18 = $flagBase;
 $19 = $zip64;
 $err = 0;
 $20 = $15;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $0 = -102;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $22 = $1;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $0 = -102;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $24 = $9;
 $25 = ($24|0)!=(0);
 $26 = $9;
 $27 = ($26|0)!=(8);
 $or$cond = $25 & $27;
 if ($or$cond) {
  $0 = -102;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $28 = $1;
 $zi = $28;
 $29 = $zi;
 $30 = ((($29)) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(1);
 if ($32) {
  $33 = $1;
  $34 = (_zipCloseFileInZip($33)|0);
  $err = $34;
  $35 = $err;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $err;
   $0 = $37;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
  }
 }
 $38 = $2;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $2 = (gb + (20746) | 0);
 }
 $40 = $8;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $size_comment = 0;
 } else {
  $42 = $8;
  $43 = (_strlen(($42|0))|0);
  $size_comment = $43;
 }
 $44 = $2;
 $45 = (_strlen(($44|0))|0);
 $size_filename = $45;
 $46 = $3;
 $47 = ($46|0)==(0|0);
 do {
  if ($47) {
   $48 = $zi;
   $49 = ((($48)) + 64|0);
   $50 = ((($49)) + 65636|0);
   HEAP32[$50>>2] = 0;
  } else {
   $51 = $3;
   $52 = ((($51)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0);
   $55 = $3;
   if ($54) {
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $zi;
    $59 = ((($58)) + 64|0);
    $60 = ((($59)) + 65636|0);
    HEAP32[$60>>2] = $57;
    break;
   } else {
    $61 = (_zip64local_TmzDateToDosDate($55)|0);
    $62 = $zi;
    $63 = ((($62)) + 64|0);
    $64 = ((($63)) + 65636|0);
    HEAP32[$64>>2] = $61;
    break;
   }
  }
 } while(0);
 $65 = $18;
 $66 = $zi;
 $67 = ((($66)) + 64|0);
 $68 = ((($67)) + 88|0);
 HEAP32[$68>>2] = $65;
 $69 = $10;
 $70 = ($69|0)==(8);
 $71 = $10;
 $72 = ($71|0)==(9);
 $or$cond3 = $70 | $72;
 if ($or$cond3) {
  $73 = $zi;
  $74 = ((($73)) + 64|0);
  $75 = ((($74)) + 88|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 | 2;
  HEAP32[$75>>2] = $77;
 }
 $78 = $10;
 $79 = ($78|0)==(2);
 if ($79) {
  $80 = $zi;
  $81 = ((($80)) + 64|0);
  $82 = ((($81)) + 88|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 | 4;
  HEAP32[$82>>2] = $84;
 }
 $85 = $10;
 $86 = ($85|0)==(1);
 if ($86) {
  $87 = $zi;
  $88 = ((($87)) + 64|0);
  $89 = ((($88)) + 88|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 | 6;
  HEAP32[$89>>2] = $91;
 }
 $92 = $15;
 $93 = ($92|0)!=(0|0);
 if ($93) {
  $94 = $zi;
  $95 = ((($94)) + 64|0);
  $96 = ((($95)) + 88|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $97 | 1;
  HEAP32[$96>>2] = $98;
 }
 $99 = $zi;
 $100 = ((($99)) + 64|0);
 $101 = ((($100)) + 65640|0);
 HEAP32[$101>>2] = 0;
 $102 = $9;
 $103 = $zi;
 $104 = ((($103)) + 64|0);
 $105 = ((($104)) + 92|0);
 HEAP32[$105>>2] = $102;
 $106 = $zi;
 $107 = ((($106)) + 64|0);
 $108 = ((($107)) + 65644|0);
 HEAP32[$108>>2] = 0;
 $109 = $zi;
 $110 = ((($109)) + 64|0);
 $111 = ((($110)) + 56|0);
 HEAP32[$111>>2] = 0;
 $112 = $zi;
 $113 = ((($112)) + 64|0);
 $114 = ((($113)) + 60|0);
 HEAP32[$114>>2] = 0;
 $115 = $11;
 $116 = $zi;
 $117 = ((($116)) + 64|0);
 $118 = ((($117)) + 96|0);
 HEAP32[$118>>2] = $115;
 $119 = $zi;
 $120 = $zi;
 $121 = ((($120)) + 44|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (_call_ztell64($119,$122)|0);
 $124 = (getTempRet0() | 0);
 $125 = $zi;
 $126 = ((($125)) + 64|0);
 $127 = ((($126)) + 64|0);
 $128 = $127;
 $129 = $128;
 HEAP32[$129>>2] = $123;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = $124;
 $132 = $size_filename;
 $133 = (46 + ($132))|0;
 $134 = $7;
 $135 = (($133) + ($134))|0;
 $136 = $size_comment;
 $137 = (($135) + ($136))|0;
 $138 = $zi;
 $139 = ((($138)) + 64|0);
 $140 = ((($139)) + 80|0);
 HEAP32[$140>>2] = $137;
 $141 = $zi;
 $142 = ((($141)) + 64|0);
 $143 = ((($142)) + 84|0);
 HEAP32[$143>>2] = 32;
 $144 = $zi;
 $145 = ((($144)) + 64|0);
 $146 = ((($145)) + 80|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $zi;
 $149 = ((($148)) + 64|0);
 $150 = ((($149)) + 84|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($147) + ($151))|0;
 $153 = (_malloc(($152|0))|0);
 $154 = $zi;
 $155 = ((($154)) + 64|0);
 $156 = ((($155)) + 72|0);
 HEAP32[$156>>2] = $153;
 $157 = $7;
 $158 = $zi;
 $159 = ((($158)) + 64|0);
 $160 = ((($159)) + 76|0);
 HEAP32[$160>>2] = $157;
 $161 = $zi;
 $162 = ((($161)) + 64|0);
 $163 = ((($162)) + 72|0);
 $164 = HEAP32[$163>>2]|0;
 _zip64local_putValue_inmemory($164,33639248,0,4);
 $165 = $zi;
 $166 = ((($165)) + 64|0);
 $167 = ((($166)) + 72|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($168)) + 4|0);
 $170 = $17;
 _zip64local_putValue_inmemory($169,$170,0,2);
 $171 = $zi;
 $172 = ((($171)) + 64|0);
 $173 = ((($172)) + 72|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ((($174)) + 6|0);
 _zip64local_putValue_inmemory($175,20,0,2);
 $176 = $zi;
 $177 = ((($176)) + 64|0);
 $178 = ((($177)) + 72|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($179)) + 8|0);
 $181 = $zi;
 $182 = ((($181)) + 64|0);
 $183 = ((($182)) + 88|0);
 $184 = HEAP32[$183>>2]|0;
 _zip64local_putValue_inmemory($180,$184,0,2);
 $185 = $zi;
 $186 = ((($185)) + 64|0);
 $187 = ((($186)) + 72|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ((($188)) + 10|0);
 $190 = $zi;
 $191 = ((($190)) + 64|0);
 $192 = ((($191)) + 92|0);
 $193 = HEAP32[$192>>2]|0;
 _zip64local_putValue_inmemory($189,$193,0,2);
 $194 = $zi;
 $195 = ((($194)) + 64|0);
 $196 = ((($195)) + 72|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ((($197)) + 12|0);
 $199 = $zi;
 $200 = ((($199)) + 64|0);
 $201 = ((($200)) + 65636|0);
 $202 = HEAP32[$201>>2]|0;
 _zip64local_putValue_inmemory($198,$202,0,4);
 $203 = $zi;
 $204 = ((($203)) + 64|0);
 $205 = ((($204)) + 72|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((($206)) + 16|0);
 _zip64local_putValue_inmemory($207,0,0,4);
 $208 = $zi;
 $209 = ((($208)) + 64|0);
 $210 = ((($209)) + 72|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ((($211)) + 20|0);
 _zip64local_putValue_inmemory($212,0,0,4);
 $213 = $zi;
 $214 = ((($213)) + 64|0);
 $215 = ((($214)) + 72|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ((($216)) + 24|0);
 _zip64local_putValue_inmemory($217,0,0,4);
 $218 = $zi;
 $219 = ((($218)) + 64|0);
 $220 = ((($219)) + 72|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 28|0);
 $223 = $size_filename;
 _zip64local_putValue_inmemory($222,$223,0,2);
 $224 = $zi;
 $225 = ((($224)) + 64|0);
 $226 = ((($225)) + 72|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = ((($227)) + 30|0);
 $229 = $7;
 _zip64local_putValue_inmemory($228,$229,0,2);
 $230 = $zi;
 $231 = ((($230)) + 64|0);
 $232 = ((($231)) + 72|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = ((($233)) + 32|0);
 $235 = $size_comment;
 _zip64local_putValue_inmemory($234,$235,0,2);
 $236 = $zi;
 $237 = ((($236)) + 64|0);
 $238 = ((($237)) + 72|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ((($239)) + 34|0);
 _zip64local_putValue_inmemory($240,0,0,2);
 $241 = $3;
 $242 = ($241|0)==(0|0);
 $243 = $zi;
 $244 = ((($243)) + 64|0);
 $245 = ((($244)) + 72|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 36|0);
 if ($242) {
  _zip64local_putValue_inmemory($247,0,0,2);
 } else {
  $248 = $3;
  $249 = ((($248)) + 28|0);
  $250 = HEAP32[$249>>2]|0;
  _zip64local_putValue_inmemory($247,$250,0,2);
 }
 $251 = $3;
 $252 = ($251|0)==(0|0);
 $253 = $zi;
 $254 = ((($253)) + 64|0);
 $255 = ((($254)) + 72|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ((($256)) + 38|0);
 if ($252) {
  _zip64local_putValue_inmemory($257,0,0,4);
 } else {
  $258 = $3;
  $259 = ((($258)) + 32|0);
  $260 = HEAP32[$259>>2]|0;
  _zip64local_putValue_inmemory($257,$260,0,4);
 }
 $261 = $zi;
 $262 = ((($261)) + 64|0);
 $263 = ((($262)) + 64|0);
 $264 = $263;
 $265 = $264;
 $266 = HEAP32[$265>>2]|0;
 $267 = (($264) + 4)|0;
 $268 = $267;
 $269 = HEAP32[$268>>2]|0;
 $270 = ($269>>>0)>(0);
 $271 = ($266>>>0)>=(4294967295);
 $272 = ($269|0)==(0);
 $273 = $272 & $271;
 $274 = $270 | $273;
 $275 = $zi;
 $276 = ((($275)) + 64|0);
 $277 = ((($276)) + 72|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = ((($278)) + 42|0);
 if ($274) {
  _zip64local_putValue_inmemory($279,-1,0,4);
 } else {
  $280 = $zi;
  $281 = ((($280)) + 64|0);
  $282 = ((($281)) + 64|0);
  $283 = $282;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (($283) + 4)|0;
  $287 = $286;
  $288 = HEAP32[$287>>2]|0;
  $289 = $zi;
  $290 = ((($289)) + 65752|0);
  $291 = $290;
  $292 = $291;
  $293 = HEAP32[$292>>2]|0;
  $294 = (($291) + 4)|0;
  $295 = $294;
  $296 = HEAP32[$295>>2]|0;
  $297 = (_i64Subtract(($285|0),0,($293|0),($296|0))|0);
  $298 = (getTempRet0() | 0);
  _zip64local_putValue_inmemory($279,$297,$298,4);
 }
 $i = 0;
 while(1) {
  $299 = $i;
  $300 = $size_filename;
  $301 = ($299>>>0)<($300>>>0);
  if (!($301)) {
   break;
  }
  $302 = $2;
  $303 = $i;
  $304 = (($302) + ($303)|0);
  $305 = HEAP8[$304>>0]|0;
  $306 = $zi;
  $307 = ((($306)) + 64|0);
  $308 = ((($307)) + 72|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = ((($309)) + 46|0);
  $311 = $i;
  $312 = (($310) + ($311)|0);
  HEAP8[$312>>0] = $305;
  $313 = $i;
  $314 = (($313) + 1)|0;
  $i = $314;
 }
 $i = 0;
 while(1) {
  $315 = $i;
  $316 = $7;
  $317 = ($315>>>0)<($316>>>0);
  if (!($317)) {
   break;
  }
  $318 = $6;
  $319 = $i;
  $320 = (($318) + ($319)|0);
  $321 = HEAP8[$320>>0]|0;
  $322 = $zi;
  $323 = ((($322)) + 64|0);
  $324 = ((($323)) + 72|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = ((($325)) + 46|0);
  $327 = $size_filename;
  $328 = (($326) + ($327)|0);
  $329 = $i;
  $330 = (($328) + ($329)|0);
  HEAP8[$330>>0] = $321;
  $331 = $i;
  $332 = (($331) + 1)|0;
  $i = $332;
 }
 $i = 0;
 while(1) {
  $333 = $i;
  $334 = $size_comment;
  $335 = ($333>>>0)<($334>>>0);
  if (!($335)) {
   break;
  }
  $336 = $8;
  $337 = $i;
  $338 = (($336) + ($337)|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $zi;
  $341 = ((($340)) + 64|0);
  $342 = ((($341)) + 72|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = ((($343)) + 46|0);
  $345 = $size_filename;
  $346 = (($344) + ($345)|0);
  $347 = $7;
  $348 = (($346) + ($347)|0);
  $349 = $i;
  $350 = (($348) + ($349)|0);
  HEAP8[$350>>0] = $339;
  $351 = $i;
  $352 = (($351) + 1)|0;
  $i = $352;
 }
 $353 = $zi;
 $354 = ((($353)) + 64|0);
 $355 = ((($354)) + 72|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = ($356|0)==(0|0);
 if ($357) {
  $0 = -104;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $358 = $19;
 $359 = $zi;
 $360 = ((($359)) + 64|0);
 $361 = ((($360)) + 65648|0);
 HEAP32[$361>>2] = $358;
 $362 = $zi;
 $363 = ((($362)) + 64|0);
 $364 = ((($363)) + 65664|0);
 $365 = $364;
 $366 = $365;
 HEAP32[$366>>2] = 0;
 $367 = (($365) + 4)|0;
 $368 = $367;
 HEAP32[$368>>2] = 0;
 $369 = $zi;
 $370 = ((($369)) + 64|0);
 $371 = ((($370)) + 65672|0);
 $372 = $371;
 $373 = $372;
 HEAP32[$373>>2] = 0;
 $374 = (($372) + 4)|0;
 $375 = $374;
 HEAP32[$375>>2] = 0;
 $376 = $zi;
 $377 = ((($376)) + 64|0);
 $378 = ((($377)) + 65656|0);
 $379 = $378;
 $380 = $379;
 HEAP32[$380>>2] = 0;
 $381 = (($379) + 4)|0;
 $382 = $381;
 HEAP32[$382>>2] = 0;
 $383 = $zi;
 $384 = $2;
 $385 = $5;
 $386 = $4;
 $387 = (_Write_LocalFileHeader($383,$384,$385,$386)|0);
 $err = $387;
 $388 = $zi;
 $389 = ((($388)) + 64|0);
 $390 = ((($389)) + 4|0);
 HEAP32[$390>>2] = 0;
 $391 = $zi;
 $392 = ((($391)) + 64|0);
 $393 = ((($392)) + 16|0);
 HEAP32[$393>>2] = 65536;
 $394 = $zi;
 $395 = ((($394)) + 64|0);
 $396 = ((($395)) + 100|0);
 $397 = $zi;
 $398 = ((($397)) + 64|0);
 $399 = ((($398)) + 12|0);
 HEAP32[$399>>2] = $396;
 $400 = $zi;
 $401 = ((($400)) + 64|0);
 $402 = ((($401)) + 8|0);
 HEAP32[$402>>2] = 0;
 $403 = $zi;
 $404 = ((($403)) + 64|0);
 $405 = ((($404)) + 20|0);
 HEAP32[$405>>2] = 0;
 $406 = $zi;
 $407 = ((($406)) + 64|0);
 $408 = ((($407)) + 44|0);
 HEAP32[$408>>2] = 0;
 $409 = $err;
 $410 = ($409|0)==(0);
 do {
  if ($410) {
   $411 = $zi;
   $412 = ((($411)) + 64|0);
   $413 = ((($412)) + 92|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = ($414|0)==(8);
   if ($415) {
    $416 = $zi;
    $417 = ((($416)) + 64|0);
    $418 = ((($417)) + 96|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = ($419|0)!=(0);
    if (!($420)) {
     $421 = $zi;
     $422 = ((($421)) + 64|0);
     $423 = ((($422)) + 92|0);
     $424 = HEAP32[$423>>2]|0;
     $425 = ($424|0)==(8);
     $426 = $zi;
     $427 = ((($426)) + 64|0);
     if (!($425)) {
      break;
     }
     $428 = ((($427)) + 32|0);
     HEAP32[$428>>2] = 0;
     $429 = $zi;
     $430 = ((($429)) + 64|0);
     $431 = ((($430)) + 36|0);
     HEAP32[$431>>2] = 0;
     $432 = $zi;
     $433 = ((($432)) + 64|0);
     $434 = ((($433)) + 40|0);
     HEAP32[$434>>2] = 0;
     $435 = $12;
     $436 = ($435|0)>(0);
     if ($436) {
      $437 = $12;
      $438 = (0 - ($437))|0;
      $12 = $438;
     }
     $439 = $zi;
     $440 = ((($439)) + 64|0);
     $441 = $10;
     $442 = $12;
     $443 = $13;
     $444 = $14;
     $445 = (_deflateInit2_(($440|0),($441|0),8,($442|0),($443|0),($444|0),((gb + (20829) | 0)|0),56)|0);
     $err = $445;
     $446 = $err;
     $447 = ($446|0)==(0);
     if (!($447)) {
      break;
     }
     $448 = $zi;
     $449 = ((($448)) + 64|0);
     $450 = ((($449)) + 56|0);
     HEAP32[$450>>2] = 8;
    }
   }
  }
 } while(0);
 $451 = $err;
 $452 = ($451|0)==(0);
 if ($452) {
  $453 = $zi;
  $454 = ((($453)) + 56|0);
  HEAP32[$454>>2] = 1;
 }
 $455 = $err;
 $0 = $455;
 $456 = $0;
 STACKTOP = sp;return ($456|0);
}
function _zipCloseFileInZip($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $0;
 $2 = (_zipCloseFileInZipRaw($1,0,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _zipOpenNewFileInZip4($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw,$windowBits,$memLevel,$strategy,$password,$crcForCrypting,$versionMadeBy,$flagBase) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $password = $password|0;
 $crcForCrypting = $crcForCrypting|0;
 $versionMadeBy = $versionMadeBy|0;
 $flagBase = $flagBase|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $raw;
 $11 = $windowBits;
 $12 = $memLevel;
 $13 = $strategy;
 $14 = $password;
 $15 = $crcForCrypting;
 $16 = $versionMadeBy;
 $17 = $flagBase;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $36 = (_zipOpenNewFileInZip4_64($18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,0)|0);
 STACKTOP = sp;return ($36|0);
}
function _zipOpenNewFileInZip3($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw,$windowBits,$memLevel,$strategy,$password,$crcForCrypting) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $password = $password|0;
 $crcForCrypting = $crcForCrypting|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $raw;
 $11 = $windowBits;
 $12 = $memLevel;
 $13 = $strategy;
 $14 = $password;
 $15 = $crcForCrypting;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 $32 = (_zipOpenNewFileInZip4_64($16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,0,0,0)|0);
 STACKTOP = sp;return ($32|0);
}
function _zipOpenNewFileInZip3_64($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw,$windowBits,$memLevel,$strategy,$password,$crcForCrypting,$zip64) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $password = $password|0;
 $crcForCrypting = $crcForCrypting|0;
 $zip64 = $zip64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $raw;
 $11 = $windowBits;
 $12 = $memLevel;
 $13 = $strategy;
 $14 = $password;
 $15 = $crcForCrypting;
 $16 = $zip64;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $34 = (_zipOpenNewFileInZip4_64($17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,0,0,$33)|0);
 STACKTOP = sp;return ($34|0);
}
function _zipOpenNewFileInZip2($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $raw;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = (_zipOpenNewFileInZip4_64($11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,-15,8,0,0,0,0,0,0)|0);
 STACKTOP = sp;return ($22|0);
}
function _zipOpenNewFileInZip2_64($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$raw,$zip64) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $zip64 = $zip64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $raw;
 $11 = $zip64;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = (_zipOpenNewFileInZip4_64($12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,-15,8,0,0,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _zipOpenNewFileInZip64($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level,$zip64) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 $zip64 = $zip64|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $zip64;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = (_zipOpenNewFileInZip4_64($11,$12,$13,$14,$15,$16,$17,$18,$19,$20,0,-15,8,0,0,0,0,0,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function _zipOpenNewFileInZip($file,$filename,$zipfi,$extrafield_local,$size_extrafield_local,$extrafield_global,$size_extrafield_global,$comment,$method,$level) {
 $file = $file|0;
 $filename = $filename|0;
 $zipfi = $zipfi|0;
 $extrafield_local = $extrafield_local|0;
 $size_extrafield_local = $size_extrafield_local|0;
 $extrafield_global = $extrafield_global|0;
 $size_extrafield_global = $size_extrafield_global|0;
 $comment = $comment|0;
 $method = $method|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $filename;
 $2 = $zipfi;
 $3 = $extrafield_local;
 $4 = $size_extrafield_local;
 $5 = $extrafield_global;
 $6 = $size_extrafield_global;
 $7 = $comment;
 $8 = $method;
 $9 = $level;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = (_zipOpenNewFileInZip4_64($10,$11,$12,$13,$14,$15,$16,$17,$18,$19,0,-15,8,0,0,0,0,0,0)|0);
 STACKTOP = sp;return ($20|0);
}
function _zipWriteInFileInZip($file,$buf,$len) {
 $file = $file|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bBreak = 0, $copy_this = 0, $err = 0, $i = 0, $uTotalOutBefore = 0, $zi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $buf;
 $3 = $len;
 $err = 0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -102;
  $164 = $0;
  STACKTOP = sp;return ($164|0);
 }
 $6 = $1;
 $zi = $6;
 $7 = $zi;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $0 = -102;
  $164 = $0;
  STACKTOP = sp;return ($164|0);
 }
 $11 = $zi;
 $12 = ((($11)) + 64|0);
 $13 = ((($12)) + 65640|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = $3;
 $17 = (_crc32(($14|0),($15|0),($16|0))|0);
 $18 = $zi;
 $19 = ((($18)) + 64|0);
 $20 = ((($19)) + 65640|0);
 HEAP32[$20>>2] = $17;
 $21 = $2;
 $22 = $zi;
 $23 = ((($22)) + 64|0);
 HEAP32[$23>>2] = $21;
 $24 = $3;
 $25 = $zi;
 $26 = ((($25)) + 64|0);
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 while(1) {
  $28 = $err;
  $29 = ($28|0)==(0);
  if (!($29)) {
   break;
  }
  $30 = $zi;
  $31 = ((($30)) + 64|0);
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
  $35 = $zi;
  $36 = ((($35)) + 64|0);
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = $zi;
   $41 = (_zip64FlushWriteBuffer($40)|0);
   $42 = ($41|0)==(-1);
   if ($42) {
    $err = -1;
   }
   $43 = $zi;
   $44 = ((($43)) + 64|0);
   $45 = ((($44)) + 16|0);
   HEAP32[$45>>2] = 65536;
   $46 = $zi;
   $47 = ((($46)) + 64|0);
   $48 = ((($47)) + 100|0);
   $49 = $zi;
   $50 = ((($49)) + 64|0);
   $51 = ((($50)) + 12|0);
   HEAP32[$51>>2] = $48;
  }
  $52 = $err;
  $53 = ($52|0)!=(0);
  if ($53) {
   break;
  }
  $54 = $zi;
  $55 = ((($54)) + 64|0);
  $56 = ((($55)) + 92|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(8);
  if ($58) {
   $59 = $zi;
   $60 = ((($59)) + 64|0);
   $61 = ((($60)) + 96|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $zi;
    $65 = ((($64)) + 64|0);
    $66 = ((($65)) + 20|0);
    $67 = HEAP32[$66>>2]|0;
    $uTotalOutBefore = $67;
    $68 = $zi;
    $69 = ((($68)) + 64|0);
    $70 = (_deflate(($69|0),0)|0);
    $err = $70;
    $71 = $uTotalOutBefore;
    $72 = $zi;
    $73 = ((($72)) + 64|0);
    $74 = ((($73)) + 20|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($71>>>0)>($75>>>0);
    if ($76) {
     $bBreak = 0;
     $77 = $bBreak;
     $78 = (($77) + 1)|0;
     $bBreak = $78;
    }
    $79 = $zi;
    $80 = ((($79)) + 64|0);
    $81 = ((($80)) + 20|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $uTotalOutBefore;
    $84 = (($82) - ($83))|0;
    $85 = $zi;
    $86 = ((($85)) + 64|0);
    $87 = ((($86)) + 60|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($84))|0;
    HEAP32[$87>>2] = $89;
    continue;
   }
  }
  $90 = $zi;
  $91 = ((($90)) + 64|0);
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $zi;
  $95 = ((($94)) + 64|0);
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($93>>>0)<($97>>>0);
  $99 = $zi;
  $100 = ((($99)) + 64|0);
  if ($98) {
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $copy_this = $102;
  } else {
   $103 = ((($100)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $copy_this = $104;
  }
  $i = 0;
  while(1) {
   $105 = $i;
   $106 = $copy_this;
   $107 = ($105>>>0)<($106>>>0);
   if (!($107)) {
    break;
   }
   $108 = $zi;
   $109 = ((($108)) + 64|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $i;
   $112 = (($110) + ($111)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $zi;
   $115 = ((($114)) + 64|0);
   $116 = ((($115)) + 12|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $i;
   $119 = (($117) + ($118)|0);
   HEAP8[$119>>0] = $113;
   $120 = $i;
   $121 = (($120) + 1)|0;
   $i = $121;
  }
  $122 = $copy_this;
  $123 = $zi;
  $124 = ((($123)) + 64|0);
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) - ($122))|0;
  HEAP32[$125>>2] = $127;
  $128 = $copy_this;
  $129 = $zi;
  $130 = ((($129)) + 64|0);
  $131 = ((($130)) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) - ($128))|0;
  HEAP32[$131>>2] = $133;
  $134 = $copy_this;
  $135 = $zi;
  $136 = ((($135)) + 64|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + ($134)|0);
  HEAP32[$136>>2] = $138;
  $139 = $copy_this;
  $140 = $zi;
  $141 = ((($140)) + 64|0);
  $142 = ((($141)) + 12|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + ($139)|0);
  HEAP32[$142>>2] = $144;
  $145 = $copy_this;
  $146 = $zi;
  $147 = ((($146)) + 64|0);
  $148 = ((($147)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + ($145))|0;
  HEAP32[$148>>2] = $150;
  $151 = $copy_this;
  $152 = $zi;
  $153 = ((($152)) + 64|0);
  $154 = ((($153)) + 20|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + ($151))|0;
  HEAP32[$154>>2] = $156;
  $157 = $copy_this;
  $158 = $zi;
  $159 = ((($158)) + 64|0);
  $160 = ((($159)) + 60|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + ($157))|0;
  HEAP32[$160>>2] = $162;
 }
 $163 = $err;
 $0 = $163;
 $164 = $0;
 STACKTOP = sp;return ($164|0);
}
function _zipCloseFileInZipRaw($file,$uncompressed_size,$crc32) {
 $file = $file|0;
 $uncompressed_size = $uncompressed_size|0;
 $crc32 = $crc32|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $uncompressed_size;
 $2 = $crc32;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_zipCloseFileInZipRaw64($3,$4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _zipCloseFileInZipRaw64($file,$0,$1,$crc32) {
 $file = $file|0;
 $0 = $0|0;
 $1 = $1|0;
 $crc32 = $crc32|0;
 var $$old = 0, $$old6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $compressed_size = 0, $cur_pos_inzip = 0, $datasize = 0, $err = 0, $invalidValue = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $p = 0, $tmp_err = 0, $uTotalOutBefore = 0, $zi = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 16|0;
 $compressed_size = sp + 8|0;
 $cur_pos_inzip = sp;
 $3 = $file;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $crc32;
 $invalidValue = -1;
 $datasize = 0;
 $err = 0;
 $10 = $3;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = -102;
  $606 = $2;
  STACKTOP = sp;return ($606|0);
 }
 $12 = $3;
 $zi = $12;
 $13 = $zi;
 $14 = ((($13)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $2 = -102;
  $606 = $2;
  STACKTOP = sp;return ($606|0);
 }
 $17 = $zi;
 $18 = ((($17)) + 64|0);
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = $zi;
 $21 = ((($20)) + 64|0);
 $22 = ((($21)) + 92|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(8);
 if ($24) {
  $25 = $zi;
  $26 = ((($25)) + 64|0);
  $27 = ((($26)) + 96|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  $30 = $err;
  $31 = ($30|0)==(0);
  $or$cond7 = $29 & $31;
  if ($or$cond7) {
   while(1) {
    $32 = $zi;
    $33 = ((($32)) + 64|0);
    $34 = ((($33)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = $zi;
     $38 = (_zip64FlushWriteBuffer($37)|0);
     $39 = ($38|0)==(-1);
     if ($39) {
      $err = -1;
     }
     $40 = $zi;
     $41 = ((($40)) + 64|0);
     $42 = ((($41)) + 16|0);
     HEAP32[$42>>2] = 65536;
     $43 = $zi;
     $44 = ((($43)) + 64|0);
     $45 = ((($44)) + 100|0);
     $46 = $zi;
     $47 = ((($46)) + 64|0);
     $48 = ((($47)) + 12|0);
     HEAP32[$48>>2] = $45;
    }
    $49 = $zi;
    $50 = ((($49)) + 64|0);
    $51 = ((($50)) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $uTotalOutBefore = $52;
    $53 = $zi;
    $54 = ((($53)) + 64|0);
    $55 = (_deflate(($54|0),4)|0);
    $err = $55;
    $56 = $zi;
    $57 = ((($56)) + 64|0);
    $58 = ((($57)) + 20|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $uTotalOutBefore;
    $61 = (($59) - ($60))|0;
    $62 = $zi;
    $63 = ((($62)) + 64|0);
    $64 = ((($63)) + 60|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($61))|0;
    HEAP32[$64>>2] = $66;
    $$old = $err;
    $$old6 = ($$old|0)==(0);
    if (!($$old6)) {
     break;
    }
   }
  }
 }
 $67 = $err;
 $68 = ($67|0)==(1);
 if ($68) {
  $err = 0;
 }
 $69 = $zi;
 $70 = ((($69)) + 64|0);
 $71 = ((($70)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72>>>0)>(0);
 $74 = $err;
 $75 = ($74|0)==(0);
 $or$cond = $73 & $75;
 if ($or$cond) {
  $76 = $zi;
  $77 = (_zip64FlushWriteBuffer($76)|0);
  $78 = ($77|0)==(-1);
  if ($78) {
   $err = -1;
  }
 }
 $79 = $zi;
 $80 = ((($79)) + 64|0);
 $81 = ((($80)) + 92|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(8);
 if ($83) {
  $84 = $zi;
  $85 = ((($84)) + 64|0);
  $86 = ((($85)) + 96|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0);
  if (!($88)) {
   $89 = $zi;
   $90 = ((($89)) + 64|0);
   $91 = (_deflateEnd(($90|0))|0);
   $tmp_err = $91;
   $92 = $err;
   $93 = ($92|0)==(0);
   if ($93) {
    $94 = $tmp_err;
    $err = $94;
   }
   $95 = $zi;
   $96 = ((($95)) + 64|0);
   $97 = ((($96)) + 56|0);
   HEAP32[$97>>2] = 0;
  }
 }
 $98 = $zi;
 $99 = ((($98)) + 64|0);
 $100 = ((($99)) + 96|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0);
 if (!($102)) {
  $103 = $zi;
  $104 = ((($103)) + 64|0);
  $105 = ((($104)) + 65640|0);
  $106 = HEAP32[$105>>2]|0;
  $5 = $106;
  $107 = $zi;
  $108 = ((($107)) + 64|0);
  $109 = ((($108)) + 65672|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = $4;
  $117 = $116;
  HEAP32[$117>>2] = $112;
  $118 = (($116) + 4)|0;
  $119 = $118;
  HEAP32[$119>>2] = $115;
 }
 $120 = $zi;
 $121 = ((($120)) + 64|0);
 $122 = ((($121)) + 65664|0);
 $123 = $122;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($123) + 4)|0;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = $compressed_size;
 $130 = $129;
 HEAP32[$130>>2] = $125;
 $131 = (($129) + 4)|0;
 $132 = $131;
 HEAP32[$132>>2] = $128;
 $133 = $compressed_size;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($138>>>0)>(0);
 $140 = ($135>>>0)>=(4294967295);
 $141 = ($138|0)==(0);
 $142 = $141 & $140;
 $143 = $139 | $142;
 $144 = $4;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = (($144) + 4)|0;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149>>>0)>(0);
 $151 = ($146>>>0)>=(4294967295);
 $152 = ($149|0)==(0);
 $153 = $152 & $151;
 $154 = $150 | $153;
 $or$cond3 = $143 | $154;
 if ($or$cond3) {
  label = 26;
 } else {
  $155 = $zi;
  $156 = ((($155)) + 64|0);
  $157 = ((($156)) + 64|0);
  $158 = $157;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = ($163>>>0)>(0);
  $165 = ($160>>>0)>=(4294967295);
  $166 = ($163|0)==(0);
  $167 = $166 & $165;
  $168 = $164 | $167;
  if ($168) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $169 = $zi;
  $170 = ((($169)) + 64|0);
  $171 = ((($170)) + 72|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ((($172)) + 4|0);
  _zip64local_putValue_inmemory($173,45,0,2);
  $174 = $zi;
  $175 = ((($174)) + 64|0);
  $176 = ((($175)) + 72|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($177)) + 6|0);
  _zip64local_putValue_inmemory($178,45,0,2);
 }
 $179 = $zi;
 $180 = ((($179)) + 64|0);
 $181 = ((($180)) + 72|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ((($182)) + 16|0);
 $184 = $5;
 _zip64local_putValue_inmemory($183,$184,0,4);
 $185 = $compressed_size;
 $186 = $185;
 $187 = HEAP32[$186>>2]|0;
 $188 = (($185) + 4)|0;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190>>>0)>(0);
 $192 = ($187>>>0)>=(4294967295);
 $193 = ($190|0)==(0);
 $194 = $193 & $192;
 $195 = $191 | $194;
 $196 = $zi;
 $197 = ((($196)) + 64|0);
 $198 = ((($197)) + 72|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ((($199)) + 20|0);
 if ($195) {
  $201 = $invalidValue;
  _zip64local_putValue_inmemory($200,$201,0,4);
 } else {
  $202 = $compressed_size;
  $203 = $202;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($202) + 4)|0;
  $206 = $205;
  $207 = HEAP32[$206>>2]|0;
  _zip64local_putValue_inmemory($200,$204,$207,4);
 }
 $208 = $zi;
 $209 = ((($208)) + 64|0);
 $210 = ((($209)) + 44|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)==(1);
 if ($212) {
  $213 = $zi;
  $214 = ((($213)) + 64|0);
  $215 = ((($214)) + 72|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 36|0);
  _zip64local_putValue_inmemory($217,1,0,2);
 }
 $218 = $4;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223>>>0)>(0);
 $225 = ($220>>>0)>=(4294967295);
 $226 = ($223|0)==(0);
 $227 = $226 & $225;
 $228 = $224 | $227;
 $229 = $zi;
 $230 = ((($229)) + 64|0);
 $231 = ((($230)) + 72|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ((($232)) + 24|0);
 if ($228) {
  $234 = $invalidValue;
  _zip64local_putValue_inmemory($233,$234,0,4);
 } else {
  $235 = $4;
  $236 = $235;
  $237 = HEAP32[$236>>2]|0;
  $238 = (($235) + 4)|0;
  $239 = $238;
  $240 = HEAP32[$239>>2]|0;
  _zip64local_putValue_inmemory($233,$237,$240,4);
 }
 $241 = $4;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 $244 = (($241) + 4)|0;
 $245 = $244;
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246>>>0)>(0);
 $248 = ($243>>>0)>=(4294967295);
 $249 = ($246|0)==(0);
 $250 = $249 & $248;
 $251 = $247 | $250;
 if ($251) {
  $252 = $datasize;
  $253 = $252 << 16 >> 16;
  $254 = (($253) + 8)|0;
  $255 = $254&65535;
  $datasize = $255;
 }
 $256 = $compressed_size;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = (($256) + 4)|0;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = ($261>>>0)>(0);
 $263 = ($258>>>0)>=(4294967295);
 $264 = ($261|0)==(0);
 $265 = $264 & $263;
 $266 = $262 | $265;
 if ($266) {
  $267 = $datasize;
  $268 = $267 << 16 >> 16;
  $269 = (($268) + 8)|0;
  $270 = $269&65535;
  $datasize = $270;
 }
 $271 = $zi;
 $272 = ((($271)) + 64|0);
 $273 = ((($272)) + 64|0);
 $274 = $273;
 $275 = $274;
 $276 = HEAP32[$275>>2]|0;
 $277 = (($274) + 4)|0;
 $278 = $277;
 $279 = HEAP32[$278>>2]|0;
 $280 = ($279>>>0)>(0);
 $281 = ($276>>>0)>=(4294967295);
 $282 = ($279|0)==(0);
 $283 = $282 & $281;
 $284 = $280 | $283;
 if ($284) {
  $285 = $datasize;
  $286 = $285 << 16 >> 16;
  $287 = (($286) + 8)|0;
  $288 = $287&65535;
  $datasize = $288;
 }
 $289 = $datasize;
 $290 = $289 << 16 >> 16;
 $291 = ($290|0)>(0);
 if ($291) {
  $p = 0;
  $292 = $datasize;
  $293 = $292 << 16 >> 16;
  $294 = (($293) + 4)|0;
  $295 = $zi;
  $296 = ((($295)) + 64|0);
  $297 = ((($296)) + 84|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ($294>>>0)>($298>>>0);
  if ($299) {
   $2 = -103;
   $606 = $2;
   STACKTOP = sp;return ($606|0);
  }
  $300 = $zi;
  $301 = ((($300)) + 64|0);
  $302 = ((($301)) + 72|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = $zi;
  $305 = ((($304)) + 64|0);
  $306 = ((($305)) + 80|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($303) + ($307)|0);
  $p = $308;
  $309 = $p;
  _zip64local_putValue_inmemory($309,1,0,2);
  $310 = $p;
  $311 = ((($310)) + 2|0);
  $p = $311;
  $312 = $p;
  $313 = $datasize;
  $314 = $313 << 16 >> 16;
  $315 = ($314|0)<(0);
  $316 = $315 << 31 >> 31;
  _zip64local_putValue_inmemory($312,$314,$316,2);
  $317 = $p;
  $318 = ((($317)) + 2|0);
  $p = $318;
  $319 = $4;
  $320 = $319;
  $321 = HEAP32[$320>>2]|0;
  $322 = (($319) + 4)|0;
  $323 = $322;
  $324 = HEAP32[$323>>2]|0;
  $325 = ($324>>>0)>(0);
  $326 = ($321>>>0)>=(4294967295);
  $327 = ($324|0)==(0);
  $328 = $327 & $326;
  $329 = $325 | $328;
  if ($329) {
   $330 = $p;
   $331 = $4;
   $332 = $331;
   $333 = HEAP32[$332>>2]|0;
   $334 = (($331) + 4)|0;
   $335 = $334;
   $336 = HEAP32[$335>>2]|0;
   _zip64local_putValue_inmemory($330,$333,$336,8);
   $337 = $p;
   $338 = ((($337)) + 8|0);
   $p = $338;
  }
  $339 = $compressed_size;
  $340 = $339;
  $341 = HEAP32[$340>>2]|0;
  $342 = (($339) + 4)|0;
  $343 = $342;
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344>>>0)>(0);
  $346 = ($341>>>0)>=(4294967295);
  $347 = ($344|0)==(0);
  $348 = $347 & $346;
  $349 = $345 | $348;
  if ($349) {
   $350 = $p;
   $351 = $compressed_size;
   $352 = $351;
   $353 = HEAP32[$352>>2]|0;
   $354 = (($351) + 4)|0;
   $355 = $354;
   $356 = HEAP32[$355>>2]|0;
   _zip64local_putValue_inmemory($350,$353,$356,8);
   $357 = $p;
   $358 = ((($357)) + 8|0);
   $p = $358;
  }
  $359 = $zi;
  $360 = ((($359)) + 64|0);
  $361 = ((($360)) + 64|0);
  $362 = $361;
  $363 = $362;
  $364 = HEAP32[$363>>2]|0;
  $365 = (($362) + 4)|0;
  $366 = $365;
  $367 = HEAP32[$366>>2]|0;
  $368 = ($367>>>0)>(0);
  $369 = ($364>>>0)>=(4294967295);
  $370 = ($367|0)==(0);
  $371 = $370 & $369;
  $372 = $368 | $371;
  if ($372) {
   $373 = $p;
   $374 = $zi;
   $375 = ((($374)) + 64|0);
   $376 = ((($375)) + 64|0);
   $377 = $376;
   $378 = $377;
   $379 = HEAP32[$378>>2]|0;
   $380 = (($377) + 4)|0;
   $381 = $380;
   $382 = HEAP32[$381>>2]|0;
   _zip64local_putValue_inmemory($373,$379,$382,8);
   $383 = $p;
   $384 = ((($383)) + 8|0);
   $p = $384;
  }
  $385 = $datasize;
  $386 = $385 << 16 >> 16;
  $387 = (($386) + 4)|0;
  $388 = $zi;
  $389 = ((($388)) + 64|0);
  $390 = ((($389)) + 84|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = (($391) - ($387))|0;
  HEAP32[$390>>2] = $392;
  $393 = $datasize;
  $394 = $393 << 16 >> 16;
  $395 = (($394) + 4)|0;
  $396 = $zi;
  $397 = ((($396)) + 64|0);
  $398 = ((($397)) + 80|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($399) + ($395))|0;
  HEAP32[$398>>2] = $400;
  $401 = $datasize;
  $402 = $401 << 16 >> 16;
  $403 = (($402) + 4)|0;
  $404 = $zi;
  $405 = ((($404)) + 64|0);
  $406 = ((($405)) + 76|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = (($407) + ($403))|0;
  HEAP32[$406>>2] = $408;
  $409 = $zi;
  $410 = ((($409)) + 64|0);
  $411 = ((($410)) + 72|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = ((($412)) + 30|0);
  $414 = $zi;
  $415 = ((($414)) + 64|0);
  $416 = ((($415)) + 76|0);
  $417 = HEAP32[$416>>2]|0;
  _zip64local_putValue_inmemory($413,$417,0,2);
 }
 $418 = $err;
 $419 = ($418|0)==(0);
 if ($419) {
  $420 = $zi;
  $421 = ((($420)) + 48|0);
  $422 = $zi;
  $423 = ((($422)) + 64|0);
  $424 = ((($423)) + 72|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = $zi;
  $427 = ((($426)) + 64|0);
  $428 = ((($427)) + 80|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = (_add_data_in_datablock($421,$425,$429)|0);
  $err = $430;
 }
 $431 = $zi;
 $432 = ((($431)) + 64|0);
 $433 = ((($432)) + 72|0);
 $434 = HEAP32[$433>>2]|0;
 _free(($434|0));
 $435 = $err;
 $436 = ($435|0)==(0);
 do {
  if ($436) {
   $437 = $zi;
   $438 = $zi;
   $439 = ((($438)) + 44|0);
   $440 = HEAP32[$439>>2]|0;
   $441 = (_call_ztell64($437,$440)|0);
   $442 = (getTempRet0() | 0);
   $443 = $cur_pos_inzip;
   $444 = $443;
   HEAP32[$444>>2] = $441;
   $445 = (($443) + 4)|0;
   $446 = $445;
   HEAP32[$446>>2] = $442;
   $447 = $zi;
   $448 = $zi;
   $449 = ((($448)) + 44|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = $zi;
   $452 = ((($451)) + 64|0);
   $453 = ((($452)) + 64|0);
   $454 = $453;
   $455 = $454;
   $456 = HEAP32[$455>>2]|0;
   $457 = (($454) + 4)|0;
   $458 = $457;
   $459 = HEAP32[$458>>2]|0;
   $460 = (_i64Add(($456|0),($459|0),14,0)|0);
   $461 = (getTempRet0() | 0);
   $462 = (_call_zseek64($447,$450,$460,$461,0)|0);
   $463 = ($462|0)!=(0);
   if ($463) {
    $err = -1;
   }
   $464 = $err;
   $465 = ($464|0)==(0);
   if ($465) {
    $466 = $zi;
    $467 = $zi;
    $468 = ((($467)) + 44|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = $5;
    $471 = (_zip64local_putValue($466,$469,$470,0,4)|0);
    $err = $471;
   }
   $472 = $4;
   $473 = $472;
   $474 = HEAP32[$473>>2]|0;
   $475 = (($472) + 4)|0;
   $476 = $475;
   $477 = HEAP32[$476>>2]|0;
   $478 = ($477>>>0)>(0);
   $479 = ($474>>>0)>=(4294967295);
   $480 = ($477|0)==(0);
   $481 = $480 & $479;
   $482 = $478 | $481;
   $483 = $compressed_size;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $486 = (($483) + 4)|0;
   $487 = $486;
   $488 = HEAP32[$487>>2]|0;
   $489 = ($488>>>0)>(0);
   $490 = ($485>>>0)>=(4294967295);
   $491 = ($488|0)==(0);
   $492 = $491 & $490;
   $493 = $489 | $492;
   $or$cond5 = $482 | $493;
   do {
    if ($or$cond5) {
     $494 = $zi;
     $495 = ((($494)) + 64|0);
     $496 = ((($495)) + 65656|0);
     $497 = $496;
     $498 = $497;
     $499 = HEAP32[$498>>2]|0;
     $500 = (($497) + 4)|0;
     $501 = $500;
     $502 = HEAP32[$501>>2]|0;
     $503 = ($502>>>0)>(0);
     $504 = ($499>>>0)>(0);
     $505 = ($502|0)==(0);
     $506 = $505 & $504;
     $507 = $503 | $506;
     if (!($507)) {
      $err = -103;
      break;
     }
     $508 = $zi;
     $509 = $zi;
     $510 = ((($509)) + 44|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $zi;
     $513 = ((($512)) + 64|0);
     $514 = ((($513)) + 65656|0);
     $515 = $514;
     $516 = $515;
     $517 = HEAP32[$516>>2]|0;
     $518 = (($515) + 4)|0;
     $519 = $518;
     $520 = HEAP32[$519>>2]|0;
     $521 = (_i64Add(($517|0),($520|0),4,0)|0);
     $522 = (getTempRet0() | 0);
     $523 = (_call_zseek64($508,$511,$521,$522,0)|0);
     $524 = ($523|0)!=(0);
     if ($524) {
      $err = -1;
     }
     $525 = $err;
     $526 = ($525|0)==(0);
     if ($526) {
      $527 = $zi;
      $528 = $zi;
      $529 = ((($528)) + 44|0);
      $530 = HEAP32[$529>>2]|0;
      $531 = $4;
      $532 = $531;
      $533 = HEAP32[$532>>2]|0;
      $534 = (($531) + 4)|0;
      $535 = $534;
      $536 = HEAP32[$535>>2]|0;
      $537 = (_zip64local_putValue($527,$530,$533,$536,8)|0);
      $err = $537;
     }
     $538 = $err;
     $539 = ($538|0)==(0);
     if (!($539)) {
      break;
     }
     $540 = $zi;
     $541 = $zi;
     $542 = ((($541)) + 44|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = $compressed_size;
     $545 = $544;
     $546 = HEAP32[$545>>2]|0;
     $547 = (($544) + 4)|0;
     $548 = $547;
     $549 = HEAP32[$548>>2]|0;
     $550 = (_zip64local_putValue($540,$543,$546,$549,8)|0);
     $err = $550;
    } else {
     $551 = $err;
     $552 = ($551|0)==(0);
     if ($552) {
      $553 = $zi;
      $554 = $zi;
      $555 = ((($554)) + 44|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = $compressed_size;
      $558 = $557;
      $559 = HEAP32[$558>>2]|0;
      $560 = (($557) + 4)|0;
      $561 = $560;
      $562 = HEAP32[$561>>2]|0;
      $563 = (_zip64local_putValue($553,$556,$559,$562,4)|0);
      $err = $563;
     }
     $564 = $err;
     $565 = ($564|0)==(0);
     if (!($565)) {
      break;
     }
     $566 = $zi;
     $567 = $zi;
     $568 = ((($567)) + 44|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $4;
     $571 = $570;
     $572 = HEAP32[$571>>2]|0;
     $573 = (($570) + 4)|0;
     $574 = $573;
     $575 = HEAP32[$574>>2]|0;
     $576 = (_zip64local_putValue($566,$569,$572,$575,4)|0);
     $err = $576;
    }
   } while(0);
   $577 = $zi;
   $578 = $zi;
   $579 = ((($578)) + 44|0);
   $580 = HEAP32[$579>>2]|0;
   $581 = $cur_pos_inzip;
   $582 = $581;
   $583 = HEAP32[$582>>2]|0;
   $584 = (($581) + 4)|0;
   $585 = $584;
   $586 = HEAP32[$585>>2]|0;
   $587 = (_call_zseek64($577,$580,$583,$586,0)|0);
   $588 = ($587|0)!=(0);
   if (!($588)) {
    break;
   }
   $err = -1;
  }
 } while(0);
 $589 = $zi;
 $590 = ((($589)) + 65760|0);
 $591 = $590;
 $592 = $591;
 $593 = HEAP32[$592>>2]|0;
 $594 = (($591) + 4)|0;
 $595 = $594;
 $596 = HEAP32[$595>>2]|0;
 $597 = (_i64Add(($593|0),($596|0),1,0)|0);
 $598 = (getTempRet0() | 0);
 $599 = $590;
 $600 = $599;
 HEAP32[$600>>2] = $597;
 $601 = (($599) + 4)|0;
 $602 = $601;
 HEAP32[$602>>2] = $598;
 $603 = $zi;
 $604 = ((($603)) + 56|0);
 HEAP32[$604>>2] = 0;
 $605 = $err;
 $2 = $605;
 $606 = $2;
 STACKTOP = sp;return ($606|0);
}
function _Write_Zip64EndOfCentralDirectoryLocator($zi,$0,$1) {
 $zi = $zi|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0;
 var $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $pos = sp;
 $2 = $zi;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $err = 0;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 65752|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Subtract(($10|0),($13|0),($18|0),($21|0))|0);
 $23 = (getTempRet0() | 0);
 $24 = $pos;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $2;
 $29 = $2;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_zip64local_putValue($28,$31,117853008,0,4)|0);
 $err = $32;
 $33 = $err;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $2;
  $36 = $2;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_zip64local_putValue($35,$38,0,0,4)|0);
  $err = $39;
 }
 $40 = $err;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $2;
  $43 = $2;
  $44 = ((($43)) + 44|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $pos;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (_zip64local_putValue($42,$45,$48,$51,8)|0);
  $err = $52;
 }
 $53 = $err;
 $54 = ($53|0)==(0);
 if (!($54)) {
  $60 = $err;
  STACKTOP = sp;return ($60|0);
 }
 $55 = $2;
 $56 = $2;
 $57 = ((($56)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_zip64local_putValue($55,$58,1,0,4)|0);
 $err = $59;
 $60 = $err;
 STACKTOP = sp;return ($60|0);
}
function _Write_Zip64EndOfCentralDirectoryRecord($zi,$size_centraldir,$0,$1) {
 $zi = $zi|0;
 $size_centraldir = $size_centraldir|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $Zip64DataSize = 0, $err = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $pos = sp;
 $2 = $zi;
 $3 = $size_centraldir;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $err = 0;
 $Zip64DataSize = 44;
 $9 = $2;
 $10 = $2;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_zip64local_putValue($9,$12,101075792,0,4)|0);
 $err = $13;
 $14 = $err;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $2;
  $17 = $2;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $Zip64DataSize;
  $21 = (_zip64local_putValue($16,$19,$20,0,8)|0);
  $err = $21;
 }
 $22 = $err;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = $2;
  $25 = $2;
  $26 = ((($25)) + 44|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_zip64local_putValue($24,$27,45,0,2)|0);
  $err = $28;
 }
 $29 = $err;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $2;
  $32 = $2;
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_zip64local_putValue($31,$34,45,0,2)|0);
  $err = $35;
 }
 $36 = $err;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $2;
  $39 = $2;
  $40 = ((($39)) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_zip64local_putValue($38,$41,0,0,4)|0);
  $err = $42;
 }
 $43 = $err;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $2;
  $46 = $2;
  $47 = ((($46)) + 44|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_zip64local_putValue($45,$48,0,0,4)|0);
  $err = $49;
 }
 $50 = $err;
 $51 = ($50|0)==(0);
 if ($51) {
  $52 = $2;
  $53 = $2;
  $54 = ((($53)) + 44|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $2;
  $57 = ((($56)) + 65760|0);
  $58 = $57;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_zip64local_putValue($52,$55,$60,$63,8)|0);
  $err = $64;
 }
 $65 = $err;
 $66 = ($65|0)==(0);
 if ($66) {
  $67 = $2;
  $68 = $2;
  $69 = ((($68)) + 44|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $2;
  $72 = ((($71)) + 65760|0);
  $73 = $72;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_zip64local_putValue($67,$70,$75,$78,8)|0);
  $err = $79;
 }
 $80 = $err;
 $81 = ($80|0)==(0);
 if ($81) {
  $82 = $2;
  $83 = $2;
  $84 = ((($83)) + 44|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = (_zip64local_putValue($82,$85,$86,0,8)|0);
  $err = $87;
 }
 $88 = $err;
 $89 = ($88|0)==(0);
 if (!($89)) {
  $121 = $err;
  STACKTOP = sp;return ($121|0);
 }
 $90 = $4;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = $2;
 $97 = ((($96)) + 65752|0);
 $98 = $97;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $104 = (_i64Subtract(($92|0),($95|0),($100|0),($103|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = $pos;
 $107 = $106;
 HEAP32[$107>>2] = $104;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = $105;
 $110 = $2;
 $111 = $2;
 $112 = ((($111)) + 44|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $pos;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (_zip64local_putValue($110,$113,$116,$119,8)|0);
 $err = $120;
 $121 = $err;
 STACKTOP = sp;return ($121|0);
}
function _Write_EndOfCentralDirectoryRecord($zi,$size_centraldir,$0,$1) {
 $zi = $zi|0;
 $size_centraldir = $size_centraldir|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $pos = sp;
 $2 = $zi;
 $3 = $size_centraldir;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $err = 0;
 $9 = $2;
 $10 = $2;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_zip64local_putValue($9,$12,101010256,0,4)|0);
 $err = $13;
 $14 = $err;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $2;
  $17 = $2;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_zip64local_putValue($16,$19,0,0,2)|0);
  $err = $20;
 }
 $21 = $err;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $2;
  $24 = $2;
  $25 = ((($24)) + 44|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_zip64local_putValue($23,$26,0,0,2)|0);
  $err = $27;
 }
 $28 = $err;
 $29 = ($28|0)==(0);
 do {
  if ($29) {
   $30 = $2;
   $31 = ((($30)) + 65760|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37>>>0)>(0);
   $39 = ($34>>>0)>=(65535);
   $40 = ($37|0)==(0);
   $41 = $40 & $39;
   $42 = $38 | $41;
   $43 = $2;
   $44 = $2;
   $45 = ((($44)) + 44|0);
   $46 = HEAP32[$45>>2]|0;
   if ($42) {
    $47 = (_zip64local_putValue($43,$46,65535,0,2)|0);
    $err = $47;
    break;
   } else {
    $48 = $2;
    $49 = ((($48)) + 65760|0);
    $50 = $49;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (_zip64local_putValue($43,$46,$52,0,2)|0);
    $err = $56;
    break;
   }
  }
 } while(0);
 $57 = $err;
 $58 = ($57|0)==(0);
 do {
  if ($58) {
   $59 = $2;
   $60 = ((($59)) + 65760|0);
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66>>>0)>(0);
   $68 = ($63>>>0)>=(65535);
   $69 = ($66|0)==(0);
   $70 = $69 & $68;
   $71 = $67 | $70;
   $72 = $2;
   $73 = $2;
   $74 = ((($73)) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   if ($71) {
    $76 = (_zip64local_putValue($72,$75,65535,0,2)|0);
    $err = $76;
    break;
   } else {
    $77 = $2;
    $78 = ((($77)) + 65760|0);
    $79 = $78;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($79) + 4)|0;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (_zip64local_putValue($72,$75,$81,0,2)|0);
    $err = $85;
    break;
   }
  }
 } while(0);
 $86 = $err;
 $87 = ($86|0)==(0);
 if ($87) {
  $88 = $2;
  $89 = $2;
  $90 = ((($89)) + 44|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $3;
  $93 = (_zip64local_putValue($88,$91,$92,0,4)|0);
  $err = $93;
 }
 $94 = $err;
 $95 = ($94|0)==(0);
 if (!($95)) {
  $149 = $err;
  STACKTOP = sp;return ($149|0);
 }
 $96 = $4;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $2;
 $103 = ((($102)) + 65752|0);
 $104 = $103;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (_i64Subtract(($98|0),($101|0),($106|0),($109|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = $pos;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $116 = $pos;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (($116) + 4)|0;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121>>>0)>(0);
 $123 = ($118>>>0)>=(4294967295);
 $124 = ($121|0)==(0);
 $125 = $124 & $123;
 $126 = $122 | $125;
 $127 = $2;
 $128 = $2;
 $129 = ((($128)) + 44|0);
 $130 = HEAP32[$129>>2]|0;
 if ($126) {
  $131 = (_zip64local_putValue($127,$130,-1,0,4)|0);
  $err = $131;
  $149 = $err;
  STACKTOP = sp;return ($149|0);
 } else {
  $132 = $4;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($132) + 4)|0;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = $2;
  $139 = ((($138)) + 65752|0);
  $140 = $139;
  $141 = $140;
  $142 = HEAP32[$141>>2]|0;
  $143 = (($140) + 4)|0;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (_i64Subtract(($134|0),($137|0),($142|0),($145|0))|0);
  $147 = (getTempRet0() | 0);
  $148 = (_zip64local_putValue($127,$130,$146,0,4)|0);
  $err = $148;
  $149 = $err;
  STACKTOP = sp;return ($149|0);
 }
 return (0)|0;
}
function _Write_GlobalComment($zi,$global_comment) {
 $zi = $zi|0;
 $global_comment = $global_comment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $or$cond = 0, $size_global_comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $zi;
 $1 = $global_comment;
 $err = 0;
 $size_global_comment = 0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (_strlen(($4|0))|0);
  $size_global_comment = $5;
 }
 $6 = $0;
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $size_global_comment;
 $11 = (_zip64local_putValue($6,$9,$10,0,2)|0);
 $err = $11;
 $12 = $err;
 $13 = ($12|0)==(0);
 $14 = $size_global_comment;
 $15 = ($14>>>0)>(0);
 $or$cond = $13 & $15;
 if (!($or$cond)) {
  $30 = $err;
  STACKTOP = sp;return ($30|0);
 }
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = $size_global_comment;
 $27 = (mftCall_iiiii($18|0,($21|0),($24|0),($25|0),($26|0))|0);
 $28 = $size_global_comment;
 $29 = ($27|0)!=($28|0);
 if (!($29)) {
  $30 = $err;
  STACKTOP = sp;return ($30|0);
 }
 $err = -1;
 $30 = $err;
 STACKTOP = sp;return ($30|0);
}
function _zipClose($file,$global_comment) {
 $file = $file|0;
 $global_comment = $global_comment|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Zip64EOCDpos = 0, $centraldir_pos_inzip = 0;
 var $err = 0, $ldi = 0, $or$cond = 0, $pos = 0, $size_centraldir = 0, $zi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $centraldir_pos_inzip = sp + 16|0;
 $pos = sp + 8|0;
 $Zip64EOCDpos = sp;
 $1 = $file;
 $2 = $global_comment;
 $err = 0;
 $size_centraldir = 0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -102;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 $5 = $1;
 $zi = $5;
 $6 = $zi;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  $10 = $1;
  $11 = (_zipCloseFileInZip($10)|0);
  $err = $11;
 }
 $12 = $2;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $zi;
  $15 = ((($14)) + 65768|0);
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
 }
 $17 = $zi;
 $18 = $zi;
 $19 = ((($18)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_call_ztell64($17,$20)|0);
 $22 = (getTempRet0() | 0);
 $23 = $centraldir_pos_inzip;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $err;
 $28 = ($27|0)==(0);
 L11: do {
  if ($28) {
   $29 = $zi;
   $30 = ((($29)) + 48|0);
   $31 = HEAP32[$30>>2]|0;
   $ldi = $31;
   while(1) {
    $32 = $ldi;
    $33 = ($32|0)!=(0|0);
    if (!($33)) {
     break L11;
    }
    $34 = $err;
    $35 = ($34|0)==(0);
    if ($35) {
     $36 = $ldi;
     $37 = ((($36)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38>>>0)>(0);
     if ($39) {
      $40 = $zi;
      $41 = ((($40)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = $zi;
      $44 = ((($43)) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = $zi;
      $47 = ((($46)) + 44|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = $ldi;
      $50 = ((($49)) + 16|0);
      $51 = $ldi;
      $52 = ((($51)) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (mftCall_iiiii($42|0,($45|0),($48|0),($50|0),($53|0))|0);
      $55 = $ldi;
      $56 = ((($55)) + 8|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($54|0)!=($57|0);
      if ($58) {
       $err = -1;
      }
     }
    }
    $59 = $ldi;
    $60 = ((($59)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $size_centraldir;
    $63 = (($62) + ($61))|0;
    $size_centraldir = $63;
    $64 = $ldi;
    $65 = HEAP32[$64>>2]|0;
    $ldi = $65;
   }
  }
 } while(0);
 $66 = $zi;
 $67 = ((($66)) + 48|0);
 _free_linkedlist($67);
 $68 = $centraldir_pos_inzip;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $zi;
 $75 = ((($74)) + 65752|0);
 $76 = $75;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (_i64Subtract(($70|0),($73|0),($78|0),($81|0))|0);
 $83 = (getTempRet0() | 0);
 $84 = $pos;
 $85 = $84;
 HEAP32[$85>>2] = $82;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = $83;
 $88 = $pos;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93>>>0)>(0);
 $95 = ($90>>>0)>=(4294967295);
 $96 = ($93|0)==(0);
 $97 = $96 & $95;
 $98 = $94 | $97;
 if ($98) {
  label = 17;
 } else {
  $99 = $zi;
  $100 = ((($99)) + 65760|0);
  $101 = $100;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106>>>0)>(0);
  $108 = ($103>>>0)>(65535);
  $109 = ($106|0)==(0);
  $110 = $109 & $108;
  $111 = $107 | $110;
  if ($111) {
   label = 17;
  }
 }
 if ((label|0) == 17) {
  $112 = $zi;
  $113 = $zi;
  $114 = ((($113)) + 44|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (_call_ztell64($112,$115)|0);
  $117 = (getTempRet0() | 0);
  $118 = $Zip64EOCDpos;
  $119 = $118;
  HEAP32[$119>>2] = $116;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP32[$121>>2] = $117;
  $122 = $zi;
  $123 = $size_centraldir;
  $124 = $centraldir_pos_inzip;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  (_Write_Zip64EndOfCentralDirectoryRecord($122,$123,$126,$129)|0);
  $130 = $zi;
  $131 = $Zip64EOCDpos;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($131) + 4)|0;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  (_Write_Zip64EndOfCentralDirectoryLocator($130,$133,$136)|0);
 }
 $137 = $err;
 $138 = ($137|0)==(0);
 if ($138) {
  $139 = $zi;
  $140 = $size_centraldir;
  $141 = $centraldir_pos_inzip;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = (_Write_EndOfCentralDirectoryRecord($139,$140,$143,$146)|0);
  $err = $147;
 }
 $148 = $err;
 $149 = ($148|0)==(0);
 if ($149) {
  $150 = $zi;
  $151 = $2;
  $152 = (_Write_GlobalComment($150,$151)|0);
  $err = $152;
 }
 $153 = $zi;
 $154 = ((($153)) + 20|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $zi;
 $157 = ((($156)) + 28|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $zi;
 $160 = ((($159)) + 44|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (mftCall_iii($155|0,($158|0),($161|0))|0);
 $163 = ($162|0)!=(0);
 $164 = $err;
 $165 = ($164|0)==(0);
 $or$cond = $163 & $165;
 if ($or$cond) {
  $err = -1;
 }
 $166 = $zi;
 $167 = ((($166)) + 65768|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if ($169) {
  $170 = $zi;
  $171 = ((($170)) + 65768|0);
  $172 = HEAP32[$171>>2]|0;
  _free(($172|0));
 }
 $173 = $zi;
 $174 = ($173|0)!=(0|0);
 if ($174) {
  $175 = $zi;
  _free(($175|0));
 }
 $176 = $err;
 $0 = $176;
 $177 = $0;
 STACKTOP = sp;return ($177|0);
}
function _zipRemoveExtraInfoBlock($pData,$dataLen,$sHeader) {
 $pData = $pData|0;
 $dataLen = $dataLen|0;
 $sHeader = $sHeader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dataSize = 0, $header = 0, $p = 0, $pNewHeader = 0, $pTmp = 0, $retVal = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pData;
 $2 = $dataLen;
 $3 = $sHeader;
 $4 = $1;
 $p = $4;
 $size = 0;
 $retVal = 0;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<(4);
  if (!($9)) {
   $10 = $2;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_malloc(($11|0))|0);
   $pNewHeader = $12;
   $13 = $pNewHeader;
   $pTmp = $13;
   while(1) {
    $14 = $p;
    $15 = $1;
    $16 = $2;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + ($17)|0);
    $19 = ($14>>>0)<($18>>>0);
    if (!($19)) {
     break;
    }
    $20 = $p;
    $21 = HEAP16[$20>>1]|0;
    $header = $21;
    $22 = $p;
    $23 = ((($22)) + 2|0);
    $24 = HEAP16[$23>>1]|0;
    $dataSize = $24;
    $25 = $header;
    $26 = $25 << 16 >> 16;
    $27 = $3;
    $28 = $27 << 16 >> 16;
    $29 = ($26|0)==($28|0);
    if ($29) {
     $30 = $dataSize;
     $31 = $30 << 16 >> 16;
     $32 = (($31) + 4)|0;
     $33 = $p;
     $34 = (($33) + ($32)|0);
     $p = $34;
     continue;
    } else {
     $35 = $pTmp;
     $36 = $p;
     $37 = $dataSize;
     $38 = $37 << 16 >> 16;
     $39 = (($38) + 4)|0;
     _memcpy(($35|0),($36|0),($39|0))|0;
     $40 = $dataSize;
     $41 = $40 << 16 >> 16;
     $42 = (($41) + 4)|0;
     $43 = $p;
     $44 = (($43) + ($42)|0);
     $p = $44;
     $45 = $dataSize;
     $46 = $45 << 16 >> 16;
     $47 = (($46) + 4)|0;
     $48 = $size;
     $49 = (($48) + ($47))|0;
     $size = $49;
     continue;
    }
   }
   $50 = $size;
   $51 = $2;
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)<($52|0);
   if ($53) {
    $54 = $1;
    $55 = $2;
    $56 = HEAP32[$55>>2]|0;
    _memset(($54|0),0,($56|0))|0;
    $57 = $size;
    $58 = ($57|0)>(0);
    if ($58) {
     $59 = $1;
     $60 = $pNewHeader;
     $61 = $size;
     _memcpy(($59|0),($60|0),($61|0))|0;
    }
    $62 = $size;
    $63 = $2;
    HEAP32[$63>>2] = $62;
    $retVal = 0;
   } else {
    $retVal = -1;
   }
   $64 = $pNewHeader;
   $65 = ($64|0)!=(0|0);
   if ($65) {
    $66 = $pNewHeader;
    _free(($66|0));
   }
   $67 = $retVal;
   $0 = $67;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $0 = -102;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _zip64local_SearchCentralDir64($pzlib_filefunc_def,$filestream) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $relativeOffset = 0, $uBackRead = 0, $uL = 0, $uMaxBack = 0, $uPosFound = 0, $uReadPos = 0, $uReadSize = 0;
 var $uSizeFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 48|0;
 $uSizeFile = sp + 40|0;
 $uBackRead = sp + 32|0;
 $uMaxBack = sp + 24|0;
 $uPosFound = sp + 16|0;
 $uL = sp + 64|0;
 $relativeOffset = sp + 8|0;
 $uReadPos = sp;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $uMaxBack;
 $4 = $3;
 HEAP32[$4>>2] = 65535;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $uPosFound;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = $2;
 $13 = (_call_zseek64($11,$12,0,0,2)|0);
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $15 = $0;
   $16 = $15;
   HEAP32[$16>>2] = 0;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = 0;
  } else {
   $19 = $1;
   $20 = $2;
   $21 = (_call_ztell64($19,$20)|0);
   $22 = (getTempRet0() | 0);
   $23 = $uSizeFile;
   $24 = $23;
   HEAP32[$24>>2] = $21;
   $25 = (($23) + 4)|0;
   $26 = $25;
   HEAP32[$26>>2] = $22;
   $27 = $uMaxBack;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = $uSizeFile;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($32>>>0)>($38>>>0);
   $40 = ($29>>>0)>($35>>>0);
   $41 = ($32|0)==($38|0);
   $42 = $41 & $40;
   $43 = $39 | $42;
   if ($43) {
    $44 = $uSizeFile;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = (($44) + 4)|0;
    $48 = $47;
    $49 = HEAP32[$48>>2]|0;
    $50 = $uMaxBack;
    $51 = $50;
    HEAP32[$51>>2] = $46;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $49;
   }
   $54 = (_malloc(1028)|0);
   $buf = $54;
   $55 = $buf;
   $56 = ($55|0)==(0|0);
   if ($56) {
    $57 = $0;
    $58 = $57;
    HEAP32[$58>>2] = 0;
    $59 = (($57) + 4)|0;
    $60 = $59;
    HEAP32[$60>>2] = 0;
    break;
   }
   $61 = $uBackRead;
   $62 = $61;
   HEAP32[$62>>2] = 4;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = 0;
   while(1) {
    $65 = $uBackRead;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $uMaxBack;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($71) + 4)|0;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($70>>>0)<($76>>>0);
    $78 = ($67>>>0)<($73>>>0);
    $79 = ($70|0)==($76|0);
    $80 = $79 & $78;
    $81 = $77 | $80;
    if (!($81)) {
     break;
    }
    $82 = $uBackRead;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = (_i64Add(($84|0),($87|0),1024,0)|0);
    $89 = (getTempRet0() | 0);
    $90 = $uMaxBack;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($89>>>0)>($95>>>0);
    $97 = ($88>>>0)>($92>>>0);
    $98 = ($89|0)==($95|0);
    $99 = $98 & $97;
    $100 = $96 | $99;
    if ($100) {
     $101 = $uMaxBack;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($101) + 4)|0;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $107 = $uBackRead;
     $108 = $107;
     HEAP32[$108>>2] = $103;
     $109 = (($107) + 4)|0;
     $110 = $109;
     HEAP32[$110>>2] = $106;
    } else {
     $111 = $uBackRead;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($111) + 4)|0;
     $115 = $114;
     $116 = HEAP32[$115>>2]|0;
     $117 = (_i64Add(($113|0),($116|0),1024,0)|0);
     $118 = (getTempRet0() | 0);
     $119 = $uBackRead;
     $120 = $119;
     HEAP32[$120>>2] = $117;
     $121 = (($119) + 4)|0;
     $122 = $121;
     HEAP32[$122>>2] = $118;
    }
    $123 = $uSizeFile;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($123) + 4)|0;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = $uBackRead;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = (_i64Subtract(($125|0),($128|0),($131|0),($134|0))|0);
    $136 = (getTempRet0() | 0);
    $137 = $uReadPos;
    $138 = $137;
    HEAP32[$138>>2] = $135;
    $139 = (($137) + 4)|0;
    $140 = $139;
    HEAP32[$140>>2] = $136;
    $141 = $uSizeFile;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($141) + 4)|0;
    $145 = $144;
    $146 = HEAP32[$145>>2]|0;
    $147 = $uReadPos;
    $148 = $147;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($147) + 4)|0;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (_i64Subtract(($143|0),($146|0),($149|0),($152|0))|0);
    $154 = (getTempRet0() | 0);
    $155 = (0)<($154>>>0);
    $156 = (1028)<($153>>>0);
    $157 = (0)==($154|0);
    $158 = $157 & $156;
    $159 = $155 | $158;
    if ($159) {
     $174 = 1028;
    } else {
     $160 = $uSizeFile;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = (($160) + 4)|0;
     $164 = $163;
     $165 = HEAP32[$164>>2]|0;
     $166 = $uReadPos;
     $167 = $166;
     $168 = HEAP32[$167>>2]|0;
     $169 = (($166) + 4)|0;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (_i64Subtract(($162|0),($165|0),($168|0),($171|0))|0);
     $173 = (getTempRet0() | 0);
     $174 = $172;
    }
    $uReadSize = $174;
    $175 = $1;
    $176 = $2;
    $177 = $uReadPos;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (_call_zseek64($175,$176,$179,$182,0)|0);
    $184 = ($183|0)!=(0);
    if ($184) {
     break;
    }
    $185 = $1;
    $186 = ((($185)) + 4|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $1;
    $189 = ((($188)) + 28|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $2;
    $192 = $buf;
    $193 = $uReadSize;
    $194 = (mftCall_iiiii($187|0,($190|0),($191|0),($192|0),($193|0))|0);
    $195 = $uReadSize;
    $196 = ($194|0)!=($195|0);
    if ($196) {
     break;
    }
    $197 = $uReadSize;
    $198 = (($197) - 3)|0;
    $i = $198;
    while(1) {
     $199 = $i;
     $200 = (($199) + -1)|0;
     $i = $200;
     $201 = ($199|0)>(0);
     if (!($201)) {
      break;
     }
     $202 = $buf;
     $203 = $i;
     $204 = (($202) + ($203)|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $207 = ($206|0)==(80);
     if (!($207)) {
      continue;
     }
     $208 = $buf;
     $209 = $i;
     $210 = (($208) + ($209)|0);
     $211 = ((($210)) + 1|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = ($213|0)==(75);
     if (!($214)) {
      continue;
     }
     $215 = $buf;
     $216 = $i;
     $217 = (($215) + ($216)|0);
     $218 = ((($217)) + 2|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = ($220|0)==(6);
     if (!($221)) {
      continue;
     }
     $222 = $buf;
     $223 = $i;
     $224 = (($222) + ($223)|0);
     $225 = ((($224)) + 3|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = ($227|0)==(7);
     if ($228) {
      label = 22;
      break;
     }
    }
    if ((label|0) == 22) {
     label = 0;
     $229 = $uReadPos;
     $230 = $229;
     $231 = HEAP32[$230>>2]|0;
     $232 = (($229) + 4)|0;
     $233 = $232;
     $234 = HEAP32[$233>>2]|0;
     $235 = $i;
     $236 = ($235|0)<(0);
     $237 = $236 << 31 >> 31;
     $238 = (_i64Add(($231|0),($234|0),($235|0),($237|0))|0);
     $239 = (getTempRet0() | 0);
     $240 = $uPosFound;
     $241 = $240;
     HEAP32[$241>>2] = $238;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = $239;
    }
    $244 = $uPosFound;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)!=(0);
    $251 = ($249|0)!=(0);
    $252 = $250 | $251;
    if ($252) {
     break;
    }
   }
   $253 = $buf;
   $254 = ($253|0)!=(0|0);
   if ($254) {
    $255 = $buf;
    _free(($255|0));
   }
   $256 = $uPosFound;
   $257 = $256;
   $258 = HEAP32[$257>>2]|0;
   $259 = (($256) + 4)|0;
   $260 = $259;
   $261 = HEAP32[$260>>2]|0;
   $262 = ($258|0)==(0);
   $263 = ($261|0)==(0);
   $264 = $262 & $263;
   if ($264) {
    $265 = $0;
    $266 = $265;
    HEAP32[$266>>2] = 0;
    $267 = (($265) + 4)|0;
    $268 = $267;
    HEAP32[$268>>2] = 0;
    break;
   }
   $269 = $1;
   $270 = $2;
   $271 = $uPosFound;
   $272 = $271;
   $273 = HEAP32[$272>>2]|0;
   $274 = (($271) + 4)|0;
   $275 = $274;
   $276 = HEAP32[$275>>2]|0;
   $277 = (_call_zseek64($269,$270,$273,$276,0)|0);
   $278 = ($277|0)!=(0);
   if ($278) {
    $279 = $0;
    $280 = $279;
    HEAP32[$280>>2] = 0;
    $281 = (($279) + 4)|0;
    $282 = $281;
    HEAP32[$282>>2] = 0;
    break;
   }
   $283 = $1;
   $284 = $2;
   $285 = (_zip64local_getLong($283,$284,$uL)|0);
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $0;
    $288 = $287;
    HEAP32[$288>>2] = 0;
    $289 = (($287) + 4)|0;
    $290 = $289;
    HEAP32[$290>>2] = 0;
    break;
   }
   $291 = $1;
   $292 = $2;
   $293 = (_zip64local_getLong($291,$292,$uL)|0);
   $294 = ($293|0)!=(0);
   if ($294) {
    $295 = $0;
    $296 = $295;
    HEAP32[$296>>2] = 0;
    $297 = (($295) + 4)|0;
    $298 = $297;
    HEAP32[$298>>2] = 0;
    break;
   }
   $299 = HEAP32[$uL>>2]|0;
   $300 = ($299|0)!=(0);
   if ($300) {
    $301 = $0;
    $302 = $301;
    HEAP32[$302>>2] = 0;
    $303 = (($301) + 4)|0;
    $304 = $303;
    HEAP32[$304>>2] = 0;
    break;
   }
   $305 = $1;
   $306 = $2;
   $307 = (_zip64local_getLong64($305,$306,$relativeOffset)|0);
   $308 = ($307|0)!=(0);
   if ($308) {
    $309 = $0;
    $310 = $309;
    HEAP32[$310>>2] = 0;
    $311 = (($309) + 4)|0;
    $312 = $311;
    HEAP32[$312>>2] = 0;
    break;
   }
   $313 = $1;
   $314 = $2;
   $315 = (_zip64local_getLong($313,$314,$uL)|0);
   $316 = ($315|0)!=(0);
   if ($316) {
    $317 = $0;
    $318 = $317;
    HEAP32[$318>>2] = 0;
    $319 = (($317) + 4)|0;
    $320 = $319;
    HEAP32[$320>>2] = 0;
    break;
   }
   $321 = HEAP32[$uL>>2]|0;
   $322 = ($321|0)!=(1);
   if ($322) {
    $323 = $0;
    $324 = $323;
    HEAP32[$324>>2] = 0;
    $325 = (($323) + 4)|0;
    $326 = $325;
    HEAP32[$326>>2] = 0;
    break;
   }
   $327 = $1;
   $328 = $2;
   $329 = $relativeOffset;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = (($329) + 4)|0;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (_call_zseek64($327,$328,$331,$334,0)|0);
   $336 = ($335|0)!=(0);
   if ($336) {
    $337 = $0;
    $338 = $337;
    HEAP32[$338>>2] = 0;
    $339 = (($337) + 4)|0;
    $340 = $339;
    HEAP32[$340>>2] = 0;
    break;
   }
   $341 = $1;
   $342 = $2;
   $343 = (_zip64local_getLong($341,$342,$uL)|0);
   $344 = ($343|0)!=(0);
   if ($344) {
    $345 = $0;
    $346 = $345;
    HEAP32[$346>>2] = 0;
    $347 = (($345) + 4)|0;
    $348 = $347;
    HEAP32[$348>>2] = 0;
    break;
   }
   $349 = HEAP32[$uL>>2]|0;
   $350 = ($349|0)!=(101075792);
   if ($350) {
    $351 = $0;
    $352 = $351;
    HEAP32[$352>>2] = 0;
    $353 = (($351) + 4)|0;
    $354 = $353;
    HEAP32[$354>>2] = 0;
    break;
   } else {
    $355 = $relativeOffset;
    $356 = $355;
    $357 = HEAP32[$356>>2]|0;
    $358 = (($355) + 4)|0;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = $0;
    $362 = $361;
    HEAP32[$362>>2] = $357;
    $363 = (($361) + 4)|0;
    $364 = $363;
    HEAP32[$364>>2] = $360;
    break;
   }
  }
 } while(0);
 $365 = $0;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = (($365) + 4)|0;
 $369 = $368;
 $370 = HEAP32[$369>>2]|0;
 setTempRet0(($370) | 0);
 STACKTOP = sp;return ($367|0);
}
function _zip64local_SearchCentralDir($pzlib_filefunc_def,$filestream) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $uBackRead = 0, $uMaxBack = 0, $uPosFound = 0, $uReadPos = 0, $uReadSize = 0, $uSizeFile = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $uSizeFile = sp + 32|0;
 $uBackRead = sp + 24|0;
 $uMaxBack = sp + 16|0;
 $uPosFound = sp + 8|0;
 $uReadPos = sp;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $uMaxBack;
 $4 = $3;
 HEAP32[$4>>2] = 65535;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $uPosFound;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = $2;
 $13 = (_call_zseek64($11,$12,0,0,2)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $266 = $0;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  setTempRet0(($271) | 0);
  STACKTOP = sp;return ($268|0);
 }
 $19 = $1;
 $20 = $2;
 $21 = (_call_ztell64($19,$20)|0);
 $22 = (getTempRet0() | 0);
 $23 = $uSizeFile;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $uMaxBack;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $uSizeFile;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($32>>>0)>($38>>>0);
 $40 = ($29>>>0)>($35>>>0);
 $41 = ($32|0)==($38|0);
 $42 = $41 & $40;
 $43 = $39 | $42;
 if ($43) {
  $44 = $uSizeFile;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $uMaxBack;
  $51 = $50;
  HEAP32[$51>>2] = $46;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
 }
 $54 = (_malloc(1028)|0);
 $buf = $54;
 $55 = $buf;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $0;
  $58 = $57;
  HEAP32[$58>>2] = 0;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = 0;
  $266 = $0;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  setTempRet0(($271) | 0);
  STACKTOP = sp;return ($268|0);
 }
 $61 = $uBackRead;
 $62 = $61;
 HEAP32[$62>>2] = 4;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = 0;
 while(1) {
  $65 = $uBackRead;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $uMaxBack;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($70>>>0)<($76>>>0);
  $78 = ($67>>>0)<($73>>>0);
  $79 = ($70|0)==($76|0);
  $80 = $79 & $78;
  $81 = $77 | $80;
  if (!($81)) {
   break;
  }
  $82 = $uBackRead;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + 4)|0;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (_i64Add(($84|0),($87|0),1024,0)|0);
  $89 = (getTempRet0() | 0);
  $90 = $uMaxBack;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + 4)|0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = ($89>>>0)>($95>>>0);
  $97 = ($88>>>0)>($92>>>0);
  $98 = ($89|0)==($95|0);
  $99 = $98 & $97;
  $100 = $96 | $99;
  if ($100) {
   $101 = $uMaxBack;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $uBackRead;
   $108 = $107;
   HEAP32[$108>>2] = $103;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = $106;
  } else {
   $111 = $uBackRead;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (_i64Add(($113|0),($116|0),1024,0)|0);
   $118 = (getTempRet0() | 0);
   $119 = $uBackRead;
   $120 = $119;
   HEAP32[$120>>2] = $117;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $118;
  }
  $123 = $uSizeFile;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $uBackRead;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + 4)|0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (_i64Subtract(($125|0),($128|0),($131|0),($134|0))|0);
  $136 = (getTempRet0() | 0);
  $137 = $uReadPos;
  $138 = $137;
  HEAP32[$138>>2] = $135;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $136;
  $141 = $uSizeFile;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = $uReadPos;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (_i64Subtract(($143|0),($146|0),($149|0),($152|0))|0);
  $154 = (getTempRet0() | 0);
  $155 = (0)<($154>>>0);
  $156 = (1028)<($153>>>0);
  $157 = (0)==($154|0);
  $158 = $157 & $156;
  $159 = $155 | $158;
  if ($159) {
   $174 = 1028;
  } else {
   $160 = $uSizeFile;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $163 = (($160) + 4)|0;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = $uReadPos;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + 4)|0;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = (_i64Subtract(($162|0),($165|0),($168|0),($171|0))|0);
   $173 = (getTempRet0() | 0);
   $174 = $172;
  }
  $uReadSize = $174;
  $175 = $1;
  $176 = $2;
  $177 = $uReadPos;
  $178 = $177;
  $179 = HEAP32[$178>>2]|0;
  $180 = (($177) + 4)|0;
  $181 = $180;
  $182 = HEAP32[$181>>2]|0;
  $183 = (_call_zseek64($175,$176,$179,$182,0)|0);
  $184 = ($183|0)!=(0);
  if ($184) {
   break;
  }
  $185 = $1;
  $186 = ((($185)) + 4|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $1;
  $189 = ((($188)) + 28|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $2;
  $192 = $buf;
  $193 = $uReadSize;
  $194 = (mftCall_iiiii($187|0,($190|0),($191|0),($192|0),($193|0))|0);
  $195 = $uReadSize;
  $196 = ($194|0)!=($195|0);
  if ($196) {
   break;
  }
  $197 = $uReadSize;
  $198 = (($197) - 3)|0;
  $i = $198;
  while(1) {
   $199 = $i;
   $200 = (($199) + -1)|0;
   $i = $200;
   $201 = ($199|0)>(0);
   if (!($201)) {
    break;
   }
   $202 = $buf;
   $203 = $i;
   $204 = (($202) + ($203)|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $207 = ($206|0)==(80);
   if (!($207)) {
    continue;
   }
   $208 = $buf;
   $209 = $i;
   $210 = (($208) + ($209)|0);
   $211 = ((($210)) + 1|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = ($213|0)==(75);
   if (!($214)) {
    continue;
   }
   $215 = $buf;
   $216 = $i;
   $217 = (($215) + ($216)|0);
   $218 = ((($217)) + 2|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = ($220|0)==(5);
   if (!($221)) {
    continue;
   }
   $222 = $buf;
   $223 = $i;
   $224 = (($222) + ($223)|0);
   $225 = ((($224)) + 3|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = ($227|0)==(6);
   if ($228) {
    label = 22;
    break;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   $229 = $uReadPos;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $232 = (($229) + 4)|0;
   $233 = $232;
   $234 = HEAP32[$233>>2]|0;
   $235 = $i;
   $236 = ($235|0)<(0);
   $237 = $236 << 31 >> 31;
   $238 = (_i64Add(($231|0),($234|0),($235|0),($237|0))|0);
   $239 = (getTempRet0() | 0);
   $240 = $uPosFound;
   $241 = $240;
   HEAP32[$241>>2] = $238;
   $242 = (($240) + 4)|0;
   $243 = $242;
   HEAP32[$243>>2] = $239;
  }
  $244 = $uPosFound;
  $245 = $244;
  $246 = HEAP32[$245>>2]|0;
  $247 = (($244) + 4)|0;
  $248 = $247;
  $249 = HEAP32[$248>>2]|0;
  $250 = ($246|0)!=(0);
  $251 = ($249|0)!=(0);
  $252 = $250 | $251;
  if ($252) {
   break;
  }
 }
 $253 = $buf;
 $254 = ($253|0)!=(0|0);
 if ($254) {
  $255 = $buf;
  _free(($255|0));
 }
 $256 = $uPosFound;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = (($256) + 4)|0;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = $0;
 $263 = $262;
 HEAP32[$263>>2] = $258;
 $264 = (($262) + 4)|0;
 $265 = $264;
 HEAP32[$265>>2] = $261;
 $266 = $0;
 $267 = $266;
 $268 = HEAP32[$267>>2]|0;
 $269 = (($266) + 4)|0;
 $270 = $269;
 $271 = HEAP32[$270>>2]|0;
 setTempRet0(($271) | 0);
 STACKTOP = sp;return ($268|0);
}
function _zip64local_getLong($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_zip64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $x = $6;
 $7 = $err;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $0;
  $10 = $1;
  $11 = (_zip64local_getByte($9,$10,$i)|0);
  $err = $11;
 }
 $12 = HEAP32[$i>>2]|0;
 $13 = $12 << 8;
 $14 = $x;
 $15 = (($14) + ($13))|0;
 $x = $15;
 $16 = $err;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  $20 = (_zip64local_getByte($18,$19,$i)|0);
  $err = $20;
 }
 $21 = HEAP32[$i>>2]|0;
 $22 = $21 << 16;
 $23 = $x;
 $24 = (($23) + ($22))|0;
 $x = $24;
 $25 = $err;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $0;
  $28 = $1;
  $29 = (_zip64local_getByte($27,$28,$i)|0);
  $err = $29;
 }
 $30 = HEAP32[$i>>2]|0;
 $31 = $30 << 24;
 $32 = $x;
 $33 = (($32) + ($31))|0;
 $x = $33;
 $34 = $err;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = $x;
  $37 = $2;
  HEAP32[$37>>2] = $36;
  $39 = $err;
  STACKTOP = sp;return ($39|0);
 } else {
  $38 = $2;
  HEAP32[$38>>2] = 0;
  $39 = $err;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _zip64local_getLong64($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp;
 $i = sp + 12|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_zip64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $7 = ($6|0)<(0);
 $8 = $7 << 31 >> 31;
 $9 = $x;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = $err;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $0;
  $16 = $1;
  $17 = (_zip64local_getByte($15,$16,$i)|0);
  $err = $17;
 }
 $18 = HEAP32[$i>>2]|0;
 $19 = ($18|0)<(0);
 $20 = $19 << 31 >> 31;
 $21 = (_bitshift64Shl(($18|0),($20|0),8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $x;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_i64Add(($25|0),($28|0),($21|0),($22|0))|0);
 $30 = (getTempRet0() | 0);
 $31 = $x;
 $32 = $31;
 HEAP32[$32>>2] = $29;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 $35 = $err;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $0;
  $38 = $1;
  $39 = (_zip64local_getByte($37,$38,$i)|0);
  $err = $39;
 }
 $40 = HEAP32[$i>>2]|0;
 $41 = ($40|0)<(0);
 $42 = $41 << 31 >> 31;
 $43 = (_bitshift64Shl(($40|0),($42|0),16)|0);
 $44 = (getTempRet0() | 0);
 $45 = $x;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_i64Add(($47|0),($50|0),($43|0),($44|0))|0);
 $52 = (getTempRet0() | 0);
 $53 = $x;
 $54 = $53;
 HEAP32[$54>>2] = $51;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $err;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = $0;
  $60 = $1;
  $61 = (_zip64local_getByte($59,$60,$i)|0);
  $err = $61;
 }
 $62 = HEAP32[$i>>2]|0;
 $63 = ($62|0)<(0);
 $64 = $63 << 31 >> 31;
 $65 = (_bitshift64Shl(($62|0),($64|0),24)|0);
 $66 = (getTempRet0() | 0);
 $67 = $x;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (_i64Add(($69|0),($72|0),($65|0),($66|0))|0);
 $74 = (getTempRet0() | 0);
 $75 = $x;
 $76 = $75;
 HEAP32[$76>>2] = $73;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = $err;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $0;
  $82 = $1;
  $83 = (_zip64local_getByte($81,$82,$i)|0);
  $err = $83;
 }
 $84 = HEAP32[$i>>2]|0;
 $85 = ($84|0)<(0);
 $85 << 31 >> 31;
 $86 = $x;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (_i64Add(($88|0),($91|0),0,($84|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = $x;
 $95 = $94;
 HEAP32[$95>>2] = $92;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $93;
 $98 = $err;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = $0;
  $101 = $1;
  $102 = (_zip64local_getByte($100,$101,$i)|0);
  $err = $102;
 }
 $103 = HEAP32[$i>>2]|0;
 $104 = ($103|0)<(0);
 $105 = $104 << 31 >> 31;
 $106 = (_bitshift64Shl(($103|0),($105|0),40)|0);
 $107 = (getTempRet0() | 0);
 $108 = $x;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 $111 = (($108) + 4)|0;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (_i64Add(($110|0),($113|0),($106|0),($107|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = $x;
 $117 = $116;
 HEAP32[$117>>2] = $114;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $115;
 $120 = $err;
 $121 = ($120|0)==(0);
 if ($121) {
  $122 = $0;
  $123 = $1;
  $124 = (_zip64local_getByte($122,$123,$i)|0);
  $err = $124;
 }
 $125 = HEAP32[$i>>2]|0;
 $126 = ($125|0)<(0);
 $127 = $126 << 31 >> 31;
 $128 = (_bitshift64Shl(($125|0),($127|0),48)|0);
 $129 = (getTempRet0() | 0);
 $130 = $x;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (_i64Add(($132|0),($135|0),($128|0),($129|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = $x;
 $139 = $138;
 HEAP32[$139>>2] = $136;
 $140 = (($138) + 4)|0;
 $141 = $140;
 HEAP32[$141>>2] = $137;
 $142 = $err;
 $143 = ($142|0)==(0);
 if ($143) {
  $144 = $0;
  $145 = $1;
  $146 = (_zip64local_getByte($144,$145,$i)|0);
  $err = $146;
 }
 $147 = HEAP32[$i>>2]|0;
 $148 = ($147|0)<(0);
 $149 = $148 << 31 >> 31;
 $150 = (_bitshift64Shl(($147|0),($149|0),56)|0);
 $151 = (getTempRet0() | 0);
 $152 = $x;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + 4)|0;
 $156 = $155;
 $157 = HEAP32[$156>>2]|0;
 $158 = (_i64Add(($154|0),($157|0),($150|0),($151|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = $x;
 $161 = $160;
 HEAP32[$161>>2] = $158;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $159;
 $164 = $err;
 $165 = ($164|0)==(0);
 if ($165) {
  $166 = $x;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $2;
  $173 = $172;
  $174 = $173;
  HEAP32[$174>>2] = $168;
  $175 = (($173) + 4)|0;
  $176 = $175;
  HEAP32[$176>>2] = $171;
  $182 = $err;
  STACKTOP = sp;return ($182|0);
 } else {
  $177 = $2;
  $178 = $177;
  $179 = $178;
  HEAP32[$179>>2] = 0;
  $180 = (($178) + 4)|0;
  $181 = $180;
  HEAP32[$181>>2] = 0;
  $182 = $err;
  STACKTOP = sp;return ($182|0);
 }
 return (0)|0;
}
function _zip64local_getShort($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_zip64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $x = $6;
 $7 = $err;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $0;
  $10 = $1;
  $11 = (_zip64local_getByte($9,$10,$i)|0);
  $err = $11;
 }
 $12 = HEAP32[$i>>2]|0;
 $13 = $12 << 8;
 $14 = $x;
 $15 = (($14) + ($13))|0;
 $x = $15;
 $16 = $err;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $x;
  $19 = $2;
  HEAP32[$19>>2] = $18;
  $21 = $err;
  STACKTOP = sp;return ($21|0);
 } else {
  $20 = $2;
  HEAP32[$20>>2] = 0;
  $21 = $err;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _add_data_in_datablock($ll,$buf,$len) {
 $ll = $ll|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $copy_this = 0, $from_copy = 0, $i = 0, $ldi = 0, $to_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ll;
 $2 = $buf;
 $3 = $len;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -104;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_allocate_new_datablock()|0);
  $11 = $1;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $1;
  HEAP32[$13>>2] = $10;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $0 = -104;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 }
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $ldi = $19;
 $20 = $2;
 $from_copy = $20;
 while(1) {
  $21 = $3;
  $22 = ($21>>>0)>(0);
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $ldi;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = (_allocate_new_datablock()|0);
   $28 = $ldi;
   HEAP32[$28>>2] = $27;
   $29 = $ldi;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    label = 10;
    break;
   }
   $32 = $ldi;
   $33 = HEAP32[$32>>2]|0;
   $ldi = $33;
   $34 = $ldi;
   $35 = $1;
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = $34;
  }
  $37 = $ldi;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $3;
  $41 = ($39>>>0)<($40>>>0);
  if ($41) {
   $42 = $ldi;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $copy_this = $44;
  } else {
   $45 = $3;
   $copy_this = $45;
  }
  $46 = $ldi;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $ldi;
  $50 = ((($49)) + 16|0);
  $51 = (($50) + ($48)|0);
  $to_copy = $51;
  $i = 0;
  while(1) {
   $52 = $i;
   $53 = $copy_this;
   $54 = ($52>>>0)<($53>>>0);
   if (!($54)) {
    break;
   }
   $55 = $from_copy;
   $56 = $i;
   $57 = (($55) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $to_copy;
   $60 = $i;
   $61 = (($59) + ($60)|0);
   HEAP8[$61>>0] = $58;
   $62 = $i;
   $63 = (($62) + 1)|0;
   $i = $63;
  }
  $64 = $copy_this;
  $65 = $ldi;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($64))|0;
  HEAP32[$66>>2] = $68;
  $69 = $copy_this;
  $70 = $ldi;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) - ($69))|0;
  HEAP32[$71>>2] = $73;
  $74 = $copy_this;
  $75 = $from_copy;
  $76 = (($75) + ($74)|0);
  $from_copy = $76;
  $77 = $copy_this;
  $78 = $3;
  $79 = (($78) - ($77))|0;
  $3 = $79;
 }
 if ((label|0) == 10) {
  $0 = -104;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _init_linkedlist($ll) {
 $ll = $ll|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ll;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _zip64local_putValue($pzlib_filefunc_def,$filestream,$0,$1,$nbByte) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $0 = $0|0;
 $1 = $1|0;
 $nbByte = $nbByte|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $n = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $buf = sp + 32|0;
 $3 = $pzlib_filefunc_def;
 $4 = $filestream;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $6 = $nbByte;
 $n = 0;
 while(1) {
  $11 = $n;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  $14 = $5;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  if (!($13)) {
   break;
  }
  $20 = $16 & 255;
  $21 = $20&255;
  $22 = $n;
  $23 = (($buf) + ($22)|0);
  HEAP8[$23>>0] = $21;
  $24 = $5;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_bitshift64Lshr(($26|0),($29|0),8)|0);
  $31 = (getTempRet0() | 0);
  $32 = $5;
  $33 = $32;
  HEAP32[$33>>2] = $30;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = $n;
  $37 = (($36) + 1)|0;
  $n = $37;
 }
 $38 = ($16|0)!=(0);
 $39 = ($19|0)!=(0);
 $40 = $38 | $39;
 L5: do {
  if ($40) {
   $n = 0;
   while(1) {
    $41 = $n;
    $42 = $6;
    $43 = ($41|0)<($42|0);
    if (!($43)) {
     break L5;
    }
    $44 = $n;
    $45 = (($buf) + ($44)|0);
    HEAP8[$45>>0] = -1;
    $46 = $n;
    $47 = (($46) + 1)|0;
    $n = $47;
   }
  }
 } while(0);
 $48 = $3;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $3;
 $52 = ((($51)) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $4;
 $55 = $6;
 $56 = (mftCall_iiiii($50|0,($53|0),($54|0),($buf|0),($55|0))|0);
 $57 = $6;
 $58 = ($56|0)!=($57|0);
 if ($58) {
  $2 = -1;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 } else {
  $2 = 0;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _zip64local_TmzDateToDosDate($ptm) {
 $ptm = $ptm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $year = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptm;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $year = $3;
 $4 = $year;
 $5 = ($4>>>0)>=(1980);
 $6 = $year;
 if ($5) {
  $7 = (($6) - 1980)|0;
  $year = $7;
 } else {
  $8 = ($6>>>0)>=(80);
  if ($8) {
   $9 = $year;
   $10 = (($9) - 80)|0;
   $year = $10;
  }
 }
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = $17<<5;
 $19 = (($13) + ($18))|0;
 $20 = $year;
 $21 = $20<<9;
 $22 = (($19) + ($21))|0;
 $23 = $22 << 16;
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25>>>0) / 2)&-1;
 $27 = $0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29<<5;
 $31 = (($26) + ($30))|0;
 $32 = $0;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34<<11;
 $36 = (($31) + ($35))|0;
 $37 = $23 | $36;
 STACKTOP = sp;return ($37|0);
}
function _zip64local_putValue_inmemory($dest,$0,$1,$nbByte) {
 $dest = $dest|0;
 $0 = $0|0;
 $1 = $1|0;
 $nbByte = $nbByte|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $dest;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $nbByte;
 $9 = $2;
 $buf = $9;
 $n = 0;
 while(1) {
  $10 = $n;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  $13 = $3;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  if (!($12)) {
   break;
  }
  $19 = $15 & 255;
  $20 = $19&255;
  $21 = $n;
  $22 = $buf;
  $23 = (($22) + ($21)|0);
  HEAP8[$23>>0] = $20;
  $24 = $3;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_bitshift64Lshr(($26|0),($29|0),8)|0);
  $31 = (getTempRet0() | 0);
  $32 = $3;
  $33 = $32;
  HEAP32[$33>>2] = $30;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = $n;
  $37 = (($36) + 1)|0;
  $n = $37;
 }
 $38 = ($15|0)!=(0);
 $39 = ($18|0)!=(0);
 $40 = $38 | $39;
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $n = 0;
 while(1) {
  $41 = $n;
  $42 = $4;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $n;
  $45 = $buf;
  $46 = (($45) + ($44)|0);
  HEAP8[$46>>0] = -1;
  $47 = $n;
  $48 = (($47) + 1)|0;
  $n = $48;
 }
 STACKTOP = sp;return;
}
function _zip64FlushWriteBuffer($zi) {
 $zi = $zi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $zi;
 $err = 0;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 64|0);
 $12 = ((($11)) + 100|0);
 $13 = $0;
 $14 = ((($13)) + 64|0);
 $15 = ((($14)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (mftCall_iiiii($3|0,($6|0),($9|0),($12|0),($16|0))|0);
 $18 = $0;
 $19 = ((($18)) + 64|0);
 $20 = ((($19)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($17|0)!=($21|0);
 if ($22) {
  $err = -1;
 }
 $23 = $0;
 $24 = ((($23)) + 64|0);
 $25 = ((($24)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 64|0);
 $29 = ((($28)) + 65664|0);
 $30 = $29;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Add(($32|0),($35|0),($26|0),0)|0);
 $37 = (getTempRet0() | 0);
 $38 = $29;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $0;
 $43 = ((($42)) + 64|0);
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $0;
 $47 = ((($46)) + 64|0);
 $48 = ((($47)) + 65672|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (_i64Add(($51|0),($54|0),($45|0),0)|0);
 $56 = (getTempRet0() | 0);
 $57 = $48;
 $58 = $57;
 HEAP32[$58>>2] = $55;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = $56;
 $61 = $0;
 $62 = ((($61)) + 64|0);
 $63 = ((($62)) + 8|0);
 HEAP32[$63>>2] = 0;
 $64 = $0;
 $65 = ((($64)) + 64|0);
 $66 = ((($65)) + 60|0);
 HEAP32[$66>>2] = 0;
 $67 = $err;
 STACKTOP = sp;return ($67|0);
}
function _free_linkedlist($ll) {
 $ll = $ll|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ll;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free_datablock($2);
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function _free_datablock($ldi) {
 $ldi = $ldi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ldinext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ldi;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $ldinext = $4;
  $5 = $0;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $0;
   _free(($7|0));
  }
  $8 = $ldinext;
  $0 = $8;
 }
 STACKTOP = sp;return;
}
function _allocate_new_datablock() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ldi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_malloc(4096)|0);
 $ldi = $0;
 $1 = $ldi;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $8 = $ldi;
  STACKTOP = sp;return ($8|0);
 }
 $3 = $ldi;
 HEAP32[$3>>2] = 0;
 $4 = $ldi;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $ldi;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 4080;
 $8 = $ldi;
 STACKTOP = sp;return ($8|0);
}
function _zip64local_getByte($pzlib_filefunc_def,$filestream,$pi) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 20|0;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $pi;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = (mftCall_iiiii($6|0,($9|0),($10|0),($c|0),1)|0);
 $err = $11;
 $12 = $err;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = HEAP8[$c>>0]|0;
  $15 = $14&255;
  $16 = $3;
  HEAP32[$16>>2] = $15;
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $17 = $1;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = (mftCall_iii($19|0,($22|0),($23|0))|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _unzStringFileNameCompare($fileName1,$fileName2,$iCaseSensitivity) {
 $fileName1 = $fileName1|0;
 $fileName2 = $fileName2|0;
 $iCaseSensitivity = $iCaseSensitivity|0;
 var $$iCaseSensitivity = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fileName1;
 $2 = $fileName2;
 $3 = $iCaseSensitivity;
 $4 = $3;
 $5 = ($4|0)==(0);
 $$iCaseSensitivity = $5 ? 1 : $iCaseSensitivity;
 $3 = $$iCaseSensitivity;
 $6 = $3;
 $7 = ($6|0)==(1);
 $8 = $1;
 $9 = $2;
 if ($7) {
  $10 = (_strcmp(($8|0),($9|0))|0);
  $0 = $10;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = (_strcmpcasenosensitive_internal($8,$9)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _unzOpen2($path,$pzlib_filefunc32_def) {
 $path = $path|0;
 $pzlib_filefunc32_def = $pzlib_filefunc32_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zlib_filefunc64_32_def_fill = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zlib_filefunc64_32_def_fill = sp;
 $1 = $path;
 $2 = $pzlib_filefunc32_def;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  _fill_zlib_filefunc64_32_def_from_filefunc32($zlib_filefunc64_32_def_fill,$5);
  $6 = $1;
  $7 = (_unzOpenInternal($6,$zlib_filefunc64_32_def_fill,0)|0);
  $0 = $7;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = $1;
  $9 = (_unzOpenInternal($8,0,0)|0);
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _unzOpen2_64($path,$pzlib_filefunc_def) {
 $path = $path|0;
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zlib_filefunc64_32_def_fill = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zlib_filefunc64_32_def_fill = sp;
 $1 = $path;
 $2 = $pzlib_filefunc_def;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  ;HEAP32[$zlib_filefunc64_32_def_fill>>2]=HEAP32[$5>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+20>>2]=HEAP32[$5+20>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+24>>2]=HEAP32[$5+24>>2]|0;HEAP32[$zlib_filefunc64_32_def_fill+28>>2]=HEAP32[$5+28>>2]|0;
  $6 = ((($zlib_filefunc64_32_def_fill)) + 36|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($zlib_filefunc64_32_def_fill)) + 40|0);
  HEAP32[$7>>2] = 0;
  $8 = $1;
  $9 = (_unzOpenInternal($8,$zlib_filefunc64_32_def_fill,1)|0);
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $1;
  $11 = (_unzOpenInternal($10,0,1)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _unzOpen($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = (_unzOpenInternal($1,0,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _unzOpen64($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = (_unzOpenInternal($1,0,1)|0);
 STACKTOP = sp;return ($2|0);
}
function _unzClose($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -102;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $4 = $1;
 $s = $4;
 $5 = $s;
 $6 = ((($5)) + 224|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  (_unzCloseCurrentFile($9)|0);
 }
 $10 = $s;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $s;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $s;
 $17 = ((($16)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 (mftCall_iii($12|0,($15|0),($18|0))|0);
 $19 = $s;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $s;
  _free(($21|0));
 }
 $0 = 0;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _unzCloseCurrentFile($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pfile_in_zip_read_info = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $err = 0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -102;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $4 = $1;
 $s = $4;
 $5 = $s;
 $6 = ((($5)) + 224|0);
 $7 = HEAP32[$6>>2]|0;
 $pfile_in_zip_read_info = $7;
 $8 = $pfile_in_zip_read_info;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -102;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $10 = $pfile_in_zip_read_info;
 $11 = ((($10)) + 128|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==(0);
 $19 = ($17|0)==(0);
 $20 = $18 & $19;
 if ($20) {
  $21 = $pfile_in_zip_read_info;
  $22 = ((($21)) + 200|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $25 = $pfile_in_zip_read_info;
   $26 = ((($25)) + 112|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $pfile_in_zip_read_info;
   $29 = ((($28)) + 116|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27|0)!=($30|0);
   if ($31) {
    $err = -105;
   }
  }
 }
 $32 = $pfile_in_zip_read_info;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $pfile_in_zip_read_info;
  $36 = HEAP32[$35>>2]|0;
  _free(($36|0));
 }
 $37 = $pfile_in_zip_read_info;
 HEAP32[$37>>2] = 0;
 $38 = $pfile_in_zip_read_info;
 $39 = ((($38)) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(8);
 if ($41) {
  $42 = $pfile_in_zip_read_info;
  $43 = ((($42)) + 4|0);
  (_inflateEnd(($43|0))|0);
 }
 $44 = $pfile_in_zip_read_info;
 $45 = ((($44)) + 72|0);
 HEAP32[$45>>2] = 0;
 $46 = $pfile_in_zip_read_info;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $pfile_in_zip_read_info;
  _free(($48|0));
 }
 $49 = $s;
 $50 = ((($49)) + 224|0);
 HEAP32[$50>>2] = 0;
 $51 = $err;
 $0 = $51;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _unzGetGlobalInfo64($file,$pglobal_info) {
 $file = $file|0;
 $pglobal_info = $pglobal_info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $pglobal_info;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -102;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $5 = $1;
  $s = $5;
  $6 = $2;
  $7 = $s;
  $8 = ((($7)) + 56|0);
  ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _unzGetGlobalInfo($file,$pglobal_info32) {
 $file = $file|0;
 $pglobal_info32 = $pglobal_info32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $pglobal_info32;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -102;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $5 = $1;
  $s = $5;
  $6 = $s;
  $7 = ((($6)) + 56|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  HEAP32[$14>>2] = $10;
  $15 = $s;
  $16 = ((($15)) + 56|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = $18;
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _unzGetCurrentFileInfo64($file,$pfile_info,$szFileName,$fileNameBufferSize,$extraField,$extraFieldBufferSize,$szComment,$commentBufferSize) {
 $file = $file|0;
 $pfile_info = $pfile_info|0;
 $szFileName = $szFileName|0;
 $fileNameBufferSize = $fileNameBufferSize|0;
 $extraField = $extraField|0;
 $extraFieldBufferSize = $extraFieldBufferSize|0;
 $szComment = $szComment|0;
 $commentBufferSize = $commentBufferSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $pfile_info;
 $2 = $szFileName;
 $3 = $fileNameBufferSize;
 $4 = $extraField;
 $5 = $extraFieldBufferSize;
 $6 = $szComment;
 $7 = $commentBufferSize;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = (_unz64local_GetCurrentFileInfoInternal($8,$9,0,$10,$11,$12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _unzGetCurrentFileInfo($file,$pfile_info,$szFileName,$fileNameBufferSize,$extraField,$extraFieldBufferSize,$szComment,$commentBufferSize) {
 $file = $file|0;
 $pfile_info = $pfile_info|0;
 $szFileName = $szFileName|0;
 $fileNameBufferSize = $fileNameBufferSize|0;
 $extraField = $extraField|0;
 $extraFieldBufferSize = $extraFieldBufferSize|0;
 $szComment = $szComment|0;
 $commentBufferSize = $commentBufferSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $err = 0, $file_info64 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file_info64 = sp;
 $0 = $file;
 $1 = $pfile_info;
 $2 = $szFileName;
 $3 = $fileNameBufferSize;
 $4 = $extraField;
 $5 = $extraFieldBufferSize;
 $6 = $szComment;
 $7 = $commentBufferSize;
 $8 = $0;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = (_unz64local_GetCurrentFileInfoInternal($8,$file_info64,0,$9,$10,$11,$12,$13,$14)|0);
 $err = $15;
 $16 = $err;
 $17 = ($16|0)==(0);
 $18 = $1;
 $19 = ($18|0)!=(0|0);
 $or$cond = $17 & $19;
 if (!($or$cond)) {
  $87 = $err;
  STACKTOP = sp;return ($87|0);
 }
 $20 = HEAP32[$file_info64>>2]|0;
 $21 = $1;
 HEAP32[$21>>2] = $20;
 $22 = ((($file_info64)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = $23;
 $26 = ((($file_info64)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 HEAP32[$29>>2] = $27;
 $30 = ((($file_info64)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = ((($file_info64)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $1;
 $37 = ((($36)) + 16|0);
 HEAP32[$37>>2] = $35;
 $38 = ((($file_info64)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = ((($40)) + 20|0);
 HEAP32[$41>>2] = $39;
 $42 = ((($file_info64)) + 40|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $1;
 $45 = ((($44)) + 32|0);
 HEAP32[$45>>2] = $43;
 $46 = ((($file_info64)) + 44|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = ((($48)) + 36|0);
 HEAP32[$49>>2] = $47;
 $50 = ((($file_info64)) + 48|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $1;
 $53 = ((($52)) + 40|0);
 HEAP32[$53>>2] = $51;
 $54 = ((($file_info64)) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $1;
 $57 = ((($56)) + 44|0);
 HEAP32[$57>>2] = $55;
 $58 = ((($file_info64)) + 56|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = ((($60)) + 48|0);
 HEAP32[$61>>2] = $59;
 $62 = ((($file_info64)) + 60|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $1;
 $65 = ((($64)) + 52|0);
 HEAP32[$65>>2] = $63;
 $66 = $1;
 $67 = ((($66)) + 56|0);
 $68 = ((($file_info64)) + 64|0);
 ;HEAP32[$67>>2]=HEAP32[$68>>2]|0;HEAP32[$67+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$68+12>>2]|0;HEAP32[$67+16>>2]=HEAP32[$68+16>>2]|0;HEAP32[$67+20>>2]=HEAP32[$68+20>>2]|0;
 $69 = ((($file_info64)) + 24|0);
 $70 = $69;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = $1;
 $77 = ((($76)) + 24|0);
 HEAP32[$77>>2] = $72;
 $78 = ((($file_info64)) + 32|0);
 $79 = $78;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = $1;
 $86 = ((($85)) + 28|0);
 HEAP32[$86>>2] = $81;
 $87 = $err;
 STACKTOP = sp;return ($87|0);
}
function _unzGoToFirstFile($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $err = 0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -102;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $4 = $1;
  $s = $4;
  $5 = $s;
  $6 = ((($5)) + 120|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $s;
  $14 = ((($13)) + 88|0);
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $9;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $12;
  $19 = $s;
  $20 = ((($19)) + 80|0);
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = 0;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = $1;
  $26 = $s;
  $27 = ((($26)) + 128|0);
  $28 = $s;
  $29 = ((($28)) + 216|0);
  $30 = (_unz64local_GetCurrentFileInfoInternal($25,$27,$29,0,0,0,0,0,0)|0);
  $err = $30;
  $31 = $err;
  $32 = ($31|0)==(0);
  $33 = $32&1;
  $34 = ($33|0)<(0);
  $35 = $34 << 31 >> 31;
  $36 = $s;
  $37 = ((($36)) + 96|0);
  $38 = $37;
  $39 = $38;
  HEAP32[$39>>2] = $33;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $35;
  $42 = $err;
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _unzGoToNextFile($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = -102;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $4 = $1;
 $s = $4;
 $5 = $s;
 $6 = ((($5)) + 96|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)!=(0);
 $14 = ($12|0)!=(0);
 $15 = $13 | $14;
 if (!($15)) {
  $0 = -100;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $16 = $s;
 $17 = ((($16)) + 56|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)!=(65535);
 $25 = ($23|0)!=(0);
 $26 = $24 | $25;
 if ($26) {
  $27 = $s;
  $28 = ((($27)) + 80|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_i64Add(($31|0),($34|0),1,0)|0);
  $36 = (getTempRet0() | 0);
  $37 = $s;
  $38 = ((($37)) + 56|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($35|0)==($41|0);
  $46 = ($36|0)==($44|0);
  $47 = $45 & $46;
  if ($47) {
   $0 = -100;
   $109 = $0;
   STACKTOP = sp;return ($109|0);
  }
 }
 $48 = $s;
 $49 = ((($48)) + 128|0);
 $50 = ((($49)) + 40|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (46 + ($51))|0;
 $53 = $s;
 $54 = ((($53)) + 128|0);
 $55 = ((($54)) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($52) + ($56))|0;
 $58 = $s;
 $59 = ((($58)) + 128|0);
 $60 = ((($59)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($57) + ($61))|0;
 $63 = $s;
 $64 = ((($63)) + 88|0);
 $65 = $64;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (_i64Add(($67|0),($70|0),($62|0),0)|0);
 $72 = (getTempRet0() | 0);
 $73 = $64;
 $74 = $73;
 HEAP32[$74>>2] = $71;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $77 = $s;
 $78 = ((($77)) + 80|0);
 $79 = $78;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (_i64Add(($81|0),($84|0),1,0)|0);
 $86 = (getTempRet0() | 0);
 $87 = $78;
 $88 = $87;
 HEAP32[$88>>2] = $85;
 $89 = (($87) + 4)|0;
 $90 = $89;
 HEAP32[$90>>2] = $86;
 $91 = $1;
 $92 = $s;
 $93 = ((($92)) + 128|0);
 $94 = $s;
 $95 = ((($94)) + 216|0);
 $96 = (_unz64local_GetCurrentFileInfoInternal($91,$93,$95,0,0,0,0,0,0)|0);
 $err = $96;
 $97 = $err;
 $98 = ($97|0)==(0);
 $99 = $98&1;
 $100 = ($99|0)<(0);
 $101 = $100 << 31 >> 31;
 $102 = $s;
 $103 = ((($102)) + 96|0);
 $104 = $103;
 $105 = $104;
 HEAP32[$105>>2] = $99;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $101;
 $108 = $err;
 $0 = $108;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _unzLocateFile($file,$szFileName,$iCaseSensitivity) {
 $file = $file|0;
 $szFileName = $szFileName|0;
 $iCaseSensitivity = $iCaseSensitivity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $cur_file_infoSaved = 0, $cur_file_info_internalSaved = 0, $err = 0, $num_fileSaved = 0, $pos_in_central_dirSaved = 0, $s = 0, $szCurrentFileName = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cur_file_infoSaved = sp + 24|0;
 $cur_file_info_internalSaved = sp + 16|0;
 $num_fileSaved = sp + 8|0;
 $pos_in_central_dirSaved = sp;
 $szCurrentFileName = sp + 136|0;
 $1 = $file;
 $2 = $szFileName;
 $3 = $iCaseSensitivity;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -102;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $6 = $2;
 $7 = (_strlen(($6|0))|0);
 $8 = ($7>>>0)>=(256);
 if ($8) {
  $0 = -102;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $9 = $1;
 $s = $9;
 $10 = $s;
 $11 = ((($10)) + 96|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)!=(0);
 $19 = ($17|0)!=(0);
 $20 = $18 | $19;
 if (!($20)) {
  $0 = -100;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $21 = $s;
 $22 = ((($21)) + 80|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $num_fileSaved;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $s;
 $34 = ((($33)) + 88|0);
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $pos_in_central_dirSaved;
 $42 = $41;
 HEAP32[$42>>2] = $37;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $45 = $s;
 $46 = ((($45)) + 128|0);
 dest=$cur_file_infoSaved; src=$46; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $47 = $s;
 $48 = ((($47)) + 216|0);
 ;HEAP32[$cur_file_info_internalSaved>>2]=HEAP32[$48>>2]|0;HEAP32[$cur_file_info_internalSaved+4>>2]=HEAP32[$48+4>>2]|0;
 $49 = $1;
 $50 = (_unzGoToFirstFile($49)|0);
 $err = $50;
 while(1) {
  $51 = $err;
  $52 = ($51|0)==(0);
  if (!($52)) {
   label = 13;
   break;
  }
  $53 = $1;
  $54 = (_unzGetCurrentFileInfo64($53,0,$szCurrentFileName,256,0,0,0,0)|0);
  $err = $54;
  $55 = $err;
  $56 = ($55|0)==(0);
  if (!($56)) {
   continue;
  }
  $57 = $2;
  $58 = $3;
  $59 = (_unzStringFileNameCompare($szCurrentFileName,$57,$58)|0);
  $60 = ($59|0)==(0);
  if ($60) {
   label = 11;
   break;
  }
  $61 = $1;
  $62 = (_unzGoToNextFile($61)|0);
  $err = $62;
 }
 if ((label|0) == 11) {
  $0 = 0;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 else if ((label|0) == 13) {
  $63 = $num_fileSaved;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = $s;
  $70 = ((($69)) + 80|0);
  $71 = $70;
  $72 = $71;
  HEAP32[$72>>2] = $65;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $68;
  $75 = $pos_in_central_dirSaved;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $s;
  $82 = ((($81)) + 88|0);
  $83 = $82;
  $84 = $83;
  HEAP32[$84>>2] = $77;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $80;
  $87 = $s;
  $88 = ((($87)) + 128|0);
  dest=$88; src=$cur_file_infoSaved; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $89 = $s;
  $90 = ((($89)) + 216|0);
  ;HEAP32[$90>>2]=HEAP32[$cur_file_info_internalSaved>>2]|0;HEAP32[$90+4>>2]=HEAP32[$cur_file_info_internalSaved+4>>2]|0;
  $91 = $err;
  $0 = $91;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function _unzGetFilePos64($file,$file_pos) {
 $file = $file|0;
 $file_pos = $file_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $file_pos;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $0 = -102;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $7 = $1;
 $s = $7;
 $8 = $s;
 $9 = ((($8)) + 96|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)!=(0);
 $17 = ($15|0)!=(0);
 $18 = $16 | $17;
 if ($18) {
  $19 = $s;
  $20 = ((($19)) + 88|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = $23;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $26;
  $32 = $s;
  $33 = ((($32)) + 80|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $2;
  $41 = ((($40)) + 8|0);
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = $36;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $39;
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $0 = -100;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _unzGetFilePos($file,$file_pos) {
 $file = $file|0;
 $file_pos = $file_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $file_pos64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file_pos64 = sp;
 $0 = $file;
 $1 = $file_pos;
 $2 = $0;
 $3 = (_unzGetFilePos64($2,$file_pos64)|0);
 $err = $3;
 $4 = $err;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $6 = $file_pos64;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 HEAP32[$12>>2] = $8;
 $13 = ((($file_pos64)) + 8|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $16;
 $22 = $err;
 STACKTOP = sp;return ($22|0);
}
function _unzGoToFilePos64($file,$file_pos) {
 $file = $file|0;
 $file_pos = $file_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $or$cond = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $file_pos;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $0 = -102;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 } else {
  $7 = $1;
  $s = $7;
  $8 = $2;
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = $s;
  $16 = ((($15)) + 88|0);
  $17 = $16;
  $18 = $17;
  HEAP32[$18>>2] = $11;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $14;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $s;
  $30 = ((($29)) + 80|0);
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $25;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $28;
  $35 = $1;
  $36 = $s;
  $37 = ((($36)) + 128|0);
  $38 = $s;
  $39 = ((($38)) + 216|0);
  $40 = (_unz64local_GetCurrentFileInfoInternal($35,$37,$39,0,0,0,0,0,0)|0);
  $err = $40;
  $41 = $err;
  $42 = ($41|0)==(0);
  $43 = $42&1;
  $44 = ($43|0)<(0);
  $45 = $44 << 31 >> 31;
  $46 = $s;
  $47 = ((($46)) + 96|0);
  $48 = $47;
  $49 = $48;
  HEAP32[$49>>2] = $43;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $45;
  $52 = $err;
  $0 = $52;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _unzGoToFilePos($file,$file_pos) {
 $file = $file|0;
 $file_pos = $file_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $file_pos64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file_pos64 = sp;
 $1 = $file;
 $2 = $file_pos;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -102;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = $file_pos64;
  $8 = $7;
  HEAP32[$8>>2] = $6;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = 0;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($file_pos64)) + 8|0);
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $19 = $1;
  $20 = (_unzGoToFilePos64($19,$file_pos64)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _unzOpenCurrentFile3($file,$method,$level,$raw,$password) {
 $file = $file|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 $password = $password|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $err = 0, $iSizeVar = 0, $offset_local_extrafield = 0, $or$cond = 0, $or$cond3 = 0, $pfile_in_zip_read_info = 0, $s = 0, $size_local_extrafield = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iSizeVar = sp + 20|0;
 $offset_local_extrafield = sp;
 $size_local_extrafield = sp + 8|0;
 $1 = $file;
 $2 = $method;
 $3 = $level;
 $4 = $raw;
 $5 = $password;
 $err = 0;
 $6 = $5;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $0 = -102;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $8 = $1;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -102;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $10 = $1;
 $s = $10;
 $11 = $s;
 $12 = ((($11)) + 96|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)!=(0);
 $20 = ($18|0)!=(0);
 $21 = $19 | $20;
 if (!($21)) {
  $0 = -102;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $22 = $s;
 $23 = ((($22)) + 224|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  (_unzCloseCurrentFile($26)|0);
 }
 $27 = $s;
 $28 = (_unz64local_CheckCurrentFileCoherencyHeader($27,$iSizeVar,$offset_local_extrafield,$size_local_extrafield)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $0 = -103;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $30 = (_malloc(208)|0);
 $pfile_in_zip_read_info = $30;
 $31 = $pfile_in_zip_read_info;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $0 = -104;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $33 = (_malloc(16384)|0);
 $34 = $pfile_in_zip_read_info;
 HEAP32[$34>>2] = $33;
 $35 = $offset_local_extrafield;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $pfile_in_zip_read_info;
 $42 = ((($41)) + 80|0);
 $43 = $42;
 $44 = $43;
 HEAP32[$44>>2] = $37;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $40;
 $47 = HEAP32[$size_local_extrafield>>2]|0;
 $48 = $pfile_in_zip_read_info;
 $49 = ((($48)) + 88|0);
 HEAP32[$49>>2] = $47;
 $50 = $pfile_in_zip_read_info;
 $51 = ((($50)) + 96|0);
 $52 = $51;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = 0;
 $56 = $4;
 $57 = $pfile_in_zip_read_info;
 $58 = ((($57)) + 200|0);
 HEAP32[$58>>2] = $56;
 $59 = $pfile_in_zip_read_info;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 $62 = $pfile_in_zip_read_info;
 if ($61) {
  $63 = ($62|0)!=(0|0);
  if ($63) {
   $64 = $pfile_in_zip_read_info;
   _free(($64|0));
  }
  $0 = -104;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $65 = ((($62)) + 72|0);
 HEAP32[$65>>2] = 0;
 $66 = $2;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $s;
  $69 = ((($68)) + 128|0);
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $2;
  HEAP32[$72>>2] = $71;
 }
 $73 = $3;
 $74 = ($73|0)!=(0|0);
 L34: do {
  if ($74) {
   $75 = $3;
   HEAP32[$75>>2] = 6;
   $76 = $s;
   $77 = ((($76)) + 128|0);
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 & 6;
   switch ($80|0) {
   case 6:  {
    $81 = $3;
    HEAP32[$81>>2] = 1;
    break L34;
    break;
   }
   case 4:  {
    $82 = $3;
    HEAP32[$82>>2] = 2;
    break L34;
    break;
   }
   case 2:  {
    $83 = $3;
    HEAP32[$83>>2] = 9;
    break L34;
    break;
   }
   default: {
    break L34;
   }
   }
  }
 } while(0);
 $84 = $s;
 $85 = ((($84)) + 128|0);
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $s;
  $90 = ((($89)) + 128|0);
  $91 = ((($90)) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)!=(12);
  if ($93) {
   $94 = $s;
   $95 = ((($94)) + 128|0);
   $96 = ((($95)) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)!=(8);
   if ($98) {
    $err = -103;
   }
  }
 }
 $99 = $s;
 $100 = ((($99)) + 128|0);
 $101 = ((($100)) + 20|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $pfile_in_zip_read_info;
 $104 = ((($103)) + 116|0);
 HEAP32[$104>>2] = $102;
 $105 = $pfile_in_zip_read_info;
 $106 = ((($105)) + 112|0);
 HEAP32[$106>>2] = 0;
 $107 = $pfile_in_zip_read_info;
 $108 = ((($107)) + 104|0);
 $109 = $108;
 $110 = $109;
 HEAP32[$110>>2] = 0;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = 0;
 $113 = $s;
 $114 = ((($113)) + 128|0);
 $115 = ((($114)) + 12|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $pfile_in_zip_read_info;
 $118 = ((($117)) + 184|0);
 HEAP32[$118>>2] = $116;
 $119 = $s;
 $120 = ((($119)) + 48|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $pfile_in_zip_read_info;
 $123 = ((($122)) + 180|0);
 HEAP32[$123>>2] = $121;
 $124 = $pfile_in_zip_read_info;
 $125 = ((($124)) + 136|0);
 $126 = $s;
 dest=$125; src=$126; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $127 = $s;
 $128 = ((($127)) + 72|0);
 $129 = $128;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + 4)|0;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = $pfile_in_zip_read_info;
 $136 = ((($135)) + 192|0);
 $137 = $136;
 $138 = $137;
 HEAP32[$138>>2] = $131;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = $134;
 $141 = $pfile_in_zip_read_info;
 $142 = ((($141)) + 4|0);
 $143 = ((($142)) + 20|0);
 HEAP32[$143>>2] = 0;
 $144 = $s;
 $145 = ((($144)) + 128|0);
 $146 = ((($145)) + 12|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(12);
 $149 = $4;
 $150 = ($149|0)!=(0);
 $or$cond = $148 | $150;
 do {
  if ($or$cond) {
   $153 = $s;
   $154 = ((($153)) + 128|0);
   $155 = ((($154)) + 12|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(8);
   $158 = $4;
   $159 = ($158|0)!=(0);
   $or$cond3 = $157 | $159;
   if (!($or$cond3)) {
    $160 = $pfile_in_zip_read_info;
    $161 = ((($160)) + 4|0);
    $162 = ((($161)) + 32|0);
    HEAP32[$162>>2] = 0;
    $163 = $pfile_in_zip_read_info;
    $164 = ((($163)) + 4|0);
    $165 = ((($164)) + 36|0);
    HEAP32[$165>>2] = 0;
    $166 = $pfile_in_zip_read_info;
    $167 = ((($166)) + 4|0);
    $168 = ((($167)) + 40|0);
    HEAP32[$168>>2] = 0;
    $169 = $pfile_in_zip_read_info;
    $170 = ((($169)) + 4|0);
    HEAP32[$170>>2] = 0;
    $171 = $pfile_in_zip_read_info;
    $172 = ((($171)) + 4|0);
    $173 = ((($172)) + 4|0);
    HEAP32[$173>>2] = 0;
    $174 = $pfile_in_zip_read_info;
    $175 = ((($174)) + 4|0);
    $176 = (_inflateInit2_(($175|0),-15,((gb + (20829) | 0)|0),56)|0);
    $err = $176;
    $177 = $err;
    $178 = ($177|0)==(0);
    $179 = $pfile_in_zip_read_info;
    if ($178) {
     $180 = ((($179)) + 72|0);
     HEAP32[$180>>2] = 8;
     break;
    }
    $181 = ($179|0)!=(0|0);
    if ($181) {
     $182 = $pfile_in_zip_read_info;
     _free(($182|0));
    }
    $183 = $err;
    $0 = $183;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
  } else {
   $151 = $pfile_in_zip_read_info;
   $152 = ((($151)) + 200|0);
   HEAP32[$152>>2] = 1;
  }
 } while(0);
 $184 = $s;
 $185 = ((($184)) + 128|0);
 $186 = ((($185)) + 24|0);
 $187 = $186;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + 4)|0;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = $pfile_in_zip_read_info;
 $194 = ((($193)) + 120|0);
 $195 = $194;
 $196 = $195;
 HEAP32[$196>>2] = $189;
 $197 = (($195) + 4)|0;
 $198 = $197;
 HEAP32[$198>>2] = $192;
 $199 = $s;
 $200 = ((($199)) + 128|0);
 $201 = ((($200)) + 32|0);
 $202 = $201;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = (($202) + 4)|0;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = $pfile_in_zip_read_info;
 $209 = ((($208)) + 128|0);
 $210 = $209;
 $211 = $210;
 HEAP32[$211>>2] = $204;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = $207;
 $214 = $s;
 $215 = ((($214)) + 216|0);
 $216 = $215;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = (($216) + 4)|0;
 $220 = $219;
 $221 = HEAP32[$220>>2]|0;
 $222 = (_i64Add(($218|0),($221|0),30,0)|0);
 $223 = (getTempRet0() | 0);
 $224 = HEAP32[$iSizeVar>>2]|0;
 $225 = (_i64Add(($222|0),($223|0),($224|0),0)|0);
 $226 = (getTempRet0() | 0);
 $227 = $pfile_in_zip_read_info;
 $228 = ((($227)) + 64|0);
 $229 = $228;
 $230 = $229;
 HEAP32[$230>>2] = $225;
 $231 = (($229) + 4)|0;
 $232 = $231;
 HEAP32[$232>>2] = $226;
 $233 = $pfile_in_zip_read_info;
 $234 = ((($233)) + 4|0);
 $235 = ((($234)) + 4|0);
 HEAP32[$235>>2] = 0;
 $236 = $pfile_in_zip_read_info;
 $237 = $s;
 $238 = ((($237)) + 224|0);
 HEAP32[$238>>2] = $236;
 $239 = $s;
 $240 = ((($239)) + 228|0);
 HEAP32[$240>>2] = 0;
 $0 = 0;
 $241 = $0;
 STACKTOP = sp;return ($241|0);
}
function _unzOpenCurrentFile($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $0;
 $2 = (_unzOpenCurrentFile3($1,0,0,0,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _unzOpenCurrentFilePassword($file,$password) {
 $file = $file|0;
 $password = $password|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $password;
 $2 = $0;
 $3 = $1;
 $4 = (_unzOpenCurrentFile3($2,0,0,0,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _unzOpenCurrentFile2($file,$method,$level,$raw) {
 $file = $file|0;
 $method = $method|0;
 $level = $level|0;
 $raw = $raw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $method;
 $2 = $level;
 $3 = $raw;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_unzOpenCurrentFile3($4,$5,$6,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _unzGetCurrentFileZStreamPos64($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pfile_in_zip_read_info = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $file;
 $2 = $1;
 $s = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = $0;
   $6 = $5;
   HEAP32[$6>>2] = 0;
   $7 = (($5) + 4)|0;
   $8 = $7;
   HEAP32[$8>>2] = 0;
  } else {
   $9 = $s;
   $10 = ((($9)) + 224|0);
   $11 = HEAP32[$10>>2]|0;
   $pfile_in_zip_read_info = $11;
   $12 = $pfile_in_zip_read_info;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = $0;
    $15 = $14;
    HEAP32[$15>>2] = 0;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = 0;
    break;
   } else {
    $18 = $pfile_in_zip_read_info;
    $19 = ((($18)) + 64|0);
    $20 = $19;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($20) + 4)|0;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = $pfile_in_zip_read_info;
    $27 = ((($26)) + 192|0);
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (_i64Add(($22|0),($25|0),($30|0),($33|0))|0);
    $35 = (getTempRet0() | 0);
    $36 = $0;
    $37 = $36;
    HEAP32[$37>>2] = $34;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    break;
   }
  }
 } while(0);
 $40 = $0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 setTempRet0(($45) | 0);
 STACKTOP = sp;return ($42|0);
}
function _unzReadCurrentFile($file,$buf,$len) {
 $file = $file|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bufBefore = 0, $err = 0, $flush = 0, $i = 0, $iRead = 0, $pfile_in_zip_read_info = 0, $s = 0, $uDoCopy = 0;
 var $uOutThis = 0, $uReadThis = 0, $uTotalOutAfter = 0, $uTotalOutBefore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uTotalOutBefore = sp + 16|0;
 $uTotalOutAfter = sp + 8|0;
 $uOutThis = sp;
 $1 = $file;
 $2 = $buf;
 $3 = $len;
 $err = 0;
 $iRead = 0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -102;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 $6 = $1;
 $s = $6;
 $7 = $s;
 $8 = ((($7)) + 224|0);
 $9 = HEAP32[$8>>2]|0;
 $pfile_in_zip_read_info = $9;
 $10 = $pfile_in_zip_read_info;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -102;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 $12 = $pfile_in_zip_read_info;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -100;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 $15 = $3;
 $16 = ($15|0)==(0);
 if ($16) {
  $0 = 0;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 $17 = $2;
 $18 = $pfile_in_zip_read_info;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 12|0);
 HEAP32[$20>>2] = $17;
 $21 = $3;
 $22 = $pfile_in_zip_read_info;
 $23 = ((($22)) + 4|0);
 $24 = ((($23)) + 16|0);
 HEAP32[$24>>2] = $21;
 $25 = $3;
 $26 = $pfile_in_zip_read_info;
 $27 = ((($26)) + 128|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (0)>($33>>>0);
 $35 = ($25>>>0)>($30>>>0);
 $36 = (0)==($33|0);
 $37 = $36 & $35;
 $38 = $34 | $37;
 if ($38) {
  $39 = $pfile_in_zip_read_info;
  $40 = ((($39)) + 200|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $43 = $pfile_in_zip_read_info;
   $44 = ((($43)) + 128|0);
   $45 = $44;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = $pfile_in_zip_read_info;
   $52 = ((($51)) + 4|0);
   $53 = ((($52)) + 16|0);
   HEAP32[$53>>2] = $47;
  }
 }
 $54 = $3;
 $55 = $pfile_in_zip_read_info;
 $56 = ((($55)) + 120|0);
 $57 = $56;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $pfile_in_zip_read_info;
 $64 = ((($63)) + 4|0);
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (_i64Add(($59|0),($62|0),($66|0),0)|0);
 $68 = (getTempRet0() | 0);
 $69 = (0)>($68>>>0);
 $70 = ($54>>>0)>($67>>>0);
 $71 = (0)==($68|0);
 $72 = $71 & $70;
 $73 = $69 | $72;
 if ($73) {
  $74 = $pfile_in_zip_read_info;
  $75 = ((($74)) + 200|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $pfile_in_zip_read_info;
   $79 = ((($78)) + 120|0);
   $80 = $79;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($80) + 4)|0;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = $pfile_in_zip_read_info;
   $87 = ((($86)) + 4|0);
   $88 = ((($87)) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($82) + ($89))|0;
   $91 = $pfile_in_zip_read_info;
   $92 = ((($91)) + 4|0);
   $93 = ((($92)) + 16|0);
   HEAP32[$93>>2] = $90;
  }
 }
 while(1) {
  $94 = $pfile_in_zip_read_info;
  $95 = ((($94)) + 4|0);
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97>>>0)>(0);
  if (!($98)) {
   label = 46;
   break;
  }
  $99 = $pfile_in_zip_read_info;
  $100 = ((($99)) + 4|0);
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   $104 = $pfile_in_zip_read_info;
   $105 = ((($104)) + 120|0);
   $106 = $105;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111>>>0)>(0);
   $113 = ($108>>>0)>(0);
   $114 = ($111|0)==(0);
   $115 = $114 & $113;
   $116 = $112 | $115;
   if ($116) {
    $uReadThis = 16384;
    $117 = $pfile_in_zip_read_info;
    $118 = ((($117)) + 120|0);
    $119 = $118;
    $120 = $119;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 4)|0;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = $uReadThis;
    $126 = ($124>>>0)<(0);
    $127 = ($121>>>0)<($125>>>0);
    $128 = ($124|0)==(0);
    $129 = $128 & $127;
    $130 = $126 | $129;
    if ($130) {
     $131 = $pfile_in_zip_read_info;
     $132 = ((($131)) + 120|0);
     $133 = $132;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $uReadThis = $135;
    }
    $139 = $uReadThis;
    $140 = ($139|0)==(0);
    if ($140) {
     label = 21;
     break;
    }
    $141 = $pfile_in_zip_read_info;
    $142 = ((($141)) + 136|0);
    $143 = $pfile_in_zip_read_info;
    $144 = ((($143)) + 180|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $pfile_in_zip_read_info;
    $147 = ((($146)) + 64|0);
    $148 = $147;
    $149 = $148;
    $150 = HEAP32[$149>>2]|0;
    $151 = (($148) + 4)|0;
    $152 = $151;
    $153 = HEAP32[$152>>2]|0;
    $154 = $pfile_in_zip_read_info;
    $155 = ((($154)) + 192|0);
    $156 = $155;
    $157 = $156;
    $158 = HEAP32[$157>>2]|0;
    $159 = (($156) + 4)|0;
    $160 = $159;
    $161 = HEAP32[$160>>2]|0;
    $162 = (_i64Add(($150|0),($153|0),($158|0),($161|0))|0);
    $163 = (getTempRet0() | 0);
    $164 = (_call_zseek64($142,$145,$162,$163,0)|0);
    $165 = ($164|0)!=(0);
    if ($165) {
     label = 23;
     break;
    }
    $166 = $pfile_in_zip_read_info;
    $167 = ((($166)) + 136|0);
    $168 = ((($167)) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $pfile_in_zip_read_info;
    $171 = ((($170)) + 136|0);
    $172 = ((($171)) + 28|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $pfile_in_zip_read_info;
    $175 = ((($174)) + 180|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $pfile_in_zip_read_info;
    $178 = HEAP32[$177>>2]|0;
    $179 = $uReadThis;
    $180 = (mftCall_iiiii($169|0,($173|0),($176|0),($178|0),($179|0))|0);
    $181 = $uReadThis;
    $182 = ($180|0)!=($181|0);
    if ($182) {
     label = 25;
     break;
    }
    $183 = $uReadThis;
    $184 = $pfile_in_zip_read_info;
    $185 = ((($184)) + 64|0);
    $186 = $185;
    $187 = $186;
    $188 = HEAP32[$187>>2]|0;
    $189 = (($186) + 4)|0;
    $190 = $189;
    $191 = HEAP32[$190>>2]|0;
    $192 = (_i64Add(($188|0),($191|0),($183|0),0)|0);
    $193 = (getTempRet0() | 0);
    $194 = $185;
    $195 = $194;
    HEAP32[$195>>2] = $192;
    $196 = (($194) + 4)|0;
    $197 = $196;
    HEAP32[$197>>2] = $193;
    $198 = $uReadThis;
    $199 = $pfile_in_zip_read_info;
    $200 = ((($199)) + 120|0);
    $201 = $200;
    $202 = $201;
    $203 = HEAP32[$202>>2]|0;
    $204 = (($201) + 4)|0;
    $205 = $204;
    $206 = HEAP32[$205>>2]|0;
    $207 = (_i64Subtract(($203|0),($206|0),($198|0),0)|0);
    $208 = (getTempRet0() | 0);
    $209 = $200;
    $210 = $209;
    HEAP32[$210>>2] = $207;
    $211 = (($209) + 4)|0;
    $212 = $211;
    HEAP32[$212>>2] = $208;
    $213 = $pfile_in_zip_read_info;
    $214 = HEAP32[$213>>2]|0;
    $215 = $pfile_in_zip_read_info;
    $216 = ((($215)) + 4|0);
    HEAP32[$216>>2] = $214;
    $217 = $uReadThis;
    $218 = $pfile_in_zip_read_info;
    $219 = ((($218)) + 4|0);
    $220 = ((($219)) + 4|0);
    HEAP32[$220>>2] = $217;
   }
  }
  $221 = $pfile_in_zip_read_info;
  $222 = ((($221)) + 184|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ($223|0)==(0);
  if (!($224)) {
   $225 = $pfile_in_zip_read_info;
   $226 = ((($225)) + 200|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($227|0)!=(0);
   if (!($228)) {
    $355 = $pfile_in_zip_read_info;
    $356 = ((($355)) + 184|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ($357|0)==(12);
    if ($358) {
     continue;
    }
    $flush = 2;
    $359 = $pfile_in_zip_read_info;
    $360 = ((($359)) + 4|0);
    $361 = ((($360)) + 20|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = $uTotalOutBefore;
    $364 = $363;
    HEAP32[$364>>2] = $362;
    $365 = (($363) + 4)|0;
    $366 = $365;
    HEAP32[$366>>2] = 0;
    $367 = $pfile_in_zip_read_info;
    $368 = ((($367)) + 4|0);
    $369 = ((($368)) + 12|0);
    $370 = HEAP32[$369>>2]|0;
    $bufBefore = $370;
    $371 = $pfile_in_zip_read_info;
    $372 = ((($371)) + 4|0);
    $373 = $flush;
    $374 = (_inflate(($372|0),($373|0))|0);
    $err = $374;
    $375 = $err;
    $376 = ($375|0)>=(0);
    if ($376) {
     $377 = $pfile_in_zip_read_info;
     $378 = ((($377)) + 4|0);
     $379 = ((($378)) + 24|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = ($380|0)!=(0|0);
     if ($381) {
      $err = -3;
     }
    }
    $382 = $pfile_in_zip_read_info;
    $383 = ((($382)) + 4|0);
    $384 = ((($383)) + 20|0);
    $385 = HEAP32[$384>>2]|0;
    $386 = $uTotalOutAfter;
    $387 = $386;
    HEAP32[$387>>2] = $385;
    $388 = (($386) + 4)|0;
    $389 = $388;
    HEAP32[$389>>2] = 0;
    $390 = $uTotalOutAfter;
    $391 = $390;
    $392 = HEAP32[$391>>2]|0;
    $393 = (($390) + 4)|0;
    $394 = $393;
    $395 = HEAP32[$394>>2]|0;
    $396 = $uTotalOutBefore;
    $397 = $396;
    $398 = HEAP32[$397>>2]|0;
    $399 = (($396) + 4)|0;
    $400 = $399;
    $401 = HEAP32[$400>>2]|0;
    $402 = (_i64Subtract(($392|0),($395|0),($398|0),($401|0))|0);
    $403 = (getTempRet0() | 0);
    $404 = $uOutThis;
    $405 = $404;
    HEAP32[$405>>2] = $402;
    $406 = (($404) + 4)|0;
    $407 = $406;
    HEAP32[$407>>2] = $403;
    $408 = $pfile_in_zip_read_info;
    $409 = ((($408)) + 104|0);
    $410 = $409;
    $411 = $410;
    $412 = HEAP32[$411>>2]|0;
    $413 = (($410) + 4)|0;
    $414 = $413;
    $415 = HEAP32[$414>>2]|0;
    $416 = $uOutThis;
    $417 = $416;
    $418 = HEAP32[$417>>2]|0;
    $419 = (($416) + 4)|0;
    $420 = $419;
    $421 = HEAP32[$420>>2]|0;
    $422 = (_i64Add(($412|0),($415|0),($418|0),($421|0))|0);
    $423 = (getTempRet0() | 0);
    $424 = $pfile_in_zip_read_info;
    $425 = ((($424)) + 104|0);
    $426 = $425;
    $427 = $426;
    HEAP32[$427>>2] = $422;
    $428 = (($426) + 4)|0;
    $429 = $428;
    HEAP32[$429>>2] = $423;
    $430 = $pfile_in_zip_read_info;
    $431 = ((($430)) + 112|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $bufBefore;
    $434 = $uOutThis;
    $435 = $434;
    $436 = HEAP32[$435>>2]|0;
    $437 = (($434) + 4)|0;
    $438 = $437;
    $439 = HEAP32[$438>>2]|0;
    $440 = (_crc32(($432|0),($433|0),($436|0))|0);
    $441 = $pfile_in_zip_read_info;
    $442 = ((($441)) + 112|0);
    HEAP32[$442>>2] = $440;
    $443 = $uOutThis;
    $444 = $443;
    $445 = HEAP32[$444>>2]|0;
    $446 = (($443) + 4)|0;
    $447 = $446;
    $448 = HEAP32[$447>>2]|0;
    $449 = $pfile_in_zip_read_info;
    $450 = ((($449)) + 128|0);
    $451 = $450;
    $452 = $451;
    $453 = HEAP32[$452>>2]|0;
    $454 = (($451) + 4)|0;
    $455 = $454;
    $456 = HEAP32[$455>>2]|0;
    $457 = (_i64Subtract(($453|0),($456|0),($445|0),($448|0))|0);
    $458 = (getTempRet0() | 0);
    $459 = $450;
    $460 = $459;
    HEAP32[$460>>2] = $457;
    $461 = (($459) + 4)|0;
    $462 = $461;
    HEAP32[$462>>2] = $458;
    $463 = $uTotalOutAfter;
    $464 = $463;
    $465 = HEAP32[$464>>2]|0;
    $466 = (($463) + 4)|0;
    $467 = $466;
    $468 = HEAP32[$467>>2]|0;
    $469 = $uTotalOutBefore;
    $470 = $469;
    $471 = HEAP32[$470>>2]|0;
    $472 = (($469) + 4)|0;
    $473 = $472;
    $474 = HEAP32[$473>>2]|0;
    $475 = (_i64Subtract(($465|0),($468|0),($471|0),($474|0))|0);
    $476 = (getTempRet0() | 0);
    $477 = $iRead;
    $478 = (($477) + ($475))|0;
    $iRead = $478;
    $479 = $err;
    $480 = ($479|0)==(1);
    if ($480) {
     label = 44;
     break;
    }
    $485 = $err;
    $486 = ($485|0)!=(0);
    if ($486) {
     label = 46;
     break;
    } else {
     continue;
    }
   }
  }
  $229 = $pfile_in_zip_read_info;
  $230 = ((($229)) + 4|0);
  $231 = ((($230)) + 4|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($232|0)==(0);
  if ($233) {
   $234 = $pfile_in_zip_read_info;
   $235 = ((($234)) + 120|0);
   $236 = $235;
   $237 = $236;
   $238 = HEAP32[$237>>2]|0;
   $239 = (($236) + 4)|0;
   $240 = $239;
   $241 = HEAP32[$240>>2]|0;
   $242 = ($238|0)==(0);
   $243 = ($241|0)==(0);
   $244 = $242 & $243;
   if ($244) {
    label = 31;
    break;
   }
  }
  $249 = $pfile_in_zip_read_info;
  $250 = ((($249)) + 4|0);
  $251 = ((($250)) + 16|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $pfile_in_zip_read_info;
  $254 = ((($253)) + 4|0);
  $255 = ((($254)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ($252>>>0)<($256>>>0);
  $258 = $pfile_in_zip_read_info;
  $259 = ((($258)) + 4|0);
  if ($257) {
   $260 = ((($259)) + 16|0);
   $261 = HEAP32[$260>>2]|0;
   $uDoCopy = $261;
  } else {
   $262 = ((($259)) + 4|0);
   $263 = HEAP32[$262>>2]|0;
   $uDoCopy = $263;
  }
  $i = 0;
  while(1) {
   $264 = $i;
   $265 = $uDoCopy;
   $266 = ($264>>>0)<($265>>>0);
   $267 = $pfile_in_zip_read_info;
   if (!($266)) {
    break;
   }
   $268 = ((($267)) + 4|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $i;
   $271 = (($269) + ($270)|0);
   $272 = HEAP8[$271>>0]|0;
   $273 = $pfile_in_zip_read_info;
   $274 = ((($273)) + 4|0);
   $275 = ((($274)) + 12|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $i;
   $278 = (($276) + ($277)|0);
   HEAP8[$278>>0] = $272;
   $279 = $i;
   $280 = (($279) + 1)|0;
   $i = $280;
  }
  $281 = ((($267)) + 104|0);
  $282 = $281;
  $283 = $282;
  $284 = HEAP32[$283>>2]|0;
  $285 = (($282) + 4)|0;
  $286 = $285;
  $287 = HEAP32[$286>>2]|0;
  $288 = $uDoCopy;
  $289 = (_i64Add(($284|0),($287|0),($288|0),0)|0);
  $290 = (getTempRet0() | 0);
  $291 = $pfile_in_zip_read_info;
  $292 = ((($291)) + 104|0);
  $293 = $292;
  $294 = $293;
  HEAP32[$294>>2] = $289;
  $295 = (($293) + 4)|0;
  $296 = $295;
  HEAP32[$296>>2] = $290;
  $297 = $pfile_in_zip_read_info;
  $298 = ((($297)) + 112|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = $pfile_in_zip_read_info;
  $301 = ((($300)) + 4|0);
  $302 = ((($301)) + 12|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = $uDoCopy;
  $305 = (_crc32(($299|0),($303|0),($304|0))|0);
  $306 = $pfile_in_zip_read_info;
  $307 = ((($306)) + 112|0);
  HEAP32[$307>>2] = $305;
  $308 = $uDoCopy;
  $309 = $pfile_in_zip_read_info;
  $310 = ((($309)) + 128|0);
  $311 = $310;
  $312 = $311;
  $313 = HEAP32[$312>>2]|0;
  $314 = (($311) + 4)|0;
  $315 = $314;
  $316 = HEAP32[$315>>2]|0;
  $317 = (_i64Subtract(($313|0),($316|0),($308|0),0)|0);
  $318 = (getTempRet0() | 0);
  $319 = $310;
  $320 = $319;
  HEAP32[$320>>2] = $317;
  $321 = (($319) + 4)|0;
  $322 = $321;
  HEAP32[$322>>2] = $318;
  $323 = $uDoCopy;
  $324 = $pfile_in_zip_read_info;
  $325 = ((($324)) + 4|0);
  $326 = ((($325)) + 4|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = (($327) - ($323))|0;
  HEAP32[$326>>2] = $328;
  $329 = $uDoCopy;
  $330 = $pfile_in_zip_read_info;
  $331 = ((($330)) + 4|0);
  $332 = ((($331)) + 16|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = (($333) - ($329))|0;
  HEAP32[$332>>2] = $334;
  $335 = $uDoCopy;
  $336 = $pfile_in_zip_read_info;
  $337 = ((($336)) + 4|0);
  $338 = ((($337)) + 12|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($339) + ($335)|0);
  HEAP32[$338>>2] = $340;
  $341 = $uDoCopy;
  $342 = $pfile_in_zip_read_info;
  $343 = ((($342)) + 4|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = (($344) + ($341)|0);
  HEAP32[$343>>2] = $345;
  $346 = $uDoCopy;
  $347 = $pfile_in_zip_read_info;
  $348 = ((($347)) + 4|0);
  $349 = ((($348)) + 20|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($350) + ($346))|0;
  HEAP32[$349>>2] = $351;
  $352 = $uDoCopy;
  $353 = $iRead;
  $354 = (($353) + ($352))|0;
  $iRead = $354;
 }
 if ((label|0) == 21) {
  $0 = 0;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 else if ((label|0) == 23) {
  $0 = -1;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 else if ((label|0) == 25) {
  $0 = -1;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 else if ((label|0) == 31) {
  $245 = $iRead;
  $246 = ($245|0)==(0);
  $247 = $iRead;
  $248 = $246 ? 0 : $247;
  $0 = $248;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 else if ((label|0) == 44) {
  $481 = $iRead;
  $482 = ($481|0)==(0);
  $483 = $iRead;
  $484 = $482 ? 0 : $483;
  $0 = $484;
  $491 = $0;
  STACKTOP = sp;return ($491|0);
 }
 else if ((label|0) == 46) {
  $487 = $err;
  $488 = ($487|0)==(0);
  if ($488) {
   $489 = $iRead;
   $0 = $489;
   $491 = $0;
   STACKTOP = sp;return ($491|0);
  } else {
   $490 = $err;
   $0 = $490;
   $491 = $0;
   STACKTOP = sp;return ($491|0);
  }
 }
 return (0)|0;
}
function _unztell($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pfile_in_zip_read_info = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $0 = -102;
  } else {
   $4 = $1;
   $s = $4;
   $5 = $s;
   $6 = ((($5)) + 224|0);
   $7 = HEAP32[$6>>2]|0;
   $pfile_in_zip_read_info = $7;
   $8 = $pfile_in_zip_read_info;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $0 = -102;
    break;
   } else {
    $10 = $pfile_in_zip_read_info;
    $11 = ((($10)) + 4|0);
    $12 = ((($11)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $0 = $13;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _unztell64($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pfile_in_zip_read_info = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = $0;
   $5 = $4;
   HEAP32[$5>>2] = -1;
   $6 = (($4) + 4)|0;
   $7 = $6;
   HEAP32[$7>>2] = -1;
  } else {
   $8 = $1;
   $s = $8;
   $9 = $s;
   $10 = ((($9)) + 224|0);
   $11 = HEAP32[$10>>2]|0;
   $pfile_in_zip_read_info = $11;
   $12 = $pfile_in_zip_read_info;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = $0;
    $15 = $14;
    HEAP32[$15>>2] = -1;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = -1;
    break;
   } else {
    $18 = $pfile_in_zip_read_info;
    $19 = ((($18)) + 104|0);
    $20 = $19;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($20) + 4)|0;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = $0;
    $27 = $26;
    HEAP32[$27>>2] = $22;
    $28 = (($26) + 4)|0;
    $29 = $28;
    HEAP32[$29>>2] = $25;
    break;
   }
  }
 } while(0);
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 setTempRet0(($35) | 0);
 STACKTOP = sp;return ($32|0);
}
function _unzeof($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pfile_in_zip_read_info = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $0 = -102;
  } else {
   $4 = $1;
   $s = $4;
   $5 = $s;
   $6 = ((($5)) + 224|0);
   $7 = HEAP32[$6>>2]|0;
   $pfile_in_zip_read_info = $7;
   $8 = $pfile_in_zip_read_info;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $0 = -102;
    break;
   }
   $10 = $pfile_in_zip_read_info;
   $11 = ((($10)) + 128|0);
   $12 = $11;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _unzGetLocalExtrafield($file,$buf,$len) {
 $file = $file|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $pfile_in_zip_read_info = 0, $read_now = 0, $s = 0, $size_to_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size_to_read = sp;
 $1 = $file;
 $2 = $buf;
 $3 = $len;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -102;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $6 = $1;
 $s = $6;
 $7 = $s;
 $8 = ((($7)) + 224|0);
 $9 = HEAP32[$8>>2]|0;
 $pfile_in_zip_read_info = $9;
 $10 = $pfile_in_zip_read_info;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -102;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $12 = $pfile_in_zip_read_info;
 $13 = ((($12)) + 88|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $pfile_in_zip_read_info;
 $16 = ((($15)) + 96|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Subtract(($14|0),0,($19|0),($22|0))|0);
 $24 = (getTempRet0() | 0);
 $25 = $size_to_read;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = $2;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = $size_to_read;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $0 = $33;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $37 = $3;
 $38 = $size_to_read;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (0)>($43>>>0);
 $45 = ($37>>>0)>($40>>>0);
 $46 = (0)==($43|0);
 $47 = $46 & $45;
 $48 = $44 | $47;
 if ($48) {
  $49 = $size_to_read;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $read_now = $51;
 } else {
  $55 = $3;
  $read_now = $55;
 }
 $56 = $read_now;
 $57 = ($56|0)==(0);
 if ($57) {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $58 = $pfile_in_zip_read_info;
 $59 = ((($58)) + 136|0);
 $60 = $pfile_in_zip_read_info;
 $61 = ((($60)) + 180|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $pfile_in_zip_read_info;
 $64 = ((($63)) + 80|0);
 $65 = $64;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = $pfile_in_zip_read_info;
 $72 = ((($71)) + 96|0);
 $73 = $72;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (_i64Add(($67|0),($70|0),($75|0),($78|0))|0);
 $80 = (getTempRet0() | 0);
 $81 = (_call_zseek64($59,$62,$79,$80,0)|0);
 $82 = ($81|0)!=(0);
 if ($82) {
  $0 = -1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $83 = $pfile_in_zip_read_info;
 $84 = ((($83)) + 136|0);
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $pfile_in_zip_read_info;
 $88 = ((($87)) + 136|0);
 $89 = ((($88)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $pfile_in_zip_read_info;
 $92 = ((($91)) + 180|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $2;
 $95 = $read_now;
 $96 = (mftCall_iiiii($86|0,($90|0),($93|0),($94|0),($95|0))|0);
 $97 = $read_now;
 $98 = ($96|0)!=($97|0);
 if ($98) {
  $0 = -1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 } else {
  $99 = $read_now;
  $0 = $99;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _unzGetGlobalComment($file,$szComment,$uSizeBuf) {
 $file = $file|0;
 $szComment = $szComment|0;
 $uSizeBuf = $uSizeBuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $uReadThis = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $szComment;
 $3 = $uSizeBuf;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -102;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $6 = $1;
 $s = $6;
 $7 = $3;
 $uReadThis = $7;
 $8 = $uReadThis;
 $9 = $s;
 $10 = ((($9)) + 56|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($8>>>0)>($12>>>0);
 if ($13) {
  $14 = $s;
  $15 = ((($14)) + 56|0);
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $uReadThis = $17;
 }
 $18 = $s;
 $19 = $s;
 $20 = ((($19)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $s;
 $23 = ((($22)) + 104|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_i64Add(($26|0),($29|0),22,0)|0);
 $31 = (getTempRet0() | 0);
 $32 = (_call_zseek64($18,$21,$30,$31,0)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $34 = $uReadThis;
 $35 = ($34>>>0)>(0);
 if ($35) {
  $36 = $2;
  HEAP8[$36>>0] = 0;
  $37 = $s;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $s;
  $41 = ((($40)) + 28|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $s;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $2;
  $47 = $uReadThis;
  $48 = (mftCall_iiiii($39|0,($42|0),($45|0),($46|0),($47|0))|0);
  $49 = $uReadThis;
  $50 = ($48|0)!=($49|0);
  if ($50) {
   $0 = -1;
   $66 = $0;
   STACKTOP = sp;return ($66|0);
  }
 }
 $51 = $2;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = $3;
  $54 = $s;
  $55 = ((($54)) + 56|0);
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($53>>>0)>($57>>>0);
  if ($58) {
   $59 = $2;
   $60 = $s;
   $61 = ((($60)) + 56|0);
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($59) + ($63)|0);
   HEAP8[$64>>0] = 0;
  }
 }
 $65 = $uReadThis;
 $0 = $65;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function _unzGetOffset64($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = $0;
   $5 = $4;
   HEAP32[$5>>2] = 0;
   $6 = (($4) + 4)|0;
   $7 = $6;
   HEAP32[$7>>2] = 0;
  } else {
   $8 = $1;
   $s = $8;
   $9 = $s;
   $10 = ((($9)) + 96|0);
   $11 = $10;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($13|0)!=(0);
   $18 = ($16|0)!=(0);
   $19 = $17 | $18;
   if (!($19)) {
    $20 = $0;
    $21 = $20;
    HEAP32[$21>>2] = 0;
    $22 = (($20) + 4)|0;
    $23 = $22;
    HEAP32[$23>>2] = 0;
    break;
   }
   $24 = $s;
   $25 = ((($24)) + 56|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)!=(0);
   $33 = ($31|0)!=(0);
   $34 = $32 | $33;
   if ($34) {
    $35 = $s;
    $36 = ((($35)) + 56|0);
    $37 = $36;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = ($39|0)!=(65535);
    $44 = ($42|0)!=(0);
    $45 = $43 | $44;
    if ($45) {
     $46 = $s;
     $47 = ((($46)) + 80|0);
     $48 = $47;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($48) + 4)|0;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $54 = $s;
     $55 = ((($54)) + 56|0);
     $56 = $55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $59 = (($56) + 4)|0;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = ($50|0)==($58|0);
     $63 = ($53|0)==($61|0);
     $64 = $62 & $63;
     if ($64) {
      $65 = $0;
      $66 = $65;
      HEAP32[$66>>2] = 0;
      $67 = (($65) + 4)|0;
      $68 = $67;
      HEAP32[$68>>2] = 0;
      break;
     }
    }
   }
   $69 = $s;
   $70 = ((($69)) + 88|0);
   $71 = $70;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = $0;
   $78 = $77;
   HEAP32[$78>>2] = $73;
   $79 = (($77) + 4)|0;
   $80 = $79;
   HEAP32[$80>>2] = $76;
  }
 } while(0);
 $81 = $0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 setTempRet0(($86) | 0);
 STACKTOP = sp;return ($83|0);
}
function _unzGetOffset($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset64 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset64 = sp;
 $1 = $file;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $4 = $1;
  $5 = (_unzGetOffset64($4)|0);
  $6 = (getTempRet0() | 0);
  $7 = $offset64;
  $8 = $7;
  HEAP32[$8>>2] = $5;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $11 = $offset64;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $0 = $13;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _unzSetOffset64($file,$0,$1) {
 $file = $file|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $file;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = -102;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $11 = $3;
  $s = $11;
  $12 = $4;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = $s;
  $19 = ((($18)) + 88|0);
  $20 = $19;
  $21 = $20;
  HEAP32[$21>>2] = $14;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $17;
  $24 = $s;
  $25 = ((($24)) + 56|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $s;
  $33 = ((($32)) + 80|0);
  $34 = $33;
  $35 = $34;
  HEAP32[$35>>2] = $28;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $31;
  $38 = $3;
  $39 = $s;
  $40 = ((($39)) + 128|0);
  $41 = $s;
  $42 = ((($41)) + 216|0);
  $43 = (_unz64local_GetCurrentFileInfoInternal($38,$40,$42,0,0,0,0,0,0)|0);
  $err = $43;
  $44 = $err;
  $45 = ($44|0)==(0);
  $46 = $45&1;
  $47 = ($46|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = $s;
  $50 = ((($49)) + 96|0);
  $51 = $50;
  $52 = $51;
  HEAP32[$52>>2] = $46;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $48;
  $55 = $err;
  $2 = $55;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _unzSetOffset($file,$pos) {
 $file = $file|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $pos;
 $2 = $0;
 $3 = $1;
 $4 = (_unzSetOffset64($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcmpcasenosensitive_internal($fileName1,$fileName2) {
 $fileName1 = $fileName1|0;
 $fileName2 = $fileName2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $c2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fileName1;
 $2 = $fileName2;
 while(1) {
  $3 = $1;
  $4 = ((($3)) + 1|0);
  $1 = $4;
  $5 = HEAP8[$3>>0]|0;
  $c1 = $5;
  $6 = $2;
  $7 = ((($6)) + 1|0);
  $2 = $7;
  $8 = HEAP8[$6>>0]|0;
  $c2 = $8;
  $9 = $c1;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)>=(97);
  if ($11) {
   $12 = $c1;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)<=(122);
   if ($14) {
    $15 = $c1;
    $16 = $15 << 24 >> 24;
    $17 = (($16) - 32)|0;
    $18 = $17&255;
    $c1 = $18;
   }
  }
  $19 = $c2;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)>=(97);
  if ($21) {
   $22 = $c2;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)<=(122);
   if ($24) {
    $25 = $c2;
    $26 = $25 << 24 >> 24;
    $27 = (($26) - 32)|0;
    $28 = $27&255;
    $c2 = $28;
   }
  }
  $29 = $c1;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(0);
  $32 = $c2;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)==(0);
  if ($31) {
   label = 9;
   break;
  }
  if ($34) {
   label = 11;
   break;
  }
  $36 = $c1;
  $37 = $36 << 24 >> 24;
  $38 = $c2;
  $39 = $38 << 24 >> 24;
  $40 = ($37|0)<($39|0);
  if ($40) {
   label = 13;
   break;
  }
  $41 = $c1;
  $42 = $41 << 24 >> 24;
  $43 = $c2;
  $44 = $43 << 24 >> 24;
  $45 = ($42|0)>($44|0);
  if ($45) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 9) {
  $35 = $34 ? 0 : -1;
  $0 = $35;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 11) {
  $0 = 1;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 15) {
  $0 = 1;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _unzOpenInternal($path,$pzlib_filefunc64_32_def,$is64bitOpenFunction) {
 $path = $path|0;
 $pzlib_filefunc64_32_def = $pzlib_filefunc64_32_def|0;
 $is64bitOpenFunction = $is64bitOpenFunction|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $central_pos = 0, $err = 0, $number_disk = 0, $number_disk_with_CD = 0, $number_entry_CD = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $s = 0, $uL = 0, $uL64 = 0, $uS = 0, $us = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $us = sp + 24|0;
 $central_pos = sp + 16|0;
 $uL = sp + 280|0;
 $number_disk = sp + 276|0;
 $number_disk_with_CD = sp + 272|0;
 $number_entry_CD = sp + 8|0;
 $uS = sp + 264|0;
 $uL64 = sp;
 $1 = $path;
 $2 = $pzlib_filefunc64_32_def;
 $3 = $is64bitOpenFunction;
 $err = 0;
 $4 = HEAP8[(gb + (20748) | 0)>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)!=(32);
 if ($6) {
  $0 = 0;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $7 = ((($us)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($us)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if ($10) {
  _fill_fopen64_filefunc($us);
 } else {
  $11 = $2;
  dest=$us; src=$11; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $12 = $3;
 $13 = ((($us)) + 44|0);
 HEAP32[$13>>2] = $12;
 $14 = $1;
 $15 = (_call_zopen64($us,$14,5)|0);
 $16 = ((($us)) + 48|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($us)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $0 = 0;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $20 = ((($us)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_unz64local_SearchCentralDir64($us,$21)|0);
 $23 = (getTempRet0() | 0);
 $24 = $central_pos;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $central_pos;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)!=(0);
 $35 = ($33|0)!=(0);
 $36 = $34 | $35;
 if ($36) {
  $37 = ((($us)) + 232|0);
  HEAP32[$37>>2] = 1;
  $38 = ((($us)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $central_pos;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_call_zseek64($us,$39,$42,$45,0)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $err = -1;
  }
  $48 = ((($us)) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_unz64local_getLong($us,$49,$uL)|0);
  $51 = ($50|0)!=(0);
  if ($51) {
   $err = -1;
  }
  $52 = ((($us)) + 48|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_unz64local_getLong64($us,$53,$uL64)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   $err = -1;
  }
  $56 = ((($us)) + 48|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_unz64local_getShort($us,$57,$uS)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $err = -1;
  }
  $60 = ((($us)) + 48|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_unz64local_getShort($us,$61,$uS)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   $err = -1;
  }
  $64 = ((($us)) + 48|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_unz64local_getLong($us,$65,$number_disk)|0);
  $67 = ($66|0)!=(0);
  if ($67) {
   $err = -1;
  }
  $68 = ((($us)) + 48|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_unz64local_getLong($us,$69,$number_disk_with_CD)|0);
  $71 = ($70|0)!=(0);
  if ($71) {
   $err = -1;
  }
  $72 = ((($us)) + 48|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($us)) + 56|0);
  $75 = (_unz64local_getLong64($us,$73,$74)|0);
  $76 = ($75|0)!=(0);
  if ($76) {
   $err = -1;
  }
  $77 = ((($us)) + 48|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_unz64local_getLong64($us,$78,$number_entry_CD)|0);
  $80 = ($79|0)!=(0);
  if ($80) {
   $err = -1;
  }
  $81 = $number_entry_CD;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + 4)|0;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($us)) + 56|0);
  $88 = $87;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 4)|0;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = ($83|0)!=($90|0);
  $95 = ($86|0)!=($93|0);
  $96 = $94 | $95;
  $97 = HEAP32[$number_disk_with_CD>>2]|0;
  $98 = ($97|0)!=(0);
  $or$cond = $96 | $98;
  $99 = HEAP32[$number_disk>>2]|0;
  $100 = ($99|0)!=(0);
  $or$cond3 = $or$cond | $100;
  if ($or$cond3) {
   $err = -103;
  }
  $101 = ((($us)) + 48|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($us)) + 112|0);
  $104 = (_unz64local_getLong64($us,$102,$103)|0);
  $105 = ($104|0)!=(0);
  if ($105) {
   $err = -1;
  }
  $106 = ((($us)) + 48|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($us)) + 120|0);
  $109 = (_unz64local_getLong64($us,$107,$108)|0);
  $110 = ($109|0)!=(0);
  if ($110) {
   $err = -1;
  }
  $111 = ((($us)) + 56|0);
  $112 = ((($111)) + 8|0);
  HEAP32[$112>>2] = 0;
 } else {
  $113 = ((($us)) + 48|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (_unz64local_SearchCentralDir($us,$114)|0);
  $116 = (getTempRet0() | 0);
  $117 = $central_pos;
  $118 = $117;
  HEAP32[$118>>2] = $115;
  $119 = (($117) + 4)|0;
  $120 = $119;
  HEAP32[$120>>2] = $116;
  $121 = $central_pos;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = ($123|0)==(0);
  $128 = ($126|0)==(0);
  $129 = $127 & $128;
  if ($129) {
   $err = -1;
  }
  $130 = ((($us)) + 232|0);
  HEAP32[$130>>2] = 0;
  $131 = ((($us)) + 48|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $central_pos;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (_call_zseek64($us,$132,$135,$138,0)|0);
  $140 = ($139|0)!=(0);
  if ($140) {
   $err = -1;
  }
  $141 = ((($us)) + 48|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (_unz64local_getLong($us,$142,$uL)|0);
  $144 = ($143|0)!=(0);
  if ($144) {
   $err = -1;
  }
  $145 = ((($us)) + 48|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (_unz64local_getShort($us,$146,$number_disk)|0);
  $148 = ($147|0)!=(0);
  if ($148) {
   $err = -1;
  }
  $149 = ((($us)) + 48|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (_unz64local_getShort($us,$150,$number_disk_with_CD)|0);
  $152 = ($151|0)!=(0);
  if ($152) {
   $err = -1;
  }
  $153 = ((($us)) + 48|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (_unz64local_getShort($us,$154,$uL)|0);
  $156 = ($155|0)!=(0);
  if ($156) {
   $err = -1;
  }
  $157 = HEAP32[$uL>>2]|0;
  $158 = ((($us)) + 56|0);
  $159 = $158;
  $160 = $159;
  HEAP32[$160>>2] = $157;
  $161 = (($159) + 4)|0;
  $162 = $161;
  HEAP32[$162>>2] = 0;
  $163 = ((($us)) + 48|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (_unz64local_getShort($us,$164,$uL)|0);
  $166 = ($165|0)!=(0);
  if ($166) {
   $err = -1;
  }
  $167 = HEAP32[$uL>>2]|0;
  $168 = $number_entry_CD;
  $169 = $168;
  HEAP32[$169>>2] = $167;
  $170 = (($168) + 4)|0;
  $171 = $170;
  HEAP32[$171>>2] = 0;
  $172 = $number_entry_CD;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $175 = (($172) + 4)|0;
  $176 = $175;
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($us)) + 56|0);
  $179 = $178;
  $180 = $179;
  $181 = HEAP32[$180>>2]|0;
  $182 = (($179) + 4)|0;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = ($174|0)!=($181|0);
  $186 = ($177|0)!=($184|0);
  $187 = $185 | $186;
  $188 = HEAP32[$number_disk_with_CD>>2]|0;
  $189 = ($188|0)!=(0);
  $or$cond5 = $187 | $189;
  $190 = HEAP32[$number_disk>>2]|0;
  $191 = ($190|0)!=(0);
  $or$cond7 = $or$cond5 | $191;
  if ($or$cond7) {
   $err = -103;
  }
  $192 = ((($us)) + 48|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (_unz64local_getLong($us,$193,$uL)|0);
  $195 = ($194|0)!=(0);
  if ($195) {
   $err = -1;
  }
  $196 = HEAP32[$uL>>2]|0;
  $197 = ((($us)) + 112|0);
  $198 = $197;
  $199 = $198;
  HEAP32[$199>>2] = $196;
  $200 = (($198) + 4)|0;
  $201 = $200;
  HEAP32[$201>>2] = 0;
  $202 = ((($us)) + 48|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (_unz64local_getLong($us,$203,$uL)|0);
  $205 = ($204|0)!=(0);
  if ($205) {
   $err = -1;
  }
  $206 = HEAP32[$uL>>2]|0;
  $207 = ((($us)) + 120|0);
  $208 = $207;
  $209 = $208;
  HEAP32[$209>>2] = $206;
  $210 = (($208) + 4)|0;
  $211 = $210;
  HEAP32[$211>>2] = 0;
  $212 = ((($us)) + 48|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($us)) + 56|0);
  $215 = ((($214)) + 8|0);
  $216 = (_unz64local_getShort($us,$213,$215)|0);
  $217 = ($216|0)!=(0);
  if ($217) {
   $err = -1;
  }
 }
 $218 = $central_pos;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($us)) + 120|0);
 $225 = $224;
 $226 = $225;
 $227 = HEAP32[$226>>2]|0;
 $228 = (($225) + 4)|0;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($us)) + 112|0);
 $232 = $231;
 $233 = $232;
 $234 = HEAP32[$233>>2]|0;
 $235 = (($232) + 4)|0;
 $236 = $235;
 $237 = HEAP32[$236>>2]|0;
 $238 = (_i64Add(($227|0),($230|0),($234|0),($237|0))|0);
 $239 = (getTempRet0() | 0);
 $240 = ($223>>>0)<($239>>>0);
 $241 = ($220>>>0)<($238>>>0);
 $242 = ($223|0)==($239|0);
 $243 = $242 & $241;
 $244 = $240 | $243;
 $245 = $err;
 $246 = ($245|0)==(0);
 $or$cond9 = $244 & $246;
 if ($or$cond9) {
  $err = -103;
 }
 $247 = $err;
 $248 = ($247|0)!=(0);
 if ($248) {
  $249 = ((($us)) + 20|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ((($us)) + 28|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ((($us)) + 48|0);
  $254 = HEAP32[$253>>2]|0;
  (mftCall_iii($250|0,($252|0),($254|0))|0);
  $0 = 0;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $255 = $central_pos;
 $256 = $255;
 $257 = HEAP32[$256>>2]|0;
 $258 = (($255) + 4)|0;
 $259 = $258;
 $260 = HEAP32[$259>>2]|0;
 $261 = ((($us)) + 120|0);
 $262 = $261;
 $263 = $262;
 $264 = HEAP32[$263>>2]|0;
 $265 = (($262) + 4)|0;
 $266 = $265;
 $267 = HEAP32[$266>>2]|0;
 $268 = ((($us)) + 112|0);
 $269 = $268;
 $270 = $269;
 $271 = HEAP32[$270>>2]|0;
 $272 = (($269) + 4)|0;
 $273 = $272;
 $274 = HEAP32[$273>>2]|0;
 $275 = (_i64Add(($264|0),($267|0),($271|0),($274|0))|0);
 $276 = (getTempRet0() | 0);
 $277 = (_i64Subtract(($257|0),($260|0),($275|0),($276|0))|0);
 $278 = (getTempRet0() | 0);
 $279 = ((($us)) + 72|0);
 $280 = $279;
 $281 = $280;
 HEAP32[$281>>2] = $277;
 $282 = (($280) + 4)|0;
 $283 = $282;
 HEAP32[$283>>2] = $278;
 $284 = $central_pos;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (($284) + 4)|0;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = ((($us)) + 104|0);
 $291 = $290;
 $292 = $291;
 HEAP32[$292>>2] = $286;
 $293 = (($291) + 4)|0;
 $294 = $293;
 HEAP32[$294>>2] = $289;
 $295 = ((($us)) + 224|0);
 HEAP32[$295>>2] = 0;
 $296 = ((($us)) + 228|0);
 HEAP32[$296>>2] = 0;
 $297 = (_malloc(240)|0);
 $s = $297;
 $298 = $s;
 $299 = ($298|0)!=(0|0);
 if ($299) {
  $300 = $s;
  _memcpy(($300|0),($us|0),240)|0;
  $301 = $s;
  (_unzGoToFirstFile($301)|0);
 }
 $302 = $s;
 $0 = $302;
 $303 = $0;
 STACKTOP = sp;return ($303|0);
}
function _unz64local_GetCurrentFileInfoInternal($file,$pfile_info,$pfile_info_internal,$szFileName,$fileNameBufferSize,$extraField,$extraFieldBufferSize,$szComment,$commentBufferSize) {
 $file = $file|0;
 $pfile_info = $pfile_info|0;
 $pfile_info_internal = $pfile_info_internal|0;
 $szFileName = $szFileName|0;
 $fileNameBufferSize = $fileNameBufferSize|0;
 $extraField = $extraField|0;
 $extraFieldBufferSize = $extraFieldBufferSize|0;
 $szComment = $szComment|0;
 $commentBufferSize = $commentBufferSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc = 0, $dataSize = 0, $err = 0, $file_info = 0, $file_info_internal = 0;
 var $headerId = 0, $lSeek = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $s = 0, $uL = 0, $uL2 = 0, $uMagic = 0, $uSizeRead = 0, $uSizeRead1 = 0, $uSizeRead3 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file_info = sp + 16|0;
 $file_info_internal = sp + 8|0;
 $uMagic = sp + 136|0;
 $uL = sp + 128|0;
 $uSizeRead1 = sp;
 $headerId = sp + 116|0;
 $dataSize = sp + 112|0;
 $uL2 = sp + 108|0;
 $1 = $file;
 $2 = $pfile_info;
 $3 = $pfile_info_internal;
 $4 = $szFileName;
 $5 = $fileNameBufferSize;
 $6 = $extraField;
 $7 = $extraFieldBufferSize;
 $8 = $szComment;
 $9 = $commentBufferSize;
 $err = 0;
 $lSeek = 0;
 $10 = $1;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -102;
  $454 = $0;
  STACKTOP = sp;return ($454|0);
 }
 $12 = $1;
 $s = $12;
 $13 = $s;
 $14 = $s;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $s;
 $18 = ((($17)) + 88|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $s;
 $26 = ((($25)) + 72|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_i64Add(($21|0),($24|0),($29|0),($32|0))|0);
 $34 = (getTempRet0() | 0);
 $35 = (_call_zseek64($13,$16,$33,$34,0)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $err = -1;
 }
 $37 = $err;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = $s;
   $40 = $s;
   $41 = ((($40)) + 48|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_unz64local_getLong($39,$42,$uMagic)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    $err = -1;
    break;
   }
   $45 = HEAP32[$uMagic>>2]|0;
   $46 = ($45|0)!=(33639248);
   if ($46) {
    $err = -103;
   }
  }
 } while(0);
 $47 = $s;
 $48 = $s;
 $49 = ((($48)) + 48|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_unz64local_getShort($47,$50,$file_info)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $err = -1;
 }
 $53 = $s;
 $54 = $s;
 $55 = ((($54)) + 48|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($file_info)) + 4|0);
 $58 = (_unz64local_getShort($53,$56,$57)|0);
 $59 = ($58|0)!=(0);
 if ($59) {
  $err = -1;
 }
 $60 = $s;
 $61 = $s;
 $62 = ((($61)) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($file_info)) + 8|0);
 $65 = (_unz64local_getShort($60,$63,$64)|0);
 $66 = ($65|0)!=(0);
 if ($66) {
  $err = -1;
 }
 $67 = $s;
 $68 = $s;
 $69 = ((($68)) + 48|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($file_info)) + 12|0);
 $72 = (_unz64local_getShort($67,$70,$71)|0);
 $73 = ($72|0)!=(0);
 if ($73) {
  $err = -1;
 }
 $74 = $s;
 $75 = $s;
 $76 = ((($75)) + 48|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($file_info)) + 16|0);
 $79 = (_unz64local_getLong($74,$77,$78)|0);
 $80 = ($79|0)!=(0);
 if ($80) {
  $err = -1;
 }
 $81 = ((($file_info)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($file_info)) + 64|0);
 _unz64local_DosDateToTmuDate($82,0,$83);
 $84 = $s;
 $85 = $s;
 $86 = ((($85)) + 48|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($file_info)) + 20|0);
 $89 = (_unz64local_getLong($84,$87,$88)|0);
 $90 = ($89|0)!=(0);
 if ($90) {
  $err = -1;
 }
 $91 = $s;
 $92 = $s;
 $93 = ((($92)) + 48|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (_unz64local_getLong($91,$94,$uL)|0);
 $96 = ($95|0)!=(0);
 if ($96) {
  $err = -1;
 }
 $97 = HEAP32[$uL>>2]|0;
 $98 = ((($file_info)) + 24|0);
 $99 = $98;
 $100 = $99;
 HEAP32[$100>>2] = $97;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = 0;
 $103 = $s;
 $104 = $s;
 $105 = ((($104)) + 48|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (_unz64local_getLong($103,$106,$uL)|0);
 $108 = ($107|0)!=(0);
 if ($108) {
  $err = -1;
 }
 $109 = HEAP32[$uL>>2]|0;
 $110 = ((($file_info)) + 32|0);
 $111 = $110;
 $112 = $111;
 HEAP32[$112>>2] = $109;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = 0;
 $115 = $s;
 $116 = $s;
 $117 = ((($116)) + 48|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($file_info)) + 40|0);
 $120 = (_unz64local_getShort($115,$118,$119)|0);
 $121 = ($120|0)!=(0);
 if ($121) {
  $err = -1;
 }
 $122 = $s;
 $123 = $s;
 $124 = ((($123)) + 48|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ((($file_info)) + 44|0);
 $127 = (_unz64local_getShort($122,$125,$126)|0);
 $128 = ($127|0)!=(0);
 if ($128) {
  $err = -1;
 }
 $129 = $s;
 $130 = $s;
 $131 = ((($130)) + 48|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($file_info)) + 48|0);
 $134 = (_unz64local_getShort($129,$132,$133)|0);
 $135 = ($134|0)!=(0);
 if ($135) {
  $err = -1;
 }
 $136 = $s;
 $137 = $s;
 $138 = ((($137)) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($file_info)) + 52|0);
 $141 = (_unz64local_getShort($136,$139,$140)|0);
 $142 = ($141|0)!=(0);
 if ($142) {
  $err = -1;
 }
 $143 = $s;
 $144 = $s;
 $145 = ((($144)) + 48|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ((($file_info)) + 56|0);
 $148 = (_unz64local_getShort($143,$146,$147)|0);
 $149 = ($148|0)!=(0);
 if ($149) {
  $err = -1;
 }
 $150 = $s;
 $151 = $s;
 $152 = ((($151)) + 48|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ((($file_info)) + 60|0);
 $155 = (_unz64local_getLong($150,$153,$154)|0);
 $156 = ($155|0)!=(0);
 if ($156) {
  $err = -1;
 }
 $157 = $s;
 $158 = $s;
 $159 = ((($158)) + 48|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (_unz64local_getLong($157,$160,$uL)|0);
 $162 = ($161|0)!=(0);
 if ($162) {
  $err = -1;
 }
 $163 = HEAP32[$uL>>2]|0;
 $164 = $file_info_internal;
 $165 = $164;
 HEAP32[$165>>2] = $163;
 $166 = (($164) + 4)|0;
 $167 = $166;
 HEAP32[$167>>2] = 0;
 $168 = ((($file_info)) + 40|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $lSeek;
 $171 = (($170) + ($169))|0;
 $lSeek = $171;
 $172 = $err;
 $173 = ($172|0)==(0);
 $174 = $4;
 $175 = ($174|0)!=(0|0);
 $or$cond = $173 & $175;
 if ($or$cond) {
  $176 = ((($file_info)) + 40|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $5;
  $179 = ($177>>>0)<($178>>>0);
  if ($179) {
   $180 = $4;
   $181 = ((($file_info)) + 40|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + ($182)|0);
   HEAP8[$183>>0] = 0;
   $184 = ((($file_info)) + 40|0);
   $185 = HEAP32[$184>>2]|0;
   $uSizeRead = $185;
  } else {
   $186 = $5;
   $uSizeRead = $186;
  }
  $187 = ((($file_info)) + 40|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188>>>0)>(0);
  $190 = $5;
  $191 = ($190>>>0)>(0);
  $or$cond3 = $189 & $191;
  do {
   if ($or$cond3) {
    $192 = $s;
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $s;
    $196 = ((($195)) + 28|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $s;
    $199 = ((($198)) + 48|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = $4;
    $202 = $uSizeRead;
    $203 = (mftCall_iiiii($194|0,($197|0),($200|0),($201|0),($202|0))|0);
    $204 = $uSizeRead;
    $205 = ($203|0)!=($204|0);
    if (!($205)) {
     break;
    }
    $err = -1;
   }
  } while(0);
  $206 = $uSizeRead;
  $207 = $lSeek;
  $208 = (($207) - ($206))|0;
  $lSeek = $208;
 }
 $209 = $err;
 $210 = ($209|0)==(0);
 $211 = $6;
 $212 = ($211|0)!=(0|0);
 $or$cond5 = $210 & $212;
 $213 = ((($file_info)) + 44|0);
 $214 = HEAP32[$213>>2]|0;
 if ($or$cond5) {
  $215 = $7;
  $216 = ($214>>>0)<($215>>>0);
  if ($216) {
   $217 = ((($file_info)) + 44|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $uSizeRead1;
   $220 = $219;
   HEAP32[$220>>2] = $218;
   $221 = (($219) + 4)|0;
   $222 = $221;
   HEAP32[$222>>2] = 0;
  } else {
   $223 = $7;
   $224 = $uSizeRead1;
   $225 = $224;
   HEAP32[$225>>2] = $223;
   $226 = (($224) + 4)|0;
   $227 = $226;
   HEAP32[$227>>2] = 0;
  }
  $228 = $lSeek;
  $229 = ($228|0)!=(0);
  do {
   if ($229) {
    $230 = $s;
    $231 = $s;
    $232 = ((($231)) + 48|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $lSeek;
    $235 = ($234|0)<(0);
    $236 = $235 << 31 >> 31;
    $237 = (_call_zseek64($230,$233,$234,$236,1)|0);
    $238 = ($237|0)==(0);
    if ($238) {
     $lSeek = 0;
     break;
    } else {
     $err = -1;
     break;
    }
   }
  } while(0);
  $239 = ((($file_info)) + 44|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ($240>>>0)>(0);
  $242 = $7;
  $243 = ($242>>>0)>(0);
  $or$cond7 = $241 & $243;
  do {
   if ($or$cond7) {
    $244 = $s;
    $245 = ((($244)) + 4|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $s;
    $248 = ((($247)) + 28|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $s;
    $251 = ((($250)) + 48|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $6;
    $254 = $uSizeRead1;
    $255 = $254;
    $256 = HEAP32[$255>>2]|0;
    $257 = (($254) + 4)|0;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (mftCall_iiiii($246|0,($249|0),($252|0),($253|0),($256|0))|0);
    $261 = $uSizeRead1;
    $262 = $261;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($261) + 4)|0;
    $265 = $264;
    $266 = HEAP32[$265>>2]|0;
    $267 = ($260|0)!=($263|0);
    $268 = (0)!=($266|0);
    $269 = $267 | $268;
    if (!($269)) {
     break;
    }
    $err = -1;
   }
  } while(0);
  $270 = ((($file_info)) + 44|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $uSizeRead1;
  $273 = $272;
  $274 = HEAP32[$273>>2]|0;
  $275 = (($272) + 4)|0;
  $276 = $275;
  $277 = HEAP32[$276>>2]|0;
  $278 = (($271) - ($274))|0;
  $279 = $lSeek;
  $280 = (($279) + ($278))|0;
  $lSeek = $280;
 } else {
  $281 = $lSeek;
  $282 = (($281) + ($214))|0;
  $lSeek = $282;
 }
 $283 = $err;
 $284 = ($283|0)==(0);
 L89: do {
  if ($284) {
   $285 = ((($file_info)) + 44|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ($286|0)!=(0);
   if (!($287)) {
    break;
   }
   $acc = 0;
   $288 = ((($file_info)) + 44|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $lSeek;
   $291 = (($290) - ($289))|0;
   $lSeek = $291;
   $292 = $lSeek;
   $293 = ($292|0)!=(0);
   do {
    if ($293) {
     $294 = $s;
     $295 = $s;
     $296 = ((($295)) + 48|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = $lSeek;
     $299 = ($298|0)<(0);
     $300 = $299 << 31 >> 31;
     $301 = (_call_zseek64($294,$297,$298,$300,1)|0);
     $302 = ($301|0)==(0);
     if ($302) {
      $lSeek = 0;
      break;
     } else {
      $err = -1;
      break;
     }
    }
   } while(0);
   while(1) {
    $303 = $acc;
    $304 = ((($file_info)) + 44|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = ($303>>>0)<($305>>>0);
    if (!($306)) {
     break L89;
    }
    $307 = $s;
    $308 = $s;
    $309 = ((($308)) + 48|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = (_unz64local_getShort($307,$310,$headerId)|0);
    $312 = ($311|0)!=(0);
    if ($312) {
     $err = -1;
    }
    $313 = $s;
    $314 = $s;
    $315 = ((($314)) + 48|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_unz64local_getShort($313,$316,$dataSize)|0);
    $318 = ($317|0)!=(0);
    if ($318) {
     $err = -1;
    }
    $319 = HEAP32[$headerId>>2]|0;
    $320 = ($319|0)==(1);
    do {
     if ($320) {
      $321 = ((($file_info)) + 32|0);
      $322 = $321;
      $323 = $322;
      $324 = HEAP32[$323>>2]|0;
      $325 = (($322) + 4)|0;
      $326 = $325;
      $327 = HEAP32[$326>>2]|0;
      $328 = ($324|0)==(-1);
      $329 = ($327|0)==(0);
      $330 = $328 & $329;
      do {
       if ($330) {
        $331 = $s;
        $332 = $s;
        $333 = ((($332)) + 48|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = ((($file_info)) + 32|0);
        $336 = (_unz64local_getLong64($331,$334,$335)|0);
        $337 = ($336|0)!=(0);
        if (!($337)) {
         break;
        }
        $err = -1;
       }
      } while(0);
      $338 = ((($file_info)) + 24|0);
      $339 = $338;
      $340 = $339;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($339) + 4)|0;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = ($341|0)==(-1);
      $346 = ($344|0)==(0);
      $347 = $345 & $346;
      do {
       if ($347) {
        $348 = $s;
        $349 = $s;
        $350 = ((($349)) + 48|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = ((($file_info)) + 24|0);
        $353 = (_unz64local_getLong64($348,$351,$352)|0);
        $354 = ($353|0)!=(0);
        if (!($354)) {
         break;
        }
        $err = -1;
       }
      } while(0);
      $355 = $file_info_internal;
      $356 = $355;
      $357 = HEAP32[$356>>2]|0;
      $358 = (($355) + 4)|0;
      $359 = $358;
      $360 = HEAP32[$359>>2]|0;
      $361 = ($357|0)==(-1);
      $362 = ($360|0)==(0);
      $363 = $361 & $362;
      do {
       if ($363) {
        $364 = $s;
        $365 = $s;
        $366 = ((($365)) + 48|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = (_unz64local_getLong64($364,$367,$file_info_internal)|0);
        $369 = ($368|0)!=(0);
        if (!($369)) {
         break;
        }
        $err = -1;
       }
      } while(0);
      $370 = ((($file_info)) + 52|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ($371|0)==(-1);
      if (!($372)) {
       break;
      }
      $373 = $s;
      $374 = $s;
      $375 = ((($374)) + 48|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (_unz64local_getLong($373,$376,$uL2)|0);
      $378 = ($377|0)!=(0);
      if (!($378)) {
       break;
      }
      $err = -1;
     } else {
      $379 = $s;
      $380 = $s;
      $381 = ((($380)) + 48|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = HEAP32[$dataSize>>2]|0;
      $384 = (_call_zseek64($379,$382,$383,0,1)|0);
      $385 = ($384|0)!=(0);
      if (!($385)) {
       break;
      }
      $err = -1;
     }
    } while(0);
    $386 = HEAP32[$dataSize>>2]|0;
    $387 = (4 + ($386))|0;
    $388 = $acc;
    $389 = (($388) + ($387))|0;
    $acc = $389;
   }
  }
 } while(0);
 $390 = $err;
 $391 = ($390|0)==(0);
 $392 = $8;
 $393 = ($392|0)!=(0|0);
 $or$cond9 = $391 & $393;
 $394 = ((($file_info)) + 48|0);
 $395 = HEAP32[$394>>2]|0;
 if ($or$cond9) {
  $396 = $9;
  $397 = ($395>>>0)<($396>>>0);
  if ($397) {
   $398 = $8;
   $399 = ((($file_info)) + 48|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = (($398) + ($400)|0);
   HEAP8[$401>>0] = 0;
   $402 = ((($file_info)) + 48|0);
   $403 = HEAP32[$402>>2]|0;
   $uSizeRead3 = $403;
  } else {
   $404 = $9;
   $uSizeRead3 = $404;
  }
  $405 = $lSeek;
  $406 = ($405|0)!=(0);
  do {
   if ($406) {
    $407 = $s;
    $408 = $s;
    $409 = ((($408)) + 48|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = $lSeek;
    $412 = ($411|0)<(0);
    $413 = $412 << 31 >> 31;
    $414 = (_call_zseek64($407,$410,$411,$413,1)|0);
    $415 = ($414|0)==(0);
    if ($415) {
     $lSeek = 0;
     break;
    } else {
     $err = -1;
     break;
    }
   }
  } while(0);
  $416 = ((($file_info)) + 48|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = ($417>>>0)>(0);
  $419 = $9;
  $420 = ($419>>>0)>(0);
  $or$cond11 = $418 & $420;
  do {
   if ($or$cond11) {
    $421 = $s;
    $422 = ((($421)) + 4|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = $s;
    $425 = ((($424)) + 28|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = $s;
    $428 = ((($427)) + 48|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $8;
    $431 = $uSizeRead3;
    $432 = (mftCall_iiiii($423|0,($426|0),($429|0),($430|0),($431|0))|0);
    $433 = $uSizeRead3;
    $434 = ($432|0)!=($433|0);
    if (!($434)) {
     break;
    }
    $err = -1;
   }
  } while(0);
  $435 = ((($file_info)) + 48|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = $uSizeRead3;
  $438 = (($436) - ($437))|0;
  $439 = $lSeek;
  $440 = (($439) + ($438))|0;
  $lSeek = $440;
 } else {
  $441 = $lSeek;
  $442 = (($441) + ($395))|0;
  $lSeek = $442;
 }
 $443 = $err;
 $444 = ($443|0)==(0);
 $445 = $2;
 $446 = ($445|0)!=(0|0);
 $or$cond13 = $444 & $446;
 if ($or$cond13) {
  $447 = $2;
  dest=$447; src=$file_info; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $448 = $err;
 $449 = ($448|0)==(0);
 $450 = $3;
 $451 = ($450|0)!=(0|0);
 $or$cond15 = $449 & $451;
 if ($or$cond15) {
  $452 = $3;
  ;HEAP32[$452>>2]=HEAP32[$file_info_internal>>2]|0;HEAP32[$452+4>>2]=HEAP32[$file_info_internal+4>>2]|0;
 }
 $453 = $err;
 $0 = $453;
 $454 = $0;
 STACKTOP = sp;return ($454|0);
}
function _unz64local_CheckCurrentFileCoherencyHeader($s,$piSizeVar,$poffset_local_extrafield,$psize_local_extrafield) {
 $s = $s|0;
 $piSizeVar = $piSizeVar|0;
 $poffset_local_extrafield = $poffset_local_extrafield|0;
 $psize_local_extrafield = $psize_local_extrafield|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $or$cond = 0, $or$cond3 = 0, $size_extra_field = 0, $size_filename = 0, $uData = 0;
 var $uFlags = 0, $uMagic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uMagic = sp + 20|0;
 $uData = sp + 16|0;
 $uFlags = sp + 12|0;
 $size_filename = sp + 8|0;
 $size_extra_field = sp + 4|0;
 $1 = $s;
 $2 = $piSizeVar;
 $3 = $poffset_local_extrafield;
 $4 = $psize_local_extrafield;
 $err = 0;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 $6 = $3;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $4;
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = $1;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 216|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 72|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (_i64Add(($20|0),($23|0),($28|0),($31|0))|0);
 $33 = (getTempRet0() | 0);
 $34 = (_call_zseek64($12,$15,$32,$33,0)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $0 = -1;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $36 = $err;
 $37 = ($36|0)==(0);
 do {
  if ($37) {
   $38 = $1;
   $39 = $1;
   $40 = ((($39)) + 48|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_unz64local_getLong($38,$41,$uMagic)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    $err = -1;
    break;
   }
   $44 = HEAP32[$uMagic>>2]|0;
   $45 = ($44|0)!=(67324752);
   if ($45) {
    $err = -103;
   }
  }
 } while(0);
 $46 = $1;
 $47 = $1;
 $48 = ((($47)) + 48|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_unz64local_getShort($46,$49,$uData)|0);
 $51 = ($50|0)!=(0);
 if ($51) {
  $err = -1;
 }
 $52 = $1;
 $53 = $1;
 $54 = ((($53)) + 48|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_unz64local_getShort($52,$55,$uFlags)|0);
 $57 = ($56|0)!=(0);
 if ($57) {
  $err = -1;
 }
 $58 = $1;
 $59 = $1;
 $60 = ((($59)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (_unz64local_getShort($58,$61,$uData)|0);
 $63 = ($62|0)!=(0);
 if ($63) {
  $err = -1;
 } else {
  $64 = $err;
  $65 = ($64|0)==(0);
  if ($65) {
   $66 = HEAP32[$uData>>2]|0;
   $67 = $1;
   $68 = ((($67)) + 128|0);
   $69 = ((($68)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($66|0)!=($70|0);
   if ($71) {
    $err = -103;
   }
  }
 }
 $72 = $err;
 $73 = ($72|0)==(0);
 if ($73) {
  $74 = $1;
  $75 = ((($74)) + 128|0);
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $1;
   $80 = ((($79)) + 128|0);
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(12);
   if ($83) {
    $84 = $1;
    $85 = ((($84)) + 128|0);
    $86 = ((($85)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)!=(8);
    if ($88) {
     $err = -103;
    }
   }
  }
 }
 $89 = $1;
 $90 = $1;
 $91 = ((($90)) + 48|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (_unz64local_getLong($89,$92,$uData)|0);
 $94 = ($93|0)!=(0);
 if ($94) {
  $err = -1;
 }
 $95 = $1;
 $96 = $1;
 $97 = ((($96)) + 48|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (_unz64local_getLong($95,$98,$uData)|0);
 $100 = ($99|0)!=(0);
 if ($100) {
  $err = -1;
 } else {
  $101 = $err;
  $102 = ($101|0)==(0);
  if ($102) {
   $103 = HEAP32[$uData>>2]|0;
   $104 = $1;
   $105 = ((($104)) + 128|0);
   $106 = ((($105)) + 20|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($103|0)!=($107|0);
   if ($108) {
    $109 = HEAP32[$uFlags>>2]|0;
    $110 = $109 & 8;
    $111 = ($110|0)==(0);
    if ($111) {
     $err = -103;
    }
   }
  }
 }
 $112 = $1;
 $113 = $1;
 $114 = ((($113)) + 48|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (_unz64local_getLong($112,$115,$uData)|0);
 $117 = ($116|0)!=(0);
 if ($117) {
  $err = -1;
 } else {
  $118 = HEAP32[$uData>>2]|0;
  $119 = ($118|0)!=(-1);
  $120 = $err;
  $121 = ($120|0)==(0);
  $or$cond = $119 & $121;
  if ($or$cond) {
   $122 = HEAP32[$uData>>2]|0;
   $123 = $1;
   $124 = ((($123)) + 128|0);
   $125 = ((($124)) + 24|0);
   $126 = $125;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = (($126) + 4)|0;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = ($122|0)!=($128|0);
   $133 = (0)!=($131|0);
   $134 = $132 | $133;
   if ($134) {
    $135 = HEAP32[$uFlags>>2]|0;
    $136 = $135 & 8;
    $137 = ($136|0)==(0);
    if ($137) {
     $err = -103;
    }
   }
  }
 }
 $138 = $1;
 $139 = $1;
 $140 = ((($139)) + 48|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (_unz64local_getLong($138,$141,$uData)|0);
 $143 = ($142|0)!=(0);
 if ($143) {
  $err = -1;
 } else {
  $144 = HEAP32[$uData>>2]|0;
  $145 = ($144|0)!=(-1);
  $146 = $err;
  $147 = ($146|0)==(0);
  $or$cond3 = $145 & $147;
  if ($or$cond3) {
   $148 = HEAP32[$uData>>2]|0;
   $149 = $1;
   $150 = ((($149)) + 128|0);
   $151 = ((($150)) + 32|0);
   $152 = $151;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($152) + 4)|0;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = ($148|0)!=($154|0);
   $159 = (0)!=($157|0);
   $160 = $158 | $159;
   if ($160) {
    $161 = HEAP32[$uFlags>>2]|0;
    $162 = $161 & 8;
    $163 = ($162|0)==(0);
    if ($163) {
     $err = -103;
    }
   }
  }
 }
 $164 = $1;
 $165 = $1;
 $166 = ((($165)) + 48|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (_unz64local_getShort($164,$167,$size_filename)|0);
 $169 = ($168|0)!=(0);
 if ($169) {
  $err = -1;
 } else {
  $170 = $err;
  $171 = ($170|0)==(0);
  if ($171) {
   $172 = HEAP32[$size_filename>>2]|0;
   $173 = $1;
   $174 = ((($173)) + 128|0);
   $175 = ((($174)) + 40|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($172|0)!=($176|0);
   if ($177) {
    $err = -103;
   }
  }
 }
 $178 = HEAP32[$size_filename>>2]|0;
 $179 = $2;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($180) + ($178))|0;
 HEAP32[$179>>2] = $181;
 $182 = $1;
 $183 = $1;
 $184 = ((($183)) + 48|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (_unz64local_getShort($182,$185,$size_extra_field)|0);
 $187 = ($186|0)!=(0);
 if ($187) {
  $err = -1;
 }
 $188 = $1;
 $189 = ((($188)) + 216|0);
 $190 = $189;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = (($190) + 4)|0;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = (_i64Add(($192|0),($195|0),30,0)|0);
 $197 = (getTempRet0() | 0);
 $198 = HEAP32[$size_filename>>2]|0;
 $199 = (_i64Add(($196|0),($197|0),($198|0),0)|0);
 $200 = (getTempRet0() | 0);
 $201 = $3;
 $202 = $201;
 $203 = $202;
 HEAP32[$203>>2] = $199;
 $204 = (($202) + 4)|0;
 $205 = $204;
 HEAP32[$205>>2] = $200;
 $206 = HEAP32[$size_extra_field>>2]|0;
 $207 = $4;
 HEAP32[$207>>2] = $206;
 $208 = HEAP32[$size_extra_field>>2]|0;
 $209 = $2;
 $210 = HEAP32[$209>>2]|0;
 $211 = (($210) + ($208))|0;
 HEAP32[$209>>2] = $211;
 $212 = $err;
 $0 = $212;
 $213 = $0;
 STACKTOP = sp;return ($213|0);
}
function _unz64local_getLong($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_unz64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $x = $6;
 $7 = $err;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $0;
  $10 = $1;
  $11 = (_unz64local_getByte($9,$10,$i)|0);
  $err = $11;
 }
 $12 = HEAP32[$i>>2]|0;
 $13 = $12 << 8;
 $14 = $x;
 $15 = $14 | $13;
 $x = $15;
 $16 = $err;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  $20 = (_unz64local_getByte($18,$19,$i)|0);
  $err = $20;
 }
 $21 = HEAP32[$i>>2]|0;
 $22 = $21 << 16;
 $23 = $x;
 $24 = $23 | $22;
 $x = $24;
 $25 = $err;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $0;
  $28 = $1;
  $29 = (_unz64local_getByte($27,$28,$i)|0);
  $err = $29;
 }
 $30 = HEAP32[$i>>2]|0;
 $31 = $30 << 24;
 $32 = $x;
 $33 = (($32) + ($31))|0;
 $x = $33;
 $34 = $err;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = $x;
  $37 = $2;
  HEAP32[$37>>2] = $36;
  $39 = $err;
  STACKTOP = sp;return ($39|0);
 } else {
  $38 = $2;
  HEAP32[$38>>2] = 0;
  $39 = $err;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _unz64local_getShort($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_unz64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $x = $6;
 $7 = $err;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $0;
  $10 = $1;
  $11 = (_unz64local_getByte($9,$10,$i)|0);
  $err = $11;
 }
 $12 = HEAP32[$i>>2]|0;
 $13 = $12 << 8;
 $14 = $x;
 $15 = $14 | $13;
 $x = $15;
 $16 = $err;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $x;
  $19 = $2;
  HEAP32[$19>>2] = $18;
  $21 = $err;
  STACKTOP = sp;return ($21|0);
 } else {
  $20 = $2;
  HEAP32[$20>>2] = 0;
  $21 = $err;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _unz64local_getByte($pzlib_filefunc_def,$filestream,$pi) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 20|0;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $pi;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = (mftCall_iiiii($6|0,($9|0),($10|0),($c|0),1)|0);
 $err = $11;
 $12 = $err;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = HEAP8[$c>>0]|0;
  $15 = $14&255;
  $16 = $3;
  HEAP32[$16>>2] = $15;
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $17 = $1;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = (mftCall_iii($19|0,($22|0),($23|0))|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _unz64local_DosDateToTmuDate($0,$1,$ptm) {
 $0 = $0|0;
 $1 = $1|0;
 $ptm = $ptm|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $uDate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $uDate = sp;
 $4 = $2;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $3 = $ptm;
 $8 = $2;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_bitshift64Lshr(($10|0),($13|0),16)|0);
 $15 = (getTempRet0() | 0);
 $16 = $uDate;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = $uDate;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $22 & 31;
 $27 = $3;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $uDate;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $31 & 480;
 $36 = (___udivdi3(($35|0),0,32,0)|0);
 $37 = (getTempRet0() | 0);
 $38 = (_i64Subtract(($36|0),($37|0),1,0)|0);
 $39 = (getTempRet0() | 0);
 $40 = $3;
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = $38;
 $42 = $uDate;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $44 & 65024;
 $49 = (___udivdi3(($48|0),0,512,0)|0);
 $50 = (getTempRet0() | 0);
 $51 = (_i64Add(($49|0),($50|0),1980,0)|0);
 $52 = (getTempRet0() | 0);
 $53 = $3;
 $54 = ((($53)) + 20|0);
 HEAP32[$54>>2] = $51;
 $55 = $2;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $57 & 63488;
 $62 = (___udivdi3(($61|0),0,2048,0)|0);
 $63 = (getTempRet0() | 0);
 $64 = $3;
 $65 = ((($64)) + 8|0);
 HEAP32[$65>>2] = $62;
 $66 = $2;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $68 & 2016;
 $73 = (___udivdi3(($72|0),0,32,0)|0);
 $74 = (getTempRet0() | 0);
 $75 = $3;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = $73;
 $77 = $2;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = $79 & 31;
 $84 = (___muldi3(2,0,($83|0),0)|0);
 $85 = (getTempRet0() | 0);
 $86 = $3;
 HEAP32[$86>>2] = $84;
 STACKTOP = sp;return;
}
function _unz64local_getLong64($pzlib_filefunc_def,$filestream,$pX) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 $pX = $pX|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $err = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp;
 $i = sp + 12|0;
 $0 = $pzlib_filefunc_def;
 $1 = $filestream;
 $2 = $pX;
 HEAP32[$i>>2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = (_unz64local_getByte($3,$4,$i)|0);
 $err = $5;
 $6 = HEAP32[$i>>2]|0;
 $7 = ($6|0)<(0);
 $8 = $7 << 31 >> 31;
 $9 = $x;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = $err;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $0;
  $16 = $1;
  $17 = (_unz64local_getByte($15,$16,$i)|0);
  $err = $17;
 }
 $18 = HEAP32[$i>>2]|0;
 $19 = ($18|0)<(0);
 $20 = $19 << 31 >> 31;
 $21 = (_bitshift64Shl(($18|0),($20|0),8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $x;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 | $21;
 $30 = $28 | $22;
 $31 = $x;
 $32 = $31;
 HEAP32[$32>>2] = $29;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 $35 = $err;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $0;
  $38 = $1;
  $39 = (_unz64local_getByte($37,$38,$i)|0);
  $err = $39;
 }
 $40 = HEAP32[$i>>2]|0;
 $41 = ($40|0)<(0);
 $42 = $41 << 31 >> 31;
 $43 = (_bitshift64Shl(($40|0),($42|0),16)|0);
 $44 = (getTempRet0() | 0);
 $45 = $x;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = $47 | $43;
 $52 = $50 | $44;
 $53 = $x;
 $54 = $53;
 HEAP32[$54>>2] = $51;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $err;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = $0;
  $60 = $1;
  $61 = (_unz64local_getByte($59,$60,$i)|0);
  $err = $61;
 }
 $62 = HEAP32[$i>>2]|0;
 $63 = ($62|0)<(0);
 $64 = $63 << 31 >> 31;
 $65 = (_bitshift64Shl(($62|0),($64|0),24)|0);
 $66 = (getTempRet0() | 0);
 $67 = $x;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = $69 | $65;
 $74 = $72 | $66;
 $75 = $x;
 $76 = $75;
 HEAP32[$76>>2] = $73;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = $err;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $0;
  $82 = $1;
  $83 = (_unz64local_getByte($81,$82,$i)|0);
  $err = $83;
 }
 $84 = HEAP32[$i>>2]|0;
 $85 = ($84|0)<(0);
 $85 << 31 >> 31;
 $86 = $x;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 | $84;
 $93 = $x;
 $94 = $93;
 HEAP32[$94>>2] = $88;
 $95 = (($93) + 4)|0;
 $96 = $95;
 HEAP32[$96>>2] = $92;
 $97 = $err;
 $98 = ($97|0)==(0);
 if ($98) {
  $99 = $0;
  $100 = $1;
  $101 = (_unz64local_getByte($99,$100,$i)|0);
  $err = $101;
 }
 $102 = HEAP32[$i>>2]|0;
 $103 = ($102|0)<(0);
 $104 = $103 << 31 >> 31;
 $105 = (_bitshift64Shl(($102|0),($104|0),40)|0);
 $106 = (getTempRet0() | 0);
 $107 = $x;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $109 | $105;
 $114 = $112 | $106;
 $115 = $x;
 $116 = $115;
 HEAP32[$116>>2] = $113;
 $117 = (($115) + 4)|0;
 $118 = $117;
 HEAP32[$118>>2] = $114;
 $119 = $err;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = $0;
  $122 = $1;
  $123 = (_unz64local_getByte($121,$122,$i)|0);
  $err = $123;
 }
 $124 = HEAP32[$i>>2]|0;
 $125 = ($124|0)<(0);
 $126 = $125 << 31 >> 31;
 $127 = (_bitshift64Shl(($124|0),($126|0),48)|0);
 $128 = (getTempRet0() | 0);
 $129 = $x;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + 4)|0;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = $131 | $127;
 $136 = $134 | $128;
 $137 = $x;
 $138 = $137;
 HEAP32[$138>>2] = $135;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = $136;
 $141 = $err;
 $142 = ($141|0)==(0);
 if ($142) {
  $143 = $0;
  $144 = $1;
  $145 = (_unz64local_getByte($143,$144,$i)|0);
  $err = $145;
 }
 $146 = HEAP32[$i>>2]|0;
 $147 = ($146|0)<(0);
 $148 = $147 << 31 >> 31;
 $149 = (_bitshift64Shl(($146|0),($148|0),56)|0);
 $150 = (getTempRet0() | 0);
 $151 = $x;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = (($151) + 4)|0;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = $153 | $149;
 $158 = $156 | $150;
 $159 = $x;
 $160 = $159;
 HEAP32[$160>>2] = $157;
 $161 = (($159) + 4)|0;
 $162 = $161;
 HEAP32[$162>>2] = $158;
 $163 = $err;
 $164 = ($163|0)==(0);
 if ($164) {
  $165 = $x;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $168 = (($165) + 4)|0;
  $169 = $168;
  $170 = HEAP32[$169>>2]|0;
  $171 = $2;
  $172 = $171;
  $173 = $172;
  HEAP32[$173>>2] = $167;
  $174 = (($172) + 4)|0;
  $175 = $174;
  HEAP32[$175>>2] = $170;
  $181 = $err;
  STACKTOP = sp;return ($181|0);
 } else {
  $176 = $2;
  $177 = $176;
  $178 = $177;
  HEAP32[$178>>2] = 0;
  $179 = (($177) + 4)|0;
  $180 = $179;
  HEAP32[$180>>2] = 0;
  $181 = $err;
  STACKTOP = sp;return ($181|0);
 }
 return (0)|0;
}
function _unz64local_SearchCentralDir64($pzlib_filefunc_def,$filestream) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $relativeOffset = 0, $uBackRead = 0, $uL = 0, $uMaxBack = 0, $uPosFound = 0, $uReadPos = 0, $uReadSize = 0;
 var $uSizeFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 48|0;
 $uSizeFile = sp + 40|0;
 $uBackRead = sp + 32|0;
 $uMaxBack = sp + 24|0;
 $uPosFound = sp + 16|0;
 $uL = sp + 64|0;
 $relativeOffset = sp + 8|0;
 $uReadPos = sp;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $uMaxBack;
 $4 = $3;
 HEAP32[$4>>2] = 65535;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $uPosFound;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = $2;
 $13 = (_call_zseek64($11,$12,0,0,2)|0);
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $15 = $0;
   $16 = $15;
   HEAP32[$16>>2] = 0;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = 0;
  } else {
   $19 = $1;
   $20 = $2;
   $21 = (_call_ztell64($19,$20)|0);
   $22 = (getTempRet0() | 0);
   $23 = $uSizeFile;
   $24 = $23;
   HEAP32[$24>>2] = $21;
   $25 = (($23) + 4)|0;
   $26 = $25;
   HEAP32[$26>>2] = $22;
   $27 = $uMaxBack;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = $uSizeFile;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($32>>>0)>($38>>>0);
   $40 = ($29>>>0)>($35>>>0);
   $41 = ($32|0)==($38|0);
   $42 = $41 & $40;
   $43 = $39 | $42;
   if ($43) {
    $44 = $uSizeFile;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = (($44) + 4)|0;
    $48 = $47;
    $49 = HEAP32[$48>>2]|0;
    $50 = $uMaxBack;
    $51 = $50;
    HEAP32[$51>>2] = $46;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $49;
   }
   $54 = (_malloc(1028)|0);
   $buf = $54;
   $55 = $buf;
   $56 = ($55|0)==(0|0);
   if ($56) {
    $57 = $0;
    $58 = $57;
    HEAP32[$58>>2] = 0;
    $59 = (($57) + 4)|0;
    $60 = $59;
    HEAP32[$60>>2] = 0;
    break;
   }
   $61 = $uBackRead;
   $62 = $61;
   HEAP32[$62>>2] = 4;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = 0;
   while(1) {
    $65 = $uBackRead;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $uMaxBack;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($71) + 4)|0;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($70>>>0)<($76>>>0);
    $78 = ($67>>>0)<($73>>>0);
    $79 = ($70|0)==($76|0);
    $80 = $79 & $78;
    $81 = $77 | $80;
    if (!($81)) {
     break;
    }
    $82 = $uBackRead;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = (_i64Add(($84|0),($87|0),1024,0)|0);
    $89 = (getTempRet0() | 0);
    $90 = $uMaxBack;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($89>>>0)>($95>>>0);
    $97 = ($88>>>0)>($92>>>0);
    $98 = ($89|0)==($95|0);
    $99 = $98 & $97;
    $100 = $96 | $99;
    if ($100) {
     $101 = $uMaxBack;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($101) + 4)|0;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $107 = $uBackRead;
     $108 = $107;
     HEAP32[$108>>2] = $103;
     $109 = (($107) + 4)|0;
     $110 = $109;
     HEAP32[$110>>2] = $106;
    } else {
     $111 = $uBackRead;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($111) + 4)|0;
     $115 = $114;
     $116 = HEAP32[$115>>2]|0;
     $117 = (_i64Add(($113|0),($116|0),1024,0)|0);
     $118 = (getTempRet0() | 0);
     $119 = $uBackRead;
     $120 = $119;
     HEAP32[$120>>2] = $117;
     $121 = (($119) + 4)|0;
     $122 = $121;
     HEAP32[$122>>2] = $118;
    }
    $123 = $uSizeFile;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($123) + 4)|0;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = $uBackRead;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = (_i64Subtract(($125|0),($128|0),($131|0),($134|0))|0);
    $136 = (getTempRet0() | 0);
    $137 = $uReadPos;
    $138 = $137;
    HEAP32[$138>>2] = $135;
    $139 = (($137) + 4)|0;
    $140 = $139;
    HEAP32[$140>>2] = $136;
    $141 = $uSizeFile;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($141) + 4)|0;
    $145 = $144;
    $146 = HEAP32[$145>>2]|0;
    $147 = $uReadPos;
    $148 = $147;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($147) + 4)|0;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (_i64Subtract(($143|0),($146|0),($149|0),($152|0))|0);
    $154 = (getTempRet0() | 0);
    $155 = (0)<($154>>>0);
    $156 = (1028)<($153>>>0);
    $157 = (0)==($154|0);
    $158 = $157 & $156;
    $159 = $155 | $158;
    if ($159) {
     $174 = 1028;
    } else {
     $160 = $uSizeFile;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = (($160) + 4)|0;
     $164 = $163;
     $165 = HEAP32[$164>>2]|0;
     $166 = $uReadPos;
     $167 = $166;
     $168 = HEAP32[$167>>2]|0;
     $169 = (($166) + 4)|0;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (_i64Subtract(($162|0),($165|0),($168|0),($171|0))|0);
     $173 = (getTempRet0() | 0);
     $174 = $172;
    }
    $uReadSize = $174;
    $175 = $1;
    $176 = $2;
    $177 = $uReadPos;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (_call_zseek64($175,$176,$179,$182,0)|0);
    $184 = ($183|0)!=(0);
    if ($184) {
     break;
    }
    $185 = $1;
    $186 = ((($185)) + 4|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $1;
    $189 = ((($188)) + 28|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $2;
    $192 = $buf;
    $193 = $uReadSize;
    $194 = (mftCall_iiiii($187|0,($190|0),($191|0),($192|0),($193|0))|0);
    $195 = $uReadSize;
    $196 = ($194|0)!=($195|0);
    if ($196) {
     break;
    }
    $197 = $uReadSize;
    $198 = (($197) - 3)|0;
    $i = $198;
    while(1) {
     $199 = $i;
     $200 = (($199) + -1)|0;
     $i = $200;
     $201 = ($199|0)>(0);
     if (!($201)) {
      break;
     }
     $202 = $buf;
     $203 = $i;
     $204 = (($202) + ($203)|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $207 = ($206|0)==(80);
     if (!($207)) {
      continue;
     }
     $208 = $buf;
     $209 = $i;
     $210 = (($208) + ($209)|0);
     $211 = ((($210)) + 1|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = ($213|0)==(75);
     if (!($214)) {
      continue;
     }
     $215 = $buf;
     $216 = $i;
     $217 = (($215) + ($216)|0);
     $218 = ((($217)) + 2|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = ($220|0)==(6);
     if (!($221)) {
      continue;
     }
     $222 = $buf;
     $223 = $i;
     $224 = (($222) + ($223)|0);
     $225 = ((($224)) + 3|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = ($227|0)==(7);
     if ($228) {
      label = 22;
      break;
     }
    }
    if ((label|0) == 22) {
     label = 0;
     $229 = $uReadPos;
     $230 = $229;
     $231 = HEAP32[$230>>2]|0;
     $232 = (($229) + 4)|0;
     $233 = $232;
     $234 = HEAP32[$233>>2]|0;
     $235 = $i;
     $236 = ($235|0)<(0);
     $237 = $236 << 31 >> 31;
     $238 = (_i64Add(($231|0),($234|0),($235|0),($237|0))|0);
     $239 = (getTempRet0() | 0);
     $240 = $uPosFound;
     $241 = $240;
     HEAP32[$241>>2] = $238;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = $239;
    }
    $244 = $uPosFound;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)!=(0);
    $251 = ($249|0)!=(0);
    $252 = $250 | $251;
    if ($252) {
     break;
    }
   }
   $253 = $buf;
   $254 = ($253|0)!=(0|0);
   if ($254) {
    $255 = $buf;
    _free(($255|0));
   }
   $256 = $uPosFound;
   $257 = $256;
   $258 = HEAP32[$257>>2]|0;
   $259 = (($256) + 4)|0;
   $260 = $259;
   $261 = HEAP32[$260>>2]|0;
   $262 = ($258|0)==(0);
   $263 = ($261|0)==(0);
   $264 = $262 & $263;
   if ($264) {
    $265 = $0;
    $266 = $265;
    HEAP32[$266>>2] = 0;
    $267 = (($265) + 4)|0;
    $268 = $267;
    HEAP32[$268>>2] = 0;
    break;
   }
   $269 = $1;
   $270 = $2;
   $271 = $uPosFound;
   $272 = $271;
   $273 = HEAP32[$272>>2]|0;
   $274 = (($271) + 4)|0;
   $275 = $274;
   $276 = HEAP32[$275>>2]|0;
   $277 = (_call_zseek64($269,$270,$273,$276,0)|0);
   $278 = ($277|0)!=(0);
   if ($278) {
    $279 = $0;
    $280 = $279;
    HEAP32[$280>>2] = 0;
    $281 = (($279) + 4)|0;
    $282 = $281;
    HEAP32[$282>>2] = 0;
    break;
   }
   $283 = $1;
   $284 = $2;
   $285 = (_unz64local_getLong($283,$284,$uL)|0);
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $0;
    $288 = $287;
    HEAP32[$288>>2] = 0;
    $289 = (($287) + 4)|0;
    $290 = $289;
    HEAP32[$290>>2] = 0;
    break;
   }
   $291 = $1;
   $292 = $2;
   $293 = (_unz64local_getLong($291,$292,$uL)|0);
   $294 = ($293|0)!=(0);
   if ($294) {
    $295 = $0;
    $296 = $295;
    HEAP32[$296>>2] = 0;
    $297 = (($295) + 4)|0;
    $298 = $297;
    HEAP32[$298>>2] = 0;
    break;
   }
   $299 = HEAP32[$uL>>2]|0;
   $300 = ($299|0)!=(0);
   if ($300) {
    $301 = $0;
    $302 = $301;
    HEAP32[$302>>2] = 0;
    $303 = (($301) + 4)|0;
    $304 = $303;
    HEAP32[$304>>2] = 0;
    break;
   }
   $305 = $1;
   $306 = $2;
   $307 = (_unz64local_getLong64($305,$306,$relativeOffset)|0);
   $308 = ($307|0)!=(0);
   if ($308) {
    $309 = $0;
    $310 = $309;
    HEAP32[$310>>2] = 0;
    $311 = (($309) + 4)|0;
    $312 = $311;
    HEAP32[$312>>2] = 0;
    break;
   }
   $313 = $1;
   $314 = $2;
   $315 = (_unz64local_getLong($313,$314,$uL)|0);
   $316 = ($315|0)!=(0);
   if ($316) {
    $317 = $0;
    $318 = $317;
    HEAP32[$318>>2] = 0;
    $319 = (($317) + 4)|0;
    $320 = $319;
    HEAP32[$320>>2] = 0;
    break;
   }
   $321 = HEAP32[$uL>>2]|0;
   $322 = ($321|0)!=(1);
   if ($322) {
    $323 = $0;
    $324 = $323;
    HEAP32[$324>>2] = 0;
    $325 = (($323) + 4)|0;
    $326 = $325;
    HEAP32[$326>>2] = 0;
    break;
   }
   $327 = $1;
   $328 = $2;
   $329 = $relativeOffset;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = (($329) + 4)|0;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (_call_zseek64($327,$328,$331,$334,0)|0);
   $336 = ($335|0)!=(0);
   if ($336) {
    $337 = $0;
    $338 = $337;
    HEAP32[$338>>2] = 0;
    $339 = (($337) + 4)|0;
    $340 = $339;
    HEAP32[$340>>2] = 0;
    break;
   }
   $341 = $1;
   $342 = $2;
   $343 = (_unz64local_getLong($341,$342,$uL)|0);
   $344 = ($343|0)!=(0);
   if ($344) {
    $345 = $0;
    $346 = $345;
    HEAP32[$346>>2] = 0;
    $347 = (($345) + 4)|0;
    $348 = $347;
    HEAP32[$348>>2] = 0;
    break;
   }
   $349 = HEAP32[$uL>>2]|0;
   $350 = ($349|0)!=(101075792);
   if ($350) {
    $351 = $0;
    $352 = $351;
    HEAP32[$352>>2] = 0;
    $353 = (($351) + 4)|0;
    $354 = $353;
    HEAP32[$354>>2] = 0;
    break;
   } else {
    $355 = $relativeOffset;
    $356 = $355;
    $357 = HEAP32[$356>>2]|0;
    $358 = (($355) + 4)|0;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = $0;
    $362 = $361;
    HEAP32[$362>>2] = $357;
    $363 = (($361) + 4)|0;
    $364 = $363;
    HEAP32[$364>>2] = $360;
    break;
   }
  }
 } while(0);
 $365 = $0;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = (($365) + 4)|0;
 $369 = $368;
 $370 = HEAP32[$369>>2]|0;
 setTempRet0(($370) | 0);
 STACKTOP = sp;return ($367|0);
}
function _unz64local_SearchCentralDir($pzlib_filefunc_def,$filestream) {
 $pzlib_filefunc_def = $pzlib_filefunc_def|0;
 $filestream = $filestream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $uBackRead = 0, $uMaxBack = 0, $uPosFound = 0, $uReadPos = 0, $uReadSize = 0, $uSizeFile = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $uSizeFile = sp + 32|0;
 $uBackRead = sp + 24|0;
 $uMaxBack = sp + 16|0;
 $uPosFound = sp + 8|0;
 $uReadPos = sp;
 $1 = $pzlib_filefunc_def;
 $2 = $filestream;
 $3 = $uMaxBack;
 $4 = $3;
 HEAP32[$4>>2] = 65535;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $uPosFound;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = $2;
 $13 = (_call_zseek64($11,$12,0,0,2)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $266 = $0;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  setTempRet0(($271) | 0);
  STACKTOP = sp;return ($268|0);
 }
 $19 = $1;
 $20 = $2;
 $21 = (_call_ztell64($19,$20)|0);
 $22 = (getTempRet0() | 0);
 $23 = $uSizeFile;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $uMaxBack;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $uSizeFile;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($32>>>0)>($38>>>0);
 $40 = ($29>>>0)>($35>>>0);
 $41 = ($32|0)==($38|0);
 $42 = $41 & $40;
 $43 = $39 | $42;
 if ($43) {
  $44 = $uSizeFile;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $uMaxBack;
  $51 = $50;
  HEAP32[$51>>2] = $46;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
 }
 $54 = (_malloc(1028)|0);
 $buf = $54;
 $55 = $buf;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $0;
  $58 = $57;
  HEAP32[$58>>2] = 0;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = 0;
  $266 = $0;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  setTempRet0(($271) | 0);
  STACKTOP = sp;return ($268|0);
 }
 $61 = $uBackRead;
 $62 = $61;
 HEAP32[$62>>2] = 4;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = 0;
 while(1) {
  $65 = $uBackRead;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $uMaxBack;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($70>>>0)<($76>>>0);
  $78 = ($67>>>0)<($73>>>0);
  $79 = ($70|0)==($76|0);
  $80 = $79 & $78;
  $81 = $77 | $80;
  if (!($81)) {
   break;
  }
  $82 = $uBackRead;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + 4)|0;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (_i64Add(($84|0),($87|0),1024,0)|0);
  $89 = (getTempRet0() | 0);
  $90 = $uMaxBack;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + 4)|0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = ($89>>>0)>($95>>>0);
  $97 = ($88>>>0)>($92>>>0);
  $98 = ($89|0)==($95|0);
  $99 = $98 & $97;
  $100 = $96 | $99;
  if ($100) {
   $101 = $uMaxBack;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $uBackRead;
   $108 = $107;
   HEAP32[$108>>2] = $103;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = $106;
  } else {
   $111 = $uBackRead;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (_i64Add(($113|0),($116|0),1024,0)|0);
   $118 = (getTempRet0() | 0);
   $119 = $uBackRead;
   $120 = $119;
   HEAP32[$120>>2] = $117;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $118;
  }
  $123 = $uSizeFile;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $uBackRead;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + 4)|0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (_i64Subtract(($125|0),($128|0),($131|0),($134|0))|0);
  $136 = (getTempRet0() | 0);
  $137 = $uReadPos;
  $138 = $137;
  HEAP32[$138>>2] = $135;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $136;
  $141 = $uSizeFile;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = $uReadPos;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (_i64Subtract(($143|0),($146|0),($149|0),($152|0))|0);
  $154 = (getTempRet0() | 0);
  $155 = (0)<($154>>>0);
  $156 = (1028)<($153>>>0);
  $157 = (0)==($154|0);
  $158 = $157 & $156;
  $159 = $155 | $158;
  if ($159) {
   $174 = 1028;
  } else {
   $160 = $uSizeFile;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $163 = (($160) + 4)|0;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = $uReadPos;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + 4)|0;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = (_i64Subtract(($162|0),($165|0),($168|0),($171|0))|0);
   $173 = (getTempRet0() | 0);
   $174 = $172;
  }
  $uReadSize = $174;
  $175 = $1;
  $176 = $2;
  $177 = $uReadPos;
  $178 = $177;
  $179 = HEAP32[$178>>2]|0;
  $180 = (($177) + 4)|0;
  $181 = $180;
  $182 = HEAP32[$181>>2]|0;
  $183 = (_call_zseek64($175,$176,$179,$182,0)|0);
  $184 = ($183|0)!=(0);
  if ($184) {
   break;
  }
  $185 = $1;
  $186 = ((($185)) + 4|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $1;
  $189 = ((($188)) + 28|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $2;
  $192 = $buf;
  $193 = $uReadSize;
  $194 = (mftCall_iiiii($187|0,($190|0),($191|0),($192|0),($193|0))|0);
  $195 = $uReadSize;
  $196 = ($194|0)!=($195|0);
  if ($196) {
   break;
  }
  $197 = $uReadSize;
  $198 = (($197) - 3)|0;
  $i = $198;
  while(1) {
   $199 = $i;
   $200 = (($199) + -1)|0;
   $i = $200;
   $201 = ($199|0)>(0);
   if (!($201)) {
    break;
   }
   $202 = $buf;
   $203 = $i;
   $204 = (($202) + ($203)|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $207 = ($206|0)==(80);
   if (!($207)) {
    continue;
   }
   $208 = $buf;
   $209 = $i;
   $210 = (($208) + ($209)|0);
   $211 = ((($210)) + 1|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = ($213|0)==(75);
   if (!($214)) {
    continue;
   }
   $215 = $buf;
   $216 = $i;
   $217 = (($215) + ($216)|0);
   $218 = ((($217)) + 2|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = ($220|0)==(5);
   if (!($221)) {
    continue;
   }
   $222 = $buf;
   $223 = $i;
   $224 = (($222) + ($223)|0);
   $225 = ((($224)) + 3|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = ($227|0)==(6);
   if ($228) {
    label = 22;
    break;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   $229 = $uReadPos;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $232 = (($229) + 4)|0;
   $233 = $232;
   $234 = HEAP32[$233>>2]|0;
   $235 = $i;
   $236 = ($235|0)<(0);
   $237 = $236 << 31 >> 31;
   $238 = (_i64Add(($231|0),($234|0),($235|0),($237|0))|0);
   $239 = (getTempRet0() | 0);
   $240 = $uPosFound;
   $241 = $240;
   HEAP32[$241>>2] = $238;
   $242 = (($240) + 4)|0;
   $243 = $242;
   HEAP32[$243>>2] = $239;
  }
  $244 = $uPosFound;
  $245 = $244;
  $246 = HEAP32[$245>>2]|0;
  $247 = (($244) + 4)|0;
  $248 = $247;
  $249 = HEAP32[$248>>2]|0;
  $250 = ($246|0)!=(0);
  $251 = ($249|0)!=(0);
  $252 = $250 | $251;
  if ($252) {
   break;
  }
 }
 $253 = $buf;
 $254 = ($253|0)!=(0|0);
 if ($254) {
  $255 = $buf;
  _free(($255|0));
 }
 $256 = $uPosFound;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = (($256) + 4)|0;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = $0;
 $263 = $262;
 HEAP32[$263>>2] = $258;
 $264 = (($262) + 4)|0;
 $265 = $264;
 HEAP32[$265>>2] = $261;
 $266 = $0;
 $267 = $266;
 $268 = HEAP32[$267>>2]|0;
 $269 = (($266) + 4)|0;
 $270 = $269;
 $271 = HEAP32[$270>>2]|0;
 setTempRet0(($271) | 0);
 STACKTOP = sp;return ($268|0);
}
function _ScreenshotRomOpen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(gb + (23108456) | 0)>>2] = 0;
 return;
}
function _TakeScreenshot($iFrameNumber) {
 $iFrameNumber = $iFrameNumber|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filename = 0, $height = 0, $pucFrame = 0, $vararg_buffer = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $width = sp + 12|0;
 $height = sp + 8|0;
 $0 = $iFrameNumber;
 $1 = (__ZL21GetNextScreenshotPathv()|0);
 $filename = $1;
 $2 = $filename;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$width>>2] = 640;
 HEAP32[$height>>2] = 480;
 $4 = HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2]|0;
 mftCall_viiii($4|0,(0|0),($width|0),($height|0),0);
 $5 = HEAP32[$width>>2]|0;
 $6 = HEAP32[$height>>2]|0;
 $7 = Math_imul($5, $6)|0;
 $8 = ($7*3)|0;
 $9 = (_malloc(($8|0))|0);
 $pucFrame = $9;
 $10 = $pucFrame;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $filename;
  _free(($12|0));
  STACKTOP = sp;return;
 } else {
  $13 = HEAP32[((((gb + (10521540) | 0)) + 48|0))>>2]|0;
  $14 = $pucFrame;
  mftCall_viiii($13|0,($14|0),($width|0),($height|0),0);
  $15 = $filename;
  $16 = $pucFrame;
  $17 = HEAP32[$width>>2]|0;
  $18 = HEAP32[$height>>2]|0;
  $19 = HEAP32[$width>>2]|0;
  $20 = ($19*3)|0;
  (__ZL19SaveRGBBufferToFilePKcPKhiii($15,$16,$17,$18,$20)|0);
  $21 = $pucFrame;
  _free(($21|0));
  $22 = $filename;
  _free(($22|0));
  $23 = $0;
  HEAP32[$vararg_buffer>>2] = $23;
  _main_message(3,6,(gb + (20835) | 0),$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZL21GetNextScreenshotPathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $NumberPtr = 0, $ScreenshotFileName = 0, $ScreenshotPath = 0, $SshotDir = 0, $pFile = 0, $pch = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ScreenshotFileName = sp + 52|0;
 (_strcpy(($ScreenshotFileName|0),(((((gb + (8422180) | 0)) + 16|0))|0))|0);
 $pch = $ScreenshotFileName;
 while(1) {
  $1 = $pch;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $pch;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(32);
  if ($8) {
   $14 = 95;
  } else {
   $9 = $pch;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = (_tolower(($11|0))|0);
   $14 = $12;
  }
  $13 = $14&255;
  $15 = $pch;
  HEAP8[$15>>0] = $13;
  $16 = $pch;
  $17 = ((($16)) + 1|0);
  $pch = $17;
 }
 (_strcat(($ScreenshotFileName|0),((gb + (21082) | 0)|0))|0);
 $18 = HEAP32[(gb + (8410648) | 0)>>2]|0;
 $19 = (_ConfigGetParamString($18,(gb + (21091) | 0))|0);
 $SshotDir = $19;
 $20 = $SshotDir;
 $21 = ($20|0)==(0|0);
 if ($21) {
  label = 8;
 } else {
  $22 = $SshotDir;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 8;
  } else {
   $36 = $SshotDir;
   $37 = (_combinepath($36,$ScreenshotFileName)|0);
   $ScreenshotPath = $37;
   $38 = $ScreenshotPath;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $0 = 0;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
  }
 }
 do {
  if ((label|0) == 8) {
   $26 = (_ConfigGetUserDataPath()|0);
   HEAP32[$vararg_buffer>>2] = $26;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $ScreenshotFileName;
   $27 = (_formatstr((gb + (21106) | 0),$vararg_buffer)|0);
   $ScreenshotPath = $27;
   $28 = $ScreenshotPath;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    $30 = $ScreenshotPath;
    (_osal_mkdirp($30,448)|0);
    $31 = HEAP8[(gb + (21123) | 0)>>0]|0;
    $32 = $ScreenshotPath;
    $33 = (_strlen(($32|0))|0);
    $34 = $ScreenshotPath;
    $35 = (($34) + ($33)|0);
    HEAP8[$35>>0] = $31;
    break;
   }
   $0 = 0;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $40 = $ScreenshotPath;
 $41 = $ScreenshotPath;
 $42 = (_strlen(($41|0))|0);
 $43 = (($40) + ($42)|0);
 $44 = ((($43)) + -7|0);
 $NumberPtr = $44;
 while(1) {
  $45 = HEAP32[(gb + (23108456) | 0)>>2]|0;
  $46 = ($45|0)<(1000);
  if (!($46)) {
   break;
  }
  $47 = $NumberPtr;
  $48 = HEAP32[(gb + (23108456) | 0)>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $48;
  (_sprintf(($47|0),((gb + (21125) | 0)|0),($vararg_buffer3|0))|0);
  $49 = $ScreenshotPath;
  $50 = (_fopen(($49|0),((gb + (21134) | 0)|0))|0);
  $pFile = $50;
  $51 = $pFile;
  $52 = ($51|0)==(0|0);
  if ($52) {
   break;
  }
  $53 = $pFile;
  (_fclose(($53|0))|0);
  $54 = HEAP32[(gb + (23108456) | 0)>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[(gb + (23108456) | 0)>>2] = $55;
 }
 $56 = HEAP32[(gb + (23108456) | 0)>>2]|0;
 $57 = ($56|0)>=(1000);
 if ($57) {
  _DebugMessage(1,(gb + (21136) | 0),$vararg_buffer6);
  $58 = $ScreenshotPath;
  _free(($58|0));
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 } else {
  $59 = HEAP32[(gb + (23108456) | 0)>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[(gb + (23108456) | 0)>>2] = $60;
  $61 = $ScreenshotPath;
  $0 = $61;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function __ZL19SaveRGBBufferToFilePKcPKhiii($filename,$buf,$width,$height,$pitch) {
 $filename = $filename|0;
 $buf = $buf|0;
 $width = $width|0;
 $height = $height|0;
 $pitch = $pitch|0;
 var $$0 = 0, $$reg2mem57$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $cond = 0, $cond65 = 0, $cond66 = 0, $cond67 = 0, $cond68 = 0, $cond69 = 0, $cond70 = 0, $cond71 = 0, $cond72 = 0, $cond73 = 0, $cond74 = 0, $cond75 = 0, $cond76 = 0;
 var $cond77 = 0, $cond78 = 0, $cond79 = 0, $cond80 = 0, $cond81 = 0, $cond82 = 0, $i$0 = 0, $png_info = 0, $png_write = 0, $vararg_buffer = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer63 = sp + 24|0;
 $vararg_buffer61 = sp + 16|0;
 $vararg_buffer59 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $png_write = sp + 32|0;
 $png_info = sp + 28|0;
 __THREW__ = 0;
 $0 = (invoke_iiiii((fb + (970) | 0),((gb + (20869) | 0)|0),(0|0),((fb + (971) | 0)|0),((fb + (972) | 0)|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $2 = -1; };
 $3 = (getTempRet0() | 0);
 $cond = ($2|0)==(1);
 do {
  if ($cond) {
   $$reg2mem57$0 = $3;
  } else {
   HEAP32[$png_write>>2] = $0;
   $4 = HEAP32[$png_write>>2]|0;
   $5 = ($4|0)!=(0|0);
   if (!($5)) {
    __THREW__ = 0;
    invoke_viii((fb + (973) | 0),1,((gb + (20876) | 0)|0),($vararg_buffer|0));
    $6 = __THREW__; __THREW__ = 0;
    if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $7 = -1; };
    $8 = (getTempRet0() | 0);
    $cond65 = ($7|0)==(1);
    if ($cond65) {
     $$reg2mem57$0 = $8;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   $9 = HEAP32[$png_write>>2]|0;
   __THREW__ = 0;
   $10 = (invoke_ii((fb + (974) | 0),($9|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $12 = -1; };
   $13 = (getTempRet0() | 0);
   $cond66 = ($12|0)==(1);
   if ($cond66) {
    $$reg2mem57$0 = $13;
   } else {
    HEAP32[$png_info>>2] = $10;
    $14 = HEAP32[$png_info>>2]|0;
    $15 = ($14|0)!=(0|0);
    if ($15) {
     $22 = HEAP32[$png_write>>2]|0;
     __THREW__ = 0;
     $23 = (invoke_iiii((fb + (976) | 0),($22|0),((fb + (977) | 0)|0),156)|0);
     $24 = __THREW__; __THREW__ = 0;
     if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $25 = -1; };
     $26 = (getTempRet0() | 0);
     $cond69 = ($25|0)==(1);
     if ($cond69) {
      $$reg2mem57$0 = $26;
      break;
     }
     _setjmpTable = _saveSetjmp($23,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = (getTempRet0() | 0);
     __THREW__ = 0;
     $27 = __THREW__; __THREW__ = 0;
     if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $28 = -1; };
     $29 = (getTempRet0() | 0);
     $cond70 = ($28|0)==(1);
     if ($cond70) {
      $$reg2mem57$0 = $29;
      break;
     }
     $$reg2mem57$0 = 0;
     break;
    }
    __THREW__ = 0;
    invoke_vii((fb + (975) | 0),($png_write|0),(0|0));
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $17 = -1; };
    $18 = (getTempRet0() | 0);
    $cond67 = ($17|0)==(1);
    if ($cond67) {
     $$reg2mem57$0 = $18;
    } else {
     __THREW__ = 0;
     invoke_viii((fb + (973) | 0),1,((gb + (20909) | 0)|0),($vararg_buffer59|0));
     $19 = __THREW__; __THREW__ = 0;
     if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $20 = -1; };
     $21 = (getTempRet0() | 0);
     $cond68 = ($20|0)==(1);
     if ($cond68) {
      $$reg2mem57$0 = $21;
     } else {
      $$0 = 2;
      _free(_setjmpTable|0);
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 } while(0);
 while(1) {
  $30 = ($$reg2mem57$0|0)!=(0);
  if ($30) {
   __THREW__ = 0;
   invoke_vii((fb + (975) | 0),($png_write|0),($png_info|0));
   $31 = __THREW__; __THREW__ = 0;
   if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $32 = -1; };
   $33 = (getTempRet0() | 0);
   $cond81 = ($32|0)==(1);
   if ($cond81) {
    $$reg2mem57$0 = $33;
    continue;
   }
   __THREW__ = 0;
   invoke_viii((fb + (973) | 0),1,((gb + (20941) | 0)|0),($vararg_buffer61|0));
   $34 = __THREW__; __THREW__ = 0;
   if ((($34|0) != 0) & ((threwValue|0) != 0)) { $35 = _testSetjmp(HEAP32[$34>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($35|0) == 0) { _longjmp($34|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $35 = -1; };
   $36 = (getTempRet0() | 0);
   $cond82 = ($35|0)==(1);
   if ($cond82) {
    $$reg2mem57$0 = $36;
    continue;
   } else {
    label = 16;
    break;
   }
  }
  __THREW__ = 0;
  $37 = (invoke_iii((fb + (978) | 0),($filename|0),((gb + (20964) | 0)|0))|0);
  $38 = __THREW__; __THREW__ = 0;
  if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $39 = -1; };
  $40 = (getTempRet0() | 0);
  $cond71 = ($39|0)==(1);
  if ($cond71) {
   $$reg2mem57$0 = $40;
   continue;
  }
  $41 = ($37|0)==(0|0);
  if ($41) {
   __THREW__ = 0;
   HEAP32[$vararg_buffer63>>2] = $filename;
   invoke_viii((fb + (973) | 0),1,((gb + (20967) | 0)|0),($vararg_buffer63|0));
   $42 = __THREW__; __THREW__ = 0;
   if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $43 = -1; };
   $44 = (getTempRet0() | 0);
   $cond80 = ($43|0)==(1);
   if ($cond80) {
    $$reg2mem57$0 = $44;
    continue;
   } else {
    label = 20;
    break;
   }
  }
  $45 = HEAP32[$png_write>>2]|0;
  __THREW__ = 0;
  invoke_viiii((fb + (979) | 0),($45|0),($37|0),((fb + (980) | 0)|0),((fb + (981) | 0)|0));
  $46 = __THREW__; __THREW__ = 0;
  if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $47 = -1; };
  $48 = (getTempRet0() | 0);
  $cond72 = ($47|0)==(1);
  if ($cond72) {
   $$reg2mem57$0 = $48;
   continue;
  }
  $49 = HEAP32[$png_write>>2]|0;
  $50 = HEAP32[$png_info>>2]|0;
  __THREW__ = 0;
  invoke_viiiiiiiii((fb + (982) | 0),($49|0),($50|0),($width|0),($height|0),8,2,0,0,0);
  $51 = __THREW__; __THREW__ = 0;
  if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $52 = -1; };
  $53 = (getTempRet0() | 0);
  $cond73 = ($52|0)==(1);
  if ($cond73) {
   $$reg2mem57$0 = $53;
   continue;
  }
  $54 = $height<<2;
  __THREW__ = 0;
  $55 = (invoke_ii((fb + (983) | 0),($54|0))|0);
  $56 = __THREW__; __THREW__ = 0;
  if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $57 = -1; };
  $58 = (getTempRet0() | 0);
  $cond74 = ($57|0)==(1);
  if ($cond74) {
   $$reg2mem57$0 = $58;
   continue;
  }
  $i$0 = 0;
  while(1) {
   $59 = ($i$0|0)<($height|0);
   if (!($59)) {
    break;
   }
   $60 = (($height) - 1)|0;
   $61 = (($60) - ($i$0))|0;
   $62 = Math_imul($61, $pitch)|0;
   $63 = (($buf) + ($62)|0);
   $64 = (($55) + ($i$0<<2)|0);
   HEAP32[$64>>2] = $63;
   $65 = (($i$0) + 1)|0;
   $i$0 = $65;
  }
  $66 = HEAP32[$png_write>>2]|0;
  $67 = HEAP32[$png_info>>2]|0;
  __THREW__ = 0;
  invoke_viii((fb + (984) | 0),($66|0),($67|0),($55|0));
  $68 = __THREW__; __THREW__ = 0;
  if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $69 = -1; };
  $70 = (getTempRet0() | 0);
  $cond75 = ($69|0)==(1);
  if ($cond75) {
   $$reg2mem57$0 = $70;
   continue;
  }
  $71 = HEAP32[$png_write>>2]|0;
  $72 = HEAP32[$png_info>>2]|0;
  __THREW__ = 0;
  invoke_viiii((fb + (985) | 0),($71|0),($72|0),0,(0|0));
  $73 = __THREW__; __THREW__ = 0;
  if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $74 = -1; };
  $75 = (getTempRet0() | 0);
  $cond76 = ($74|0)==(1);
  if ($cond76) {
   $$reg2mem57$0 = $75;
   continue;
  }
  __THREW__ = 0;
  invoke_vi((fb + (986) | 0),($55|0));
  $76 = __THREW__; __THREW__ = 0;
  if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $77 = -1; };
  $78 = (getTempRet0() | 0);
  $cond77 = ($77|0)==(1);
  if ($cond77) {
   $$reg2mem57$0 = $78;
   continue;
  }
  __THREW__ = 0;
  invoke_vii((fb + (975) | 0),($png_write|0),($png_info|0));
  $79 = __THREW__; __THREW__ = 0;
  if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $80 = -1; };
  $81 = (getTempRet0() | 0);
  $cond78 = ($80|0)==(1);
  if ($cond78) {
   $$reg2mem57$0 = $81;
   continue;
  }
  __THREW__ = 0;
  (invoke_ii((fb + (987) | 0),($37|0))|0);
  $82 = __THREW__; __THREW__ = 0;
  if ((($82|0) != 0) & ((threwValue|0) != 0)) { $83 = _testSetjmp(HEAP32[$82>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($83|0) == 0) { _longjmp($82|0, threwValue|0); } setTempRet0((threwValue) | 0); } else { $83 = -1; };
  $84 = (getTempRet0() | 0);
  $cond79 = ($83|0)==(1);
  if ($cond79) {
   $$reg2mem57$0 = $84;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 16) {
  $$0 = 3;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 20) {
  $$0 = 4;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  $$0 = 0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZL15mupen_png_errorP14png_struct_defPKc($png_write,$message) {
 $png_write = $png_write|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $png_write;
 $1 = $message;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 _DebugMessage(1,(gb + (21068) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL14mupen_png_warnP14png_struct_defPKc($png_write,$message) {
 $png_write = $png_write|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $png_write;
 $1 = $message;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 _DebugMessage(2,(gb + (21052) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL15user_write_dataP14png_struct_defPhj($png_write,$data,$length) {
 $png_write = $png_write|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fPtr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $png_write;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = (_png_get_io_ptr(($3|0))|0);
 $fPtr = $4;
 $5 = $1;
 $6 = $2;
 $7 = $fPtr;
 $8 = (_fwrite(($5|0),1,($6|0),($7|0))|0);
 $9 = $2;
 $10 = ($8|0)!=($9|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 HEAP32[$vararg_buffer>>2] = $11;
 _DebugMessage(1,(gb + (21006) | 0),$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL15user_flush_dataP14png_struct_def($png_write) {
 $png_write = $png_write|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_write;
 $1 = $0;
 $2 = (_png_get_io_ptr(($1|0))|0);
 $fPtr = $2;
 $3 = $fPtr;
 (_fflush(($3|0))|0);
 STACKTOP = sp;return;
}
function runPostSets() {
 var temp = 0;

 HEAP32[(gb + (0) | 0) >> 2] = (HEAP32[(gb + (0) | 0) >> 2] | 0) + (gb + (4996) | 0);

 HEAP32[(gb + (4) | 0) >> 2] = (HEAP32[(gb + (4) | 0) >> 2] | 0) + (gb + (5014) | 0);

 HEAP32[(gb + (8) | 0) >> 2] = (HEAP32[(gb + (8) | 0) >> 2] | 0) + (gb + (5092) | 0);

 HEAP32[(gb + (12) | 0) >> 2] = (HEAP32[(gb + (12) | 0) >> 2] | 0) + (gb + (5143) | 0);

 HEAP32[(gb + (16) | 0) >> 2] = (HEAP32[(gb + (16) | 0) >> 2] | 0) + (gb + (5206) | 0);

 HEAP32[(gb + (20) | 0) >> 2] = (HEAP32[(gb + (20) | 0) >> 2] | 0) + (gb + (5272) | 0);

 HEAP32[(gb + (24) | 0) >> 2] = (HEAP32[(gb + (24) | 0) >> 2] | 0) + (gb + (5336) | 0);

 HEAP32[(gb + (28) | 0) >> 2] = (HEAP32[(gb + (28) | 0) >> 2] | 0) + (gb + (5424) | 0);

 HEAP32[(gb + (32) | 0) >> 2] = (HEAP32[(gb + (32) | 0) >> 2] | 0) + (gb + (5460) | 0);

 HEAP32[(gb + (36) | 0) >> 2] = (HEAP32[(gb + (36) | 0) >> 2] | 0) + (gb + (5522) | 0);

 HEAP32[(gb + (40) | 0) >> 2] = (HEAP32[(gb + (40) | 0) >> 2] | 0) + (gb + (5588) | 0);

 HEAP32[(gb + (44) | 0) >> 2] = (HEAP32[(gb + (44) | 0) >> 2] | 0) + (gb + (5672) | 0);

 HEAP32[(gb + (48) | 0) >> 2] = (HEAP32[(gb + (48) | 0) >> 2] | 0) + (gb + (5726) | 0);

 HEAP32[(gb + (52) | 0) >> 2] = (HEAP32[(gb + (52) | 0) >> 2] | 0) + (gb + (5804) | 0);

 HEAP32[(gb + (56) | 0) >> 2] = (HEAP32[(gb + (56) | 0) >> 2] | 0) + (gb + (5883) | 0);

 HEAP32[(gb + (240) | 0) >> 2] = (HEAP32[(gb + (240) | 0) >> 2] | 0) + (gb + (240) | 0);

 HEAP32[(gb + (244) | 0) >> 2] = (HEAP32[(gb + (244) | 0) >> 2] | 0) + (gb + (240) | 0);

 HEAP32[(gb + (248) | 0) >> 2] = (HEAP32[(gb + (248) | 0) >> 2] | 0) + (gb + (13623) | 0);

 HEAP32[(gb + (252) | 0) >> 2] = (HEAP32[(gb + (252) | 0) >> 2] | 0) + (gb + (13646) | 0);

 HEAP32[(gb + (256) | 0) >> 2] = (HEAP32[(gb + (256) | 0) >> 2] | 0) + (gb + (13663) | 0);

 HEAP32[(gb + (260) | 0) >> 2] = (HEAP32[(gb + (260) | 0) >> 2] | 0) + (gb + (13681) | 0);

 HEAP32[(gb + (264) | 0) >> 2] = (HEAP32[(gb + (264) | 0) >> 2] | 0) + (gb + (13704) | 0);

 HEAP32[(gb + (268) | 0) >> 2] = (HEAP32[(gb + (268) | 0) >> 2] | 0) + (gb + (13727) | 0);

 HEAP32[(gb + (272) | 0) >> 2] = (HEAP32[(gb + (272) | 0) >> 2] | 0) + (gb + (13754) | 0);

 HEAP32[(gb + (276) | 0) >> 2] = (HEAP32[(gb + (276) | 0) >> 2] | 0) + (gb + (13777) | 0);

 HEAP32[(gb + (280) | 0) >> 2] = (HEAP32[(gb + (280) | 0) >> 2] | 0) + (gb + (13794) | 0);

 HEAP32[(gb + (284) | 0) >> 2] = (HEAP32[(gb + (284) | 0) >> 2] | 0) + (gb + (13822) | 0);

 HEAP32[(gb + (288) | 0) >> 2] = (HEAP32[(gb + (288) | 0) >> 2] | 0) + (gb + (13850) | 0);

 HEAP32[(gb + (292) | 0) >> 2] = (HEAP32[(gb + (292) | 0) >> 2] | 0) + (gb + (13875) | 0);

 HEAP32[(gb + (300) | 0) >> 2] = (HEAP32[(gb + (300) | 0) >> 2] | 0) + (gb + (15734) | 0);

 HEAP32[(gb + (304) | 0) >> 2] = (fb + (1) | 0);

 HEAP32[(gb + (308) | 0) >> 2] = (fb + (2) | 0);

 HEAP32[(gb + (312) | 0) >> 2] = (fb + (3) | 0);

 HEAP32[(gb + (316) | 0) >> 2] = (fb + (4) | 0);

 HEAP32[(gb + (320) | 0) >> 2] = (fb + (5) | 0);

 HEAP32[(gb + (324) | 0) >> 2] = (fb + (6) | 0);

 HEAP32[(gb + (328) | 0) >> 2] = (fb + (7) | 0);

 HEAP32[(gb + (332) | 0) >> 2] = (fb + (8) | 0);

 HEAP32[(gb + (336) | 0) >> 2] = (fb + (9) | 0);

 HEAP32[(gb + (340) | 0) >> 2] = (fb + (10) | 0);

 HEAP32[(gb + (344) | 0) >> 2] = (fb + (11) | 0);

 HEAP32[(gb + (348) | 0) >> 2] = (fb + (12) | 0);

 HEAP32[(gb + (352) | 0) >> 2] = (fb + (13) | 0);

 HEAP32[(gb + (360) | 0) >> 2] = (fb + (14) | 0);

 HEAP32[(gb + (364) | 0) >> 2] = (fb + (15) | 0);

 HEAP32[(gb + (368) | 0) >> 2] = (fb + (16) | 0);

 HEAP32[(gb + (372) | 0) >> 2] = (fb + (17) | 0);

 HEAP32[(gb + (376) | 0) >> 2] = (fb + (18) | 0);

 HEAP32[(gb + (380) | 0) >> 2] = (fb + (19) | 0);

 HEAP32[(gb + (384) | 0) >> 2] = (fb + (20) | 0);

 HEAP32[(gb + (388) | 0) >> 2] = (fb + (21) | 0);

 HEAP32[(gb + (392) | 0) >> 2] = (fb + (22) | 0);

 HEAP32[(gb + (396) | 0) >> 2] = (fb + (23) | 0);

 HEAP32[(gb + (400) | 0) >> 2] = (fb + (24) | 0);

 HEAP32[(gb + (404) | 0) >> 2] = (fb + (25) | 0);

 HEAP32[(gb + (408) | 0) >> 2] = (fb + (26) | 0);

 HEAP32[(gb + (412) | 0) >> 2] = (fb + (27) | 0);

 HEAP32[(gb + (416) | 0) >> 2] = (fb + (28) | 0);

 HEAP32[(gb + (420) | 0) >> 2] = (fb + (29) | 0);

 HEAP32[(gb + (424) | 0) >> 2] = (fb + (30) | 0);

 HEAP32[(gb + (428) | 0) >> 2] = (fb + (31) | 0);

 HEAP32[(gb + (432) | 0) >> 2] = (fb + (32) | 0);

 HEAP32[(gb + (436) | 0) >> 2] = (fb + (33) | 0);

 HEAP32[(gb + (440) | 0) >> 2] = (fb + (34) | 0);

 HEAP32[(gb + (444) | 0) >> 2] = (fb + (35) | 0);

 HEAP32[(gb + (448) | 0) >> 2] = (fb + (36) | 0);

 HEAP32[(gb + (452) | 0) >> 2] = (fb + (37) | 0);

 HEAP32[(gb + (456) | 0) >> 2] = (fb + (38) | 0);

 HEAP32[(gb + (460) | 0) >> 2] = (fb + (39) | 0);

 HEAP32[(gb + (464) | 0) >> 2] = (fb + (40) | 0);

 HEAP32[(gb + (468) | 0) >> 2] = (fb + (41) | 0);

 HEAP32[(gb + (472) | 0) >> 2] = (fb + (42) | 0);

 HEAP32[(gb + (476) | 0) >> 2] = (fb + (43) | 0);

 HEAP32[(gb + (480) | 0) >> 2] = (fb + (44) | 0);

 HEAP32[(gb + (484) | 0) >> 2] = (fb + (45) | 0);

 HEAP32[(gb + (492) | 0) >> 2] = (fb + (46) | 0);

 HEAP32[(gb + (496) | 0) >> 2] = (fb + (47) | 0);

 HEAP32[(gb + (500) | 0) >> 2] = (fb + (48) | 0);

 HEAP32[(gb + (504) | 0) >> 2] = (fb + (49) | 0);

 HEAP32[(gb + (508) | 0) >> 2] = (fb + (50) | 0);

 HEAP32[(gb + (512) | 0) >> 2] = (fb + (51) | 0);

 HEAP32[(gb + (516) | 0) >> 2] = (fb + (52) | 0);

 HEAP32[(gb + (520) | 0) >> 2] = (fb + (53) | 0);

 HEAP32[(gb + (524) | 0) >> 2] = (fb + (54) | 0);

 HEAP32[(gb + (528) | 0) >> 2] = (fb + (55) | 0);

 HEAP32[(gb + (532) | 0) >> 2] = (fb + (56) | 0);

 HEAP32[(gb + (536) | 0) >> 2] = (fb + (57) | 0);

 HEAP32[(gb + (540) | 0) >> 2] = (fb + (58) | 0);

 HEAP32[(gb + (544) | 0) >> 2] = (fb + (59) | 0);

 HEAP32[(gb + (548) | 0) >> 2] = (fb + (60) | 0);

 HEAP32[(gb + (552) | 0) >> 2] = (fb + (61) | 0);

 HEAP32[(gb + (556) | 0) >> 2] = (fb + (62) | 0);

 HEAP32[(gb + (560) | 0) >> 2] = (fb + (63) | 0);

 HEAP32[(gb + (564) | 0) >> 2] = (fb + (64) | 0);

 HEAP32[(gb + (568) | 0) >> 2] = (fb + (65) | 0);

 HEAP32[(gb + (572) | 0) >> 2] = (fb + (66) | 0);

 HEAP32[(gb + (576) | 0) >> 2] = (fb + (67) | 0);

 HEAP32[(gb + (580) | 0) >> 2] = (fb + (68) | 0);

 HEAP32[(gb + (584) | 0) >> 2] = (fb + (69) | 0);

 HEAP32[(gb + (588) | 0) >> 2] = (fb + (70) | 0);
 runPostSets1();
}
function runPostSets1() {
 var temp = 0;

 HEAP32[(gb + (592) | 0) >> 2] = (fb + (71) | 0);

 HEAP32[(gb + (596) | 0) >> 2] = (fb + (72) | 0);

 HEAP32[(gb + (600) | 0) >> 2] = (fb + (73) | 0);

 HEAP32[(gb + (604) | 0) >> 2] = (fb + (74) | 0);

 HEAP32[(gb + (608) | 0) >> 2] = (fb + (75) | 0);

 HEAP32[(gb + (612) | 0) >> 2] = (fb + (76) | 0);

 HEAP32[(gb + (616) | 0) >> 2] = (fb + (77) | 0);

 HEAP32[(gb + (620) | 0) >> 2] = (fb + (78) | 0);

 HEAP32[(gb + (624) | 0) >> 2] = (fb + (79) | 0);

 HEAP32[(gb + (628) | 0) >> 2] = (fb + (80) | 0);

 HEAP32[(gb + (632) | 0) >> 2] = (fb + (81) | 0);

 HEAP32[(gb + (636) | 0) >> 2] = (fb + (82) | 0);

 HEAP32[(gb + (640) | 0) >> 2] = (fb + (83) | 0);

 HEAP32[(gb + (644) | 0) >> 2] = (fb + (84) | 0);

 HEAP32[(gb + (648) | 0) >> 2] = (fb + (85) | 0);

 HEAP32[(gb + (652) | 0) >> 2] = (fb + (86) | 0);

 HEAP32[(gb + (656) | 0) >> 2] = (fb + (87) | 0);

 HEAP32[(gb + (660) | 0) >> 2] = (fb + (88) | 0);

 HEAP32[(gb + (664) | 0) >> 2] = (fb + (89) | 0);

 HEAP32[(gb + (668) | 0) >> 2] = (fb + (90) | 0);

 HEAP32[(gb + (672) | 0) >> 2] = (fb + (91) | 0);

 HEAP32[(gb + (676) | 0) >> 2] = (fb + (92) | 0);

 HEAP32[(gb + (680) | 0) >> 2] = (fb + (93) | 0);

 HEAP32[(gb + (684) | 0) >> 2] = (fb + (94) | 0);

 HEAP32[(gb + (688) | 0) >> 2] = (fb + (95) | 0);

 HEAP32[(gb + (692) | 0) >> 2] = (fb + (96) | 0);

 HEAP32[(gb + (696) | 0) >> 2] = (fb + (97) | 0);

 HEAP32[(gb + (700) | 0) >> 2] = (fb + (98) | 0);

 HEAP32[(gb + (704) | 0) >> 2] = (fb + (99) | 0);

 HEAP32[(gb + (708) | 0) >> 2] = (fb + (100) | 0);

 HEAP32[(gb + (712) | 0) >> 2] = (fb + (101) | 0);

 HEAP32[(gb + (716) | 0) >> 2] = (fb + (102) | 0);

 HEAP32[(gb + (720) | 0) >> 2] = (fb + (103) | 0);

 HEAP32[(gb + (724) | 0) >> 2] = (fb + (104) | 0);

 HEAP32[(gb + (728) | 0) >> 2] = (fb + (105) | 0);

 HEAP32[(gb + (732) | 0) >> 2] = (fb + (106) | 0);

 HEAP32[(gb + (736) | 0) >> 2] = (fb + (107) | 0);

 HEAP32[(gb + (740) | 0) >> 2] = (fb + (108) | 0);

 HEAP32[(gb + (744) | 0) >> 2] = (fb + (109) | 0);

 HEAP32[(gb + (748) | 0) >> 2] = (fb + (110) | 0);

 HEAP32[(gb + (752) | 0) >> 2] = (fb + (111) | 0);

 HEAP32[(gb + (756) | 0) >> 2] = (fb + (112) | 0);

 HEAP32[(gb + (760) | 0) >> 2] = (fb + (113) | 0);

 HEAP32[(gb + (764) | 0) >> 2] = (fb + (114) | 0);

 HEAP32[(gb + (768) | 0) >> 2] = (fb + (115) | 0);

 HEAP32[(gb + (772) | 0) >> 2] = (fb + (116) | 0);

 HEAP32[(gb + (776) | 0) >> 2] = (fb + (117) | 0);

 HEAP32[(gb + (780) | 0) >> 2] = (fb + (118) | 0);

 HEAP32[(gb + (784) | 0) >> 2] = (fb + (119) | 0);

 HEAP32[(gb + (788) | 0) >> 2] = (fb + (120) | 0);

 HEAP32[(gb + (792) | 0) >> 2] = (fb + (121) | 0);

 HEAP32[(gb + (796) | 0) >> 2] = (fb + (122) | 0);

 HEAP32[(gb + (800) | 0) >> 2] = (fb + (123) | 0);

 HEAP32[(gb + (804) | 0) >> 2] = (fb + (124) | 0);

 HEAP32[(gb + (808) | 0) >> 2] = (fb + (125) | 0);

 HEAP32[(gb + (812) | 0) >> 2] = (fb + (126) | 0);

 HEAP32[(gb + (816) | 0) >> 2] = (fb + (127) | 0);

 HEAP32[(gb + (820) | 0) >> 2] = (fb + (128) | 0);

 HEAP32[(gb + (824) | 0) >> 2] = (fb + (129) | 0);

 HEAP32[(gb + (828) | 0) >> 2] = (fb + (130) | 0);

 HEAP32[(gb + (832) | 0) >> 2] = (fb + (131) | 0);

 HEAP32[(gb + (836) | 0) >> 2] = (fb + (132) | 0);

 HEAP32[(gb + (840) | 0) >> 2] = (fb + (133) | 0);

 HEAP32[(gb + (844) | 0) >> 2] = (fb + (134) | 0);

 HEAP32[(gb + (848) | 0) >> 2] = (fb + (135) | 0);

 HEAP32[(gb + (852) | 0) >> 2] = (fb + (136) | 0);

 HEAP32[(gb + (856) | 0) >> 2] = (fb + (137) | 0);

 HEAP32[(gb + (860) | 0) >> 2] = (fb + (138) | 0);

 HEAP32[(gb + (864) | 0) >> 2] = (fb + (139) | 0);

 HEAP32[(gb + (868) | 0) >> 2] = (fb + (140) | 0);

 HEAP32[(gb + (872) | 0) >> 2] = (fb + (141) | 0);

 HEAP32[(gb + (876) | 0) >> 2] = (fb + (142) | 0);

 HEAP32[(gb + (880) | 0) >> 2] = (fb + (143) | 0);

 HEAP32[(gb + (884) | 0) >> 2] = (fb + (144) | 0);

 HEAP32[(gb + (888) | 0) >> 2] = (fb + (145) | 0);

 HEAP32[(gb + (892) | 0) >> 2] = (fb + (146) | 0);

 HEAP32[(gb + (896) | 0) >> 2] = (fb + (147) | 0);

 HEAP32[(gb + (900) | 0) >> 2] = (fb + (148) | 0);

 HEAP32[(gb + (904) | 0) >> 2] = (fb + (149) | 0);

 HEAP32[(gb + (908) | 0) >> 2] = (fb + (150) | 0);

 HEAP32[(gb + (912) | 0) >> 2] = (fb + (151) | 0);

 HEAP32[(gb + (916) | 0) >> 2] = (fb + (152) | 0);

 HEAP32[(gb + (920) | 0) >> 2] = (fb + (153) | 0);

 HEAP32[(gb + (924) | 0) >> 2] = (fb + (154) | 0);

 HEAP32[(gb + (928) | 0) >> 2] = (fb + (155) | 0);

 HEAP32[(gb + (932) | 0) >> 2] = (fb + (156) | 0);

 HEAP32[(gb + (936) | 0) >> 2] = (fb + (157) | 0);

 HEAP32[(gb + (940) | 0) >> 2] = (fb + (158) | 0);

 HEAP32[(gb + (944) | 0) >> 2] = (fb + (159) | 0);

 HEAP32[(gb + (948) | 0) >> 2] = (fb + (160) | 0);

 HEAP32[(gb + (952) | 0) >> 2] = (fb + (161) | 0);

 HEAP32[(gb + (956) | 0) >> 2] = (fb + (162) | 0);

 HEAP32[(gb + (960) | 0) >> 2] = (fb + (163) | 0);

 HEAP32[(gb + (964) | 0) >> 2] = (fb + (164) | 0);

 HEAP32[(gb + (968) | 0) >> 2] = (fb + (165) | 0);

 HEAP32[(gb + (972) | 0) >> 2] = (fb + (166) | 0);

 HEAP32[(gb + (976) | 0) >> 2] = (fb + (167) | 0);

 HEAP32[(gb + (980) | 0) >> 2] = (fb + (168) | 0);

 HEAP32[(gb + (984) | 0) >> 2] = (fb + (169) | 0);

 HEAP32[(gb + (988) | 0) >> 2] = (fb + (170) | 0);
 runPostSets2();
}
function runPostSets2() {
 var temp = 0;

 HEAP32[(gb + (992) | 0) >> 2] = (fb + (171) | 0);

 HEAP32[(gb + (996) | 0) >> 2] = (fb + (172) | 0);

 HEAP32[(gb + (1000) | 0) >> 2] = (fb + (173) | 0);

 HEAP32[(gb + (1004) | 0) >> 2] = (fb + (174) | 0);

 HEAP32[(gb + (1008) | 0) >> 2] = (fb + (175) | 0);

 HEAP32[(gb + (1012) | 0) >> 2] = (fb + (176) | 0);

 HEAP32[(gb + (1016) | 0) >> 2] = (fb + (177) | 0);

 HEAP32[(gb + (1020) | 0) >> 2] = (fb + (178) | 0);

 HEAP32[(gb + (1024) | 0) >> 2] = (fb + (179) | 0);

 HEAP32[(gb + (1028) | 0) >> 2] = (fb + (180) | 0);

 HEAP32[(gb + (1032) | 0) >> 2] = (fb + (181) | 0);

 HEAP32[(gb + (1036) | 0) >> 2] = (fb + (182) | 0);

 HEAP32[(gb + (1040) | 0) >> 2] = (fb + (183) | 0);

 HEAP32[(gb + (1044) | 0) >> 2] = (fb + (184) | 0);

 HEAP32[(gb + (1048) | 0) >> 2] = (fb + (185) | 0);

 HEAP32[(gb + (1052) | 0) >> 2] = (fb + (186) | 0);

 HEAP32[(gb + (1056) | 0) >> 2] = (fb + (187) | 0);

 HEAP32[(gb + (1060) | 0) >> 2] = (fb + (188) | 0);

 HEAP32[(gb + (1064) | 0) >> 2] = (fb + (189) | 0);

 HEAP32[(gb + (1068) | 0) >> 2] = (fb + (190) | 0);

 HEAP32[(gb + (1072) | 0) >> 2] = (fb + (191) | 0);

 HEAP32[(gb + (1076) | 0) >> 2] = (fb + (192) | 0);

 HEAP32[(gb + (1080) | 0) >> 2] = (fb + (193) | 0);

 HEAP32[(gb + (1084) | 0) >> 2] = (fb + (194) | 0);

 HEAP32[(gb + (1088) | 0) >> 2] = (fb + (195) | 0);

 HEAP32[(gb + (1092) | 0) >> 2] = (fb + (196) | 0);

 HEAP32[(gb + (1096) | 0) >> 2] = (fb + (197) | 0);

 HEAP32[(gb + (1100) | 0) >> 2] = (fb + (198) | 0);

 HEAP32[(gb + (1104) | 0) >> 2] = (fb + (199) | 0);

 HEAP32[(gb + (1108) | 0) >> 2] = (fb + (200) | 0);

 HEAP32[(gb + (1112) | 0) >> 2] = (fb + (201) | 0);

 HEAP32[(gb + (1116) | 0) >> 2] = (fb + (202) | 0);

 HEAP32[(gb + (1120) | 0) >> 2] = (fb + (203) | 0);

 HEAP32[(gb + (1124) | 0) >> 2] = (fb + (204) | 0);

 HEAP32[(gb + (1128) | 0) >> 2] = (fb + (205) | 0);

 HEAP32[(gb + (1132) | 0) >> 2] = (fb + (206) | 0);

 HEAP32[(gb + (1136) | 0) >> 2] = (fb + (207) | 0);

 HEAP32[(gb + (1140) | 0) >> 2] = (fb + (208) | 0);

 HEAP32[(gb + (1144) | 0) >> 2] = (fb + (209) | 0);

 HEAP32[(gb + (1148) | 0) >> 2] = (fb + (210) | 0);

 HEAP32[(gb + (1152) | 0) >> 2] = (fb + (211) | 0);

 HEAP32[(gb + (1156) | 0) >> 2] = (fb + (212) | 0);

 HEAP32[(gb + (1160) | 0) >> 2] = (fb + (213) | 0);

 HEAP32[(gb + (1164) | 0) >> 2] = (fb + (214) | 0);

 HEAP32[(gb + (1168) | 0) >> 2] = (fb + (215) | 0);

 HEAP32[(gb + (1172) | 0) >> 2] = (fb + (216) | 0);

 HEAP32[(gb + (1176) | 0) >> 2] = (fb + (217) | 0);

 HEAP32[(gb + (1180) | 0) >> 2] = (fb + (218) | 0);

 HEAP32[(gb + (1184) | 0) >> 2] = (fb + (219) | 0);

 HEAP32[(gb + (1188) | 0) >> 2] = (fb + (220) | 0);

 HEAP32[(gb + (1192) | 0) >> 2] = (fb + (221) | 0);

 HEAP32[(gb + (1196) | 0) >> 2] = (fb + (222) | 0);

 HEAP32[(gb + (1200) | 0) >> 2] = (fb + (223) | 0);

 HEAP32[(gb + (1204) | 0) >> 2] = (fb + (224) | 0);

 HEAP32[(gb + (1208) | 0) >> 2] = (fb + (225) | 0);

 HEAP32[(gb + (1212) | 0) >> 2] = (fb + (226) | 0);

 HEAP32[(gb + (1216) | 0) >> 2] = (fb + (227) | 0);

 HEAP32[(gb + (1220) | 0) >> 2] = (fb + (228) | 0);

 HEAP32[(gb + (1224) | 0) >> 2] = (fb + (229) | 0);

 HEAP32[(gb + (1228) | 0) >> 2] = (fb + (230) | 0);

 HEAP32[(gb + (1232) | 0) >> 2] = (fb + (231) | 0);

 HEAP32[(gb + (1236) | 0) >> 2] = (fb + (232) | 0);

 HEAP32[(gb + (1240) | 0) >> 2] = (fb + (233) | 0);

 HEAP32[(gb + (1244) | 0) >> 2] = (fb + (234) | 0);

 HEAP32[(gb + (1248) | 0) >> 2] = (fb + (235) | 0);

 HEAP32[(gb + (1252) | 0) >> 2] = (fb + (236) | 0);

 HEAP32[(gb + (1256) | 0) >> 2] = (fb + (237) | 0);

 HEAP32[(gb + (1260) | 0) >> 2] = (fb + (238) | 0);

 HEAP32[(gb + (1264) | 0) >> 2] = (fb + (239) | 0);

 HEAP32[(gb + (1268) | 0) >> 2] = (fb + (240) | 0);

 HEAP32[(gb + (1272) | 0) >> 2] = (fb + (241) | 0);

 HEAP32[(gb + (1276) | 0) >> 2] = (fb + (242) | 0);

 HEAP32[(gb + (1280) | 0) >> 2] = (fb + (243) | 0);

 HEAP32[(gb + (1284) | 0) >> 2] = (fb + (244) | 0);

 HEAP32[(gb + (1288) | 0) >> 2] = (fb + (245) | 0);

 HEAP32[(gb + (1292) | 0) >> 2] = (fb + (246) | 0);

 HEAP32[(gb + (1296) | 0) >> 2] = (fb + (247) | 0);

 HEAP32[(gb + (1300) | 0) >> 2] = (fb + (248) | 0);

 HEAP32[(gb + (1304) | 0) >> 2] = (fb + (249) | 0);

 HEAP32[(gb + (1308) | 0) >> 2] = (fb + (250) | 0);

 HEAP32[(gb + (1312) | 0) >> 2] = (fb + (251) | 0);

 HEAP32[(gb + (1316) | 0) >> 2] = (fb + (252) | 0);

 HEAP32[(gb + (1320) | 0) >> 2] = (fb + (253) | 0);

 HEAP32[(gb + (1324) | 0) >> 2] = (fb + (254) | 0);

 HEAP32[(gb + (1328) | 0) >> 2] = (fb + (255) | 0);

 HEAP32[(gb + (1332) | 0) >> 2] = (fb + (256) | 0);

 HEAP32[(gb + (1336) | 0) >> 2] = (fb + (257) | 0);

 HEAP32[(gb + (1340) | 0) >> 2] = (fb + (258) | 0);

 HEAP32[(gb + (1344) | 0) >> 2] = (fb + (259) | 0);

 HEAP32[(gb + (1348) | 0) >> 2] = (fb + (260) | 0);

 HEAP32[(gb + (1352) | 0) >> 2] = (fb + (261) | 0);

 HEAP32[(gb + (1356) | 0) >> 2] = (fb + (262) | 0);

 HEAP32[(gb + (1360) | 0) >> 2] = (fb + (263) | 0);

 HEAP32[(gb + (1364) | 0) >> 2] = (fb + (264) | 0);

 HEAP32[(gb + (1368) | 0) >> 2] = (fb + (265) | 0);

 HEAP32[(gb + (1372) | 0) >> 2] = (fb + (266) | 0);

 HEAP32[(gb + (1376) | 0) >> 2] = (fb + (267) | 0);

 HEAP32[(gb + (1380) | 0) >> 2] = (fb + (268) | 0);

 HEAP32[(gb + (1384) | 0) >> 2] = (fb + (269) | 0);

 HEAP32[(gb + (1388) | 0) >> 2] = (fb + (270) | 0);
 runPostSets3();
}
function runPostSets3() {
 var temp = 0;

 HEAP32[(gb + (1392) | 0) >> 2] = (fb + (271) | 0);

 HEAP32[(gb + (1396) | 0) >> 2] = (fb + (272) | 0);

 HEAP32[(gb + (1400) | 0) >> 2] = (fb + (273) | 0);

 HEAP32[(gb + (1404) | 0) >> 2] = (fb + (274) | 0);

 HEAP32[(gb + (1408) | 0) >> 2] = (fb + (275) | 0);

 HEAP32[(gb + (1412) | 0) >> 2] = (fb + (276) | 0);

 HEAP32[(gb + (1416) | 0) >> 2] = (fb + (277) | 0);

 HEAP32[(gb + (1420) | 0) >> 2] = (fb + (278) | 0);

 HEAP32[(gb + (1424) | 0) >> 2] = (fb + (279) | 0);

 HEAP32[(gb + (1428) | 0) >> 2] = (fb + (280) | 0);

 HEAP32[(gb + (1432) | 0) >> 2] = (fb + (281) | 0);

 HEAP32[(gb + (1436) | 0) >> 2] = (fb + (282) | 0);

 HEAP32[(gb + (1440) | 0) >> 2] = (fb + (283) | 0);

 HEAP32[(gb + (1444) | 0) >> 2] = (fb + (284) | 0);

 HEAP32[(gb + (1448) | 0) >> 2] = (fb + (285) | 0);

 HEAP32[(gb + (1452) | 0) >> 2] = (fb + (286) | 0);

 HEAP32[(gb + (1460) | 0) >> 2] = (fb + (287) | 0);

 HEAP32[(gb + (1464) | 0) >> 2] = (fb + (288) | 0);

 HEAP32[(gb + (1468) | 0) >> 2] = (fb + (289) | 0);

 HEAP32[(gb + (1472) | 0) >> 2] = (fb + (290) | 0);

 HEAP32[(gb + (1476) | 0) >> 2] = (fb + (291) | 0);

 HEAP32[(gb + (1480) | 0) >> 2] = (fb + (292) | 0);

 HEAP32[(gb + (1484) | 0) >> 2] = (fb + (293) | 0);

 HEAP32[(gb + (1488) | 0) >> 2] = (fb + (294) | 0);

 HEAP32[(gb + (1492) | 0) >> 2] = (fb + (295) | 0);

 HEAP32[(gb + (1496) | 0) >> 2] = (fb + (296) | 0);

 HEAP32[(gb + (1500) | 0) >> 2] = (fb + (297) | 0);

 HEAP32[(gb + (1504) | 0) >> 2] = (fb + (298) | 0);

 HEAP32[(gb + (1508) | 0) >> 2] = (fb + (299) | 0);

 HEAP32[(gb + (1512) | 0) >> 2] = (fb + (300) | 0);

 HEAP32[(gb + (1516) | 0) >> 2] = (fb + (301) | 0);

 HEAP32[(gb + (1520) | 0) >> 2] = (fb + (302) | 0);

 HEAP32[(gb + (1524) | 0) >> 2] = (fb + (303) | 0);

 HEAP32[(gb + (1528) | 0) >> 2] = (fb + (304) | 0);

 HEAP32[(gb + (1532) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1536) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1540) | 0) >> 2] = (fb + (306) | 0);

 HEAP32[(gb + (1544) | 0) >> 2] = (fb + (307) | 0);

 HEAP32[(gb + (1548) | 0) >> 2] = (fb + (308) | 0);

 HEAP32[(gb + (1552) | 0) >> 2] = (fb + (309) | 0);

 HEAP32[(gb + (1556) | 0) >> 2] = (fb + (310) | 0);

 HEAP32[(gb + (1560) | 0) >> 2] = (fb + (311) | 0);

 HEAP32[(gb + (1564) | 0) >> 2] = (fb + (312) | 0);

 HEAP32[(gb + (1568) | 0) >> 2] = (fb + (313) | 0);

 HEAP32[(gb + (1572) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1576) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1580) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1584) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1588) | 0) >> 2] = (fb + (314) | 0);

 HEAP32[(gb + (1592) | 0) >> 2] = (fb + (315) | 0);

 HEAP32[(gb + (1596) | 0) >> 2] = (fb + (316) | 0);

 HEAP32[(gb + (1600) | 0) >> 2] = (fb + (317) | 0);

 HEAP32[(gb + (1604) | 0) >> 2] = (fb + (318) | 0);

 HEAP32[(gb + (1608) | 0) >> 2] = (fb + (319) | 0);

 HEAP32[(gb + (1612) | 0) >> 2] = (fb + (320) | 0);

 HEAP32[(gb + (1616) | 0) >> 2] = (fb + (321) | 0);

 HEAP32[(gb + (1620) | 0) >> 2] = (fb + (322) | 0);

 HEAP32[(gb + (1624) | 0) >> 2] = (fb + (323) | 0);

 HEAP32[(gb + (1628) | 0) >> 2] = (fb + (324) | 0);

 HEAP32[(gb + (1632) | 0) >> 2] = (fb + (325) | 0);

 HEAP32[(gb + (1636) | 0) >> 2] = (fb + (326) | 0);

 HEAP32[(gb + (1640) | 0) >> 2] = (fb + (327) | 0);

 HEAP32[(gb + (1644) | 0) >> 2] = (fb + (328) | 0);

 HEAP32[(gb + (1648) | 0) >> 2] = (fb + (329) | 0);

 HEAP32[(gb + (1652) | 0) >> 2] = (fb + (330) | 0);

 HEAP32[(gb + (1656) | 0) >> 2] = (fb + (331) | 0);

 HEAP32[(gb + (1660) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1664) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1668) | 0) >> 2] = (fb + (332) | 0);

 HEAP32[(gb + (1672) | 0) >> 2] = (fb + (333) | 0);

 HEAP32[(gb + (1676) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1680) | 0) >> 2] = (fb + (334) | 0);

 HEAP32[(gb + (1684) | 0) >> 2] = (fb + (335) | 0);

 HEAP32[(gb + (1688) | 0) >> 2] = (fb + (336) | 0);

 HEAP32[(gb + (1692) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1696) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1700) | 0) >> 2] = (fb + (337) | 0);

 HEAP32[(gb + (1704) | 0) >> 2] = (fb + (338) | 0);

 HEAP32[(gb + (1708) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1712) | 0) >> 2] = (fb + (339) | 0);

 HEAP32[(gb + (1716) | 0) >> 2] = (fb + (340) | 0);

 HEAP32[(gb + (1720) | 0) >> 2] = (fb + (341) | 0);

 HEAP32[(gb + (1724) | 0) >> 2] = (fb + (342) | 0);

 HEAP32[(gb + (1728) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1732) | 0) >> 2] = (fb + (343) | 0);

 HEAP32[(gb + (1736) | 0) >> 2] = (fb + (344) | 0);

 HEAP32[(gb + (1740) | 0) >> 2] = (fb + (345) | 0);

 HEAP32[(gb + (1744) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1748) | 0) >> 2] = (fb + (346) | 0);

 HEAP32[(gb + (1752) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1756) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1760) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1764) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1768) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1772) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1776) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1780) | 0) >> 2] = (fb + (347) | 0);

 HEAP32[(gb + (1784) | 0) >> 2] = (fb + (348) | 0);

 HEAP32[(gb + (1788) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1792) | 0) >> 2] = (fb + (305) | 0);
 runPostSets4();
}
function runPostSets4() {
 var temp = 0;

 HEAP32[(gb + (1796) | 0) >> 2] = (fb + (349) | 0);

 HEAP32[(gb + (1800) | 0) >> 2] = (fb + (350) | 0);

 HEAP32[(gb + (1804) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1808) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1812) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1816) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1820) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1824) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1828) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1832) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1836) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1840) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1844) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1848) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1852) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1856) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1860) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1864) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1868) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1872) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1876) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1880) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1884) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1888) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1892) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1896) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1900) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1904) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1908) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1912) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1916) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1920) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1924) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1928) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1932) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1936) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1940) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1944) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1948) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1952) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1956) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1960) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1964) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1968) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1972) | 0) >> 2] = (fb + (351) | 0);

 HEAP32[(gb + (1976) | 0) >> 2] = (fb + (352) | 0);

 HEAP32[(gb + (1980) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1984) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1988) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1992) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (1996) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2000) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2004) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2008) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2012) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2016) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2020) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2024) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2028) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2032) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2036) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2040) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2044) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2048) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2052) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2056) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2060) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2064) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2068) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2072) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2076) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2080) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2084) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2088) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2092) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2096) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2100) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2104) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2108) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2112) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2116) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2120) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2124) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2128) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2132) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2136) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2140) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2144) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2148) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2152) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2156) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2160) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2164) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2168) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2172) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2176) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2180) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2184) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2188) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2192) | 0) >> 2] = (fb + (305) | 0);
 runPostSets5();
}
function runPostSets5() {
 var temp = 0;

 HEAP32[(gb + (2196) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2200) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2204) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2208) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2212) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2216) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2220) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2224) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2228) | 0) >> 2] = (fb + (353) | 0);

 HEAP32[(gb + (2232) | 0) >> 2] = (fb + (354) | 0);

 HEAP32[(gb + (2236) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2240) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2244) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2248) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2252) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2256) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2260) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2264) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2268) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2272) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2276) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2280) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2284) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2288) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2292) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2296) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2300) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2304) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2308) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2312) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2316) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2320) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2324) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2328) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2332) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2336) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2340) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2344) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2348) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2352) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2356) | 0) >> 2] = (fb + (355) | 0);

 HEAP32[(gb + (2360) | 0) >> 2] = (fb + (356) | 0);

 HEAP32[(gb + (2364) | 0) >> 2] = (fb + (357) | 0);

 HEAP32[(gb + (2368) | 0) >> 2] = (fb + (358) | 0);

 HEAP32[(gb + (2372) | 0) >> 2] = (fb + (359) | 0);

 HEAP32[(gb + (2376) | 0) >> 2] = (fb + (360) | 0);

 HEAP32[(gb + (2380) | 0) >> 2] = (fb + (361) | 0);

 HEAP32[(gb + (2384) | 0) >> 2] = (fb + (362) | 0);

 HEAP32[(gb + (2388) | 0) >> 2] = (fb + (363) | 0);

 HEAP32[(gb + (2392) | 0) >> 2] = (fb + (364) | 0);

 HEAP32[(gb + (2396) | 0) >> 2] = (fb + (365) | 0);

 HEAP32[(gb + (2400) | 0) >> 2] = (fb + (366) | 0);

 HEAP32[(gb + (2404) | 0) >> 2] = (fb + (367) | 0);

 HEAP32[(gb + (2408) | 0) >> 2] = (fb + (368) | 0);

 HEAP32[(gb + (2412) | 0) >> 2] = (fb + (369) | 0);

 HEAP32[(gb + (2416) | 0) >> 2] = (fb + (370) | 0);

 HEAP32[(gb + (2420) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2424) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2428) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2432) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2436) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2440) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2444) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2448) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2452) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2456) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2460) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2464) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2468) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2472) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2476) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2480) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2484) | 0) >> 2] = (fb + (371) | 0);

 HEAP32[(gb + (2488) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2492) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2496) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2500) | 0) >> 2] = (fb + (372) | 0);

 HEAP32[(gb + (2504) | 0) >> 2] = (fb + (373) | 0);

 HEAP32[(gb + (2508) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2512) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2516) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2520) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2524) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2528) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2532) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2536) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2540) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2544) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2548) | 0) >> 2] = (fb + (374) | 0);

 HEAP32[(gb + (2552) | 0) >> 2] = (fb + (375) | 0);

 HEAP32[(gb + (2556) | 0) >> 2] = (fb + (376) | 0);

 HEAP32[(gb + (2560) | 0) >> 2] = (fb + (377) | 0);

 HEAP32[(gb + (2564) | 0) >> 2] = (fb + (378) | 0);

 HEAP32[(gb + (2568) | 0) >> 2] = (fb + (379) | 0);

 HEAP32[(gb + (2572) | 0) >> 2] = (fb + (380) | 0);

 HEAP32[(gb + (2576) | 0) >> 2] = (fb + (381) | 0);

 HEAP32[(gb + (2580) | 0) >> 2] = (fb + (382) | 0);

 HEAP32[(gb + (2584) | 0) >> 2] = (fb + (383) | 0);

 HEAP32[(gb + (2588) | 0) >> 2] = (fb + (384) | 0);

 HEAP32[(gb + (2592) | 0) >> 2] = (fb + (385) | 0);
 runPostSets6();
}
function runPostSets6() {
 var temp = 0;

 HEAP32[(gb + (2596) | 0) >> 2] = (fb + (386) | 0);

 HEAP32[(gb + (2600) | 0) >> 2] = (fb + (387) | 0);

 HEAP32[(gb + (2604) | 0) >> 2] = (fb + (388) | 0);

 HEAP32[(gb + (2608) | 0) >> 2] = (fb + (389) | 0);

 HEAP32[(gb + (2612) | 0) >> 2] = (fb + (390) | 0);

 HEAP32[(gb + (2616) | 0) >> 2] = (fb + (391) | 0);

 HEAP32[(gb + (2620) | 0) >> 2] = (fb + (392) | 0);

 HEAP32[(gb + (2624) | 0) >> 2] = (fb + (393) | 0);

 HEAP32[(gb + (2628) | 0) >> 2] = (fb + (394) | 0);

 HEAP32[(gb + (2632) | 0) >> 2] = (fb + (395) | 0);

 HEAP32[(gb + (2636) | 0) >> 2] = (fb + (396) | 0);

 HEAP32[(gb + (2640) | 0) >> 2] = (fb + (397) | 0);

 HEAP32[(gb + (2644) | 0) >> 2] = (fb + (398) | 0);

 HEAP32[(gb + (2648) | 0) >> 2] = (fb + (399) | 0);

 HEAP32[(gb + (2652) | 0) >> 2] = (fb + (400) | 0);

 HEAP32[(gb + (2656) | 0) >> 2] = (fb + (401) | 0);

 HEAP32[(gb + (2660) | 0) >> 2] = (fb + (402) | 0);

 HEAP32[(gb + (2664) | 0) >> 2] = (fb + (403) | 0);

 HEAP32[(gb + (2668) | 0) >> 2] = (fb + (404) | 0);

 HEAP32[(gb + (2672) | 0) >> 2] = (fb + (405) | 0);

 HEAP32[(gb + (2676) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2680) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2684) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2688) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2692) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2696) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2700) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2704) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2708) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2712) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2716) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2720) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2724) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2728) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2732) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2736) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2740) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2744) | 0) >> 2] = (fb + (406) | 0);

 HEAP32[(gb + (2748) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2752) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2756) | 0) >> 2] = (fb + (407) | 0);

 HEAP32[(gb + (2760) | 0) >> 2] = (fb + (408) | 0);

 HEAP32[(gb + (2764) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2768) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2772) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2776) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2780) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2784) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2788) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2792) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2796) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2800) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2804) | 0) >> 2] = (fb + (409) | 0);

 HEAP32[(gb + (2808) | 0) >> 2] = (fb + (410) | 0);

 HEAP32[(gb + (2812) | 0) >> 2] = (fb + (411) | 0);

 HEAP32[(gb + (2816) | 0) >> 2] = (fb + (412) | 0);

 HEAP32[(gb + (2820) | 0) >> 2] = (fb + (413) | 0);

 HEAP32[(gb + (2824) | 0) >> 2] = (fb + (414) | 0);

 HEAP32[(gb + (2828) | 0) >> 2] = (fb + (415) | 0);

 HEAP32[(gb + (2832) | 0) >> 2] = (fb + (416) | 0);

 HEAP32[(gb + (2836) | 0) >> 2] = (fb + (417) | 0);

 HEAP32[(gb + (2840) | 0) >> 2] = (fb + (418) | 0);

 HEAP32[(gb + (2844) | 0) >> 2] = (fb + (419) | 0);

 HEAP32[(gb + (2848) | 0) >> 2] = (fb + (420) | 0);

 HEAP32[(gb + (2852) | 0) >> 2] = (fb + (421) | 0);

 HEAP32[(gb + (2856) | 0) >> 2] = (fb + (422) | 0);

 HEAP32[(gb + (2860) | 0) >> 2] = (fb + (423) | 0);

 HEAP32[(gb + (2864) | 0) >> 2] = (fb + (424) | 0);

 HEAP32[(gb + (2868) | 0) >> 2] = (fb + (425) | 0);

 HEAP32[(gb + (2872) | 0) >> 2] = (fb + (426) | 0);

 HEAP32[(gb + (2876) | 0) >> 2] = (fb + (427) | 0);

 HEAP32[(gb + (2880) | 0) >> 2] = (fb + (428) | 0);

 HEAP32[(gb + (2884) | 0) >> 2] = (fb + (429) | 0);

 HEAP32[(gb + (2888) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2892) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2896) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2900) | 0) >> 2] = (fb + (430) | 0);

 HEAP32[(gb + (2904) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2908) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2912) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2916) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2920) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2924) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2928) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2932) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2936) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2940) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2944) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2948) | 0) >> 2] = (fb + (431) | 0);

 HEAP32[(gb + (2952) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2956) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2960) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2964) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2968) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2972) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2976) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2980) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2984) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2988) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (2992) | 0) >> 2] = (fb + (305) | 0);
 runPostSets7();
}
function runPostSets7() {
 var temp = 0;

 HEAP32[(gb + (2996) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3000) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3004) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3008) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3012) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3016) | 0) >> 2] = (fb + (432) | 0);

 HEAP32[(gb + (3020) | 0) >> 2] = (fb + (433) | 0);

 HEAP32[(gb + (3024) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3028) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3032) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3036) | 0) >> 2] = (fb + (434) | 0);

 HEAP32[(gb + (3040) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3044) | 0) >> 2] = (fb + (435) | 0);

 HEAP32[(gb + (3048) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3052) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3056) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3060) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3064) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3068) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3072) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3076) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3080) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3084) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3088) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3092) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3096) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3100) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3104) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3108) | 0) >> 2] = (fb + (436) | 0);

 HEAP32[(gb + (3112) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3116) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3120) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3124) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3128) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3132) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3136) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3140) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3144) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3148) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3152) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3156) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3160) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3164) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3168) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3172) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3176) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3180) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3184) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3188) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3192) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3196) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3200) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3204) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3208) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3212) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3216) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3220) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3224) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3228) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3232) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3236) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3240) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3244) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3248) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3252) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3256) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3260) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3264) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3268) | 0) >> 2] = (fb + (437) | 0);

 HEAP32[(gb + (3272) | 0) >> 2] = (fb + (438) | 0);

 HEAP32[(gb + (3276) | 0) >> 2] = (fb + (439) | 0);

 HEAP32[(gb + (3280) | 0) >> 2] = (fb + (440) | 0);

 HEAP32[(gb + (3284) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3288) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3292) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3296) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3300) | 0) >> 2] = (fb + (441) | 0);

 HEAP32[(gb + (3304) | 0) >> 2] = (fb + (442) | 0);

 HEAP32[(gb + (3308) | 0) >> 2] = (fb + (443) | 0);

 HEAP32[(gb + (3312) | 0) >> 2] = (fb + (444) | 0);

 HEAP32[(gb + (3316) | 0) >> 2] = (fb + (445) | 0);

 HEAP32[(gb + (3320) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3324) | 0) >> 2] = (fb + (446) | 0);

 HEAP32[(gb + (3328) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3332) | 0) >> 2] = (fb + (447) | 0);

 HEAP32[(gb + (3336) | 0) >> 2] = (fb + (448) | 0);

 HEAP32[(gb + (3340) | 0) >> 2] = (fb + (449) | 0);

 HEAP32[(gb + (3344) | 0) >> 2] = (fb + (450) | 0);

 HEAP32[(gb + (3348) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3352) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3356) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3360) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3364) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3368) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3372) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3376) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3380) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3384) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3388) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3392) | 0) >> 2] = (fb + (305) | 0);
 runPostSets8();
}
function runPostSets8() {
 var temp = 0;

 HEAP32[(gb + (3396) | 0) >> 2] = (fb + (451) | 0);

 HEAP32[(gb + (3400) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3404) | 0) >> 2] = (fb + (452) | 0);

 HEAP32[(gb + (3408) | 0) >> 2] = (fb + (453) | 0);

 HEAP32[(gb + (3412) | 0) >> 2] = (fb + (454) | 0);

 HEAP32[(gb + (3416) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3420) | 0) >> 2] = (fb + (455) | 0);

 HEAP32[(gb + (3424) | 0) >> 2] = (fb + (456) | 0);

 HEAP32[(gb + (3428) | 0) >> 2] = (fb + (457) | 0);

 HEAP32[(gb + (3432) | 0) >> 2] = (fb + (458) | 0);

 HEAP32[(gb + (3436) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3440) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3444) | 0) >> 2] = (fb + (459) | 0);

 HEAP32[(gb + (3448) | 0) >> 2] = (fb + (460) | 0);

 HEAP32[(gb + (3452) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3456) | 0) >> 2] = (fb + (461) | 0);

 HEAP32[(gb + (3460) | 0) >> 2] = (fb + (462) | 0);

 HEAP32[(gb + (3464) | 0) >> 2] = (fb + (463) | 0);

 HEAP32[(gb + (3468) | 0) >> 2] = (fb + (464) | 0);

 HEAP32[(gb + (3472) | 0) >> 2] = (fb + (465) | 0);

 HEAP32[(gb + (3476) | 0) >> 2] = (fb + (466) | 0);

 HEAP32[(gb + (3480) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3484) | 0) >> 2] = (fb + (467) | 0);

 HEAP32[(gb + (3488) | 0) >> 2] = (fb + (468) | 0);

 HEAP32[(gb + (3492) | 0) >> 2] = (fb + (469) | 0);

 HEAP32[(gb + (3496) | 0) >> 2] = (fb + (470) | 0);

 HEAP32[(gb + (3500) | 0) >> 2] = (fb + (471) | 0);

 HEAP32[(gb + (3504) | 0) >> 2] = (fb + (472) | 0);

 HEAP32[(gb + (3508) | 0) >> 2] = (fb + (473) | 0);

 HEAP32[(gb + (3512) | 0) >> 2] = (fb + (474) | 0);

 HEAP32[(gb + (3516) | 0) >> 2] = (fb + (475) | 0);

 HEAP32[(gb + (3520) | 0) >> 2] = (fb + (476) | 0);

 HEAP32[(gb + (3524) | 0) >> 2] = (fb + (477) | 0);

 HEAP32[(gb + (3528) | 0) >> 2] = (fb + (478) | 0);

 HEAP32[(gb + (3532) | 0) >> 2] = (fb + (479) | 0);

 HEAP32[(gb + (3536) | 0) >> 2] = (fb + (480) | 0);

 HEAP32[(gb + (3540) | 0) >> 2] = (fb + (481) | 0);

 HEAP32[(gb + (3544) | 0) >> 2] = (fb + (482) | 0);

 HEAP32[(gb + (3548) | 0) >> 2] = (fb + (483) | 0);

 HEAP32[(gb + (3552) | 0) >> 2] = (fb + (484) | 0);

 HEAP32[(gb + (3556) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3560) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3564) | 0) >> 2] = (fb + (485) | 0);

 HEAP32[(gb + (3568) | 0) >> 2] = (fb + (486) | 0);

 HEAP32[(gb + (3572) | 0) >> 2] = (fb + (487) | 0);

 HEAP32[(gb + (3576) | 0) >> 2] = (fb + (488) | 0);

 HEAP32[(gb + (3580) | 0) >> 2] = (fb + (489) | 0);

 HEAP32[(gb + (3584) | 0) >> 2] = (fb + (490) | 0);

 HEAP32[(gb + (3588) | 0) >> 2] = (fb + (491) | 0);

 HEAP32[(gb + (3592) | 0) >> 2] = (fb + (492) | 0);

 HEAP32[(gb + (3596) | 0) >> 2] = (fb + (493) | 0);

 HEAP32[(gb + (3600) | 0) >> 2] = (fb + (494) | 0);

 HEAP32[(gb + (3604) | 0) >> 2] = (fb + (495) | 0);

 HEAP32[(gb + (3608) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3612) | 0) >> 2] = (fb + (496) | 0);

 HEAP32[(gb + (3616) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3620) | 0) >> 2] = (fb + (497) | 0);

 HEAP32[(gb + (3624) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3628) | 0) >> 2] = (fb + (498) | 0);

 HEAP32[(gb + (3632) | 0) >> 2] = (fb + (499) | 0);

 HEAP32[(gb + (3636) | 0) >> 2] = (fb + (500) | 0);

 HEAP32[(gb + (3640) | 0) >> 2] = (fb + (305) | 0);

 HEAP32[(gb + (3644) | 0) >> 2] = (fb + (501) | 0);

 HEAP32[(gb + (3648) | 0) >> 2] = (fb + (502) | 0);

 HEAP32[(gb + (3692) | 0) >> 2] = (HEAP32[(gb + (3692) | 0) >> 2] | 0) + (gb + (20605) | 0);

 HEAP32[(gb + (3696) | 0) >> 2] = (HEAP32[(gb + (3696) | 0) >> 2] | 0) + (gb + (20634) | 0);

 HEAP32[(gb + (3700) | 0) >> 2] = (HEAP32[(gb + (3700) | 0) >> 2] | 0) + (gb + (20657) | 0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = (getTempRet0() | 0);
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, (getTempRet0() | 0) ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = (getTempRet0() | 0);
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = (getTempRet0() | 0);
  STACKTOP = __stackBase__;
  return (setTempRet0(($10$1) | 0), $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = (getTempRet0() | 0);
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (setTempRet0((HEAP32[$rem + 4 >> 2] | 0) | 0), HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = (getTempRet0() | 0);
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = (getTempRet0() | 0);
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
// =======================================================================


function mftCall_iiii(ptr,p0,p1,p2) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) { return FUNCTION_TABLE_iiii[(ptr-fb)&1023](p0|0,p1|0,p2|0)|0;  }return ftCall_iiii(ptr|0,p0|0,p1|0,p2|0)|0;
}
function mftCall_i(ptr) {
 ptr = ptr | 0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 63 | 0))) { return FUNCTION_TABLE_i[(ptr-fb)&63]()|0;  }return ftCall_i(ptr|0)|0;
}
function mftCall_vi(ptr,p0) {
 ptr = ptr | 0;p0 = p0|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_vi[(ptr-fb)&1023](p0|0); return; } ftCall_vi(ptr|0,p0|0);
}
function mftCall_vii(ptr,p0,p1) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_vii[(ptr-fb)&1023](p0|0,p1|0); return; } ftCall_vii(ptr|0,p0|0,p1|0);
}
function mftCall_viiiiiiiii(ptr,p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_viiiiiiiii[(ptr-fb)&1023](p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); return; } ftCall_viiiiiiiii(ptr|0,p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function mftCall_ii(ptr,p0) {
 ptr = ptr | 0;p0 = p0|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) { return FUNCTION_TABLE_ii[(ptr-fb)&1023](p0|0)|0;  }return ftCall_ii(ptr|0,p0|0)|0;
}
function mftCall_viii(ptr,p0,p1,p2) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_viii[(ptr-fb)&1023](p0|0,p1|0,p2|0); return; } ftCall_viii(ptr|0,p0|0,p1|0,p2|0);
}
function mftCall_v(ptr) {
 ptr = ptr | 0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_v[(ptr-fb)&1023](); return; } ftCall_v(ptr|0);
}
function mftCall_iiiii(ptr,p0,p1,p2,p3) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) { return FUNCTION_TABLE_iiiii[(ptr-fb)&1023](p0|0,p1|0,p2|0,p3|0)|0;  }return ftCall_iiiii(ptr|0,p0|0,p1|0,p2|0,p3|0)|0;
}
function mftCall_iii(ptr,p0,p1) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) { return FUNCTION_TABLE_iii[(ptr-fb)&1023](p0|0,p1|0)|0;  }return ftCall_iii(ptr|0,p0|0,p1|0)|0;
}
function mftCall_iiiiii(ptr,p0,p1,p2,p3,p4) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) { return FUNCTION_TABLE_iiiiii[(ptr-fb)&1023](p0|0,p1|0,p2|0,p3|0,p4|0)|0;  }return ftCall_iiiiii(ptr|0,p0|0,p1|0,p2|0,p3|0,p4|0)|0;
}
function mftCall_viiii(ptr,p0,p1,p2,p3) {
 ptr = ptr | 0;p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; if (((ptr|0) >= (fb|0)) & ((ptr|0) < (fb + 1023 | 0))) {  FUNCTION_TABLE_viiii[(ptr-fb)&1023](p0|0,p1|0,p2|0,p3|0); return; } ftCall_viiii(ptr|0,p0|0,p1|0,p2|0,p3|0);
}

  
//iiii = ftCall_iiii;


//i = ftCall_i;


//vi = ftCall_vi;


//vii = ftCall_vii;


//viiiiiiiii = ftCall_viiiiiiiii;


//ii = ftCall_ii;


//viii = ftCall_viii;


//v = ftCall_v;


//iiiii = ftCall_iiiii;


//iii = ftCall_iii;


//iiiiii = ftCall_iiiiii;


//viiii = ftCall_viiii;

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function _png_set_longjmp_fn__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _png_set_longjmp_fn(p0|0,p1|0,p2|0)|0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function _free__wrapper(p0) {
 p0 = p0|0; _free(p0|0);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function _png_destroy_write_struct__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _png_destroy_write_struct(p0|0,p1|0);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b4(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(4);
}
function _png_set_IHDR__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _png_set_IHDR(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _png_create_info_struct__wrapper(p0) {
 p0 = p0|0; return _png_create_info_struct(p0|0)|0;
}
function _malloc__wrapper(p0) {
 p0 = p0|0; return _malloc(p0|0)|0;
}
function _fclose__wrapper(p0) {
 p0 = p0|0; return _fclose(p0|0)|0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function _png_set_rows__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _png_set_rows(p0|0,p1|0,p2|0);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function _png_create_write_struct__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _png_create_write_struct(p0|0,p1|0,p2|0,p3|0)|0;
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function _fopen__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}
function _png_set_write_fn__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _png_set_write_fn(p0|0,p1|0,p2|0,p3|0);
}
function _png_write_png__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _png_write_png(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,_read_data_from_zip,_read_data_from_file,b0,_write_data_to_zip,_write_data_to_file,b0,b0,_read_rdram_dram,b0,_read_rdram_fb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_read_rdram_regs,b0,_read_rsp_mem,b0,_read_rsp_regs,b0,_read_rsp_regs2,b0,_read_dpc_regs,b0,_read_dps_regs,b0,_read_mi_regs
,b0,_read_vi_regs,b0,_read_ai_regs,b0,_read_pi_regs,b0,_read_ri_regs,b0,_read_si_regs,b0,_read_dd_regs,b0,_read_flashram_status,b0,_read_cart_rom,b0,_read_pif_ram,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,_fopen_file_func,b0,b0,b0,b0,b0,b0,_fopen64_file_func,b0,b0,b0,b0,b0,b0,b0,b0,_png_set_longjmp_fn__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_dummyinput_RomOpen,b1,b1,b1,b1,b1,b1,b1,b1,_dummyaudio_RomOpen,b1,b1,b1,_dummyaudio_VolumeGetLevel,b1,b1,_dummyaudio_VolumeGetString,b1
,b1,b1,b1,b1,b1,b1,_dummyvideo_RomOpen,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,_dummyinput_InitiateControllers,b2,b2,b2,b2,b2,b2,_dummyaudio_AiDacrateChanged,b2,b2,b2,b2,b2,_dummyaudio_SetSpeedFactor,b2,b2,b2,_dummyaudio_VolumeSetLevel,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_dummyvideo_SetRenderingCallback,b2,_dummyvideo_FBRead,b2,_dummyvideo_FBGetFrameBufferInfo,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_video_plugin_render_callback,b2,b2,b2,b2
,b2,b2,_save_mpk_file,_save_eep_file,_save_fla_file,_save_sra_file,b2,b2,b2,_savestates_save_m64p_work,b2,b2,b2,_workqueue_dismiss,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_backcompat_videoRenderCallback,_backcompat_setRenderCallbackIntercept,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZL15user_flush_dataP14png_struct_def,b2,b2,b2,b2,_free__wrapper,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,_dummyrsp_InitiateRSP,b3,b3,_dummyinput_ControllerCommand,_dummyinput_GetKeys,b3,_dummyinput_ReadController,b3,b3,_dummyinput_SDL_KeyDown,_dummyinput_SDL_KeyUp,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,_dummyvideo_MoveScreen,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_dummyvideo_ResizeVideoOutput,b3,_dummyvideo_FBWrite,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,_rvip_rumble,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZL15mupen_png_errorP14png_struct_defPKc,__ZL14mupen_png_warnP14png_struct_defPKc,b3,b3,_png_destroy_write_struct__wrapper,b3,_emscripten_longjmp__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viiiiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_png_set_IHDR__wrapper,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,_dummyrsp_DoRspCycles,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_dummyaudio_InitiateAudio,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,_dummyvideo_InitiateGFX,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_get_time_using_C_localtime,b5
,_egcvip_get_input,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_workqueue_thread_handler,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_png_create_info_struct__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,_malloc__wrapper,b5,b5,b5,_fclose__wrapper,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_set_audio_format_via_audio_plugin,_push_audio_samples_via_audio_plugin,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_DebugMessage,b6,b6,b6,b6,b6,b6,__ZL15user_write_dataP14png_struct_defPhj,b6,b6,b6,_png_set_rows__wrapper,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,_dummyrsp_RomClosed,b7,b7,b7,b7,b7,_dummyinput_RomClosed,b7,b7,b7,b7,b7,_dummyaudio_AiLenChanged,b7,_dummyaudio_ProcessAList,_dummyaudio_RomClosed,b7,b7,_dummyaudio_VolumeUp,_dummyaudio_VolumeDown,b7,b7,_dummyaudio_VolumeMute,b7,b7
,_dummyvideo_ChangeWindow,b7,b7,_dummyvideo_ProcessDList,_dummyvideo_ProcessRDPList,_dummyvideo_RomClosed,b7,_dummyvideo_ShowCFB,_dummyvideo_UpdateScreen,_dummyvideo_ViStatusChanged,_dummyvideo_ViWidthChanged,b7,b7,b7,b7,b7,b7,_LB,_LBU,_LH,_LHU,_LW,_LWL,_LWR,_SB,_SH,_SW,_SWL,_SWR,_LD
,_LDL,_LDR,_LL,_LWU,_SC,_SD,_SDL,_SDR,_SYNC,_ADDI,_ADDIU,_SLTI,_SLTIU,_ANDI,_ORI,_XORI,_LUI,_DADDI,_DADDIU,_ADD,_ADDU,_SUB,_SUBU,_SLT,_SLTU,_AND,_OR,_XOR,_NOR,_DADD
,_DADDU,_DSUB,_DSUBU,_MULT,_MULTU,_DIV,_DIVU,_MFHI,_MTHI,_MFLO,_MTLO,_DMULT,_DMULTU,_DDIV,_DDIVU,_J,_J_OUT,_J_IDLE,_JAL,_JAL_OUT,_JAL_IDLE,_JR_OUT,_JALR_OUT,_BEQ,_BEQ_OUT,_BEQ_IDLE,_BNE,_BNE_OUT,_BNE_IDLE,_BLEZ
,_BLEZ_OUT,_BLEZ_IDLE,_BGTZ,_BGTZ_OUT,_BGTZ_IDLE,_BLTZ,_BLTZ_OUT,_BLTZ_IDLE,_BGEZ,_BGEZ_OUT,_BGEZ_IDLE,_BLTZAL,_BLTZAL_OUT,_BLTZAL_IDLE,_BGEZAL,_BGEZAL_OUT,_BGEZAL_IDLE,_BEQL,_BEQL_OUT,_BEQL_IDLE,_BNEL,_BNEL_OUT,_BNEL_IDLE,_BLEZL,_BLEZL_OUT,_BLEZL_IDLE,_BGTZL,_BGTZL_OUT,_BGTZL_IDLE,_BLTZL
,_BLTZL_OUT,_BLTZL_IDLE,_BGEZL,_BGEZL_OUT,_BGEZL_IDLE,_BLTZALL,_BLTZALL_OUT,_BLTZALL_IDLE,_BGEZALL,_BGEZALL_OUT,_BGEZALL_IDLE,_BC1TL,_BC1TL_OUT,_BC1TL_IDLE,_BC1FL,_BC1FL_OUT,_BC1FL_IDLE,_SLL,_SRL,_SRA,_SLLV,_SRLV,_SRAV,_DSLL,_DSRL,_DSRA,_DSLLV,_DSRLV,_DSRAV,_DSLL32
,_DSRL32,_DSRA32,_MTC0,_MFC0,_TLBR,_TLBWI,_TLBWR,_TLBP,_CACHE,_ERET,_LWC1,_SWC1,_MTC1,_MFC1,_CTC1,_CFC1,_BC1T,_BC1T_OUT,_BC1T_IDLE,_BC1F,_BC1F_OUT,_BC1F_IDLE,_DMFC1,_DMTC1,_LDC1,_SDC1,_CVT_S_D,_CVT_S_W,_CVT_S_L,_CVT_D_S
,_CVT_D_W,_CVT_D_L,_CVT_W_S,_CVT_W_D,_CVT_L_S,_CVT_L_D,_ROUND_W_S,_ROUND_W_D,_ROUND_L_S,_ROUND_L_D,_TRUNC_W_S,_TRUNC_W_D,_TRUNC_L_S,_TRUNC_L_D,_CEIL_W_S,_CEIL_W_D,_CEIL_L_S,_CEIL_L_D,_FLOOR_W_S,_FLOOR_W_D,_FLOOR_L_S,_FLOOR_L_D,_ADD_S,_ADD_D,_SUB_S,_SUB_D,_MUL_S,_MUL_D,_DIV_S,_DIV_D
,_ABS_S,_ABS_D,_MOV_S,_MOV_D,_NEG_S,_NEG_D,_SQRT_S,_SQRT_D,_C_F_S,_C_F_D,_C_UN_S,_C_UN_D,_C_EQ_S,_C_EQ_D,_C_UEQ_S,_C_UEQ_D,_C_OLT_S,_C_OLT_D,_C_ULT_S,_C_ULT_D,_C_OLE_S,_C_OLE_D,_C_ULE_S,_C_ULE_D,_C_SF_S,_C_SF_D,_C_NGLE_S,_C_NGLE_D,_C_SEQ_S,_C_SEQ_D
,_C_NGL_S,_C_NGL_D,_C_LT_S,_C_LT_D,_C_NGE_S,_C_NGE_D,_C_LE_S,_C_LE_D,_C_NGT_S,_C_NGT_D,_SYSCALL,_TEQ,_NOP,_RESERVED,_NI,_FIN_BLOCK,_NOTCOMPILED,_NOTCOMPILED2,_RSPECIAL,_RREGIMM,_RJ,_RJAL,_RBEQ,_RBNE,_RBLEZ,_RBGTZ,_RADDI,_RADDIU,_RSLTI,_RSLTIU
,_RANDI,_RORI,_RXORI,_RLUI,_RCOP0,_RCOP1,_RSV,_RBEQL,_RBNEL,_RBLEZL,_RBGTZL,_RDADDI,_RDADDIU,_RLDL,_RLDR,_RLB,_RLH,_RLWL,_RLW,_RLBU,_RLHU,_RLWR,_RLWU,_RSB,_RSH,_RSWL,_RSW,_RSDL,_RSDR,_RSWR
,_RCACHE,_RLL,_RLWC1,_RLLD,_RLDC1,_RLD,_RSC,_RSWC1,_RSCD,_RSDC1,_RSD,_RMFC1,_RDMFC1,_RCFC1,_RMTC1,_RDMTC1,_RCTC1,_RBC,_RS,_RD,_RW,_RL,_RCVT_S_L,_RCVT_D_L,_RCVT_S_W,_RCVT_D_W,_RADD_D,_RSUB_D,_RMUL_D,_RDIV_D
,_RSQRT_D,_RABS_D,_RMOV_D,_RNEG_D,_RROUND_L_D,_RTRUNC_L_D,_RCEIL_L_D,_RFLOOR_L_D,_RROUND_W_D,_RTRUNC_W_D,_RCEIL_W_D,_RFLOOR_W_D,_RCVT_S_D,_RCVT_W_D,_RCVT_L_D,_RC_F_D,_RC_UN_D,_RC_EQ_D,_RC_UEQ_D,_RC_OLT_D,_RC_ULT_D,_RC_OLE_D,_RC_ULE_D,_RC_SF_D,_RC_NGLE_D,_RC_SEQ_D,_RC_NGL_D,_RC_LT_D,_RC_NGE_D,_RC_LE_D
,_RC_NGT_D,_RADD_S,_RSUB_S,_RMUL_S,_RDIV_S,_RSQRT_S,_RABS_S,_RMOV_S,_RNEG_S,_RROUND_L_S,_RTRUNC_L_S,_RCEIL_L_S,_RFLOOR_L_S,_RROUND_W_S,_RTRUNC_W_S,_RCEIL_W_S,_RFLOOR_W_S,_RCVT_D_S,_RCVT_W_S,_RCVT_L_S,_RC_F_S,_RC_UN_S,_RC_EQ_S,_RC_UEQ_S,_RC_OLT_S,_RC_ULT_S,_RC_OLE_S,_RC_ULE_S,_RC_SF_S,_RC_NGLE_S
,_RC_SEQ_S,_RC_NGL_S,_RC_LT_S,_RC_NGE_S,_RC_LE_S,_RC_NGT_S,_RBC1F,_RBC1T,_RBC1FL,_RBC1TL,_RMFC0,_RMTC0,_RTLB,_RTLBR,_RTLBWI,_RTLBWR,_RTLBP,_RERET,_RBLTZ,_RBGEZ,_RBLTZL,_RBGEZL,_RTGEI,_RTGEIU,_RTLTI,_RTLTIU,_RTEQI,_RTNEI,_RBLTZAL,_RBGEZAL
,_RBLTZALL,_RBGEZALL,_RSLL,_RSRL,_RSRA,_RSLLV,_RSRLV,_RSRAV,_RJR,_RJALR,_RSYSCALL,_RBREAK,_RSYNC,_RMFHI,_RMTHI,_RMFLO,_RMTLO,_RDSLLV,_RDSRLV,_RDSRAV,_RMULT,_RMULTU,_RDIV,_RDIVU,_RDMULT,_RDMULTU,_RDDIV,_RDDIVU,_RADD,_RADDU
,_RSUB,_RSUBU,_RAND,_ROR,_RXOR,_RNOR,_RSLT,_RSLTU,_RDADD,_RDADDU,_RDSUB,_RDSUBU,_RTGE,_RTGEU,_RTLT,_RTLTU,_RTEQ,_RTNE,_RDSLL,_RDSRL,_RDSRA,_RDSLL32,_RDSRL32,_RDSRA32,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_read_nomemb,_read_nomemh,_read_nomem,_read_nomemd,_write_nomemb,_write_nomemh,_write_nomem,_write_nomemd,_read_rdramb,_read_rdramh,_read_rdram,_read_rdramd
,_write_rdramb,_write_rdramh,_write_rdram,_write_rdramd,_read_nothingb,_read_nothingh,_read_nothing,_read_nothingd,_write_nothingb,_write_nothingh,_write_nothing,_write_nothingd,_read_rdramregb,_read_rdramregh,_read_rdramreg,_read_rdramregd,_write_rdramregb,_write_rdramregh,_write_rdramreg,_write_rdramregd,_read_rspmemb,_read_rspmemh,_read_rspmem,_read_rspmemd,_write_rspmemb,_write_rspmemh,_write_rspmem,_write_rspmemd,_read_rspregb,_read_rspregh
,_read_rspreg,_read_rspregd,_write_rspregb,_write_rspregh,_write_rspreg,_write_rspregd,_read_rspreg2b,_read_rspreg2h,_read_rspreg2,_read_rspreg2d,_write_rspreg2b,_write_rspreg2h,_write_rspreg2,_write_rspreg2d,_read_dpb,_read_dph,_read_dp,_read_dpd,_write_dpb,_write_dph,_write_dp,_write_dpd,_read_dpsb,_read_dpsh,_read_dps,_read_dpsd,_write_dpsb,_write_dpsh,_write_dps,_write_dpsd
,_read_mib,_read_mih,_read_mi,_read_mid,_write_mib,_write_mih,_write_mi,_write_mid,_read_vib,_read_vih,_read_vi,_read_vid,_write_vib,_write_vih,_write_vi,_write_vid,_read_aib,_read_aih,_read_ai,_read_aid,_write_aib,_write_aih,_write_ai,_write_aid,_read_pib,_read_pih,_read_pi,_read_pid,_write_pib,_write_pih
,_write_pi,_write_pid,_read_rib,_read_rih,_read_ri,_read_rid,_write_rib,_write_rih,_write_ri,_write_rid,_read_sib,_read_sih,_read_si,_read_sid,_write_sib,_write_sih,_write_si,_write_sid,_read_ddb,_read_ddh,_read_dd,_read_ddd,_write_ddb,_write_ddh,_write_dd,_write_ddd,_read_pi_flashram_statusb,_read_pi_flashram_statush,_read_pi_flashram_status,_read_pi_flashram_statusd
,_write_pi_flashram_commandb,_write_pi_flashram_commandh,_write_pi_flashram_command,_write_pi_flashram_commandd,_read_romb,_read_romh,_read_rom,_read_romd,_write_rom,_read_pifb,_read_pifh,_read_pif,_read_pifd,_write_pifb,_write_pifh,_write_pif,_write_pifd,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_EmptyFunc,_pure_interpreter_loop,_gennotcompiled,_genfin_block,_gennop,_genj,_genj_idle,_genj_out,_genjal
,_genjal_idle,_genjal_out,_genbeq,_genbeq_idle,_genbeq_out,_genbne,_genbne_idle,_genbne_out,_genblez,_genblez_idle,_genblez_out,_genbgtz,_genbgtz_idle,_genbgtz_out,_genaddi,_genaddiu,_genslti,_gensltiu,_genandi,_genori,_genxori,_genlui,_genreserved,_genbeql,_genbeql_idle,_genbeql_out,_genbnel,_genbnel_idle,_genbnel_out,_genblezl
,_genblezl_idle,_genblezl_out,_genbgtzl,_genbgtzl_idle,_genbgtzl_out,_gendaddi,_gendaddiu,_genldl,_genldr,_genlb,_genlh,_genlwl,_genlw,_genlbu,_genlhu,_genlwr,_genlwu,_gensb,_gensh,_genswl,_gensw,_gensdl,_gensdr,_genswr,_gencache,_genll,_genlwc1,_genni,_genldc1,_genld
,_gensc,_genswc1,_gensdc1,_gensd,_genmfc1,_gendmfc1,_gencfc1,_genmtc1,_gendmtc1,_genctc1,_gencvt_s_l,_gencvt_d_l,_gencvt_s_w,_gencvt_d_w,_genadd_d,_gensub_d,_genmul_d,_gendiv_d,_gensqrt_d,_genabs_d,_genmov_d,_genneg_d,_genround_l_d,_gentrunc_l_d,_genceil_l_d,_genfloor_l_d,_genround_w_d,_gentrunc_w_d,_genceil_w_d,_genfloor_w_d
,_gencvt_s_d,_gencvt_w_d,_gencvt_l_d,_genc_f_d,_genc_un_d,_genc_eq_d,_genc_ueq_d,_genc_olt_d,_genc_ult_d,_genc_ole_d,_genc_ule_d,_genc_sf_d,_genc_ngle_d,_genc_seq_d,_genc_ngl_d,_genc_lt_d,_genc_nge_d,_genc_le_d,_genc_ngt_d,_genadd_s,_gensub_s,_genmul_s,_gendiv_s,_gensqrt_s,_genabs_s,_genmov_s,_genneg_s,_genround_l_s,_gentrunc_l_s,_genceil_l_s
,_genfloor_l_s,_genround_w_s,_gentrunc_w_s,_genceil_w_s,_genfloor_w_s,_gencvt_d_s,_gencvt_w_s,_gencvt_l_s,_genc_f_s,_genc_un_s,_genc_eq_s,_genc_ueq_s,_genc_olt_s,_genc_ult_s,_genc_ole_s,_genc_ule_s,_genc_sf_s,_genc_ngle_s,_genc_seq_s,_genc_ngl_s,_genc_lt_s,_genc_nge_s,_genc_le_s,_genc_ngt_s,_genbc1f,_genbc1f_idle,_genbc1f_out,_genbc1t,_genbc1t_idle,_genbc1t_out
,_genbc1fl,_genbc1fl_idle,_genbc1fl_out,_genbc1tl,_genbc1tl_idle,_genbc1tl_out,_genmfc0,_genmtc0,_gentlbr,_gentlbwi,_gentlbwr,_gentlbp,_generet,_genbltz,_genbltz_idle,_genbltz_out,_genbgez,_genbgez_idle,_genbgez_out,_genbltzl,_genbltzl_idle,_genbltzl_out,_genbgezl,_genbgezl_idle,_genbgezl_out,_genbltzal,_genbltzal_idle,_genbltzal_out,_genbgezal,_genbgezal_idle
,_genbgezal_out,_genbltzall,_genbltzall_idle,_genbltzall_out,_genbgezall,_genbgezall_idle,_genbgezall_out,_gensll,_gensrl,_gensra,_gensllv,_gensrlv,_gensrav,_genjr,_genjalr,_gensyscall,_gensync,_genmfhi,_genmthi,_genmflo,_genmtlo,_gendsllv,_gendsrlv,_gendsrav,_genmult,_genmultu,_gendiv,_gendivu,_gendmult,_gendmultu
,_genddiv,_genddivu,_genadd,_genaddu,_gensub,_gensubu,_genand,_genor,_genxor,_gennor,_genslt,_gensltu,_gendadd,_gendaddu,_gendsub,_gendsubu,_genteq,_gendsll,_gendsrl,_gendsra,_gendsll32,_gendsrl32,_gendsra32,_read_rdramFBb,_read_rdramFBh,_read_rdramFB,_read_rdramFBd,_write_rdramFBb,_write_rdramFBh,_write_rdramFB
,_write_rdramFBd,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_write_rdram_dram,b8,_write_rdram_fb,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_write_rdram_regs,b8,_write_rsp_mem,b8,_write_rsp_regs,b8,_write_rsp_regs2,b8,_write_dpc_regs,b8,_write_dps_regs,b8
,_write_mi_regs,b8,_write_vi_regs,b8,_write_ai_regs,b8,_write_pi_regs,b8,_write_ri_regs,b8,_write_si_regs,b8,_write_dd_regs,b8,_write_flashram_command,b8,_write_cart_rom,b8,_write_pif_ram,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,_fread_file_func,_fwrite_file_func,b8,_fseek_file_func,b8,b8,b8,b8,b8,_png_create_write_struct__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_SDL_CompatEventFilter,b9,b9,b9,b9,_egcvip_is_connected
,b9,b9,b9,b9,b9,b9,_event_sdl_filter,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,_ftell_file_func,b9,_fclose_file_func,_ferror_file_func,b9,_ftell64_file_func,b9,b9,b9,b9,b9,b9,b9,b9,b9,_fopen__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiii = [b10,_dummyrsp_PluginGetVersion,b10,b10,b10,_dummyinput_PluginGetVersion,b10,b10,b10,b10,b10,b10,b10,b10,_dummyaudio_PluginGetVersion,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_dummyvideo_PluginGetVersion
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_fseek64_file_func,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_dummyvideo_ReadScreen2,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_png_set_write_fn__wrapper,b11,b11,b11,b11,b11,_png_write_png__wrapper,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];

  return { _savestates_load: _savestates_load, _read_rdramFBh: _read_rdramFBh, _RC_OLT_S: _RC_OLT_S, _ConfigGetParamString: _ConfigGetParamString, _C_NGT_D: _C_NGT_D, _read_rdramFBd: _read_rdramFBd, _savestates_get_job: _savestates_get_job, _genlink_subblock: _genlink_subblock, _RC_OLT_D: _RC_OLT_D, _FIN_BLOCK: _FIN_BLOCK, _RMULTU: _RMULTU, _combinepath: _combinepath, _read_aid: _read_aid, _C_NGT_S: _C_NGT_S, _RSYSCALL: _RSYSCALL, _genfloor_w_s: _genfloor_w_s, _init_rdp: _init_rdp, _dummyaudio_InitiateAudio: _dummyaudio_InitiateAudio, _RMUL_S: _RMUL_S, _read_dps: _read_dps, _RCEIL_L_D: _RCEIL_L_D, _genround_l_s: _genround_l_s, _dummyinput_RomClosed: _dummyinput_RomClosed, _RMUL_D: _RMUL_D, _LDR: _LDR, _genfloor_w_d: _genfloor_w_d, _RBNE: _RBNE, _get_time_using_C_localtime: _get_time_using_C_localtime, _read_dpb: _read_dpb, _read_dps_regs: _read_dps_regs, _genround_l_d: _genround_l_d, _RCEIL_L_S: _RCEIL_L_S, _read_dpd: _read_dpd, _ScreenshotRomOpen: _ScreenshotRomOpen, _genj: _genj, _RBC1T: _RBC1T, _JR_IDLE_819: _JR_IDLE_819, _read_rdramFBb: _read_rdramFBb, _unzGoToFilePos: _unzGoToFilePos, _BEQ_OUT: _BEQ_OUT, _mempak_write_command: _mempak_write_command, _r4300_execute: _r4300_execute, _eeprom_write_command: _eeprom_write_command, _RTLT: _RTLT, _dummyrsp_InitiateRSP: _dummyrsp_InitiateRSP, stackSave: stackSave, _dummyvideo_RomClosed: _dummyvideo_RomClosed, _RDMULT: _RDMULT, _dummyaudio_PluginGetVersion: _dummyaudio_PluginGetVersion, _RSLTI: _RSLTI, _RSLTU: _RSLTU, _gendsubu: _gendsubu, _main_get_screen_size: _main_get_screen_size, _write_data_to_zip: _write_data_to_zip, _C_NGLE_S: _C_NGLE_S, _genbgez: _genbgez, _free_block: _free_block, _genbltzl_out: _genbltzl_out, _read_dpsh: _read_dpsh, _VidExt_Quit: _VidExt_Quit, _RBC: _RBC, _BGEZL_OUT: _BGEZL_OUT, _init_vi: _init_vi, _countrycodestring: _countrycodestring, _DIV: _DIV, _do_SP_Task: _do_SP_Task, _sdl_keysym2scancode: _sdl_keysym2scancode, _JALR_IDLE: _JALR_IDLE, _init_rsp: _init_rsp, _gendiv: _gendiv, _Write_EndOfCentralDirectoryRecord: _Write_EndOfCentralDirectoryRecord, _event_initialize: _event_initialize, _C_SEQ_S: _C_SEQ_S, _call_zopen64: _call_zopen64, stackAlloc: stackAlloc, _init_block: _init_block, _CVT_S_D: _CVT_S_D, _RDDIVU: _RDDIVU, _md5_finish: _md5_finish, _rvip_rumble: _rvip_rumble, _BLEZ_OUT: _BLEZ_OUT, _romdatabase_close: _romdatabase_close, _genjr: _genjr, _ConfigGetParameterHelp: _ConfigGetParameterHelp, _genadd_s: _genadd_s, _read_dd_regs: _read_dd_regs, _genadd_d: _genadd_d, _init_pif: _init_pif, _ConfigSaveFile: _ConfigSaveFile, _gendaddiu: _gendaddiu, _RABS_S: _RABS_S, _map_region: _map_region, _genc_ngl_d: _genc_ngl_d, _read_ri: _read_ri, _DSLL: _DSLL, _RC_SF_D: _RC_SF_D, _genbltzal_idle: _genbltzal_idle, _LDL: _LDL, _RC_SF_S: _RC_SF_S, _ConfigGetSharedDataFilepath: _ConfigGetSharedDataFilepath, _genc_ngl_s: _genc_ngl_s, _RABS_D: _RABS_D, _main_stop: _main_stop, _genbnel: _genbnel, _connect_vi: _connect_vi, _main_set_fastforward: _main_set_fastforward, _RLWC1: _RLWC1, _read_dph: _read_dph, _rumblepak_rumble: _rumblepak_rumble, _SQRT_S: _SQRT_S, _RBLTZ: _RBLTZ, _unzSetOffset: _unzSetOffset, _DebugSetCallbacks: _DebugSetCallbacks, _BGEZALL_IDLE: _BGEZALL_IDLE, _CTC1: _CTC1, _J_OUT: _J_OUT, _read_cart_rom: _read_cart_rom, _zipCloseFileInZipRaw: _zipCloseFileInZipRaw, _mpk_file_ptr: _mpk_file_ptr, _RLD: _RLD, _vi_vertical_interrupt_event: _vi_vertical_interrupt_event, _RLB: _RLB, _gensqrt_d: _gensqrt_d, _read_nothing: _read_nothing, _RLL: _RLL, _genbeq_idle: _genbeq_idle, _RLH: _RLH, _RLW: _RLW, _gensqrt_s: _gensqrt_s, _main_set_core_defaults: _main_set_core_defaults, _read_rspreg2b: _read_rspreg2b, _read_rspreg2h: _read_rspreg2h, _genldr: _genldr, _genfin_block: _genfin_block, _swap_buffer: _swap_buffer, _init_r4300: _init_r4300, _TEQ: _TEQ, _OverrideVideoFunctions: _OverrideVideoFunctions, _RJAL: _RJAL, _genbgtz_idle: _genbgtz_idle, _genldl: _genldl, _DebugMemWrite8: _DebugMemWrite8, _genj_idle: _genj_idle, _CoreDoCommand: _CoreDoCommand, _DebugMemGetMemInfo: _DebugMemGetMemInfo, _main_volume_up: _main_volume_up, _zipClose: _zipClose, _genbc1t_idle: _genbc1t_idle, _gencfc1: _gencfc1, _DebugMemRead64: _DebugMemRead64, _JR_IDLE: _JR_IDLE, _read_rspmemh: _read_rspmemh, _DebugMemWrite32: _DebugMemWrite32, _SQRT_D: _SQRT_D, _read_rspmemd: _read_rspmemd, _MFLO: _MFLO, _pi_end_of_dma_event: _pi_end_of_dma_event, _RTRUNC_W_D: _RTRUNC_W_D, _BGTZ_IDLE: _BGTZ_IDLE, _af_rtc_status_command: _af_rtc_status_command, _gen_interupt: _gen_interupt, _connect_rsp: _connect_rsp, _savestates_get_slot: _savestates_get_slot, _unzOpenCurrentFile: _unzOpenCurrentFile, _RMFC1: _RMFC1, _cheat_add_new: _cheat_add_new, _RBC1F: _RBC1F, _RSB: _RSB, _RDSRAV: _RDSRAV, _main_read_screen: _main_read_screen, _ConfigShutdown: _ConfigShutdown, _DebugMemRead16: _DebugMemRead16, _write_pif_ram: _write_pif_ram, _FLOOR_W_D: _FLOOR_W_D, _SYNC: _SYNC, _RC_F_S: _RC_F_S, _jump_to_func: _jump_to_func, _raise_maskable_interrupt: _raise_maskable_interrupt, _DADD: _DADD, _ConfigSetDefaultInt: _ConfigSetDefaultInt, _BGEZ_OUT: _BGEZ_OUT, _si_end_of_dma_event: _si_end_of_dma_event, _RBLTZL: _RBLTZL, _recompile_opcode: _recompile_opcode, _genc_ngt_d: _genc_ngt_d, _RC_F_D: _RC_F_D, _close_sra_file: _close_sra_file, _md5_init: _md5_init, _RSLL: _RSLL, _RTLTI: _RTLTI, _RTLTU: _RTLTU, _dyna_jump: _dyna_jump, _RSLT: _RSLT, _genmtlo: _genmtlo, _XORI: _XORI, _ini_parse_line: _ini_parse_line, _CVT_S_W: _CVT_S_W, _close_rom: _close_rom, _genround_w_s: _genround_w_s, _plugin_start: _plugin_start, _RSLTIU: _RSLTIU, _genround_w_d: _genround_w_d, _MTHI: _MTHI, _cheat_set_enabled: _cheat_set_enabled, _read_romd: _read_romd, _read_romb: _read_romb, _genxori: _genxori, _read_romh: _read_romh, _gensltiu: _gensltiu, _main_advance_one: _main_advance_one, _gendsrlv: _gendsrlv, _BC1FL_OUT: _BC1FL_OUT, _LBU: _LBU, _ROUND_L_D: _ROUND_L_D, _FLOOR_L_S: _FLOOR_L_S, _ConfigSetParameter: _ConfigSetParameter, _BGEZL_IDLE: _BGEZL_IDLE, _ROUND_L_S: _ROUND_L_S, _read_ddd: _read_ddd, _gencache: _gencache, _DSRL32: _DSRL32, _genbc1fl_out: _genbc1fl_out, _genbgtzl_out: _genbgtzl_out, _BLTZALL_IDLE: _BLTZALL_IDLE, _main_core_state_query: _main_core_state_query, _gensrav: _gensrav, _unzGetLocalExtrafield: _unzGetLocalExtrafield, _read_data_from_zip: _read_data_from_zip, _RDSUB: _RDSUB, _RSQRT_D: _RSQRT_D, _unzStringFileNameCompare: _unzStringFileNameCompare, _fopen64_file_func: _fopen64_file_func, _RSUB: _RSUB, _write_mi_regs: _write_mi_regs, _RSQRT_S: _RSQRT_S, _RBGEZAL: _RBGEZAL, _write_rsp_regs: _write_rsp_regs, _genadd: _genadd, _RSV: _RSV, _RSW: _RSW, _BEQL_OUT: _BEQL_OUT, _unztell64: _unztell64, _BGEZ: _BGEZ, _RSH: _RSH, _RSD: _RSD, _RSRA: _RSRA, _format_mempak: _format_mempak, _plugin_connect: _plugin_connect, _DSRLV: _DSRLV, _genblezl_idle: _genblezl_idle, _read_rom: _read_rom, _free_blocks: _free_blocks, _romdatabase_open: _romdatabase_open, _VidExt_GL_GetProcAddress: _VidExt_GL_GetProcAddress, _read_nomemh: _read_nomemh, _eep_file_ptr: _eep_file_ptr, _generic_jump_to: _generic_jump_to, _write_ai: _write_ai, _ROR: _ROR, _unzGetCurrentFileInfo64: _unzGetCurrentFileInfo64, _genc_nge_s: _genc_nge_s, _write_rdramh: _write_rdramh, _genc_nge_d: _genc_nge_d, _genbeql_idle: _genbeql_idle, _write_rdramb: _write_rdramb, _translate_event_queue: _translate_event_queue, _JAL_OUT: _JAL_OUT, _dummyrsp_DoRspCycles: _dummyrsp_DoRspCycles, _dyna_stop: _dyna_stop, _DSRL: _DSRL, _DSRA: _DSRA, _set_audio_format: _set_audio_format, _DSLLV: _DSLLV, _write_pifb: _write_pifb, _genbltz_out: _genbltz_out, _connect_ai: _connect_ai, _XOR: _XOR, _write_pifd: _write_pifd, _write_pifh: _write_pifh, _RMTHI: _RMTHI, _genld: _genld, _ConfigSetDefaultString: _ConfigSetDefaultString, _genlb: _genlb, _write_rdramd: _write_rdramd, _genjalr: _genjalr, _main_take_next_screenshot: _main_take_next_screenshot, _write_nothing: _write_nothing, _genlh: _genlh, _plugin_check: _plugin_check, _ADD: _ADD, _genlw: _genlw, _zipRemoveExtraInfoBlock: _zipRemoveExtraInfoBlock, _genteq: _genteq, _read_rdramregd: _read_rdramregd, _game_controller_is_connected: _game_controller_is_connected, _read_rdramregb: _read_rdramregb, _zipOpenNewFileInZip3_64: _zipOpenNewFileInZip3_64, _ADD_D: _ADD_D, _genlui: _genlui, _read_rdramregh: _read_rdramregh, _dummyvideo_RomOpen: _dummyvideo_RomOpen, _BC1T_OUT: _BC1T_OUT, _genbgez_idle: _genbgez_idle, _VidExt_Init: _VidExt_Init, _RC_NGT_S: _RC_NGT_S, _ADD_S: _ADD_S, _force_detected_rdram_size_hack: _force_detected_rdram_size_hack, _RC_LT_D: _RC_LT_D, _RMULT: _RMULT, _CVT_L_S: _CVT_L_S, _write_rspmemh: _write_rspmemh, _RC_LT_S: _RC_LT_S, _write_rdramFB: _write_rdramFB, _CVT_L_D: _CVT_L_D, _fseek64_file_func: _fseek64_file_func, _write_rspmemb: _write_rspmemb, _write_rspmemd: _write_rspmemd, _r4300_reset_soft: _r4300_reset_soft, _write_pi_regs: _write_pi_regs, _RBEQ: _RBEQ, _invalidate_r4300_cached_code: _invalidate_r4300_cached_code, _cheat_add_hacks: _cheat_add_hacks, _genbnel_idle: _genbnel_idle, _RDSUBU: _RDSUBU, _genbc1t_out: _genbc1t_out, _open_rom: _open_rom, _get_savestatepath: _get_savestatepath, _init_ai: _init_ai, _CVT_D_L: _CVT_D_L, _C_SEQ_D: _C_SEQ_D, _genbltz_idle: _genbltz_idle, _CVT_D_W: _CVT_D_W, _read_ai_regs: _read_ai_regs, _r4300_mult_hi: _r4300_mult_hi, _BNEL_IDLE: _BNEL_IDLE, _genmtc1: _genmtc1, _genmtc0: _genmtc0, _dummyvideo_ResizeVideoOutput: _dummyvideo_ResizeVideoOutput, _RDSRLV: _RDSRLV, _unzGetOffset: _unzGetOffset, _genceil_l_d: _genceil_l_d, _RDSRA32: _RDSRA32, _genlbu: _genlbu, _read_rspregd: _read_rspregd, _read_rspregb: _read_rspregb, _MFC0: _MFC0, _MFC1: _MFC1, _read_aib: _read_aib, _unzOpenCurrentFilePassword: _unzOpenCurrentFilePassword, _read_rspregh: _read_rspregh, _eeprom_read_command: _eeprom_read_command, _write_rspreg2b: _write_rspreg2b, _CVT_S_L: _CVT_S_L, _genbc1t: _genbc1t, _ERET: _ERET, _NI: _NI, _unzOpenCurrentFile3: _unzOpenCurrentFile3, _unzOpenCurrentFile2: _unzOpenCurrentFile2, _rumblepak_read_command: _rumblepak_read_command, _save_mpk_file: _save_mpk_file, _RDADD: _RDADD, _genbc1f: _genbc1f, _read_rspreg2: _read_rspreg2, _genc_sf_d: _genc_sf_d, _BLTZALL_OUT: _BLTZALL_OUT, _genc_sf_s: _genc_sf_s, _ConfigGetParameter: _ConfigGetParameter, _add_interupt_event_count: _add_interupt_event_count, _main_speedup: _main_speedup, _sdl_scancode2keysym: _sdl_scancode2keysym, _dummyvideo_FBWrite: _dummyvideo_FBWrite, _fread_file_func: _fread_file_func, _genc_un_d: _genc_un_d, _load_eventqueue_infos: _load_eventqueue_infos, _DADDI: _DADDI, _genswl: _genswl, _RC_LE_D: _RC_LE_D, _RTLBR: _RTLBR, _get_event: _get_event, _RTLBP: _RTLBP, _genc_un_s: _genc_un_s, _genll: _genll, _RC_LE_S: _RC_LE_S, _dummyrsp_PluginGetVersion: _dummyrsp_PluginGetVersion, _C_EQ_D: _C_EQ_D, _genxor: _genxor, _RBC1FL: _RBC1FL, _genneg_s: _genneg_s, _RCVT_L_D: _RCVT_L_D, _RESERVED: _RESERVED, _RCVT_W_S: _RCVT_W_S, _protect_framebuffers: _protect_framebuffers, _DebugBreakpointCommand: _DebugBreakpointCommand, _RTEQI: _RTEQI, _r4300_cp1_regs: _r4300_cp1_regs, _zipCloseFileInZip: _zipCloseFileInZip, _unzGetFilePos: _unzGetFilePos, _VidExt_InFullscreenMode: _VidExt_InFullscreenMode, _dummyaudio_VolumeSetLevel: _dummyaudio_VolumeSetLevel, _RTLTIU: _RTLTIU, _save_eventqueue_infos: _save_eventqueue_infos, _new_vi: _new_vi, _genlhu: _genlhu, _unzReadCurrentFile: _unzReadCurrentFile, _SDL_CompatEventFilter: _SDL_CompatEventFilter, _set_fpr_pointers: _set_fpr_pointers, _genblezl: _genblezl, _string_to_int: _string_to_int, _dummyvideo_InitiateGFX: _dummyvideo_InitiateGFX, _RADDI: _RADDI, _FLOOR_L_D: _FLOOR_L_D, _CVT_W_S: _CVT_W_S, _ORI: _ORI, _read_rdramh: _read_rdramh, _C_F_D: _C_F_D, _read_rdramd: _read_rdramd, _CoreCheatEnabled: _CoreCheatEnabled, _read_rdramb: _read_rdramb, _main_check_inputs: _main_check_inputs, _write_rspmem: _write_rspmem, _gensw: _gensw, _write_dd_regs: _write_dd_regs, _egcvip_get_input: _egcvip_get_input, _gensubu: _gensubu, _main_core_state_set: _main_core_state_set, _genori: _genori, _write_ai_regs: _write_ai_regs, _gensh: _gensh, _gensd: _gensd, _gensb: _gensb, _gensc: _gensc, _write_flashram_command: _write_flashram_command, _DMTC1: _DMTC1, _RDIV_S: _RDIV_S, _RBLTZALL: _RBLTZALL, _RBLTZAL: _RBLTZAL, _zipOpenNewFileInZip4: _zipOpenNewFileInZip4, _zipOpenNewFileInZip3: _zipOpenNewFileInZip3, _init_pi: _init_pi, _C_F_S: _C_F_S, _DebugBreakpointLookup: _DebugBreakpointLookup, _RDIV_D: _RDIV_D, _RAND: _RAND, _recompile_block: _recompile_block, _BEQL_IDLE: _BEQL_IDLE, _RERET: _RERET, _LWL: _LWL, _genbltzall_idle: _genbltzall_idle, _DDIVU: _DDIVU, _gentrunc_l_d: _gentrunc_l_d, _dummyaudio_ProcessAList: _dummyaudio_ProcessAList, _genor: _genor, _RLBU: _RLBU, _gendsra: _gendsra, _TLBWR: _TLBWR, _gendsrl: _gendsrl, _zipOpenNewFileInZip4_64: _zipOpenNewFileInZip4_64, _gentrunc_l_s: _gentrunc_l_s, _dummyaudio_VolumeGetString: _dummyaudio_VolumeGetString, _format_eeprom: _format_eeprom, _fclose_file_func: _fclose_file_func, _dummyaudio_VolumeGetLevel: _dummyaudio_VolumeGetLevel, _RLHU: _RLHU, _ConfigGetParameterType: _ConfigGetParameterType, _C_OLT_D: _C_OLT_D, _savestates_deinit: _savestates_deinit, _read_rspmem: _read_rspmem, _read_si_regs: _read_si_regs, _genc_ngle_d: _genc_ngle_d, _dummyaudio_RomOpen: _dummyaudio_RomOpen, _main_volume_down: _main_volume_down, _zipCloseFileInZipRaw64: _zipCloseFileInZipRaw64, _MULT: _MULT, _DebugMemGetPointer: _DebugMemGetPointer, _genc_ngle_s: _genc_ngle_s, _ConfigListParameters: _ConfigListParameters, _savestates_set_job: _savestates_set_job, _RREGIMM: _RREGIMM, _write_vib: _write_vib, _dma_read_sram: _dma_read_sram, _gendsrl32: _gendsrl32, _RBGEZ: _RBGEZ, _read_vib: _read_vib, _savestates_load_set_pc: _savestates_load_set_pc, _read_vid: _read_vid, _read_vih: _read_vih, _read_rdram: _read_rdram, _ConfigGetParamFloat: _ConfigGetParamFloat, _ConfigListSections: _ConfigListSections, _RDADDIU: _RDADDIU, _dummyvideo_ShowCFB: _dummyvideo_ShowCFB, _RBGTZL: _RBGTZL, _r4300_reset_hard: _r4300_reset_hard, _clear_rcp_interrupt: _clear_rcp_interrupt, _write_sid: _write_sid, _osal_get_shared_filepath: _osal_get_shared_filepath, _DebugStep: _DebugStep, _LDC1: _LDC1, _read_nomemb: _read_nomemb, _write_aib: _write_aib, _write_aid: _write_aid, _read_nomemd: _read_nomemd, _write_aih: _write_aih, _egcvip_is_connected: _egcvip_is_connected, _CoreGetRomSettings: _CoreGetRomSettings, _read_pif_ram: _read_pif_ram, _DIVU: _DIVU, _SH: _SH, _free_all_registers: _free_all_registers, _SC: _SC, _SB: _SB, _SD: _SD, _CEIL_L_S: _CEIL_L_S, _ai_end_of_dma_event: _ai_end_of_dma_event, __ZL15mupen_png_errorP14png_struct_defPKc: __ZL15mupen_png_errorP14png_struct_defPKc, _RC_NGT_D: _RC_NGT_D, _CEIL_L_D: _CEIL_L_D, _SW: _SW, _dma_write_sram: _dma_write_sram, _ftell64_file_func: _ftell64_file_func, _CEIL_W_S: _CEIL_W_S, _BGEZ_IDLE: _BGEZ_IDLE, _genneg_d: _genneg_d, _genbgezal_out: _genbgezal_out, _bitshift64Lshr: _bitshift64Lshr, _RSLLV: _RSLLV, _CEIL_W_D: _CEIL_W_D, _ini_search_by_crc: _ini_search_by_crc, _unzGetGlobalComment: _unzGetGlobalComment, _ConfigGetUserCachePath: _ConfigGetUserCachePath, _dummyvideo_SetRenderingCallback: _dummyvideo_SetRenderingCallback, _workqueue_init: _workqueue_init, _main_speeddown: _main_speeddown, _dummyvideo_PluginGetVersion: _dummyvideo_PluginGetVersion, _init_cache: _init_cache, _MTLO: _MTLO, _r4300_pc: _r4300_pc, _genblez: _genblez, _dummyvideo_MoveScreen: _dummyvideo_MoveScreen, _genc_ueq_s: _genc_ueq_s, _cp0_update_count: _cp0_update_count, _ConfigSetDefaultFloat: _ConfigSetDefaultFloat, _save_fla_file: _save_fla_file, _read_dp: _read_dp, _JAL_IDLE: _JAL_IDLE, _genc_ueq_d: _genc_ueq_d, _RFLOOR_L_S: _RFLOOR_L_S, _dummyaudio_VolumeDown: _dummyaudio_VolumeDown, _genbgezl_out: _genbgezl_out, _read_dd: _read_dd, _raise_rcp_interrupt: _raise_rcp_interrupt, _game_controller_get_input: _game_controller_get_input, _RMFHI: _RMFHI, _SUB_D: _SUB_D, _DebugGetState: _DebugGetState, _mempak_read_command: _mempak_read_command, _RC_UEQ_S: _RC_UEQ_S, _RSDR: _RSDR, _DSRA32: _DSRA32, _RC_UEQ_D: _RC_UEQ_D, _write_rspreg2h: _write_rspreg2h, _SUB_S: _SUB_S, _unprotect_framebuffers: _unprotect_framebuffers, _DebugMemRead32: _DebugMemRead32, _write_rspreg2d: _write_rspreg2d, _init_assembler: _init_assembler, _fseek_file_func: _fseek_file_func, _BLTZL: _BLTZL, _ConfigGetUserDataPath: _ConfigGetUserDataPath, _write_rdram: _write_rdram, _gensub_s: _gensub_s, _ConfigGetParamBool: _ConfigGetParamBool, _unzGetOffset64: _unzGetOffset64, _RFLOOR_W_D: _RFLOOR_W_D, _BC1FL_IDLE: _BC1FL_IDLE, _genbc1f_out: _genbc1f_out, _gensub_d: _gensub_d, _write_rdram_dram: _write_rdram_dram, _video_plugin_render_callback: _video_plugin_render_callback, _DebugMemGetRecompInfo: _DebugMemGetRecompInfo, _osal_get_user_datapath: _osal_get_user_datapath, _genceil_w_d: _genceil_w_d, _CFC1: _CFC1, _gensdc1: _gensdc1, _CoreShutdown: _CoreShutdown, _unzGetCurrentFileZStreamPos64: _unzGetCurrentFileZStreamPos64, _genceil_w_s: _genceil_w_s, _BNEL: _BNEL, _gensync: _gensync, _read_rdramreg: _read_rdramreg, _write_nothingh: _write_nothingh, _TLBR: _TLBR, _RSC: _RSC, _r4300_mult_lo: _r4300_mult_lo, _RC_NGE_S: _RC_NGE_S, _open_mpk_file: _open_mpk_file, _write_nothingd: _write_nothingd, _unzGetFilePos64: _unzGetFilePos64, _gendsllv: _gendsllv, _RC_NGE_D: _RC_NGE_D, _free_assembler: _free_assembler, _genldc1: _genldc1, _genbgez_out: _genbgez_out, _init_rdram: _init_rdram, _write_pi_flashram_command: _write_pi_flashram_command, _savestates_set_autoinc_slot: _savestates_set_autoinc_slot, _pure_interpreter: _pure_interpreter, _gensrlv: _gensrlv, _read_nothingb: _read_nothingb, _write_mih: _write_mih, _RADD: _RADD, _read_nothingh: _read_nothingh, _RCVT_L_S: _RCVT_L_S, _unzOpen2_64: _unzOpen2_64, _BC1TL_OUT: _BC1TL_OUT, _genbne_out: _genbne_out, _read_mib: _read_mib, _dma_write_flashram: _dma_write_flashram, _savestates_init: _savestates_init, _dummyvideo_ProcessDList: _dummyvideo_ProcessDList, _cheat_apply_cheats: _cheat_apply_cheats, _write_vi: _write_vi, _BNEL_OUT: _BNEL_OUT, _gentrunc_w_d: _gentrunc_w_d, _gentrunc_w_s: _gentrunc_w_s, _sram_save: _sram_save, _trim: _trim, _event_sdl_filter: _event_sdl_filter, _ConfigHasUnsavedChanges: _ConfigHasUnsavedChanges, _reset_hard: _reset_hard, _read_pih: _read_pih, _gendsra32: _gendsra32, _genjal_idle: _genjal_idle, _fwrite_file_func: _fwrite_file_func, _connect_rdram: _connect_rdram, _read_pid: _read_pid, _read_pif: _read_pif, _dummyinput_PluginGetVersion: _dummyinput_PluginGetVersion, _main_state_load: _main_state_load, _SLT: _SLT, _DebugGetCPUDataPtr: _DebugGetCPUDataPtr, _sra_file_ptr: _sra_file_ptr, _RNOR: _RNOR, _write_rspregh: _write_rspregh, _parse_hex: _parse_hex, _genbgtzl: _genbgtzl, _write_rspregd: _write_rspregd, _write_rspregb: _write_rspregb, _write_rih: _write_rih, _RBREAK: _RBREAK, _SLL: _SLL, _set_audio_format_via_audio_plugin: _set_audio_format_via_audio_plugin, _write_mib: _write_mib, _genddiv: _genddiv, _genc_seq_s: _genc_seq_s, _read_rib: _read_rib, _main_state_inc_slot: _main_state_inc_slot, _osal_get_user_cachepath: _osal_get_user_cachepath, _read_rih: _read_rih, _rsp_interrupt_event: _rsp_interrupt_event, _CoreCompareDataSync: _CoreCompareDataSync, _genc_seq_d: _genc_seq_d, _write_rdramreg: _write_rdramreg, _RCVT_S_L: _RCVT_S_L, _RL: _RL, _RJ: _RJ, _add_interupt_event: _add_interupt_event, _genbgezal_idle: _genbgezal_idle, _new_frame: _new_frame, _genjal: _genjal, _unzeof: _unzeof, _unzLocateFile: _unzLocateFile, _fill_zlib_filefunc64_32_def_from_filefunc32: _fill_zlib_filefunc64_32_def_from_filefunc32, _CVT_D_S: _CVT_D_S, _BC1F_IDLE: _BC1F_IDLE, _main_run: _main_run, _gensllv: _gensllv, _workqueue_dismiss: _workqueue_dismiss, _RC_NGL_D: _RC_NGL_D, _RSWC1: _RSWC1, _genni: _genni, _genmul_s: _genmul_s, _RXORI: _RXORI, _DSRAV: _DSRAV, _RMTLO: _RMTLO, _RC_NGL_S: _RC_NGL_S, _Write_GlobalComment: _Write_GlobalComment, _genmul_d: _genmul_d, _genbc1fl: _genbc1fl, _init_mi: _init_mi, _JALR_OUT: _JALR_OUT, _gensll: _gensll, _write_nomem: _write_nomem, _genslt: _genslt, _dummyinput_InitiateControllers: _dummyinput_InitiateControllers, _RC_SEQ_S: _RC_SEQ_S, _rdp_interrupt_event: _rdp_interrupt_event, _RTRUNC_L_S: _RTRUNC_L_S, _passe2: _passe2, _SetStateCallback: _SetStateCallback, _read_rdramFB: _read_rdramFB, _zipOpenNewFileInZip64: _zipOpenNewFileInZip64, _C_SF_S: _C_SF_S, _zipOpen64: _zipOpen64, _MFHI: _MFHI, _RSRL: _RSRL, _RC_SEQ_D: _RC_SEQ_D, _C_SF_D: _C_SF_D, _BLTZ_IDLE: _BLTZ_IDLE, _BGTZL_OUT: _BGTZL_OUT, _read_dpc_regs: _read_dpc_regs, _BLEZL: _BLEZL, _RBLEZ: _RBLEZ, _C_OLE_D: _C_OLE_D, _connect_ri: _connect_ri, _DMULTU: _DMULTU, _RTRUNC_W_S: _RTRUNC_W_S, _write_pid: _write_pid, _BGEZALL: _BGEZALL, _write_pif: _write_pif, _write_pib: _write_pib, _connect_rdp: _connect_rdp, _write_pih: _write_pih, _RC_NGLE_D: _RC_NGLE_D, _push_audio_samples_via_audio_plugin: _push_audio_samples_via_audio_plugin, _BGEZALL_OUT: _BGEZALL_OUT, _Write_Zip64EndOfCentralDirectoryLocator: _Write_Zip64EndOfCentralDirectoryLocator, _RC_NGLE_S: _RC_NGLE_S, _dummyvideo_FBRead: _dummyvideo_FBRead, _dma_read_flashram: _dma_read_flashram, _DebugMemWrite64: _DebugMemWrite64, _open_sra_file: _open_sra_file, _JALR_IDLE_820: _JALR_IDLE_820, _write_data_to_file: _write_data_to_file, _TLBWI: _TLBWI, _invalidate_cached_code_hacktarux: _invalidate_cached_code_hacktarux, _r4300_regs: _r4300_regs, _init_cic_using_ipl3: _init_cic_using_ipl3, setThrew: setThrew, _savestates_select_slot: _savestates_select_slot, _event_sdl_keydown: _event_sdl_keydown, _C_LT_D: _C_LT_D, _read_aih: _read_aih, _read_rspreg2d: _read_rspreg2d, _RC_ULE_S: _RC_ULE_S, _RMOV_D: _RMOV_D, _r4300_last_addr: _r4300_last_addr, _dummyinput_ControllerCommand: _dummyinput_ControllerCommand, _read_si: _read_si, _dummyinput_GetKeys: _dummyinput_GetKeys, _get_next_event_type: _get_next_event_type, _genceil_l_s: _genceil_l_s, _genmflo: _genmflo, _RMOV_S: _RMOV_S, _RC_ULE_D: _RC_ULE_D, _write_nothingb: _write_nothingb, _RTGE: _RTGE, _BLTZAL_OUT: _BLTZAL_OUT, _genabs_s: _genabs_s, _RSPECIAL: _RSPECIAL, _gensrl: _gensrl, _RDMTC1: _RDMTC1, _close_mpk_file: _close_mpk_file, _genabs_d: _genabs_d, _CoreAttachPlugin: _CoreAttachPlugin, _gensra: _gensra, _SLTIU: _SLTIU, _RJALR: _RJALR, _write_vih: _write_vih, _gensub: _gensub, _write_vid: _write_vid, _genblezl_out: _genblezl_out, _genand: _genand, _genaddiu: _genaddiu, _write_sib: _write_sib, _n64_cic_nus_6105: _n64_cic_nus_6105, _J_IDLE: _J_IDLE, _write_sih: _write_sih, _SDL: _SDL, _ADDIU: _ADDIU, _RLWR: _RLWR, _RLWU: _RLWU, _TRUNC_W_S: _TRUNC_W_S, _RLWL: _RLWL, _unztell: _unztell, _write_si_regs: _write_si_regs, _SDR: _SDR, _LHU: _LHU, _BGEZAL_IDLE: _BGEZAL_IDLE, _RBGEZL: _RBGEZL, _read_flashram_status: _read_flashram_status, _BLEZL_OUT: _BLEZL_OUT, _RSDL: _RSDL, _fopen_file_func: _fopen_file_func, _RBNEL: _RBNEL, _TLBP: _TLBP, _RTRUNC_L_D: _RTRUNC_L_D, _RROUND_L_S: _RROUND_L_S, _dummyaudio_RomClosed: _dummyaudio_RomClosed, _LH: _LH, _RROUND_L_D: _RROUND_L_D, _shuffle_fpr_data: _shuffle_fpr_data, _reset_soft: _reset_soft, _genbgtz_out: _genbgtz_out, _ConfigRevertChanges: _ConfigRevertChanges, _to_big_endian_buffer: _to_big_endian_buffer, _eeprom_status_command: _eeprom_status_command, _JR_OUT: _JR_OUT, _RSCD: _RSCD, _OR: _OR, _RADD_S: _RADD_S, _tlb_map: _tlb_map, _RTNEI: _RTNEI, _dummyvideo_UpdateScreen: _dummyvideo_UpdateScreen, _call_zseek64: _call_zseek64, _LWC1: _LWC1, _RADD_D: _RADD_D, _RSRAV: _RSRAV, _RCTC1: _RCTC1, _virtual_to_physical_address: _virtual_to_physical_address, _VidExt_GL_GetAttribute: _VidExt_GL_GetAttribute, _RANDI: _RANDI, _savestates_save: _savestates_save, _genbc1fl_idle: _genbc1fl_idle, _ConfigDeleteSection: _ConfigDeleteSection, _AND: _AND, _read_rsp_regs: _read_rsp_regs, _DSUB: _DSUB, _unzCloseCurrentFile: _unzCloseCurrentFile, _dummyvideo_ChangeWindow: _dummyvideo_ChangeWindow, _init_ri: _init_ri, _gendivu: _gendivu, _MUL_D: _MUL_D, _pure_interpreter_loop: _pure_interpreter_loop, _genslti: _genslti, _genjal_out: _genjal_out, _read_pifh: _read_pifh, _ConfigInit: _ConfigInit, _BLTZ: _BLTZ, _read_pifd: _read_pifd, _read_pifb: _read_pifb, _main_volume_get_muted: _main_volume_get_muted, _read_ri_regs: _read_ri_regs, _MUL_S: _MUL_S, __ZL14mupen_png_warnP14png_struct_defPKc: __ZL14mupen_png_warnP14png_struct_defPKc, _mempak_save: _mempak_save, _gensltu: _gensltu, _queue_work: _queue_work, _CoreOverrideVidExt: _CoreOverrideVidExt, _dummyrsp_RomClosed: _dummyrsp_RomClosed, _main_volume_set_level: _main_volume_set_level, _genaddi: _genaddi, _genaddu: _genaddu, stackRestore: stackRestore, _read_rdram_dram: _read_rdram_dram, _zipOpen3: _zipOpen3, _zipOpen2: _zipOpen2, _RADDIU: _RADDIU, _osal_dynlib_getproc: _osal_dynlib_getproc, _MULTU: _MULTU, _BLTZALL: _BLTZALL, _RMTC1: _RMTC1, _push_audio_samples: _push_audio_samples, _gentlbwr: _gentlbwr, _genbltzall: _genbltzall, _savestates_save_m64p_work: _savestates_save_m64p_work, _BGTZ_OUT: _BGTZ_OUT, _gentlbwi: _gentlbwi, _SLLV: _SLLV, _BEQL: _BEQL, _genbgezl: _genbgezl, _RC_ULT_D: _RC_ULT_D, _cheat_uninit: _cheat_uninit, _fast_mem_access: _fast_mem_access, _BGEZAL_OUT: _BGEZAL_OUT, _gensdr: _gensdr, _gensdl: _gensdl, _DADDIU: _DADDIU, _connect_si: _connect_si, _read_nothingd: _read_nothingd, _write_nomemh: _write_nomemh, _write_nomemd: _write_nomemd, _write_nomemb: _write_nomemb, _genbeq: _genbeq, _write_mid: _write_mid, _realloc_exec: _realloc_exec, _ABS_D: _ABS_D, _dummyvideo_ReadScreen2: _dummyvideo_ReadScreen2, _ABS_S: _ABS_S, _fla_file_ptr: _fla_file_ptr, _genreserved: _genreserved, _RDSLLV: _RDSLLV, _read_rspmemb: _read_rspmemb, _dummyinput_SDL_KeyUp: _dummyinput_SDL_KeyUp, _VidExt_ResizeWindow: _VidExt_ResizeWindow, _RROUND_W_D: _RROUND_W_D, _read_mi_regs: _read_mi_regs, _gendsll32: _gendsll32, _read_pi_regs: _read_pi_regs, _CoreAddCheat: _CoreAddCheat, _LUI: _LUI, _RSUBU: _RSUBU, _BC1F: _BC1F, _RDIV: _RDIV, _gendiv_s: _gendiv_s, _gendiv_d: _gendiv_d, _RBLEZL: _RBLEZL, _main_state_set_slot: _main_state_set_slot, _DebugMessage: _DebugMessage, _BGEZAL: _BGEZAL, _genswr: _genswr, _genbne_idle: _genbne_idle, _read_controller: _read_controller, _RC_UN_S: _RC_UN_S, _dummyaudio_AiDacrateChanged: _dummyaudio_AiDacrateChanged, _read_sid: _read_sid, _genbgezall_idle: _genbgezall_idle, _write_dps: _write_dps, _read_dpsb: _read_dpsb, _read_dpsd: _read_dpsd, _write_dpd: _write_dpd, _write_dpb: _write_dpb, _genbeql: _genbeql, _RFLOOR_L_D: _RFLOOR_L_D, _genc_f_s: _genc_f_s, _gencvt_l_d: _gencvt_l_d, _read_mi: _read_mi, _genc_f_d: _genc_f_d, _write_pi: _write_pi, _ConfigSetParameterHelp: _ConfigSetParameterHelp, _write_rdramregb: _write_rdramregb, _VidExt_GL_SwapBuffers: _VidExt_GL_SwapBuffers, _DDIV: _DDIV, _gencvt_l_s: _gencvt_l_s, _write_rdramregh: _write_rdramregh, _dummyaudio_VolumeUp: _dummyaudio_VolumeUp, _RFLOOR_W_S: _RFLOOR_W_S, _NEG_S: _NEG_S, _unzOpen2: _unzOpen2, _unzGoToNextFile: _unzGoToNextFile, _NEG_D: _NEG_D, _osal_mkdirp: _osal_mkdirp, _ConfigSetDefaultBool: _ConfigSetDefaultBool, _read_ddh: _read_ddh, _write_rdramregd: _write_rdramregd, _read_ddb: _read_ddb, _read_rsp_mem: _read_rsp_mem, _TLB_refill_exception: _TLB_refill_exception, _dummyvideo_ViStatusChanged: _dummyvideo_ViStatusChanged, _connect_cart_rom: _connect_cart_rom, _MTC0: _MTC0, _MTC1: _MTC1, _unzGoToFirstFile: _unzGoToFirstFile, _genmthi: _genmthi, _CoreCompareCallback: _CoreCompareCallback, _write_dps_regs: _write_dps_regs, _i64Subtract: _i64Subtract, _genlwc1: _genlwc1, _DebugMemRead8: _DebugMemRead8, _genmfc1: _genmfc1, _genmfc0: _genmfc0, _RDMULTU: _RDMULTU, _BLTZL_IDLE: _BLTZL_IDLE, _genctc1: _genctc1, _genbc1f_idle: _genbc1f_idle, _read_ai: _read_ai, _zipWriteInFileInZip: _zipWriteInFileInZip, _BEQ: _BEQ, _RMFC0: _RMFC0, _C_ULT_S: _C_ULT_S, _SWR: _SWR, _genc_ult_d: _genc_ult_d, _SRAV: _SRAV, _write_rspreg2: _write_rspreg2, _namefrompath: _namefrompath, _BC1F_OUT: _BC1F_OUT, _dummyinput_SDL_KeyDown: _dummyinput_SDL_KeyDown, _genc_ult_s: _genc_ult_s, _C_ULT_D: _C_ULT_D, _VidExt_GL_SetAttribute: _VidExt_GL_SetAttribute, _write_dph: _write_dph, _SWL: _SWL, _RBEQL: _RBEQL, _RMTC0: _RMTC0, _r4300_next_interrupt: _r4300_next_interrupt, _DMFC1: _DMFC1, _ConfigOpenSection: _ConfigOpenSection, _BGTZL_IDLE: _BGTZL_IDLE, _write_si: _write_si, _gendsll: _gendsll, _bitshift64Shl: _bitshift64Shl, _dummyvideo_FBGetFrameBufferInfo: _dummyvideo_FBGetFrameBufferInfo, _exception_general: _exception_general, _RLDR: _RLDR, _gendmtc1: _gendmtc1, _genblez_out: _genblez_out, _DSUBU: _DSUBU, _gendmfc1: _gendmfc1, _BGTZL: _BGTZL, _RLDL: _RLDL, _BLEZ: _BLEZ, _savestates_inc_slot: _savestates_inc_slot, _ConfigSaveSection: _ConfigSaveSection, _MOV_S: _MOV_S, _Write_Zip64EndOfCentralDirectoryRecord: _Write_Zip64EndOfCentralDirectoryRecord, _DIV_D: _DIV_D, _genbltzal: _genbltzal, _DIV_S: _DIV_S, _BC1T_IDLE: _BC1T_IDLE, _genbltzl_idle: _genbltzl_idle, _SLTU: _SLTU, _gencvt_w_d: _gencvt_w_d, _read_rdram_fb: _read_rdram_fb, _open_fla_file: _open_fla_file, _NOR: _NOR, _workqueue_shutdown: _workqueue_shutdown, _NOP: _NOP, _RDSRA: _RDSRA, _EmptyFunc: _EmptyFunc, _gencvt_w_s: _gencvt_w_s, _get_savesrampath: _get_savesrampath, _SLTI: _SLTI, _gencvt_d_w: _gencvt_d_w, _gencvt_d_s: _gencvt_d_s, _genbeq_out: _genbeq_out, _C_LT_S: _C_LT_S, _VidExt_ListFullscreenModes: _VidExt_ListFullscreenModes, _open_eep_file: _open_eep_file, _BLTZL_OUT: _BLTZL_OUT, _write_cart_rom: _write_cart_rom, _event_gameshark_active: _event_gameshark_active, _gencvt_d_l: _gencvt_d_l, _read_pib: _read_pib, _genc_lt_d: _genc_lt_d, _LW: _LW, _bitshift64Ashr: _bitshift64Ashr, _read_from_file: _read_from_file, _r4300_cp1_regs_simple: _r4300_cp1_regs_simple, _genc_lt_s: _genc_lt_s, _LB: _LB, _LD: _LD, _r4300_cp0_regs: _r4300_cp0_regs, _genbltzl: _genbltzl, _TRUNC_W_D: _TRUNC_W_D, _LL: _LL, _format_flashram: _format_flashram, _RBC1TL: _RBC1TL, _imagestring: _imagestring, _close_fla_file: _close_fla_file, _workqueue_thread_handler: _workqueue_thread_handler, _genbgtz: _genbgtz, _gendsub: _gendsub, _genc_ngt_s: _genc_ngt_s, _write_rsp_regs2: _write_rsp_regs2, _init_si: _init_si, _gencvt_s_w: _gencvt_s_w, _C_LE_S: _C_LE_S, _RC_ULT_S: _RC_ULT_S, _DSLL32: _DSLL32, _RC_EQ_S: _RC_EQ_S, _gencvt_s_d: _gencvt_s_d, _SWC1: _SWC1, _C_LE_D: _C_LE_D, _r4300_cp1_fcr0: _r4300_cp1_fcr0, _gencvt_s_l: _gencvt_s_l, _J: _J, _RDSLL: _RDSLL, _RTGEIU: _RTGEIU, _RLDC1: _RLDC1, _BC1TL_IDLE: _BC1TL_IDLE, _SDC1: _SDC1, _DebugSetCoreCompare: _DebugSetCoreCompare, _get_r4300_emumode: _get_r4300_emumode, _RC_EQ_D: _RC_EQ_D, _zipOpenNewFileInZip2_64: _zipOpenNewFileInZip2_64, _read_vi_regs: _read_vi_regs, _save_eep_file: _save_eep_file, _main_volume_mute: _main_volume_mute, _genc_ule_s: _genc_ule_s, _RBGEZALL: _RBGEZALL, _ROUND_W_S: _ROUND_W_S, __ZL15user_flush_dataP14png_struct_def: __ZL15user_flush_dataP14png_struct_def, _genbgezall_out: _genbgezall_out, _RTGEI: _RTGEI, _DADDU: _DADDU, _C_ULE_D: _C_ULE_D, _RTGEU: _RTGEU, _dummyaudio_AiLenChanged: _dummyaudio_AiLenChanged, _init_fb: _init_fb, _formatstr: _formatstr, _genbltz: _genbltz, _DMULT: _DMULT, _read_pi: _read_pi, _connect_pi: _connect_pi, _genc_ule_d: _genc_ule_d, _close_eep_file: _close_eep_file, __ZL15user_write_dataP14png_struct_defPhj: __ZL15user_write_dataP14png_struct_defPhj, _fill_fopen_filefunc: _fill_fopen_filefunc, _dummyaudio_VolumeMute: _dummyaudio_VolumeMute, _CoreGetAPIVersions: _CoreGetAPIVersions, _read_rdram_regs: _read_rdram_regs, _md5_append: _md5_append, _event_sdl_keyup: _event_sdl_keyup, _backcompat_videoRenderCallback: _backcompat_videoRenderCallback, _eeprom_save: _eeprom_save, _genbeql_out: _genbeql_out, _RDMFC1: _RDMFC1, _RDSRL32: _RDSRL32, _update_x86_rounding_mode: _update_x86_rounding_mode, _gendsrav: _gendsrav, _unzGetCurrentFileInfo: _unzGetCurrentFileInfo, _read_rid: _read_rid, _VidExt_ToggleFullScreen: _VidExt_ToggleFullScreen, _unzGoToFilePos64: _unzGoToFilePos64, _gendmultu: _gendmultu, _C_ULE_S: _C_ULE_S, _unzOpen: _unzOpen, _JAL: _JAL, _genbltzal_out: _genbltzal_out, _update_pif_write: _update_pif_write, _SetDebugCallback: _SetDebugCallback, _BLTZ_OUT: _BLTZ_OUT, _RSDC1: _RSDC1, _DebugMemWrite16: _DebugMemWrite16, _RD: _RD, _gennotcompiled: _gennotcompiled, _write_vi_regs: _write_vi_regs, _C_UN_S: _C_UN_S, _CVT_W_D: _CVT_W_D, _event_set_gameshark: _event_set_gameshark, _gennop: _gennop, _gennor: _gennor, _TRUNC_L_S: _TRUNC_L_S, _init_flashram: _init_flashram, _ftell_file_func: _ftell_file_func, _NOTCOMPILED2: _NOTCOMPILED2, _write_dpc_regs: _write_dpc_regs, _TRUNC_L_D: _TRUNC_L_D, _call_ztell64: _call_ztell64, _write_rom: _write_rom, _genddivu: _genddivu, _VidExt_SetCaption: _VidExt_SetCaption, _read_rspreg: _read_rspreg, _RCOP1: _RCOP1, _RCOP0: _RCOP0, _RSYNC: _RSYNC, _RTLB: _RTLB, _dummyvideo_ViWidthChanged: _dummyvideo_ViWidthChanged, _C_NGLE_D: _C_NGLE_D, _RNEG_D: _RNEG_D, _RTLBWR: _RTLBWR, _write_rdram_fb: _write_rdram_fb, _RSRLV: _RSRLV, _gendaddi: _gendaddi, _genj_out: _genj_out, _gendaddu: _gendaddu, _DebugSetRunState: _DebugSetRunState, _RNEG_S: _RNEG_S, _BNE_OUT: _BNE_OUT, _RTLBWI: _RTLBWI, _init_blocks: _init_blocks, _LoadCentralDirectoryRecord: _LoadCentralDirectoryRecord, _BLTZAL_IDLE: _BLTZAL_IDLE, _read_data_from_file: _read_data_from_file, _write_rdramFBb: _write_rdramFBb, _cheat_delete_all: _cheat_delete_all, _zipOpen: _zipOpen, _RLUI: _RLUI, _genbc1tl_out: _genbc1tl_out, _RDSLL32: _RDSLL32, _process_controller_command: _process_controller_command, _gentlbp: _gentlbp, _gentlbr: _gentlbr, _backcompat_setRenderCallbackIntercept: _backcompat_setRenderCallbackIntercept, _i64Add: _i64Add, _ROUND_W_D: _ROUND_W_D, _read_pi_flashram_statusd: _read_pi_flashram_statusd, _zipOpen2_64: _zipOpen2_64, _read_pi_flashram_statusb: _read_pi_flashram_statusb, _CACHE: _CACHE, _read_pi_flashram_statush: _read_pi_flashram_statush, _read_vi: _read_vi, _write_ddh: _write_ddh, _unzGetGlobalInfo: _unzGetGlobalInfo, _BGTZ: _BGTZ, _genc_eq_d: _genc_eq_d, _write_ddb: _write_ddb, _SUBU: _SUBU, _write_ddd: _write_ddd, _flashram_save: _flashram_save, _main_reset: _main_reset, _unzSetOffset64: _unzSetOffset64, _RROUND_W_S: _RROUND_W_S, _genc_eq_s: _genc_eq_s, _C_EQ_S: _C_EQ_S, _write_mi: _write_mi, _RCACHE: _RCACHE, _RDDIV: _RDDIV, _RCFC1: _RCFC1, _RCVT_W_D: _RCVT_W_D, _SRA: _SRA, _BC1FL: _BC1FL, _VidExt_VideoRunning: _VidExt_VideoRunning, _genswc1: _genswc1, _rumblepak_write_command: _rumblepak_write_command, _DebugDecodeOp: _DebugDecodeOp, _event_set_core_defaults: _event_set_core_defaults, _VidExt_SetVideoMode: _VidExt_SetVideoMode, _genbc1tl_idle: _genbc1tl_idle, _genbgezall: _genbgezall, _genmult: _genmult, _dummyaudio_SetSpeedFactor: _dummyaudio_SetSpeedFactor, _main_toggle_pause: _main_toggle_pause, _dummyinput_RomOpen: _dummyinput_RomOpen, _ANDI: _ANDI, _gensyscall: _gensyscall, _CoreDetachPlugin: _CoreDetachPlugin, _C_NGL_S: _C_NGL_S, _read_nomem: _read_nomem, _RLLD: _RLLD, _unzClose: _unzClose, _RSWL: _RSWL, _write_rspreg: _write_rspreg, _RSWR: _RSWR, _C_NGL_D: _C_NGL_D, _DebuggerCallback: _DebuggerCallback, _write_to_file: _write_to_file, _write_ri: _write_ri, _write_pi_flashram_commandh: _write_pi_flashram_commandh, _check_cop1_unusable: _check_cop1_unusable, runPostSets: runPostSets, _genbgezal: _genbgezal, _RXOR: _RXOR, _main_message: _main_message, _r4300_llbit: _r4300_llbit, _genc_le_d: _genc_le_d, _gendadd: _gendadd, _dummyinput_ReadController: _dummyinput_ReadController, _genc_le_s: _genc_le_s, _BGEZL: _BGEZL, _zipOpenNewFileInZip2: _zipOpenNewFileInZip2, _RCVT_S_W: _RCVT_S_W, _NOTCOMPILED: _NOTCOMPILED, _read_mid: _read_mid, _gendmult: _gendmult, _read_mih: _read_mih, _genandi: _genandi, _save_sra_file: _save_sra_file, _RCVT_S_D: _RCVT_S_D, _BNE_IDLE: _BNE_IDLE, _write_rib: _write_rib, _write_rsp_mem: _write_rsp_mem, _write_pi_flashram_commandd: _write_pi_flashram_commandd, _write_rid: _write_rid, _RTNE: _RTNE, _init_cart_rom: _init_cart_rom, _PluginGetVersion: _PluginGetVersion, _unzOpen64: _unzOpen64, _SYSCALL: _SYSCALL, _C_OLE_S: _C_OLE_S, _write_ri_regs: _write_ri_regs, _init_interupt: _init_interupt, _BC1TL: _BC1TL, _dummyvideo_ProcessRDPList: _dummyvideo_ProcessRDPList, _BLEZL_IDLE: _BLEZL_IDLE, _af_rtc_read_command: _af_rtc_read_command, _ConfigGetParamInt: _ConfigGetParamInt, _RORI: _RORI, _remove_event: _remove_event, _main_volume_get_level: _main_volume_get_level, _tlb_unmap: _tlb_unmap, _r4300_cp1_fcr31: _r4300_cp1_fcr31, _write_dd: _write_dd, _RJR: _RJR, _genmov_d: _genmov_d, establishStackSpace: establishStackSpace, _genc_ole_d: _genc_ole_d, _update_pif_read: _update_pif_read, _genmov_s: _genmov_s, _RW: _RW, _write_dp: _write_dp, _genc_ole_s: _genc_ole_s, _read_rsp_regs2: _read_rsp_regs2, _BLTZAL: _BLTZAL, _C_NGE_D: _C_NGE_D, _RBGTZ: _RBGTZ, _ADDU: _ADDU, _ADDI: _ADDI, _read_sih: _read_sih, _C_NGE_S: _C_NGE_S, _read_sib: _read_sib, _r4300_cp1_regs_double: _r4300_cp1_regs_double, _CoreStartup: _CoreStartup, _genlwr: _genlwr, _ferror_file_func: _ferror_file_func, _genlwu: _genlwu, _RTEQ: _RTEQ, _StateChanged: _StateChanged, _genlwl: _genlwl, _genblez_idle: _genblez_idle, _af_rtc_get_time: _af_rtc_get_time, _osal_get_user_configpath: _osal_get_user_configpath, _format_sram: _format_sram, _RC_OLE_D: _RC_OLE_D, _RADDU: _RADDU, _main_state_save: _main_state_save, _LWR: _LWR, _RC_OLE_S: _RC_OLE_S, _RDADDI: _RDADDI, _BC1T: _BC1T, _RCVT_D_W: _RCVT_D_W, _RCVT_D_S: _RCVT_D_S, _RS: _RS, _genbne: _genbne, _generet: _generet, _LWU: _LWU, _RMFLO: _RMFLO, _C_OLT_S: _C_OLT_S, _RCVT_D_L: _RCVT_D_L, _RDADDU: _RDADDU, _genbltzall_out: _genbltzall_out, _RDSRL: _RDSRL, _read_pi_flashram_status: _read_pi_flashram_status, _RSUB_S: _RSUB_S, _write_dpsb: _write_dpsb, _write_dpsd: _write_dpsd, _write_pi_flashram_commandb: _write_pi_flashram_commandb, _genbgtzl_idle: _genbgtzl_idle, _write_dpsh: _write_dpsh, _FLOOR_W_S: _FLOOR_W_S, _RSUB_D: _RSUB_D, _write_rdramFBh: _write_rdramFBh, _write_rdramFBd: _write_rdramFBd, _unzGetGlobalInfo64: _unzGetGlobalInfo64, _C_UN_D: _C_UN_D, _SRL: _SRL, _genc_olt_s: _genc_olt_s, _BLEZ_IDLE: _BLEZ_IDLE, _RCEIL_W_D: _RCEIL_W_D, _write_rdram_regs: _write_rdram_regs, _genmfhi: _genmfhi, _TakeScreenshot: _TakeScreenshot, _genc_olt_d: _genc_olt_d, _fill_fopen64_filefunc: _fill_fopen64_filefunc, _af_rtc_write_command: _af_rtc_write_command, _RCEIL_W_S: _RCEIL_W_S, _genmultu: _genmultu, _SRLV: _SRLV, _genfloor_l_d: _genfloor_l_d, _RC_UN_D: _RC_UN_D, _genbnel_out: _genbnel_out, _genbc1tl: _genbc1tl, _CoreErrorMessage: _CoreErrorMessage, _Write_LocalFileHeader: _Write_LocalFileHeader, _signal_rcp_interrupt: _signal_rcp_interrupt, _RDIVU: _RDIVU, _genfloor_l_s: _genfloor_l_s, _MOV_D: _MOV_D, _BEQ_IDLE: _BEQ_IDLE, _genbgezl_idle: _genbgezl_idle, _C_UEQ_D: _C_UEQ_D, _ConfigGetUserConfigPath: _ConfigGetUserConfigPath, _to_little_endian_buffer: _to_little_endian_buffer, _zipOpenNewFileInZip: _zipOpenNewFileInZip, _C_UEQ_S: _C_UEQ_S, _BNE: _BNE, _init_memory: _init_memory, _SUB: _SUB, _check_interupt: _check_interupt, _cheat_init: _cheat_init };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__genbc1fl = asm["_genbc1fl"]; asm["_genbc1fl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1fl.apply(null, arguments);
};

var real__init_mi = asm["_init_mi"]; asm["_init_mi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_mi.apply(null, arguments);
};

var real__write_dpc_regs = asm["_write_dpc_regs"]; asm["_write_dpc_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_dpc_regs.apply(null, arguments);
};

var real__savestates_load = asm["_savestates_load"]; asm["_savestates_load"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_load.apply(null, arguments);
};

var real__read_rdramFBh = asm["_read_rdramFBh"]; asm["_read_rdramFBh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramFBh.apply(null, arguments);
};

var real__ConfigGetParamString = asm["_ConfigGetParamString"]; asm["_ConfigGetParamString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParamString.apply(null, arguments);
};

var real__gensll = asm["_gensll"]; asm["_gensll"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensll.apply(null, arguments);
};

var real__read_rdramFBd = asm["_read_rdramFBd"]; asm["_read_rdramFBd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramFBd.apply(null, arguments);
};

var real__savestates_get_job = asm["_savestates_get_job"]; asm["_savestates_get_job"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_get_job.apply(null, arguments);
};

var real__genlink_subblock = asm["_genlink_subblock"]; asm["_genlink_subblock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlink_subblock.apply(null, arguments);
};

var real__eep_file_ptr = asm["_eep_file_ptr"]; asm["_eep_file_ptr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eep_file_ptr.apply(null, arguments);
};

var real__genslt = asm["_genslt"]; asm["_genslt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genslt.apply(null, arguments);
};

var real__combinepath = asm["_combinepath"]; asm["_combinepath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__combinepath.apply(null, arguments);
};

var real__dummyinput_InitiateControllers = asm["_dummyinput_InitiateControllers"]; asm["_dummyinput_InitiateControllers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_InitiateControllers.apply(null, arguments);
};

var real__rdp_interrupt_event = asm["_rdp_interrupt_event"]; asm["_rdp_interrupt_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rdp_interrupt_event.apply(null, arguments);
};

var real__init_rdp = asm["_init_rdp"]; asm["_init_rdp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_rdp.apply(null, arguments);
};

var real__dummyaudio_InitiateAudio = asm["_dummyaudio_InitiateAudio"]; asm["_dummyaudio_InitiateAudio"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_InitiateAudio.apply(null, arguments);
};

var real__passe2 = asm["_passe2"]; asm["_passe2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__passe2.apply(null, arguments);
};

var real__genround_l_s = asm["_genround_l_s"]; asm["_genround_l_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genround_l_s.apply(null, arguments);
};

var real__SetStateCallback = asm["_SetStateCallback"]; asm["_SetStateCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__SetStateCallback.apply(null, arguments);
};

var real__dummyinput_RomClosed = asm["_dummyinput_RomClosed"]; asm["_dummyinput_RomClosed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_RomClosed.apply(null, arguments);
};

var real__zipOpenNewFileInZip64 = asm["_zipOpenNewFileInZip64"]; asm["_zipOpenNewFileInZip64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip64.apply(null, arguments);
};

var real__zipOpen64 = asm["_zipOpen64"]; asm["_zipOpen64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpen64.apply(null, arguments);
};

var real__genfloor_w_d = asm["_genfloor_w_d"]; asm["_genfloor_w_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genfloor_w_d.apply(null, arguments);
};

var real__get_time_using_C_localtime = asm["_get_time_using_C_localtime"]; asm["_get_time_using_C_localtime"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_time_using_C_localtime.apply(null, arguments);
};

var real__read_dps_regs = asm["_read_dps_regs"]; asm["_read_dps_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_dps_regs.apply(null, arguments);
};

var real__genround_l_d = asm["_genround_l_d"]; asm["_genround_l_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genround_l_d.apply(null, arguments);
};

var real__ScreenshotRomOpen = asm["_ScreenshotRomOpen"]; asm["_ScreenshotRomOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ScreenshotRomOpen.apply(null, arguments);
};

var real__genj = asm["_genj"]; asm["_genj"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genj.apply(null, arguments);
};

var real__JR_IDLE_819 = asm["_JR_IDLE_819"]; asm["_JR_IDLE_819"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__JR_IDLE_819.apply(null, arguments);
};

var real__read_rdramFBb = asm["_read_rdramFBb"]; asm["_read_rdramFBb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramFBb.apply(null, arguments);
};

var real__read_dpc_regs = asm["_read_dpc_regs"]; asm["_read_dpc_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_dpc_regs.apply(null, arguments);
};

var real__unzGoToFilePos = asm["_unzGoToFilePos"]; asm["_unzGoToFilePos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGoToFilePos.apply(null, arguments);
};

var real__mempak_write_command = asm["_mempak_write_command"]; asm["_mempak_write_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mempak_write_command.apply(null, arguments);
};

var real__r4300_execute = asm["_r4300_execute"]; asm["_r4300_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_execute.apply(null, arguments);
};

var real__eeprom_write_command = asm["_eeprom_write_command"]; asm["_eeprom_write_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eeprom_write_command.apply(null, arguments);
};

var real__vi_vertical_interrupt_event = asm["_vi_vertical_interrupt_event"]; asm["_vi_vertical_interrupt_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vi_vertical_interrupt_event.apply(null, arguments);
};

var real__connect_ri = asm["_connect_ri"]; asm["_connect_ri"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_ri.apply(null, arguments);
};

var real__dummyrsp_InitiateRSP = asm["_dummyrsp_InitiateRSP"]; asm["_dummyrsp_InitiateRSP"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyrsp_InitiateRSP.apply(null, arguments);
};

var real__dummyvideo_RomClosed = asm["_dummyvideo_RomClosed"]; asm["_dummyvideo_RomClosed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_RomClosed.apply(null, arguments);
};

var real__connect_rdp = asm["_connect_rdp"]; asm["_connect_rdp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_rdp.apply(null, arguments);
};

var real__dummyaudio_PluginGetVersion = asm["_dummyaudio_PluginGetVersion"]; asm["_dummyaudio_PluginGetVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_PluginGetVersion.apply(null, arguments);
};

var real__push_audio_samples_via_audio_plugin = asm["_push_audio_samples_via_audio_plugin"]; asm["_push_audio_samples_via_audio_plugin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__push_audio_samples_via_audio_plugin.apply(null, arguments);
};

var real__gendsubu = asm["_gendsubu"]; asm["_gendsubu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsubu.apply(null, arguments);
};

var real__main_get_screen_size = asm["_main_get_screen_size"]; asm["_main_get_screen_size"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_get_screen_size.apply(null, arguments);
};

var real__dummyvideo_FBRead = asm["_dummyvideo_FBRead"]; asm["_dummyvideo_FBRead"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_FBRead.apply(null, arguments);
};

var real__dma_read_flashram = asm["_dma_read_flashram"]; asm["_dma_read_flashram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dma_read_flashram.apply(null, arguments);
};

var real__DebugMemWrite64 = asm["_DebugMemWrite64"]; asm["_DebugMemWrite64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemWrite64.apply(null, arguments);
};

var real__open_sra_file = asm["_open_sra_file"]; asm["_open_sra_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_sra_file.apply(null, arguments);
};

var real__JALR_IDLE_820 = asm["_JALR_IDLE_820"]; asm["_JALR_IDLE_820"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__JALR_IDLE_820.apply(null, arguments);
};

var real__genbgez = asm["_genbgez"]; asm["_genbgez"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgez.apply(null, arguments);
};

var real__free_block = asm["_free_block"]; asm["_free_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free_block.apply(null, arguments);
};

var real__genbltzl_out = asm["_genbltzl_out"]; asm["_genbltzl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzl_out.apply(null, arguments);
};

var real__VidExt_Quit = asm["_VidExt_Quit"]; asm["_VidExt_Quit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_Quit.apply(null, arguments);
};

var real__invalidate_cached_code_hacktarux = asm["_invalidate_cached_code_hacktarux"]; asm["_invalidate_cached_code_hacktarux"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__invalidate_cached_code_hacktarux.apply(null, arguments);
};

var real__r4300_regs = asm["_r4300_regs"]; asm["_r4300_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_regs.apply(null, arguments);
};

var real__init_vi = asm["_init_vi"]; asm["_init_vi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_vi.apply(null, arguments);
};

var real__countrycodestring = asm["_countrycodestring"]; asm["_countrycodestring"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__countrycodestring.apply(null, arguments);
};

var real__do_SP_Task = asm["_do_SP_Task"]; asm["_do_SP_Task"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__do_SP_Task.apply(null, arguments);
};

var real__sdl_keysym2scancode = asm["_sdl_keysym2scancode"]; asm["_sdl_keysym2scancode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sdl_keysym2scancode.apply(null, arguments);
};

var real__JALR_IDLE = asm["_JALR_IDLE"]; asm["_JALR_IDLE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__JALR_IDLE.apply(null, arguments);
};

var real__init_rsp = asm["_init_rsp"]; asm["_init_rsp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_rsp.apply(null, arguments);
};

var real__genc_eq_s = asm["_genc_eq_s"]; asm["_genc_eq_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_eq_s.apply(null, arguments);
};

var real__gendiv = asm["_gendiv"]; asm["_gendiv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendiv.apply(null, arguments);
};

var real__Write_EndOfCentralDirectoryRecord = asm["_Write_EndOfCentralDirectoryRecord"]; asm["_Write_EndOfCentralDirectoryRecord"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Write_EndOfCentralDirectoryRecord.apply(null, arguments);
};

var real__r4300_last_addr = asm["_r4300_last_addr"]; asm["_r4300_last_addr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_last_addr.apply(null, arguments);
};

var real__dummyinput_ControllerCommand = asm["_dummyinput_ControllerCommand"]; asm["_dummyinput_ControllerCommand"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_ControllerCommand.apply(null, arguments);
};

var real__dummyinput_GetKeys = asm["_dummyinput_GetKeys"]; asm["_dummyinput_GetKeys"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_GetKeys.apply(null, arguments);
};

var real__call_zopen64 = asm["_call_zopen64"]; asm["_call_zopen64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__call_zopen64.apply(null, arguments);
};

var real__get_next_event_type = asm["_get_next_event_type"]; asm["_get_next_event_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_next_event_type.apply(null, arguments);
};

var real__genceil_l_s = asm["_genceil_l_s"]; asm["_genceil_l_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genceil_l_s.apply(null, arguments);
};

var real__init_block = asm["_init_block"]; asm["_init_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_block.apply(null, arguments);
};

var real__genmflo = asm["_genmflo"]; asm["_genmflo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmflo.apply(null, arguments);
};

var real__open_mpk_file = asm["_open_mpk_file"]; asm["_open_mpk_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_mpk_file.apply(null, arguments);
};

var real__md5_finish = asm["_md5_finish"]; asm["_md5_finish"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__md5_finish.apply(null, arguments);
};

var real__genabs_s = asm["_genabs_s"]; asm["_genabs_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genabs_s.apply(null, arguments);
};

var real__rvip_rumble = asm["_rvip_rumble"]; asm["_rvip_rumble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rvip_rumble.apply(null, arguments);
};

var real__gensrl = asm["_gensrl"]; asm["_gensrl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensrl.apply(null, arguments);
};

var real__close_mpk_file = asm["_close_mpk_file"]; asm["_close_mpk_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close_mpk_file.apply(null, arguments);
};

var real__genabs_d = asm["_genabs_d"]; asm["_genabs_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genabs_d.apply(null, arguments);
};

var real__ConfigGetParamInt = asm["_ConfigGetParamInt"]; asm["_ConfigGetParamInt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParamInt.apply(null, arguments);
};

var real__CoreAttachPlugin = asm["_CoreAttachPlugin"]; asm["_CoreAttachPlugin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreAttachPlugin.apply(null, arguments);
};

var real__gensra = asm["_gensra"]; asm["_gensra"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensra.apply(null, arguments);
};

var real__romdatabase_close = asm["_romdatabase_close"]; asm["_romdatabase_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__romdatabase_close.apply(null, arguments);
};

var real__genjr = asm["_genjr"]; asm["_genjr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genjr.apply(null, arguments);
};

var real__ConfigGetParameterHelp = asm["_ConfigGetParameterHelp"]; asm["_ConfigGetParameterHelp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParameterHelp.apply(null, arguments);
};

var real__genadd_s = asm["_genadd_s"]; asm["_genadd_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genadd_s.apply(null, arguments);
};

var real__gensub = asm["_gensub"]; asm["_gensub"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensub.apply(null, arguments);
};

var real__genblezl_out = asm["_genblezl_out"]; asm["_genblezl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblezl_out.apply(null, arguments);
};

var real__genand = asm["_genand"]; asm["_genand"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genand.apply(null, arguments);
};

var real__genaddiu = asm["_genaddiu"]; asm["_genaddiu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genaddiu.apply(null, arguments);
};

var real__genadd_d = asm["_genadd_d"]; asm["_genadd_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genadd_d.apply(null, arguments);
};

var real__n64_cic_nus_6105 = asm["_n64_cic_nus_6105"]; asm["_n64_cic_nus_6105"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__n64_cic_nus_6105.apply(null, arguments);
};

var real__ConfigSaveFile = asm["_ConfigSaveFile"]; asm["_ConfigSaveFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSaveFile.apply(null, arguments);
};

var real__gendaddiu = asm["_gendaddiu"]; asm["_gendaddiu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendaddiu.apply(null, arguments);
};

var real__map_region = asm["_map_region"]; asm["_map_region"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__map_region.apply(null, arguments);
};

var real__genc_ngl_d = asm["_genc_ngl_d"]; asm["_genc_ngl_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngl_d.apply(null, arguments);
};

var real__genbltzal_idle = asm["_genbltzal_idle"]; asm["_genbltzal_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzal_idle.apply(null, arguments);
};

var real__read_rdramFB = asm["_read_rdramFB"]; asm["_read_rdramFB"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramFB.apply(null, arguments);
};

var real__ConfigGetSharedDataFilepath = asm["_ConfigGetSharedDataFilepath"]; asm["_ConfigGetSharedDataFilepath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetSharedDataFilepath.apply(null, arguments);
};

var real__genc_ngl_s = asm["_genc_ngl_s"]; asm["_genc_ngl_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngl_s.apply(null, arguments);
};

var real__unztell = asm["_unztell"]; asm["_unztell"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unztell.apply(null, arguments);
};

var real__write_si_regs = asm["_write_si_regs"]; asm["_write_si_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_si_regs.apply(null, arguments);
};

var real__genmtc1 = asm["_genmtc1"]; asm["_genmtc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmtc1.apply(null, arguments);
};

var real__main_stop = asm["_main_stop"]; asm["_main_stop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_stop.apply(null, arguments);
};

var real__genbnel = asm["_genbnel"]; asm["_genbnel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbnel.apply(null, arguments);
};

var real__connect_vi = asm["_connect_vi"]; asm["_connect_vi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_vi.apply(null, arguments);
};

var real__main_set_fastforward = asm["_main_set_fastforward"]; asm["_main_set_fastforward"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_set_fastforward.apply(null, arguments);
};

var real__read_flashram_status = asm["_read_flashram_status"]; asm["_read_flashram_status"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_flashram_status.apply(null, arguments);
};

var real__rumblepak_rumble = asm["_rumblepak_rumble"]; asm["_rumblepak_rumble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rumblepak_rumble.apply(null, arguments);
};

var real__genbeql = asm["_genbeql"]; asm["_genbeql"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeql.apply(null, arguments);
};

var real__unzSetOffset = asm["_unzSetOffset"]; asm["_unzSetOffset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzSetOffset.apply(null, arguments);
};

var real__DebugSetCallbacks = asm["_DebugSetCallbacks"]; asm["_DebugSetCallbacks"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugSetCallbacks.apply(null, arguments);
};

var real__dummyaudio_RomClosed = asm["_dummyaudio_RomClosed"]; asm["_dummyaudio_RomClosed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_RomClosed.apply(null, arguments);
};

var real__read_cart_rom = asm["_read_cart_rom"]; asm["_read_cart_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_cart_rom.apply(null, arguments);
};

var real__zipCloseFileInZipRaw = asm["_zipCloseFileInZipRaw"]; asm["_zipCloseFileInZipRaw"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipCloseFileInZipRaw.apply(null, arguments);
};

var real__shuffle_fpr_data = asm["_shuffle_fpr_data"]; asm["_shuffle_fpr_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__shuffle_fpr_data.apply(null, arguments);
};

var real__reset_soft = asm["_reset_soft"]; asm["_reset_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__reset_soft.apply(null, arguments);
};

var real__genbgtz_out = asm["_genbgtz_out"]; asm["_genbgtz_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtz_out.apply(null, arguments);
};

var real__ConfigRevertChanges = asm["_ConfigRevertChanges"]; asm["_ConfigRevertChanges"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigRevertChanges.apply(null, arguments);
};

var real__to_big_endian_buffer = asm["_to_big_endian_buffer"]; asm["_to_big_endian_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__to_big_endian_buffer.apply(null, arguments);
};

var real__mpk_file_ptr = asm["_mpk_file_ptr"]; asm["_mpk_file_ptr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mpk_file_ptr.apply(null, arguments);
};

var real__eeprom_status_command = asm["_eeprom_status_command"]; asm["_eeprom_status_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eeprom_status_command.apply(null, arguments);
};

var real__gensqrt_d = asm["_gensqrt_d"]; asm["_gensqrt_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensqrt_d.apply(null, arguments);
};

var real__genbeq_idle = asm["_genbeq_idle"]; asm["_genbeq_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeq_idle.apply(null, arguments);
};

var real__tlb_map = asm["_tlb_map"]; asm["_tlb_map"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__tlb_map.apply(null, arguments);
};

var real__gensqrt_s = asm["_gensqrt_s"]; asm["_gensqrt_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensqrt_s.apply(null, arguments);
};

var real__dummyvideo_UpdateScreen = asm["_dummyvideo_UpdateScreen"]; asm["_dummyvideo_UpdateScreen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_UpdateScreen.apply(null, arguments);
};

var real__savestates_load_set_pc = asm["_savestates_load_set_pc"]; asm["_savestates_load_set_pc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_load_set_pc.apply(null, arguments);
};

var real__main_set_core_defaults = asm["_main_set_core_defaults"]; asm["_main_set_core_defaults"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_set_core_defaults.apply(null, arguments);
};

var real__format_flashram = asm["_format_flashram"]; asm["_format_flashram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__format_flashram.apply(null, arguments);
};

var real__virtual_to_physical_address = asm["_virtual_to_physical_address"]; asm["_virtual_to_physical_address"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__virtual_to_physical_address.apply(null, arguments);
};

var real__VidExt_GL_GetAttribute = asm["_VidExt_GL_GetAttribute"]; asm["_VidExt_GL_GetAttribute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_GL_GetAttribute.apply(null, arguments);
};

var real__genldr = asm["_genldr"]; asm["_genldr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genldr.apply(null, arguments);
};

var real__genfin_block = asm["_genfin_block"]; asm["_genfin_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genfin_block.apply(null, arguments);
};

var real__savestates_save = asm["_savestates_save"]; asm["_savestates_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_save.apply(null, arguments);
};

var real__swap_buffer = asm["_swap_buffer"]; asm["_swap_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__swap_buffer.apply(null, arguments);
};

var real__init_r4300 = asm["_init_r4300"]; asm["_init_r4300"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_r4300.apply(null, arguments);
};

var real__genbc1fl_idle = asm["_genbc1fl_idle"]; asm["_genbc1fl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1fl_idle.apply(null, arguments);
};

var real__ConfigDeleteSection = asm["_ConfigDeleteSection"]; asm["_ConfigDeleteSection"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigDeleteSection.apply(null, arguments);
};

var real__read_rsp_regs = asm["_read_rsp_regs"]; asm["_read_rsp_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rsp_regs.apply(null, arguments);
};

var real__OverrideVideoFunctions = asm["_OverrideVideoFunctions"]; asm["_OverrideVideoFunctions"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__OverrideVideoFunctions.apply(null, arguments);
};

var real__unzCloseCurrentFile = asm["_unzCloseCurrentFile"]; asm["_unzCloseCurrentFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzCloseCurrentFile.apply(null, arguments);
};

var real__dummyvideo_ChangeWindow = asm["_dummyvideo_ChangeWindow"]; asm["_dummyvideo_ChangeWindow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ChangeWindow.apply(null, arguments);
};

var real__genbgtz_idle = asm["_genbgtz_idle"]; asm["_genbgtz_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtz_idle.apply(null, arguments);
};

var real__init_ri = asm["_init_ri"]; asm["_init_ri"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_ri.apply(null, arguments);
};

var real__gendivu = asm["_gendivu"]; asm["_gendivu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendivu.apply(null, arguments);
};

var real__genldl = asm["_genldl"]; asm["_genldl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genldl.apply(null, arguments);
};

var real__DebugMemWrite8 = asm["_DebugMemWrite8"]; asm["_DebugMemWrite8"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemWrite8.apply(null, arguments);
};

var real__genj_idle = asm["_genj_idle"]; asm["_genj_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genj_idle.apply(null, arguments);
};

var real__genslti = asm["_genslti"]; asm["_genslti"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genslti.apply(null, arguments);
};

var real__CoreDoCommand = asm["_CoreDoCommand"]; asm["_CoreDoCommand"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreDoCommand.apply(null, arguments);
};

var real__DebugMemGetMemInfo = asm["_DebugMemGetMemInfo"]; asm["_DebugMemGetMemInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemGetMemInfo.apply(null, arguments);
};

var real__ConfigInit = asm["_ConfigInit"]; asm["_ConfigInit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigInit.apply(null, arguments);
};

var real__zipClose = asm["_zipClose"]; asm["_zipClose"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipClose.apply(null, arguments);
};

var real__genbc1t_idle = asm["_genbc1t_idle"]; asm["_genbc1t_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1t_idle.apply(null, arguments);
};

var real__gencfc1 = asm["_gencfc1"]; asm["_gencfc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencfc1.apply(null, arguments);
};

var real__DebugMemRead64 = asm["_DebugMemRead64"]; asm["_DebugMemRead64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemRead64.apply(null, arguments);
};

var real__JR_IDLE = asm["_JR_IDLE"]; asm["_JR_IDLE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__JR_IDLE.apply(null, arguments);
};

var real__main_volume_get_muted = asm["_main_volume_get_muted"]; asm["_main_volume_get_muted"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_get_muted.apply(null, arguments);
};

var real__DebugMemWrite32 = asm["_DebugMemWrite32"]; asm["_DebugMemWrite32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemWrite32.apply(null, arguments);
};

var real__read_ri_regs = asm["_read_ri_regs"]; asm["_read_ri_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_ri_regs.apply(null, arguments);
};

var real__mempak_save = asm["_mempak_save"]; asm["_mempak_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mempak_save.apply(null, arguments);
};

var real__gensltu = asm["_gensltu"]; asm["_gensltu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensltu.apply(null, arguments);
};

var real__pi_end_of_dma_event = asm["_pi_end_of_dma_event"]; asm["_pi_end_of_dma_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pi_end_of_dma_event.apply(null, arguments);
};

var real__queue_work = asm["_queue_work"]; asm["_queue_work"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__queue_work.apply(null, arguments);
};

var real__CoreOverrideVidExt = asm["_CoreOverrideVidExt"]; asm["_CoreOverrideVidExt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreOverrideVidExt.apply(null, arguments);
};

var real__dummyrsp_RomClosed = asm["_dummyrsp_RomClosed"]; asm["_dummyrsp_RomClosed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyrsp_RomClosed.apply(null, arguments);
};

var real__main_volume_set_level = asm["_main_volume_set_level"]; asm["_main_volume_set_level"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_set_level.apply(null, arguments);
};

var real__genaddi = asm["_genaddi"]; asm["_genaddi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genaddi.apply(null, arguments);
};

var real__genaddu = asm["_genaddu"]; asm["_genaddu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genaddu.apply(null, arguments);
};

var real__read_rdram_dram = asm["_read_rdram_dram"]; asm["_read_rdram_dram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdram_dram.apply(null, arguments);
};

var real__zipOpen3 = asm["_zipOpen3"]; asm["_zipOpen3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpen3.apply(null, arguments);
};

var real__af_rtc_status_command = asm["_af_rtc_status_command"]; asm["_af_rtc_status_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__af_rtc_status_command.apply(null, arguments);
};

var real__gen_interupt = asm["_gen_interupt"]; asm["_gen_interupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gen_interupt.apply(null, arguments);
};

var real__read_rdram = asm["_read_rdram"]; asm["_read_rdram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdram.apply(null, arguments);
};

var real__connect_rsp = asm["_connect_rsp"]; asm["_connect_rsp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_rsp.apply(null, arguments);
};

var real__savestates_get_slot = asm["_savestates_get_slot"]; asm["_savestates_get_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_get_slot.apply(null, arguments);
};

var real__osal_dynlib_getproc = asm["_osal_dynlib_getproc"]; asm["_osal_dynlib_getproc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_dynlib_getproc.apply(null, arguments);
};

var real__cheat_add_new = asm["_cheat_add_new"]; asm["_cheat_add_new"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_add_new.apply(null, arguments);
};

var real__savestates_set_autoinc_slot = asm["_savestates_set_autoinc_slot"]; asm["_savestates_set_autoinc_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_set_autoinc_slot.apply(null, arguments);
};

var real__push_audio_samples = asm["_push_audio_samples"]; asm["_push_audio_samples"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__push_audio_samples.apply(null, arguments);
};

var real__gentlbwr = asm["_gentlbwr"]; asm["_gentlbwr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentlbwr.apply(null, arguments);
};

var real__genbltzall = asm["_genbltzall"]; asm["_genbltzall"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzall.apply(null, arguments);
};

var real__main_volume_up = asm["_main_volume_up"]; asm["_main_volume_up"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_up.apply(null, arguments);
};

var real__gentlbwi = asm["_gentlbwi"]; asm["_gentlbwi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentlbwi.apply(null, arguments);
};

var real__ConfigShutdown = asm["_ConfigShutdown"]; asm["_ConfigShutdown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigShutdown.apply(null, arguments);
};

var real__DebugMemRead16 = asm["_DebugMemRead16"]; asm["_DebugMemRead16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemRead16.apply(null, arguments);
};

var real__write_pif_ram = asm["_write_pif_ram"]; asm["_write_pif_ram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_pif_ram.apply(null, arguments);
};

var real__reset_hard = asm["_reset_hard"]; asm["_reset_hard"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__reset_hard.apply(null, arguments);
};

var real__genbgezl = asm["_genbgezl"]; asm["_genbgezl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezl.apply(null, arguments);
};

var real__cheat_uninit = asm["_cheat_uninit"]; asm["_cheat_uninit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_uninit.apply(null, arguments);
};

var real__jump_to_func = asm["_jump_to_func"]; asm["_jump_to_func"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jump_to_func.apply(null, arguments);
};

var real__fast_mem_access = asm["_fast_mem_access"]; asm["_fast_mem_access"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fast_mem_access.apply(null, arguments);
};

var real__raise_maskable_interrupt = asm["_raise_maskable_interrupt"]; asm["_raise_maskable_interrupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__raise_maskable_interrupt.apply(null, arguments);
};

var real__gensdr = asm["_gensdr"]; asm["_gensdr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensdr.apply(null, arguments);
};

var real__ConfigSetDefaultInt = asm["_ConfigSetDefaultInt"]; asm["_ConfigSetDefaultInt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetDefaultInt.apply(null, arguments);
};

var real__si_end_of_dma_event = asm["_si_end_of_dma_event"]; asm["_si_end_of_dma_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__si_end_of_dma_event.apply(null, arguments);
};

var real__recompile_opcode = asm["_recompile_opcode"]; asm["_recompile_opcode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__recompile_opcode.apply(null, arguments);
};

var real__genc_ngt_d = asm["_genc_ngt_d"]; asm["_genc_ngt_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngt_d.apply(null, arguments);
};

var real__close_sra_file = asm["_close_sra_file"]; asm["_close_sra_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close_sra_file.apply(null, arguments);
};

var real__md5_init = asm["_md5_init"]; asm["_md5_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__md5_init.apply(null, arguments);
};

var real__genbeq = asm["_genbeq"]; asm["_genbeq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeq.apply(null, arguments);
};

var real__dyna_jump = asm["_dyna_jump"]; asm["_dyna_jump"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dyna_jump.apply(null, arguments);
};

var real__genmtlo = asm["_genmtlo"]; asm["_genmtlo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmtlo.apply(null, arguments);
};

var real__realloc_exec = asm["_realloc_exec"]; asm["_realloc_exec"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc_exec.apply(null, arguments);
};

var real__ini_parse_line = asm["_ini_parse_line"]; asm["_ini_parse_line"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ini_parse_line.apply(null, arguments);
};

var real__unzOpen2 = asm["_unzOpen2"]; asm["_unzOpen2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpen2.apply(null, arguments);
};

var real__close_rom = asm["_close_rom"]; asm["_close_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close_rom.apply(null, arguments);
};

var real__genround_w_s = asm["_genround_w_s"]; asm["_genround_w_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genround_w_s.apply(null, arguments);
};

var real__dummyvideo_ReadScreen2 = asm["_dummyvideo_ReadScreen2"]; asm["_dummyvideo_ReadScreen2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ReadScreen2.apply(null, arguments);
};

var real__plugin_start = asm["_plugin_start"]; asm["_plugin_start"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__plugin_start.apply(null, arguments);
};

var real__genc_un_d = asm["_genc_un_d"]; asm["_genc_un_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_un_d.apply(null, arguments);
};

var real__fla_file_ptr = asm["_fla_file_ptr"]; asm["_fla_file_ptr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fla_file_ptr.apply(null, arguments);
};

var real__genround_w_d = asm["_genround_w_d"]; asm["_genround_w_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genround_w_d.apply(null, arguments);
};

var real__cheat_set_enabled = asm["_cheat_set_enabled"]; asm["_cheat_set_enabled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_set_enabled.apply(null, arguments);
};

var real__dummyinput_SDL_KeyUp = asm["_dummyinput_SDL_KeyUp"]; asm["_dummyinput_SDL_KeyUp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_SDL_KeyUp.apply(null, arguments);
};

var real__VidExt_ResizeWindow = asm["_VidExt_ResizeWindow"]; asm["_VidExt_ResizeWindow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_ResizeWindow.apply(null, arguments);
};

var real__DebugStep = asm["_DebugStep"]; asm["_DebugStep"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugStep.apply(null, arguments);
};

var real__read_mi_regs = asm["_read_mi_regs"]; asm["_read_mi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_mi_regs.apply(null, arguments);
};

var real__osal_mkdirp = asm["_osal_mkdirp"]; asm["_osal_mkdirp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_mkdirp.apply(null, arguments);
};

var real__gensltiu = asm["_gensltiu"]; asm["_gensltiu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensltiu.apply(null, arguments);
};

var real__gendsll32 = asm["_gendsll32"]; asm["_gendsll32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsll32.apply(null, arguments);
};

var real__main_advance_one = asm["_main_advance_one"]; asm["_main_advance_one"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_advance_one.apply(null, arguments);
};

var real__read_pi_regs = asm["_read_pi_regs"]; asm["_read_pi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_pi_regs.apply(null, arguments);
};

var real__gendsrlv = asm["_gendsrlv"]; asm["_gendsrlv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsrlv.apply(null, arguments);
};

var real__CoreAddCheat = asm["_CoreAddCheat"]; asm["_CoreAddCheat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreAddCheat.apply(null, arguments);
};

var real__gendiv_s = asm["_gendiv_s"]; asm["_gendiv_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendiv_s.apply(null, arguments);
};

var real__main_state_save = asm["_main_state_save"]; asm["_main_state_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_state_save.apply(null, arguments);
};

var real__gendiv_d = asm["_gendiv_d"]; asm["_gendiv_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendiv_d.apply(null, arguments);
};

var real__ConfigSetParameter = asm["_ConfigSetParameter"]; asm["_ConfigSetParameter"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetParameter.apply(null, arguments);
};

var real__main_state_set_slot = asm["_main_state_set_slot"]; asm["_main_state_set_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_state_set_slot.apply(null, arguments);
};

var real__DebugMessage = asm["_DebugMessage"]; asm["_DebugMessage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMessage.apply(null, arguments);
};

var real__gencache = asm["_gencache"]; asm["_gencache"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencache.apply(null, arguments);
};

var real__genbc1fl_out = asm["_genbc1fl_out"]; asm["_genbc1fl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1fl_out.apply(null, arguments);
};

var real__genbgtzl_out = asm["_genbgtzl_out"]; asm["_genbgtzl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtzl_out.apply(null, arguments);
};

var real__genbne_idle = asm["_genbne_idle"]; asm["_genbne_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbne_idle.apply(null, arguments);
};

var real__read_controller = asm["_read_controller"]; asm["_read_controller"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_controller.apply(null, arguments);
};

var real__main_core_state_query = asm["_main_core_state_query"]; asm["_main_core_state_query"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_core_state_query.apply(null, arguments);
};

var real__gensrav = asm["_gensrav"]; asm["_gensrav"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensrav.apply(null, arguments);
};

var real__dummyaudio_AiDacrateChanged = asm["_dummyaudio_AiDacrateChanged"]; asm["_dummyaudio_AiDacrateChanged"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_AiDacrateChanged.apply(null, arguments);
};

var real__unzGetLocalExtrafield = asm["_unzGetLocalExtrafield"]; asm["_unzGetLocalExtrafield"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetLocalExtrafield.apply(null, arguments);
};

var real__r4300_cp1_regs_double = asm["_r4300_cp1_regs_double"]; asm["_r4300_cp1_regs_double"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp1_regs_double.apply(null, arguments);
};

var real__genbgezall_idle = asm["_genbgezall_idle"]; asm["_genbgezall_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezall_idle.apply(null, arguments);
};

var real__unzStringFileNameCompare = asm["_unzStringFileNameCompare"]; asm["_unzStringFileNameCompare"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzStringFileNameCompare.apply(null, arguments);
};

var real__write_mi_regs = asm["_write_mi_regs"]; asm["_write_mi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_mi_regs.apply(null, arguments);
};

var real__unzGetCurrentFileInfo64 = asm["_unzGetCurrentFileInfo64"]; asm["_unzGetCurrentFileInfo64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetCurrentFileInfo64.apply(null, arguments);
};

var real__write_rsp_regs = asm["_write_rsp_regs"]; asm["_write_rsp_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rsp_regs.apply(null, arguments);
};

var real__genadd = asm["_genadd"]; asm["_genadd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genadd.apply(null, arguments);
};

var real__genc_f_s = asm["_genc_f_s"]; asm["_genc_f_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_f_s.apply(null, arguments);
};

var real__gencvt_l_d = asm["_gencvt_l_d"]; asm["_gencvt_l_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_l_d.apply(null, arguments);
};

var real__genc_f_d = asm["_genc_f_d"]; asm["_genc_f_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_f_d.apply(null, arguments);
};

var real__ConfigSetParameterHelp = asm["_ConfigSetParameterHelp"]; asm["_ConfigSetParameterHelp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetParameterHelp.apply(null, arguments);
};

var real__VidExt_GL_SwapBuffers = asm["_VidExt_GL_SwapBuffers"]; asm["_VidExt_GL_SwapBuffers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_GL_SwapBuffers.apply(null, arguments);
};

var real__gencvt_l_s = asm["_gencvt_l_s"]; asm["_gencvt_l_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_l_s.apply(null, arguments);
};

var real__format_mempak = asm["_format_mempak"]; asm["_format_mempak"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__format_mempak.apply(null, arguments);
};

var real__dummyaudio_VolumeUp = asm["_dummyaudio_VolumeUp"]; asm["_dummyaudio_VolumeUp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeUp.apply(null, arguments);
};

var real__genfloor_w_s = asm["_genfloor_w_s"]; asm["_genfloor_w_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genfloor_w_s.apply(null, arguments);
};

var real__plugin_connect = asm["_plugin_connect"]; asm["_plugin_connect"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__plugin_connect.apply(null, arguments);
};

var real__genblezl_idle = asm["_genblezl_idle"]; asm["_genblezl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblezl_idle.apply(null, arguments);
};

var real__unzGoToNextFile = asm["_unzGoToNextFile"]; asm["_unzGoToNextFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGoToNextFile.apply(null, arguments);
};

var real__free_blocks = asm["_free_blocks"]; asm["_free_blocks"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free_blocks.apply(null, arguments);
};

var real__ConfigSetDefaultBool = asm["_ConfigSetDefaultBool"]; asm["_ConfigSetDefaultBool"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetDefaultBool.apply(null, arguments);
};

var real__romdatabase_open = asm["_romdatabase_open"]; asm["_romdatabase_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__romdatabase_open.apply(null, arguments);
};

var real__VidExt_GL_GetProcAddress = asm["_VidExt_GL_GetProcAddress"]; asm["_VidExt_GL_GetProcAddress"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_GL_GetProcAddress.apply(null, arguments);
};

var real__read_rsp_mem = asm["_read_rsp_mem"]; asm["_read_rsp_mem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rsp_mem.apply(null, arguments);
};

var real__generic_jump_to = asm["_generic_jump_to"]; asm["_generic_jump_to"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__generic_jump_to.apply(null, arguments);
};

var real__dummyvideo_ViStatusChanged = asm["_dummyvideo_ViStatusChanged"]; asm["_dummyvideo_ViStatusChanged"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ViStatusChanged.apply(null, arguments);
};

var real__genc_nge_s = asm["_genc_nge_s"]; asm["_genc_nge_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_nge_s.apply(null, arguments);
};

var real__connect_cart_rom = asm["_connect_cart_rom"]; asm["_connect_cart_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_cart_rom.apply(null, arguments);
};

var real__write_rdramh = asm["_write_rdramh"]; asm["_write_rdramh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramh.apply(null, arguments);
};

var real__genc_nge_d = asm["_genc_nge_d"]; asm["_genc_nge_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_nge_d.apply(null, arguments);
};

var real__genbeql_idle = asm["_genbeql_idle"]; asm["_genbeql_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeql_idle.apply(null, arguments);
};

var real__write_rdramb = asm["_write_rdramb"]; asm["_write_rdramb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramb.apply(null, arguments);
};

var real__translate_event_queue = asm["_translate_event_queue"]; asm["_translate_event_queue"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__translate_event_queue.apply(null, arguments);
};

var real__genmthi = asm["_genmthi"]; asm["_genmthi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmthi.apply(null, arguments);
};

var real__CoreCompareCallback = asm["_CoreCompareCallback"]; asm["_CoreCompareCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreCompareCallback.apply(null, arguments);
};

var real__write_dps_regs = asm["_write_dps_regs"]; asm["_write_dps_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_dps_regs.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__dummyrsp_DoRspCycles = asm["_dummyrsp_DoRspCycles"]; asm["_dummyrsp_DoRspCycles"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyrsp_DoRspCycles.apply(null, arguments);
};

var real__genlwc1 = asm["_genlwc1"]; asm["_genlwc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlwc1.apply(null, arguments);
};

var real__dyna_stop = asm["_dyna_stop"]; asm["_dyna_stop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dyna_stop.apply(null, arguments);
};

var real__DebugMemRead8 = asm["_DebugMemRead8"]; asm["_DebugMemRead8"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemRead8.apply(null, arguments);
};

var real__genmfc1 = asm["_genmfc1"]; asm["_genmfc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmfc1.apply(null, arguments);
};

var real__genmfc0 = asm["_genmfc0"]; asm["_genmfc0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmfc0.apply(null, arguments);
};

var real__set_audio_format = asm["_set_audio_format"]; asm["_set_audio_format"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__set_audio_format.apply(null, arguments);
};

var real__genctc1 = asm["_genctc1"]; asm["_genctc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genctc1.apply(null, arguments);
};

var real__connect_ai = asm["_connect_ai"]; asm["_connect_ai"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_ai.apply(null, arguments);
};

var real__genbc1f_idle = asm["_genbc1f_idle"]; asm["_genbc1f_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1f_idle.apply(null, arguments);
};

var real__zipWriteInFileInZip = asm["_zipWriteInFileInZip"]; asm["_zipWriteInFileInZip"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipWriteInFileInZip.apply(null, arguments);
};

var real__unzGoToFirstFile = asm["_unzGoToFirstFile"]; asm["_unzGoToFirstFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGoToFirstFile.apply(null, arguments);
};

var real__genld = asm["_genld"]; asm["_genld"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genld.apply(null, arguments);
};

var real__ConfigSetDefaultString = asm["_ConfigSetDefaultString"]; asm["_ConfigSetDefaultString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetDefaultString.apply(null, arguments);
};

var real__genc_ult_d = asm["_genc_ult_d"]; asm["_genc_ult_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ult_d.apply(null, arguments);
};

var real__init_cic_using_ipl3 = asm["_init_cic_using_ipl3"]; asm["_init_cic_using_ipl3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_cic_using_ipl3.apply(null, arguments);
};

var real__write_rdramd = asm["_write_rdramd"]; asm["_write_rdramd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramd.apply(null, arguments);
};

var real__genjalr = asm["_genjalr"]; asm["_genjalr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genjalr.apply(null, arguments);
};

var real__main_take_next_screenshot = asm["_main_take_next_screenshot"]; asm["_main_take_next_screenshot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_take_next_screenshot.apply(null, arguments);
};

var real__genlh = asm["_genlh"]; asm["_genlh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlh.apply(null, arguments);
};

var real__plugin_check = asm["_plugin_check"]; asm["_plugin_check"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__plugin_check.apply(null, arguments);
};

var real__dummyinput_SDL_KeyDown = asm["_dummyinput_SDL_KeyDown"]; asm["_dummyinput_SDL_KeyDown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_SDL_KeyDown.apply(null, arguments);
};

var real__genc_ult_s = asm["_genc_ult_s"]; asm["_genc_ult_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ult_s.apply(null, arguments);
};

var real__zipRemoveExtraInfoBlock = asm["_zipRemoveExtraInfoBlock"]; asm["_zipRemoveExtraInfoBlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipRemoveExtraInfoBlock.apply(null, arguments);
};

var real__VidExt_GL_SetAttribute = asm["_VidExt_GL_SetAttribute"]; asm["_VidExt_GL_SetAttribute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_GL_SetAttribute.apply(null, arguments);
};

var real__genteq = asm["_genteq"]; asm["_genteq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genteq.apply(null, arguments);
};

var real__game_controller_is_connected = asm["_game_controller_is_connected"]; asm["_game_controller_is_connected"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__game_controller_is_connected.apply(null, arguments);
};

var real__r4300_next_interrupt = asm["_r4300_next_interrupt"]; asm["_r4300_next_interrupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_next_interrupt.apply(null, arguments);
};

var real__zipOpenNewFileInZip3_64 = asm["_zipOpenNewFileInZip3_64"]; asm["_zipOpenNewFileInZip3_64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip3_64.apply(null, arguments);
};

var real__genlui = asm["_genlui"]; asm["_genlui"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlui.apply(null, arguments);
};

var real__dummyvideo_RomOpen = asm["_dummyvideo_RomOpen"]; asm["_dummyvideo_RomOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_RomOpen.apply(null, arguments);
};

var real__ConfigOpenSection = asm["_ConfigOpenSection"]; asm["_ConfigOpenSection"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigOpenSection.apply(null, arguments);
};

var real__genbgez_idle = asm["_genbgez_idle"]; asm["_genbgez_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgez_idle.apply(null, arguments);
};

var real__gendsll = asm["_gendsll"]; asm["_gendsll"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsll.apply(null, arguments);
};

var real__VidExt_Init = asm["_VidExt_Init"]; asm["_VidExt_Init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_Init.apply(null, arguments);
};

var real__main_read_screen = asm["_main_read_screen"]; asm["_main_read_screen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_read_screen.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__dummyvideo_FBGetFrameBufferInfo = asm["_dummyvideo_FBGetFrameBufferInfo"]; asm["_dummyvideo_FBGetFrameBufferInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_FBGetFrameBufferInfo.apply(null, arguments);
};

var real__exception_general = asm["_exception_general"]; asm["_exception_general"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__exception_general.apply(null, arguments);
};

var real__savestates_select_slot = asm["_savestates_select_slot"]; asm["_savestates_select_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_select_slot.apply(null, arguments);
};

var real__genblez_out = asm["_genblez_out"]; asm["_genblez_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblez_out.apply(null, arguments);
};

var real__write_rdramFB = asm["_write_rdramFB"]; asm["_write_rdramFB"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramFB.apply(null, arguments);
};

var real__r4300_reset_soft = asm["_r4300_reset_soft"]; asm["_r4300_reset_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_reset_soft.apply(null, arguments);
};

var real__write_pi_regs = asm["_write_pi_regs"]; asm["_write_pi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_pi_regs.apply(null, arguments);
};

var real__ConfigSaveSection = asm["_ConfigSaveSection"]; asm["_ConfigSaveSection"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSaveSection.apply(null, arguments);
};

var real__event_sdl_keydown = asm["_event_sdl_keydown"]; asm["_event_sdl_keydown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_sdl_keydown.apply(null, arguments);
};

var real__Write_Zip64EndOfCentralDirectoryRecord = asm["_Write_Zip64EndOfCentralDirectoryRecord"]; asm["_Write_Zip64EndOfCentralDirectoryRecord"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Write_Zip64EndOfCentralDirectoryRecord.apply(null, arguments);
};

var real__invalidate_r4300_cached_code = asm["_invalidate_r4300_cached_code"]; asm["_invalidate_r4300_cached_code"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__invalidate_r4300_cached_code.apply(null, arguments);
};

var real__genbltzal = asm["_genbltzal"]; asm["_genbltzal"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzal.apply(null, arguments);
};

var real__cheat_add_hacks = asm["_cheat_add_hacks"]; asm["_cheat_add_hacks"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_add_hacks.apply(null, arguments);
};

var real__genbnel_idle = asm["_genbnel_idle"]; asm["_genbnel_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbnel_idle.apply(null, arguments);
};

var real__genbltzl_idle = asm["_genbltzl_idle"]; asm["_genbltzl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzl_idle.apply(null, arguments);
};

var real__genbc1t_out = asm["_genbc1t_out"]; asm["_genbc1t_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1t_out.apply(null, arguments);
};

var real__open_rom = asm["_open_rom"]; asm["_open_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_rom.apply(null, arguments);
};

var real__get_savestatepath = asm["_get_savestatepath"]; asm["_get_savestatepath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_savestatepath.apply(null, arguments);
};

var real__init_ai = asm["_init_ai"]; asm["_init_ai"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_ai.apply(null, arguments);
};

var real__gencvt_w_d = asm["_gencvt_w_d"]; asm["_gencvt_w_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_w_d.apply(null, arguments);
};

var real__read_rdram_fb = asm["_read_rdram_fb"]; asm["_read_rdram_fb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdram_fb.apply(null, arguments);
};

var real__open_fla_file = asm["_open_fla_file"]; asm["_open_fla_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_fla_file.apply(null, arguments);
};

var real__workqueue_shutdown = asm["_workqueue_shutdown"]; asm["_workqueue_shutdown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__workqueue_shutdown.apply(null, arguments);
};

var real__read_ai_regs = asm["_read_ai_regs"]; asm["_read_ai_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_ai_regs.apply(null, arguments);
};

var real__gencvt_w_s = asm["_gencvt_w_s"]; asm["_gencvt_w_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_w_s.apply(null, arguments);
};

var real__get_savesrampath = asm["_get_savesrampath"]; asm["_get_savesrampath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_savesrampath.apply(null, arguments);
};

var real__gencvt_d_w = asm["_gencvt_d_w"]; asm["_gencvt_d_w"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_d_w.apply(null, arguments);
};

var real__event_initialize = asm["_event_initialize"]; asm["_event_initialize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_initialize.apply(null, arguments);
};

var real__gencvt_d_s = asm["_gencvt_d_s"]; asm["_gencvt_d_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_d_s.apply(null, arguments);
};

var real__genmtc0 = asm["_genmtc0"]; asm["_genmtc0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmtc0.apply(null, arguments);
};

var real__dummyvideo_ResizeVideoOutput = asm["_dummyvideo_ResizeVideoOutput"]; asm["_dummyvideo_ResizeVideoOutput"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ResizeVideoOutput.apply(null, arguments);
};

var real__unzGetOffset = asm["_unzGetOffset"]; asm["_unzGetOffset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetOffset.apply(null, arguments);
};

var real__genceil_l_d = asm["_genceil_l_d"]; asm["_genceil_l_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genceil_l_d.apply(null, arguments);
};

var real__genbeq_out = asm["_genbeq_out"]; asm["_genbeq_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeq_out.apply(null, arguments);
};

var real__VidExt_ListFullscreenModes = asm["_VidExt_ListFullscreenModes"]; asm["_VidExt_ListFullscreenModes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_ListFullscreenModes.apply(null, arguments);
};

var real__open_eep_file = asm["_open_eep_file"]; asm["_open_eep_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open_eep_file.apply(null, arguments);
};

var real__genlbu = asm["_genlbu"]; asm["_genlbu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlbu.apply(null, arguments);
};

var real__write_cart_rom = asm["_write_cart_rom"]; asm["_write_cart_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_cart_rom.apply(null, arguments);
};

var real__event_gameshark_active = asm["_event_gameshark_active"]; asm["_event_gameshark_active"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_gameshark_active.apply(null, arguments);
};

var real__gencvt_d_l = asm["_gencvt_d_l"]; asm["_gencvt_d_l"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_d_l.apply(null, arguments);
};

var real__unzOpenCurrentFilePassword = asm["_unzOpenCurrentFilePassword"]; asm["_unzOpenCurrentFilePassword"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpenCurrentFilePassword.apply(null, arguments);
};

var real__eeprom_read_command = asm["_eeprom_read_command"]; asm["_eeprom_read_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eeprom_read_command.apply(null, arguments);
};

var real__genc_lt_d = asm["_genc_lt_d"]; asm["_genc_lt_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_lt_d.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__read_from_file = asm["_read_from_file"]; asm["_read_from_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_from_file.apply(null, arguments);
};

var real__genbc1t = asm["_genbc1t"]; asm["_genbc1t"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1t.apply(null, arguments);
};

var real__genc_lt_s = asm["_genc_lt_s"]; asm["_genc_lt_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_lt_s.apply(null, arguments);
};

var real__unzOpenCurrentFile3 = asm["_unzOpenCurrentFile3"]; asm["_unzOpenCurrentFile3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpenCurrentFile3.apply(null, arguments);
};

var real__unzOpenCurrentFile2 = asm["_unzOpenCurrentFile2"]; asm["_unzOpenCurrentFile2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpenCurrentFile2.apply(null, arguments);
};

var real__rumblepak_read_command = asm["_rumblepak_read_command"]; asm["_rumblepak_read_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rumblepak_read_command.apply(null, arguments);
};

var real__r4300_cp0_regs = asm["_r4300_cp0_regs"]; asm["_r4300_cp0_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp0_regs.apply(null, arguments);
};

var real__genbltzl = asm["_genbltzl"]; asm["_genbltzl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzl.apply(null, arguments);
};

var real__save_mpk_file = asm["_save_mpk_file"]; asm["_save_mpk_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__save_mpk_file.apply(null, arguments);
};

var real__genbc1f = asm["_genbc1f"]; asm["_genbc1f"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1f.apply(null, arguments);
};

var real__TLB_refill_exception = asm["_TLB_refill_exception"]; asm["_TLB_refill_exception"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__TLB_refill_exception.apply(null, arguments);
};

var real__genceil_w_s = asm["_genceil_w_s"]; asm["_genceil_w_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genceil_w_s.apply(null, arguments);
};

var real__genc_sf_d = asm["_genc_sf_d"]; asm["_genc_sf_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_sf_d.apply(null, arguments);
};

var real__close_fla_file = asm["_close_fla_file"]; asm["_close_fla_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close_fla_file.apply(null, arguments);
};

var real__genbgtz = asm["_genbgtz"]; asm["_genbgtz"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtz.apply(null, arguments);
};

var real__gendsub = asm["_gendsub"]; asm["_gendsub"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsub.apply(null, arguments);
};

var real__genc_ngt_s = asm["_genc_ngt_s"]; asm["_genc_ngt_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngt_s.apply(null, arguments);
};

var real__new_vi = asm["_new_vi"]; asm["_new_vi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__new_vi.apply(null, arguments);
};

var real__genc_sf_s = asm["_genc_sf_s"]; asm["_genc_sf_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_sf_s.apply(null, arguments);
};

var real__ConfigGetParameter = asm["_ConfigGetParameter"]; asm["_ConfigGetParameter"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParameter.apply(null, arguments);
};

var real__add_interupt_event_count = asm["_add_interupt_event_count"]; asm["_add_interupt_event_count"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__add_interupt_event_count.apply(null, arguments);
};

var real__main_speedup = asm["_main_speedup"]; asm["_main_speedup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_speedup.apply(null, arguments);
};

var real__sdl_scancode2keysym = asm["_sdl_scancode2keysym"]; asm["_sdl_scancode2keysym"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sdl_scancode2keysym.apply(null, arguments);
};

var real__init_si = asm["_init_si"]; asm["_init_si"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_si.apply(null, arguments);
};

var real__dummyvideo_FBWrite = asm["_dummyvideo_FBWrite"]; asm["_dummyvideo_FBWrite"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_FBWrite.apply(null, arguments);
};

var real__gencvt_s_w = asm["_gencvt_s_w"]; asm["_gencvt_s_w"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_s_w.apply(null, arguments);
};

var real__gensdl = asm["_gensdl"]; asm["_gensdl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensdl.apply(null, arguments);
};

var real__genlb = asm["_genlb"]; asm["_genlb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlb.apply(null, arguments);
};

var real__genswl = asm["_genswl"]; asm["_genswl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genswl.apply(null, arguments);
};

var real__gencvt_s_d = asm["_gencvt_s_d"]; asm["_gencvt_s_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_s_d.apply(null, arguments);
};

var real__get_event = asm["_get_event"]; asm["_get_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_event.apply(null, arguments);
};

var real__genc_un_s = asm["_genc_un_s"]; asm["_genc_un_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_un_s.apply(null, arguments);
};

var real__r4300_cp1_fcr0 = asm["_r4300_cp1_fcr0"]; asm["_r4300_cp1_fcr0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp1_fcr0.apply(null, arguments);
};

var real__genll = asm["_genll"]; asm["_genll"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genll.apply(null, arguments);
};

var real__gencvt_s_l = asm["_gencvt_s_l"]; asm["_gencvt_s_l"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gencvt_s_l.apply(null, arguments);
};

var real__dummyrsp_PluginGetVersion = asm["_dummyrsp_PluginGetVersion"]; asm["_dummyrsp_PluginGetVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyrsp_PluginGetVersion.apply(null, arguments);
};

var real__genxor = asm["_genxor"]; asm["_genxor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genxor.apply(null, arguments);
};

var real__zipOpen2 = asm["_zipOpen2"]; asm["_zipOpen2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpen2.apply(null, arguments);
};

var real__genneg_s = asm["_genneg_s"]; asm["_genneg_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genneg_s.apply(null, arguments);
};

var real__dummyvideo_ViWidthChanged = asm["_dummyvideo_ViWidthChanged"]; asm["_dummyvideo_ViWidthChanged"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ViWidthChanged.apply(null, arguments);
};

var real__namefrompath = asm["_namefrompath"]; asm["_namefrompath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__namefrompath.apply(null, arguments);
};

var real__connect_si = asm["_connect_si"]; asm["_connect_si"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_si.apply(null, arguments);
};

var real__protect_framebuffers = asm["_protect_framebuffers"]; asm["_protect_framebuffers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__protect_framebuffers.apply(null, arguments);
};

var real__DebugBreakpointCommand = asm["_DebugBreakpointCommand"]; asm["_DebugBreakpointCommand"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugBreakpointCommand.apply(null, arguments);
};

var real__DebugSetCoreCompare = asm["_DebugSetCoreCompare"]; asm["_DebugSetCoreCompare"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugSetCoreCompare.apply(null, arguments);
};

var real__r4300_cp1_regs = asm["_r4300_cp1_regs"]; asm["_r4300_cp1_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp1_regs.apply(null, arguments);
};

var real__zipCloseFileInZip = asm["_zipCloseFileInZip"]; asm["_zipCloseFileInZip"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipCloseFileInZip.apply(null, arguments);
};

var real__unzGetFilePos = asm["_unzGetFilePos"]; asm["_unzGetFilePos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetFilePos.apply(null, arguments);
};

var real__VidExt_InFullscreenMode = asm["_VidExt_InFullscreenMode"]; asm["_VidExt_InFullscreenMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_InFullscreenMode.apply(null, arguments);
};

var real__get_r4300_emumode = asm["_get_r4300_emumode"]; asm["_get_r4300_emumode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__get_r4300_emumode.apply(null, arguments);
};

var real__dummyaudio_VolumeSetLevel = asm["_dummyaudio_VolumeSetLevel"]; asm["_dummyaudio_VolumeSetLevel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeSetLevel.apply(null, arguments);
};

var real__genlw = asm["_genlw"]; asm["_genlw"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlw.apply(null, arguments);
};

var real__read_vi_regs = asm["_read_vi_regs"]; asm["_read_vi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_vi_regs.apply(null, arguments);
};

var real__af_rtc_write_command = asm["_af_rtc_write_command"]; asm["_af_rtc_write_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__af_rtc_write_command.apply(null, arguments);
};

var real__r4300_cp1_regs_simple = asm["_r4300_cp1_regs_simple"]; asm["_r4300_cp1_regs_simple"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp1_regs_simple.apply(null, arguments);
};

var real__genlhu = asm["_genlhu"]; asm["_genlhu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlhu.apply(null, arguments);
};

var real__save_eep_file = asm["_save_eep_file"]; asm["_save_eep_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__save_eep_file.apply(null, arguments);
};

var real__set_fpr_pointers = asm["_set_fpr_pointers"]; asm["_set_fpr_pointers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__set_fpr_pointers.apply(null, arguments);
};

var real__main_volume_mute = asm["_main_volume_mute"]; asm["_main_volume_mute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_mute.apply(null, arguments);
};

var real__genblezl = asm["_genblezl"]; asm["_genblezl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblezl.apply(null, arguments);
};

var real__string_to_int = asm["_string_to_int"]; asm["_string_to_int"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__string_to_int.apply(null, arguments);
};

var real__dummyvideo_InitiateGFX = asm["_dummyvideo_InitiateGFX"]; asm["_dummyvideo_InitiateGFX"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_InitiateGFX.apply(null, arguments);
};

var real__genbgezall_out = asm["_genbgezall_out"]; asm["_genbgezall_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezall_out.apply(null, arguments);
};

var real__dummyaudio_AiLenChanged = asm["_dummyaudio_AiLenChanged"]; asm["_dummyaudio_AiLenChanged"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_AiLenChanged.apply(null, arguments);
};

var real__read_rdramh = asm["_read_rdramh"]; asm["_read_rdramh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramh.apply(null, arguments);
};

var real__formatstr = asm["_formatstr"]; asm["_formatstr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__formatstr.apply(null, arguments);
};

var real__genbltz = asm["_genbltz"]; asm["_genbltz"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltz.apply(null, arguments);
};

var real__read_rdramd = asm["_read_rdramd"]; asm["_read_rdramd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramd.apply(null, arguments);
};

var real__CoreCheatEnabled = asm["_CoreCheatEnabled"]; asm["_CoreCheatEnabled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreCheatEnabled.apply(null, arguments);
};

var real__connect_pi = asm["_connect_pi"]; asm["_connect_pi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_pi.apply(null, arguments);
};

var real__genc_ule_d = asm["_genc_ule_d"]; asm["_genc_ule_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ule_d.apply(null, arguments);
};

var real__read_rdramb = asm["_read_rdramb"]; asm["_read_rdramb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdramb.apply(null, arguments);
};

var real__main_check_inputs = asm["_main_check_inputs"]; asm["_main_check_inputs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_check_inputs.apply(null, arguments);
};

var real__close_eep_file = asm["_close_eep_file"]; asm["_close_eep_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close_eep_file.apply(null, arguments);
};

var real__ConfigGetUserCachePath = asm["_ConfigGetUserCachePath"]; asm["_ConfigGetUserCachePath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetUserCachePath.apply(null, arguments);
};

var real__fill_fopen_filefunc = asm["_fill_fopen_filefunc"]; asm["_fill_fopen_filefunc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fill_fopen_filefunc.apply(null, arguments);
};

var real__dummyaudio_VolumeMute = asm["_dummyaudio_VolumeMute"]; asm["_dummyaudio_VolumeMute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeMute.apply(null, arguments);
};

var real__CoreGetAPIVersions = asm["_CoreGetAPIVersions"]; asm["_CoreGetAPIVersions"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreGetAPIVersions.apply(null, arguments);
};

var real__gensw = asm["_gensw"]; asm["_gensw"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensw.apply(null, arguments);
};

var real__egcvip_get_input = asm["_egcvip_get_input"]; asm["_egcvip_get_input"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__egcvip_get_input.apply(null, arguments);
};

var real__md5_append = asm["_md5_append"]; asm["_md5_append"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__md5_append.apply(null, arguments);
};

var real__gensubu = asm["_gensubu"]; asm["_gensubu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensubu.apply(null, arguments);
};

var real__main_core_state_set = asm["_main_core_state_set"]; asm["_main_core_state_set"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_core_state_set.apply(null, arguments);
};

var real__event_sdl_keyup = asm["_event_sdl_keyup"]; asm["_event_sdl_keyup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_sdl_keyup.apply(null, arguments);
};

var real__write_ai_regs = asm["_write_ai_regs"]; asm["_write_ai_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_ai_regs.apply(null, arguments);
};

var real__gensh = asm["_gensh"]; asm["_gensh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensh.apply(null, arguments);
};

var real__set_audio_format_via_audio_plugin = asm["_set_audio_format_via_audio_plugin"]; asm["_set_audio_format_via_audio_plugin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__set_audio_format_via_audio_plugin.apply(null, arguments);
};

var real__unzOpenCurrentFile = asm["_unzOpenCurrentFile"]; asm["_unzOpenCurrentFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpenCurrentFile.apply(null, arguments);
};

var real__gensd = asm["_gensd"]; asm["_gensd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensd.apply(null, arguments);
};

var real__init_fb = asm["_init_fb"]; asm["_init_fb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_fb.apply(null, arguments);
};

var real__genbeql_out = asm["_genbeql_out"]; asm["_genbeql_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbeql_out.apply(null, arguments);
};

var real__main_toggle_pause = asm["_main_toggle_pause"]; asm["_main_toggle_pause"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_toggle_pause.apply(null, arguments);
};

var real__imagestring = asm["_imagestring"]; asm["_imagestring"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__imagestring.apply(null, arguments);
};

var real__gensc = asm["_gensc"]; asm["_gensc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensc.apply(null, arguments);
};

var real__write_flashram_command = asm["_write_flashram_command"]; asm["_write_flashram_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_flashram_command.apply(null, arguments);
};

var real__update_x86_rounding_mode = asm["_update_x86_rounding_mode"]; asm["_update_x86_rounding_mode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__update_x86_rounding_mode.apply(null, arguments);
};

var real__gendsrav = asm["_gendsrav"]; asm["_gendsrav"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsrav.apply(null, arguments);
};

var real__unzGetCurrentFileInfo = asm["_unzGetCurrentFileInfo"]; asm["_unzGetCurrentFileInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetCurrentFileInfo.apply(null, arguments);
};

var real__VidExt_ToggleFullScreen = asm["_VidExt_ToggleFullScreen"]; asm["_VidExt_ToggleFullScreen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_ToggleFullScreen.apply(null, arguments);
};

var real__unzGoToFilePos64 = asm["_unzGoToFilePos64"]; asm["_unzGoToFilePos64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGoToFilePos64.apply(null, arguments);
};

var real__gendmultu = asm["_gendmultu"]; asm["_gendmultu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendmultu.apply(null, arguments);
};

var real__zipOpenNewFileInZip4 = asm["_zipOpenNewFileInZip4"]; asm["_zipOpenNewFileInZip4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip4.apply(null, arguments);
};

var real__zipOpenNewFileInZip3 = asm["_zipOpenNewFileInZip3"]; asm["_zipOpenNewFileInZip3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip3.apply(null, arguments);
};

var real__init_pi = asm["_init_pi"]; asm["_init_pi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_pi.apply(null, arguments);
};

var real__unzOpen = asm["_unzOpen"]; asm["_unzOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpen.apply(null, arguments);
};

var real__r4300_pc = asm["_r4300_pc"]; asm["_r4300_pc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_pc.apply(null, arguments);
};

var real__genbltzal_out = asm["_genbltzal_out"]; asm["_genbltzal_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzal_out.apply(null, arguments);
};

var real__DebugBreakpointLookup = asm["_DebugBreakpointLookup"]; asm["_DebugBreakpointLookup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugBreakpointLookup.apply(null, arguments);
};

var real__recompile_block = asm["_recompile_block"]; asm["_recompile_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__recompile_block.apply(null, arguments);
};

var real__genbltzall_idle = asm["_genbltzall_idle"]; asm["_genbltzall_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzall_idle.apply(null, arguments);
};

var real__SetDebugCallback = asm["_SetDebugCallback"]; asm["_SetDebugCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__SetDebugCallback.apply(null, arguments);
};

var real__gentrunc_l_d = asm["_gentrunc_l_d"]; asm["_gentrunc_l_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentrunc_l_d.apply(null, arguments);
};

var real__dummyaudio_ProcessAList = asm["_dummyaudio_ProcessAList"]; asm["_dummyaudio_ProcessAList"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_ProcessAList.apply(null, arguments);
};

var real__DebugMemWrite16 = asm["_DebugMemWrite16"]; asm["_DebugMemWrite16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemWrite16.apply(null, arguments);
};

var real__gennotcompiled = asm["_gennotcompiled"]; asm["_gennotcompiled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gennotcompiled.apply(null, arguments);
};

var real__genor = asm["_genor"]; asm["_genor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genor.apply(null, arguments);
};

var real__main_speeddown = asm["_main_speeddown"]; asm["_main_speeddown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_speeddown.apply(null, arguments);
};

var real__write_vi_regs = asm["_write_vi_regs"]; asm["_write_vi_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_vi_regs.apply(null, arguments);
};

var real__gendsra = asm["_gendsra"]; asm["_gendsra"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsra.apply(null, arguments);
};

var real__gendsrl = asm["_gendsrl"]; asm["_gendsrl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsrl.apply(null, arguments);
};

var real__zipOpenNewFileInZip4_64 = asm["_zipOpenNewFileInZip4_64"]; asm["_zipOpenNewFileInZip4_64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip4_64.apply(null, arguments);
};

var real__gentrunc_l_s = asm["_gentrunc_l_s"]; asm["_gentrunc_l_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentrunc_l_s.apply(null, arguments);
};

var real__dummyaudio_VolumeGetString = asm["_dummyaudio_VolumeGetString"]; asm["_dummyaudio_VolumeGetString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeGetString.apply(null, arguments);
};

var real__event_set_gameshark = asm["_event_set_gameshark"]; asm["_event_set_gameshark"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_set_gameshark.apply(null, arguments);
};

var real__gennop = asm["_gennop"]; asm["_gennop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gennop.apply(null, arguments);
};

var real__format_eeprom = asm["_format_eeprom"]; asm["_format_eeprom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__format_eeprom.apply(null, arguments);
};

var real__init_flashram = asm["_init_flashram"]; asm["_init_flashram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_flashram.apply(null, arguments);
};

var real__dummyaudio_VolumeGetLevel = asm["_dummyaudio_VolumeGetLevel"]; asm["_dummyaudio_VolumeGetLevel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeGetLevel.apply(null, arguments);
};

var real__gendmtc1 = asm["_gendmtc1"]; asm["_gendmtc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendmtc1.apply(null, arguments);
};

var real__ConfigGetParameterType = asm["_ConfigGetParameterType"]; asm["_ConfigGetParameterType"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParameterType.apply(null, arguments);
};

var real__call_ztell64 = asm["_call_ztell64"]; asm["_call_ztell64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__call_ztell64.apply(null, arguments);
};

var real__savestates_deinit = asm["_savestates_deinit"]; asm["_savestates_deinit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_deinit.apply(null, arguments);
};

var real__genddivu = asm["_genddivu"]; asm["_genddivu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genddivu.apply(null, arguments);
};

var real__VidExt_SetCaption = asm["_VidExt_SetCaption"]; asm["_VidExt_SetCaption"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_SetCaption.apply(null, arguments);
};

var real__read_si_regs = asm["_read_si_regs"]; asm["_read_si_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_si_regs.apply(null, arguments);
};

var real__genc_ngle_d = asm["_genc_ngle_d"]; asm["_genc_ngle_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngle_d.apply(null, arguments);
};

var real__dummyaudio_RomOpen = asm["_dummyaudio_RomOpen"]; asm["_dummyaudio_RomOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_RomOpen.apply(null, arguments);
};

var real__main_volume_down = asm["_main_volume_down"]; asm["_main_volume_down"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_down.apply(null, arguments);
};

var real__zipCloseFileInZipRaw64 = asm["_zipCloseFileInZipRaw64"]; asm["_zipCloseFileInZipRaw64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipCloseFileInZipRaw64.apply(null, arguments);
};

var real__r4300_reset_hard = asm["_r4300_reset_hard"]; asm["_r4300_reset_hard"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_reset_hard.apply(null, arguments);
};

var real__DebugMemGetPointer = asm["_DebugMemGetPointer"]; asm["_DebugMemGetPointer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemGetPointer.apply(null, arguments);
};

var real__save_eventqueue_infos = asm["_save_eventqueue_infos"]; asm["_save_eventqueue_infos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__save_eventqueue_infos.apply(null, arguments);
};

var real__genc_ngle_s = asm["_genc_ngle_s"]; asm["_genc_ngle_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ngle_s.apply(null, arguments);
};

var real__ConfigListParameters = asm["_ConfigListParameters"]; asm["_ConfigListParameters"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigListParameters.apply(null, arguments);
};

var real__savestates_set_job = asm["_savestates_set_job"]; asm["_savestates_set_job"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_set_job.apply(null, arguments);
};

var real__genreserved = asm["_genreserved"]; asm["_genreserved"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genreserved.apply(null, arguments);
};

var real__write_rdram_fb = asm["_write_rdram_fb"]; asm["_write_rdram_fb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdram_fb.apply(null, arguments);
};

var real__dma_read_sram = asm["_dma_read_sram"]; asm["_dma_read_sram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dma_read_sram.apply(null, arguments);
};

var real__gendsrl32 = asm["_gendsrl32"]; asm["_gendsrl32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsrl32.apply(null, arguments);
};

var real__gendaddi = asm["_gendaddi"]; asm["_gendaddi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendaddi.apply(null, arguments);
};

var real__genj_out = asm["_genj_out"]; asm["_genj_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genj_out.apply(null, arguments);
};

var real__gendaddu = asm["_gendaddu"]; asm["_gendaddu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendaddu.apply(null, arguments);
};

var real__DebugSetRunState = asm["_DebugSetRunState"]; asm["_DebugSetRunState"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugSetRunState.apply(null, arguments);
};

var real__read_rdram_regs = asm["_read_rdram_regs"]; asm["_read_rdram_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rdram_regs.apply(null, arguments);
};

var real__genc_ule_s = asm["_genc_ule_s"]; asm["_genc_ule_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ule_s.apply(null, arguments);
};

var real__init_blocks = asm["_init_blocks"]; asm["_init_blocks"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_blocks.apply(null, arguments);
};

var real__LoadCentralDirectoryRecord = asm["_LoadCentralDirectoryRecord"]; asm["_LoadCentralDirectoryRecord"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__LoadCentralDirectoryRecord.apply(null, arguments);
};

var real__main_state_load = asm["_main_state_load"]; asm["_main_state_load"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_state_load.apply(null, arguments);
};

var real__ConfigGetParamFloat = asm["_ConfigGetParamFloat"]; asm["_ConfigGetParamFloat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParamFloat.apply(null, arguments);
};

var real__ConfigListSections = asm["_ConfigListSections"]; asm["_ConfigListSections"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigListSections.apply(null, arguments);
};

var real__write_rdramFBb = asm["_write_rdramFBb"]; asm["_write_rdramFBb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramFBb.apply(null, arguments);
};

var real__dummyvideo_ShowCFB = asm["_dummyvideo_ShowCFB"]; asm["_dummyvideo_ShowCFB"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ShowCFB.apply(null, arguments);
};

var real__cheat_delete_all = asm["_cheat_delete_all"]; asm["_cheat_delete_all"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_delete_all.apply(null, arguments);
};

var real__zipOpen = asm["_zipOpen"]; asm["_zipOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpen.apply(null, arguments);
};

var real__genori = asm["_genori"]; asm["_genori"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genori.apply(null, arguments);
};

var real__genbc1tl_out = asm["_genbc1tl_out"]; asm["_genbc1tl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1tl_out.apply(null, arguments);
};

var real__clear_rcp_interrupt = asm["_clear_rcp_interrupt"]; asm["_clear_rcp_interrupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__clear_rcp_interrupt.apply(null, arguments);
};

var real__osal_get_shared_filepath = asm["_osal_get_shared_filepath"]; asm["_osal_get_shared_filepath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_get_shared_filepath.apply(null, arguments);
};

var real__VidExt_SetVideoMode = asm["_VidExt_SetVideoMode"]; asm["_VidExt_SetVideoMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_SetVideoMode.apply(null, arguments);
};

var real__process_controller_command = asm["_process_controller_command"]; asm["_process_controller_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__process_controller_command.apply(null, arguments);
};

var real__gentlbp = asm["_gentlbp"]; asm["_gentlbp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentlbp.apply(null, arguments);
};

var real__gentlbr = asm["_gentlbr"]; asm["_gentlbr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentlbr.apply(null, arguments);
};

var real__force_detected_rdram_size_hack = asm["_force_detected_rdram_size_hack"]; asm["_force_detected_rdram_size_hack"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__force_detected_rdram_size_hack.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__save_fla_file = asm["_save_fla_file"]; asm["_save_fla_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__save_fla_file.apply(null, arguments);
};

var real__init_pif = asm["_init_pif"]; asm["_init_pif"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_pif.apply(null, arguments);
};

var real__zipOpen2_64 = asm["_zipOpen2_64"]; asm["_zipOpen2_64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpen2_64.apply(null, arguments);
};

var real__eeprom_save = asm["_eeprom_save"]; asm["_eeprom_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eeprom_save.apply(null, arguments);
};

var real__egcvip_is_connected = asm["_egcvip_is_connected"]; asm["_egcvip_is_connected"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__egcvip_is_connected.apply(null, arguments);
};

var real__CoreGetRomSettings = asm["_CoreGetRomSettings"]; asm["_CoreGetRomSettings"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreGetRomSettings.apply(null, arguments);
};

var real__read_pif_ram = asm["_read_pif_ram"]; asm["_read_pif_ram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_pif_ram.apply(null, arguments);
};

var real__unzGetGlobalInfo = asm["_unzGetGlobalInfo"]; asm["_unzGetGlobalInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetGlobalInfo.apply(null, arguments);
};

var real__genc_eq_d = asm["_genc_eq_d"]; asm["_genc_eq_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_eq_d.apply(null, arguments);
};

var real__free_all_registers = asm["_free_all_registers"]; asm["_free_all_registers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free_all_registers.apply(null, arguments);
};

var real__DebuggerCallback = asm["_DebuggerCallback"]; asm["_DebuggerCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebuggerCallback.apply(null, arguments);
};

var real__ai_end_of_dma_event = asm["_ai_end_of_dma_event"]; asm["_ai_end_of_dma_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ai_end_of_dma_event.apply(null, arguments);
};

var real__flashram_save = asm["_flashram_save"]; asm["_flashram_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flashram_save.apply(null, arguments);
};

var real__main_reset = asm["_main_reset"]; asm["_main_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_reset.apply(null, arguments);
};

var real__gensb = asm["_gensb"]; asm["_gensb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensb.apply(null, arguments);
};

var real__genjal_out = asm["_genjal_out"]; asm["_genjal_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genjal_out.apply(null, arguments);
};

var real__unzSetOffset64 = asm["_unzSetOffset64"]; asm["_unzSetOffset64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzSetOffset64.apply(null, arguments);
};

var real__r4300_mult_hi = asm["_r4300_mult_hi"]; asm["_r4300_mult_hi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_mult_hi.apply(null, arguments);
};

var real__dma_write_sram = asm["_dma_write_sram"]; asm["_dma_write_sram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dma_write_sram.apply(null, arguments);
};

var real__write_rsp_regs2 = asm["_write_rsp_regs2"]; asm["_write_rsp_regs2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rsp_regs2.apply(null, arguments);
};

var real__genneg_d = asm["_genneg_d"]; asm["_genneg_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genneg_d.apply(null, arguments);
};

var real__genbltz_idle = asm["_genbltz_idle"]; asm["_genbltz_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltz_idle.apply(null, arguments);
};

var real__VidExt_VideoRunning = asm["_VidExt_VideoRunning"]; asm["_VidExt_VideoRunning"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__VidExt_VideoRunning.apply(null, arguments);
};

var real__genswc1 = asm["_genswc1"]; asm["_genswc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genswc1.apply(null, arguments);
};

var real__rumblepak_write_command = asm["_rumblepak_write_command"]; asm["_rumblepak_write_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rumblepak_write_command.apply(null, arguments);
};

var real__genbgezal_out = asm["_genbgezal_out"]; asm["_genbgezal_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezal_out.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__DebugDecodeOp = asm["_DebugDecodeOp"]; asm["_DebugDecodeOp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugDecodeOp.apply(null, arguments);
};

var real__event_set_core_defaults = asm["_event_set_core_defaults"]; asm["_event_set_core_defaults"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__event_set_core_defaults.apply(null, arguments);
};

var real__ini_search_by_crc = asm["_ini_search_by_crc"]; asm["_ini_search_by_crc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ini_search_by_crc.apply(null, arguments);
};

var real__unzGetGlobalComment = asm["_unzGetGlobalComment"]; asm["_unzGetGlobalComment"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetGlobalComment.apply(null, arguments);
};

var real__genbc1tl_idle = asm["_genbc1tl_idle"]; asm["_genbc1tl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1tl_idle.apply(null, arguments);
};

var real__genbgezall = asm["_genbgezall"]; asm["_genbgezall"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezall.apply(null, arguments);
};

var real__genmult = asm["_genmult"]; asm["_genmult"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmult.apply(null, arguments);
};

var real__dummyaudio_SetSpeedFactor = asm["_dummyaudio_SetSpeedFactor"]; asm["_dummyaudio_SetSpeedFactor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_SetSpeedFactor.apply(null, arguments);
};

var real__genbgezal_idle = asm["_genbgezal_idle"]; asm["_genbgezal_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezal_idle.apply(null, arguments);
};

var real__dummyvideo_SetRenderingCallback = asm["_dummyvideo_SetRenderingCallback"]; asm["_dummyvideo_SetRenderingCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_SetRenderingCallback.apply(null, arguments);
};

var real__workqueue_init = asm["_workqueue_init"]; asm["_workqueue_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__workqueue_init.apply(null, arguments);
};

var real__dummyinput_RomOpen = asm["_dummyinput_RomOpen"]; asm["_dummyinput_RomOpen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_RomOpen.apply(null, arguments);
};

var real__dummyvideo_PluginGetVersion = asm["_dummyvideo_PluginGetVersion"]; asm["_dummyvideo_PluginGetVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_PluginGetVersion.apply(null, arguments);
};

var real__init_cache = asm["_init_cache"]; asm["_init_cache"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_cache.apply(null, arguments);
};

var real__gensyscall = asm["_gensyscall"]; asm["_gensyscall"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensyscall.apply(null, arguments);
};

var real__gendmfc1 = asm["_gendmfc1"]; asm["_gendmfc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendmfc1.apply(null, arguments);
};

var real__genblez = asm["_genblez"]; asm["_genblez"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblez.apply(null, arguments);
};

var real__CoreDetachPlugin = asm["_CoreDetachPlugin"]; asm["_CoreDetachPlugin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreDetachPlugin.apply(null, arguments);
};

var real__dummyvideo_MoveScreen = asm["_dummyvideo_MoveScreen"]; asm["_dummyvideo_MoveScreen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_MoveScreen.apply(null, arguments);
};

var real__genc_ueq_s = asm["_genc_ueq_s"]; asm["_genc_ueq_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ueq_s.apply(null, arguments);
};

var real__cp0_update_count = asm["_cp0_update_count"]; asm["_cp0_update_count"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cp0_update_count.apply(null, arguments);
};

var real__r4300_cp1_fcr31 = asm["_r4300_cp1_fcr31"]; asm["_r4300_cp1_fcr31"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_cp1_fcr31.apply(null, arguments);
};

var real__ConfigSetDefaultFloat = asm["_ConfigSetDefaultFloat"]; asm["_ConfigSetDefaultFloat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigSetDefaultFloat.apply(null, arguments);
};

var real__unzClose = asm["_unzClose"]; asm["_unzClose"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzClose.apply(null, arguments);
};

var real__genc_ueq_d = asm["_genc_ueq_d"]; asm["_genc_ueq_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ueq_d.apply(null, arguments);
};

var real__write_to_file = asm["_write_to_file"]; asm["_write_to_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_to_file.apply(null, arguments);
};

var real__dummyaudio_VolumeDown = asm["_dummyaudio_VolumeDown"]; asm["_dummyaudio_VolumeDown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyaudio_VolumeDown.apply(null, arguments);
};

var real__genbgezl_out = asm["_genbgezl_out"]; asm["_genbgezl_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezl_out.apply(null, arguments);
};

var real__raise_rcp_interrupt = asm["_raise_rcp_interrupt"]; asm["_raise_rcp_interrupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__raise_rcp_interrupt.apply(null, arguments);
};

var real__game_controller_get_input = asm["_game_controller_get_input"]; asm["_game_controller_get_input"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__game_controller_get_input.apply(null, arguments);
};

var real__check_cop1_unusable = asm["_check_cop1_unusable"]; asm["_check_cop1_unusable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__check_cop1_unusable.apply(null, arguments);
};

var real__DebugGetState = asm["_DebugGetState"]; asm["_DebugGetState"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugGetState.apply(null, arguments);
};

var real__genbgezal = asm["_genbgezal"]; asm["_genbgezal"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezal.apply(null, arguments);
};

var real__mempak_read_command = asm["_mempak_read_command"]; asm["_mempak_read_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mempak_read_command.apply(null, arguments);
};

var real__main_message = asm["_main_message"]; asm["_main_message"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_message.apply(null, arguments);
};

var real__tlb_unmap = asm["_tlb_unmap"]; asm["_tlb_unmap"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__tlb_unmap.apply(null, arguments);
};

var real__genxori = asm["_genxori"]; asm["_genxori"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genxori.apply(null, arguments);
};

var real__r4300_llbit = asm["_r4300_llbit"]; asm["_r4300_llbit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_llbit.apply(null, arguments);
};

var real__genc_le_d = asm["_genc_le_d"]; asm["_genc_le_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_le_d.apply(null, arguments);
};

var real__gendadd = asm["_gendadd"]; asm["_gendadd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendadd.apply(null, arguments);
};

var real__dummyinput_ReadController = asm["_dummyinput_ReadController"]; asm["_dummyinput_ReadController"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_ReadController.apply(null, arguments);
};

var real__unprotect_framebuffers = asm["_unprotect_framebuffers"]; asm["_unprotect_framebuffers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unprotect_framebuffers.apply(null, arguments);
};

var real__genc_le_s = asm["_genc_le_s"]; asm["_genc_le_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_le_s.apply(null, arguments);
};

var real__DebugMemRead32 = asm["_DebugMemRead32"]; asm["_DebugMemRead32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemRead32.apply(null, arguments);
};

var real__zipOpenNewFileInZip2 = asm["_zipOpenNewFileInZip2"]; asm["_zipOpenNewFileInZip2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip2.apply(null, arguments);
};

var real__init_assembler = asm["_init_assembler"]; asm["_init_assembler"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_assembler.apply(null, arguments);
};

var real__gendmult = asm["_gendmult"]; asm["_gendmult"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendmult.apply(null, arguments);
};

var real__ConfigGetUserDataPath = asm["_ConfigGetUserDataPath"]; asm["_ConfigGetUserDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetUserDataPath.apply(null, arguments);
};

var real__write_rdram = asm["_write_rdram"]; asm["_write_rdram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdram.apply(null, arguments);
};

var real__gensub_s = asm["_gensub_s"]; asm["_gensub_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensub_s.apply(null, arguments);
};

var real__savestates_inc_slot = asm["_savestates_inc_slot"]; asm["_savestates_inc_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_inc_slot.apply(null, arguments);
};

var real__genandi = asm["_genandi"]; asm["_genandi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genandi.apply(null, arguments);
};

var real__save_sra_file = asm["_save_sra_file"]; asm["_save_sra_file"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__save_sra_file.apply(null, arguments);
};

var real__write_rsp_mem = asm["_write_rsp_mem"]; asm["_write_rsp_mem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rsp_mem.apply(null, arguments);
};

var real__gensub_d = asm["_gensub_d"]; asm["_gensub_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensub_d.apply(null, arguments);
};

var real__init_cart_rom = asm["_init_cart_rom"]; asm["_init_cart_rom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_cart_rom.apply(null, arguments);
};

var real__DebugMemGetRecompInfo = asm["_DebugMemGetRecompInfo"]; asm["_DebugMemGetRecompInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugMemGetRecompInfo.apply(null, arguments);
};

var real__PluginGetVersion = asm["_PluginGetVersion"]; asm["_PluginGetVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__PluginGetVersion.apply(null, arguments);
};

var real__osal_get_user_datapath = asm["_osal_get_user_datapath"]; asm["_osal_get_user_datapath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_get_user_datapath.apply(null, arguments);
};

var real__Write_Zip64EndOfCentralDirectoryLocator = asm["_Write_Zip64EndOfCentralDirectoryLocator"]; asm["_Write_Zip64EndOfCentralDirectoryLocator"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Write_Zip64EndOfCentralDirectoryLocator.apply(null, arguments);
};

var real__genceil_w_d = asm["_genceil_w_d"]; asm["_genceil_w_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genceil_w_d.apply(null, arguments);
};

var real__unzOpen64 = asm["_unzOpen64"]; asm["_unzOpen64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpen64.apply(null, arguments);
};

var real__update_pif_write = asm["_update_pif_write"]; asm["_update_pif_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__update_pif_write.apply(null, arguments);
};

var real__write_ri_regs = asm["_write_ri_regs"]; asm["_write_ri_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_ri_regs.apply(null, arguments);
};

var real__init_interupt = asm["_init_interupt"]; asm["_init_interupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_interupt.apply(null, arguments);
};

var real__gensdc1 = asm["_gensdc1"]; asm["_gensdc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensdc1.apply(null, arguments);
};

var real__CoreShutdown = asm["_CoreShutdown"]; asm["_CoreShutdown"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreShutdown.apply(null, arguments);
};

var real__dummyvideo_ProcessRDPList = asm["_dummyvideo_ProcessRDPList"]; asm["_dummyvideo_ProcessRDPList"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ProcessRDPList.apply(null, arguments);
};

var real__unzGetCurrentFileZStreamPos64 = asm["_unzGetCurrentFileZStreamPos64"]; asm["_unzGetCurrentFileZStreamPos64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetCurrentFileZStreamPos64.apply(null, arguments);
};

var real__genbltz_out = asm["_genbltz_out"]; asm["_genbltz_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltz_out.apply(null, arguments);
};

var real__gensync = asm["_gensync"]; asm["_gensync"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensync.apply(null, arguments);
};

var real__r4300_mult_lo = asm["_r4300_mult_lo"]; asm["_r4300_mult_lo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__r4300_mult_lo.apply(null, arguments);
};

var real__af_rtc_read_command = asm["_af_rtc_read_command"]; asm["_af_rtc_read_command"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__af_rtc_read_command.apply(null, arguments);
};

var real__unzGetFilePos64 = asm["_unzGetFilePos64"]; asm["_unzGetFilePos64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetFilePos64.apply(null, arguments);
};

var real__gendsllv = asm["_gendsllv"]; asm["_gendsllv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsllv.apply(null, arguments);
};

var real__remove_event = asm["_remove_event"]; asm["_remove_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__remove_event.apply(null, arguments);
};

var real__main_volume_get_level = asm["_main_volume_get_level"]; asm["_main_volume_get_level"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_volume_get_level.apply(null, arguments);
};

var real__free_assembler = asm["_free_assembler"]; asm["_free_assembler"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free_assembler.apply(null, arguments);
};

var real__main_run = asm["_main_run"]; asm["_main_run"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_run.apply(null, arguments);
};

var real__genldc1 = asm["_genldc1"]; asm["_genldc1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genldc1.apply(null, arguments);
};

var real__genbgez_out = asm["_genbgez_out"]; asm["_genbgez_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgez_out.apply(null, arguments);
};

var real__genmov_d = asm["_genmov_d"]; asm["_genmov_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmov_d.apply(null, arguments);
};

var real__genc_ole_d = asm["_genc_ole_d"]; asm["_genc_ole_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ole_d.apply(null, arguments);
};

var real__init_rdram = asm["_init_rdram"]; asm["_init_rdram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_rdram.apply(null, arguments);
};

var real__update_pif_read = asm["_update_pif_read"]; asm["_update_pif_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__update_pif_read.apply(null, arguments);
};

var real__genmov_s = asm["_genmov_s"]; asm["_genmov_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmov_s.apply(null, arguments);
};

var real__genc_ole_s = asm["_genc_ole_s"]; asm["_genc_ole_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_ole_s.apply(null, arguments);
};

var real__read_rsp_regs2 = asm["_read_rsp_regs2"]; asm["_read_rsp_regs2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read_rsp_regs2.apply(null, arguments);
};

var real__pure_interpreter = asm["_pure_interpreter"]; asm["_pure_interpreter"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pure_interpreter.apply(null, arguments);
};

var real__gensrlv = asm["_gensrlv"]; asm["_gensrlv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensrlv.apply(null, arguments);
};

var real__genswr = asm["_genswr"]; asm["_genswr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genswr.apply(null, arguments);
};

var real__unzOpen2_64 = asm["_unzOpen2_64"]; asm["_unzOpen2_64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzOpen2_64.apply(null, arguments);
};

var real__genbne_out = asm["_genbne_out"]; asm["_genbne_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbne_out.apply(null, arguments);
};

var real__dma_write_flashram = asm["_dma_write_flashram"]; asm["_dma_write_flashram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dma_write_flashram.apply(null, arguments);
};

var real__savestates_init = asm["_savestates_init"]; asm["_savestates_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__savestates_init.apply(null, arguments);
};

var real__dummyvideo_ProcessDList = asm["_dummyvideo_ProcessDList"]; asm["_dummyvideo_ProcessDList"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyvideo_ProcessDList.apply(null, arguments);
};

var real__cheat_apply_cheats = asm["_cheat_apply_cheats"]; asm["_cheat_apply_cheats"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_apply_cheats.apply(null, arguments);
};

var real__CoreStartup = asm["_CoreStartup"]; asm["_CoreStartup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreStartup.apply(null, arguments);
};

var real__genlwr = asm["_genlwr"]; asm["_genlwr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlwr.apply(null, arguments);
};

var real__gentrunc_w_d = asm["_gentrunc_w_d"]; asm["_gentrunc_w_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentrunc_w_d.apply(null, arguments);
};

var real__genlwu = asm["_genlwu"]; asm["_genlwu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlwu.apply(null, arguments);
};

var real__StateChanged = asm["_StateChanged"]; asm["_StateChanged"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__StateChanged.apply(null, arguments);
};

var real__genlwl = asm["_genlwl"]; asm["_genlwl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genlwl.apply(null, arguments);
};

var real__unzReadCurrentFile = asm["_unzReadCurrentFile"]; asm["_unzReadCurrentFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzReadCurrentFile.apply(null, arguments);
};

var real__gentrunc_w_s = asm["_gentrunc_w_s"]; asm["_gentrunc_w_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gentrunc_w_s.apply(null, arguments);
};

var real__genblez_idle = asm["_genblez_idle"]; asm["_genblez_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genblez_idle.apply(null, arguments);
};

var real__trim = asm["_trim"]; asm["_trim"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__trim.apply(null, arguments);
};

var real__af_rtc_get_time = asm["_af_rtc_get_time"]; asm["_af_rtc_get_time"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__af_rtc_get_time.apply(null, arguments);
};

var real__osal_get_user_configpath = asm["_osal_get_user_configpath"]; asm["_osal_get_user_configpath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_get_user_configpath.apply(null, arguments);
};

var real__format_sram = asm["_format_sram"]; asm["_format_sram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__format_sram.apply(null, arguments);
};

var real__ConfigHasUnsavedChanges = asm["_ConfigHasUnsavedChanges"]; asm["_ConfigHasUnsavedChanges"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigHasUnsavedChanges.apply(null, arguments);
};

var real__call_zseek64 = asm["_call_zseek64"]; asm["_call_zseek64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__call_zseek64.apply(null, arguments);
};

var real__ConfigGetParamBool = asm["_ConfigGetParamBool"]; asm["_ConfigGetParamBool"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetParamBool.apply(null, arguments);
};

var real__gendsra32 = asm["_gendsra32"]; asm["_gendsra32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gendsra32.apply(null, arguments);
};

var real__genjal_idle = asm["_genjal_idle"]; asm["_genjal_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genjal_idle.apply(null, arguments);
};

var real__connect_rdram = asm["_connect_rdram"]; asm["_connect_rdram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__connect_rdram.apply(null, arguments);
};

var real__dummyinput_PluginGetVersion = asm["_dummyinput_PluginGetVersion"]; asm["_dummyinput_PluginGetVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dummyinput_PluginGetVersion.apply(null, arguments);
};

var real__unzGetOffset64 = asm["_unzGetOffset64"]; asm["_unzGetOffset64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetOffset64.apply(null, arguments);
};

var real__DebugGetCPUDataPtr = asm["_DebugGetCPUDataPtr"]; asm["_DebugGetCPUDataPtr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__DebugGetCPUDataPtr.apply(null, arguments);
};

var real__sra_file_ptr = asm["_sra_file_ptr"]; asm["_sra_file_ptr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sra_file_ptr.apply(null, arguments);
};

var real__zipOpenNewFileInZip2_64 = asm["_zipOpenNewFileInZip2_64"]; asm["_zipOpenNewFileInZip2_64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip2_64.apply(null, arguments);
};

var real__parse_hex = asm["_parse_hex"]; asm["_parse_hex"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__parse_hex.apply(null, arguments);
};

var real__genbgtzl = asm["_genbgtzl"]; asm["_genbgtzl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtzl.apply(null, arguments);
};

var real__genbne = asm["_genbne"]; asm["_genbne"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbne.apply(null, arguments);
};

var real__generet = asm["_generet"]; asm["_generet"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__generet.apply(null, arguments);
};

var real__genbltzall_out = asm["_genbltzall_out"]; asm["_genbltzall_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbltzall_out.apply(null, arguments);
};

var real__genddiv = asm["_genddiv"]; asm["_genddiv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genddiv.apply(null, arguments);
};

var real__genc_seq_s = asm["_genc_seq_s"]; asm["_genc_seq_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_seq_s.apply(null, arguments);
};

var real__main_state_inc_slot = asm["_main_state_inc_slot"]; asm["_main_state_inc_slot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main_state_inc_slot.apply(null, arguments);
};

var real__genbgtzl_idle = asm["_genbgtzl_idle"]; asm["_genbgtzl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgtzl_idle.apply(null, arguments);
};

var real__osal_get_user_cachepath = asm["_osal_get_user_cachepath"]; asm["_osal_get_user_cachepath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__osal_get_user_cachepath.apply(null, arguments);
};

var real__rsp_interrupt_event = asm["_rsp_interrupt_event"]; asm["_rsp_interrupt_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rsp_interrupt_event.apply(null, arguments);
};

var real__load_eventqueue_infos = asm["_load_eventqueue_infos"]; asm["_load_eventqueue_infos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__load_eventqueue_infos.apply(null, arguments);
};

var real__CoreCompareDataSync = asm["_CoreCompareDataSync"]; asm["_CoreCompareDataSync"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreCompareDataSync.apply(null, arguments);
};

var real__genc_seq_d = asm["_genc_seq_d"]; asm["_genc_seq_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_seq_d.apply(null, arguments);
};

var real__write_rdramFBh = asm["_write_rdramFBh"]; asm["_write_rdramFBh"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramFBh.apply(null, arguments);
};

var real__write_rdramFBd = asm["_write_rdramFBd"]; asm["_write_rdramFBd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdramFBd.apply(null, arguments);
};

var real__unzGetGlobalInfo64 = asm["_unzGetGlobalInfo64"]; asm["_unzGetGlobalInfo64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzGetGlobalInfo64.apply(null, arguments);
};

var real__genbc1f_out = asm["_genbc1f_out"]; asm["_genbc1f_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1f_out.apply(null, arguments);
};

var real__genc_olt_s = asm["_genc_olt_s"]; asm["_genc_olt_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_olt_s.apply(null, arguments);
};

var real__add_interupt_event = asm["_add_interupt_event"]; asm["_add_interupt_event"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__add_interupt_event.apply(null, arguments);
};

var real__gennor = asm["_gennor"]; asm["_gennor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gennor.apply(null, arguments);
};

var real__write_rdram_regs = asm["_write_rdram_regs"]; asm["_write_rdram_regs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdram_regs.apply(null, arguments);
};

var real__genmfhi = asm["_genmfhi"]; asm["_genmfhi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmfhi.apply(null, arguments);
};

var real__TakeScreenshot = asm["_TakeScreenshot"]; asm["_TakeScreenshot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__TakeScreenshot.apply(null, arguments);
};

var real__genc_olt_d = asm["_genc_olt_d"]; asm["_genc_olt_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genc_olt_d.apply(null, arguments);
};

var real__new_frame = asm["_new_frame"]; asm["_new_frame"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__new_frame.apply(null, arguments);
};

var real__fill_fopen64_filefunc = asm["_fill_fopen64_filefunc"]; asm["_fill_fopen64_filefunc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fill_fopen64_filefunc.apply(null, arguments);
};

var real__genjal = asm["_genjal"]; asm["_genjal"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genjal.apply(null, arguments);
};

var real__unzeof = asm["_unzeof"]; asm["_unzeof"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzeof.apply(null, arguments);
};

var real__unzLocateFile = asm["_unzLocateFile"]; asm["_unzLocateFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unzLocateFile.apply(null, arguments);
};

var real__genmultu = asm["_genmultu"]; asm["_genmultu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmultu.apply(null, arguments);
};

var real__fill_zlib_filefunc64_32_def_from_filefunc32 = asm["_fill_zlib_filefunc64_32_def_from_filefunc32"]; asm["_fill_zlib_filefunc64_32_def_from_filefunc32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fill_zlib_filefunc64_32_def_from_filefunc32.apply(null, arguments);
};

var real__genfloor_l_d = asm["_genfloor_l_d"]; asm["_genfloor_l_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genfloor_l_d.apply(null, arguments);
};

var real__sram_save = asm["_sram_save"]; asm["_sram_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sram_save.apply(null, arguments);
};

var real__genbnel_out = asm["_genbnel_out"]; asm["_genbnel_out"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbnel_out.apply(null, arguments);
};

var real__genbc1tl = asm["_genbc1tl"]; asm["_genbc1tl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbc1tl.apply(null, arguments);
};

var real__CoreErrorMessage = asm["_CoreErrorMessage"]; asm["_CoreErrorMessage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CoreErrorMessage.apply(null, arguments);
};

var real__Write_LocalFileHeader = asm["_Write_LocalFileHeader"]; asm["_Write_LocalFileHeader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Write_LocalFileHeader.apply(null, arguments);
};

var real__signal_rcp_interrupt = asm["_signal_rcp_interrupt"]; asm["_signal_rcp_interrupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__signal_rcp_interrupt.apply(null, arguments);
};

var real__write_rdram_dram = asm["_write_rdram_dram"]; asm["_write_rdram_dram"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__write_rdram_dram.apply(null, arguments);
};

var real__gensllv = asm["_gensllv"]; asm["_gensllv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gensllv.apply(null, arguments);
};

var real__genfloor_l_s = asm["_genfloor_l_s"]; asm["_genfloor_l_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genfloor_l_s.apply(null, arguments);
};

var real__unztell64 = asm["_unztell64"]; asm["_unztell64"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unztell64.apply(null, arguments);
};

var real__genbgezl_idle = asm["_genbgezl_idle"]; asm["_genbgezl_idle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genbgezl_idle.apply(null, arguments);
};

var real__ConfigGetUserConfigPath = asm["_ConfigGetUserConfigPath"]; asm["_ConfigGetUserConfigPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ConfigGetUserConfigPath.apply(null, arguments);
};

var real__genni = asm["_genni"]; asm["_genni"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genni.apply(null, arguments);
};

var real__genmul_s = asm["_genmul_s"]; asm["_genmul_s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmul_s.apply(null, arguments);
};

var real__to_little_endian_buffer = asm["_to_little_endian_buffer"]; asm["_to_little_endian_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__to_little_endian_buffer.apply(null, arguments);
};

var real__zipOpenNewFileInZip = asm["_zipOpenNewFileInZip"]; asm["_zipOpenNewFileInZip"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__zipOpenNewFileInZip.apply(null, arguments);
};

var real__Write_GlobalComment = asm["_Write_GlobalComment"]; asm["_Write_GlobalComment"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Write_GlobalComment.apply(null, arguments);
};

var real__init_memory = asm["_init_memory"]; asm["_init_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init_memory.apply(null, arguments);
};

var real__check_interupt = asm["_check_interupt"]; asm["_check_interupt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__check_interupt.apply(null, arguments);
};

var real__cheat_init = asm["_cheat_init"]; asm["_cheat_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheat_init.apply(null, arguments);
};

var real__genmul_d = asm["_genmul_d"]; asm["_genmul_d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__genmul_d.apply(null, arguments);
};
var _genbc1fl = Module["_genbc1fl"] = asm["_genbc1fl"];
var _init_mi = Module["_init_mi"] = asm["_init_mi"];
var _write_dpc_regs = Module["_write_dpc_regs"] = asm["_write_dpc_regs"];
var _savestates_load = Module["_savestates_load"] = asm["_savestates_load"];
var _read_rdramFBh = Module["_read_rdramFBh"] = asm["_read_rdramFBh"];
var _ConfigGetParamString = Module["_ConfigGetParamString"] = asm["_ConfigGetParamString"];
var _gensll = Module["_gensll"] = asm["_gensll"];
var _read_rdramFBd = Module["_read_rdramFBd"] = asm["_read_rdramFBd"];
var _savestates_get_job = Module["_savestates_get_job"] = asm["_savestates_get_job"];
var _genlink_subblock = Module["_genlink_subblock"] = asm["_genlink_subblock"];
var _eep_file_ptr = Module["_eep_file_ptr"] = asm["_eep_file_ptr"];
var _genslt = Module["_genslt"] = asm["_genslt"];
var _combinepath = Module["_combinepath"] = asm["_combinepath"];
var _dummyinput_InitiateControllers = Module["_dummyinput_InitiateControllers"] = asm["_dummyinput_InitiateControllers"];
var _rdp_interrupt_event = Module["_rdp_interrupt_event"] = asm["_rdp_interrupt_event"];
var _init_rdp = Module["_init_rdp"] = asm["_init_rdp"];
var _dummyaudio_InitiateAudio = Module["_dummyaudio_InitiateAudio"] = asm["_dummyaudio_InitiateAudio"];
var _passe2 = Module["_passe2"] = asm["_passe2"];
var _genround_l_s = Module["_genround_l_s"] = asm["_genround_l_s"];
var _SetStateCallback = Module["_SetStateCallback"] = asm["_SetStateCallback"];
var _dummyinput_RomClosed = Module["_dummyinput_RomClosed"] = asm["_dummyinput_RomClosed"];
var _zipOpenNewFileInZip64 = Module["_zipOpenNewFileInZip64"] = asm["_zipOpenNewFileInZip64"];
var _zipOpen64 = Module["_zipOpen64"] = asm["_zipOpen64"];
var _genfloor_w_d = Module["_genfloor_w_d"] = asm["_genfloor_w_d"];
var _get_time_using_C_localtime = Module["_get_time_using_C_localtime"] = asm["_get_time_using_C_localtime"];
var _read_dps_regs = Module["_read_dps_regs"] = asm["_read_dps_regs"];
var _genround_l_d = Module["_genround_l_d"] = asm["_genround_l_d"];
var _ScreenshotRomOpen = Module["_ScreenshotRomOpen"] = asm["_ScreenshotRomOpen"];
var _genj = Module["_genj"] = asm["_genj"];
var _JR_IDLE_819 = Module["_JR_IDLE_819"] = asm["_JR_IDLE_819"];
var _read_rdramFBb = Module["_read_rdramFBb"] = asm["_read_rdramFBb"];
var _read_dpc_regs = Module["_read_dpc_regs"] = asm["_read_dpc_regs"];
var _unzGoToFilePos = Module["_unzGoToFilePos"] = asm["_unzGoToFilePos"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _mempak_write_command = Module["_mempak_write_command"] = asm["_mempak_write_command"];
var _r4300_execute = Module["_r4300_execute"] = asm["_r4300_execute"];
var _eeprom_write_command = Module["_eeprom_write_command"] = asm["_eeprom_write_command"];
var _vi_vertical_interrupt_event = Module["_vi_vertical_interrupt_event"] = asm["_vi_vertical_interrupt_event"];
var _connect_ri = Module["_connect_ri"] = asm["_connect_ri"];
var _dummyrsp_InitiateRSP = Module["_dummyrsp_InitiateRSP"] = asm["_dummyrsp_InitiateRSP"];
var _dummyvideo_RomClosed = Module["_dummyvideo_RomClosed"] = asm["_dummyvideo_RomClosed"];
var _connect_rdp = Module["_connect_rdp"] = asm["_connect_rdp"];
var _dummyaudio_PluginGetVersion = Module["_dummyaudio_PluginGetVersion"] = asm["_dummyaudio_PluginGetVersion"];
var _push_audio_samples_via_audio_plugin = Module["_push_audio_samples_via_audio_plugin"] = asm["_push_audio_samples_via_audio_plugin"];
var _gendsubu = Module["_gendsubu"] = asm["_gendsubu"];
var _main_get_screen_size = Module["_main_get_screen_size"] = asm["_main_get_screen_size"];
var _dummyvideo_FBRead = Module["_dummyvideo_FBRead"] = asm["_dummyvideo_FBRead"];
var _dma_read_flashram = Module["_dma_read_flashram"] = asm["_dma_read_flashram"];
var _DebugMemWrite64 = Module["_DebugMemWrite64"] = asm["_DebugMemWrite64"];
var _open_sra_file = Module["_open_sra_file"] = asm["_open_sra_file"];
var _JALR_IDLE_820 = Module["_JALR_IDLE_820"] = asm["_JALR_IDLE_820"];
var _genbgez = Module["_genbgez"] = asm["_genbgez"];
var _free_block = Module["_free_block"] = asm["_free_block"];
var _genbltzl_out = Module["_genbltzl_out"] = asm["_genbltzl_out"];
var _VidExt_Quit = Module["_VidExt_Quit"] = asm["_VidExt_Quit"];
var _invalidate_cached_code_hacktarux = Module["_invalidate_cached_code_hacktarux"] = asm["_invalidate_cached_code_hacktarux"];
var _r4300_regs = Module["_r4300_regs"] = asm["_r4300_regs"];
var _init_vi = Module["_init_vi"] = asm["_init_vi"];
var _countrycodestring = Module["_countrycodestring"] = asm["_countrycodestring"];
var _do_SP_Task = Module["_do_SP_Task"] = asm["_do_SP_Task"];
var _sdl_keysym2scancode = Module["_sdl_keysym2scancode"] = asm["_sdl_keysym2scancode"];
var _JALR_IDLE = Module["_JALR_IDLE"] = asm["_JALR_IDLE"];
var _init_rsp = Module["_init_rsp"] = asm["_init_rsp"];
var _genc_eq_s = Module["_genc_eq_s"] = asm["_genc_eq_s"];
var _gendiv = Module["_gendiv"] = asm["_gendiv"];
var _Write_EndOfCentralDirectoryRecord = Module["_Write_EndOfCentralDirectoryRecord"] = asm["_Write_EndOfCentralDirectoryRecord"];
var _r4300_last_addr = Module["_r4300_last_addr"] = asm["_r4300_last_addr"];
var _dummyinput_ControllerCommand = Module["_dummyinput_ControllerCommand"] = asm["_dummyinput_ControllerCommand"];
var _dummyinput_GetKeys = Module["_dummyinput_GetKeys"] = asm["_dummyinput_GetKeys"];
var _call_zopen64 = Module["_call_zopen64"] = asm["_call_zopen64"];
var _get_next_event_type = Module["_get_next_event_type"] = asm["_get_next_event_type"];
var _genceil_l_s = Module["_genceil_l_s"] = asm["_genceil_l_s"];
var _init_block = Module["_init_block"] = asm["_init_block"];
var _genmflo = Module["_genmflo"] = asm["_genmflo"];
var _open_mpk_file = Module["_open_mpk_file"] = asm["_open_mpk_file"];
var _md5_finish = Module["_md5_finish"] = asm["_md5_finish"];
var _genabs_s = Module["_genabs_s"] = asm["_genabs_s"];
var _rvip_rumble = Module["_rvip_rumble"] = asm["_rvip_rumble"];
var _gensrl = Module["_gensrl"] = asm["_gensrl"];
var _close_mpk_file = Module["_close_mpk_file"] = asm["_close_mpk_file"];
var _genabs_d = Module["_genabs_d"] = asm["_genabs_d"];
var _ConfigGetParamInt = Module["_ConfigGetParamInt"] = asm["_ConfigGetParamInt"];
var _CoreAttachPlugin = Module["_CoreAttachPlugin"] = asm["_CoreAttachPlugin"];
var _gensra = Module["_gensra"] = asm["_gensra"];
var _romdatabase_close = Module["_romdatabase_close"] = asm["_romdatabase_close"];
var _genjr = Module["_genjr"] = asm["_genjr"];
var _ConfigGetParameterHelp = Module["_ConfigGetParameterHelp"] = asm["_ConfigGetParameterHelp"];
var _genadd_s = Module["_genadd_s"] = asm["_genadd_s"];
var _gensub = Module["_gensub"] = asm["_gensub"];
var _genblezl_out = Module["_genblezl_out"] = asm["_genblezl_out"];
var _genand = Module["_genand"] = asm["_genand"];
var _genaddiu = Module["_genaddiu"] = asm["_genaddiu"];
var _genadd_d = Module["_genadd_d"] = asm["_genadd_d"];
var _n64_cic_nus_6105 = Module["_n64_cic_nus_6105"] = asm["_n64_cic_nus_6105"];
var _ConfigSaveFile = Module["_ConfigSaveFile"] = asm["_ConfigSaveFile"];
var _gendaddiu = Module["_gendaddiu"] = asm["_gendaddiu"];
var _map_region = Module["_map_region"] = asm["_map_region"];
var _genc_ngl_d = Module["_genc_ngl_d"] = asm["_genc_ngl_d"];
var _genbltzal_idle = Module["_genbltzal_idle"] = asm["_genbltzal_idle"];
var _read_rdramFB = Module["_read_rdramFB"] = asm["_read_rdramFB"];
var _ConfigGetSharedDataFilepath = Module["_ConfigGetSharedDataFilepath"] = asm["_ConfigGetSharedDataFilepath"];
var _genc_ngl_s = Module["_genc_ngl_s"] = asm["_genc_ngl_s"];
var _unztell = Module["_unztell"] = asm["_unztell"];
var _write_si_regs = Module["_write_si_regs"] = asm["_write_si_regs"];
var _genmtc1 = Module["_genmtc1"] = asm["_genmtc1"];
var _main_stop = Module["_main_stop"] = asm["_main_stop"];
var _genbnel = Module["_genbnel"] = asm["_genbnel"];
var _connect_vi = Module["_connect_vi"] = asm["_connect_vi"];
var _main_set_fastforward = Module["_main_set_fastforward"] = asm["_main_set_fastforward"];
var _read_flashram_status = Module["_read_flashram_status"] = asm["_read_flashram_status"];
var _rumblepak_rumble = Module["_rumblepak_rumble"] = asm["_rumblepak_rumble"];
var _genbeql = Module["_genbeql"] = asm["_genbeql"];
var _unzSetOffset = Module["_unzSetOffset"] = asm["_unzSetOffset"];
var _DebugSetCallbacks = Module["_DebugSetCallbacks"] = asm["_DebugSetCallbacks"];
var _dummyaudio_RomClosed = Module["_dummyaudio_RomClosed"] = asm["_dummyaudio_RomClosed"];
var _read_cart_rom = Module["_read_cart_rom"] = asm["_read_cart_rom"];
var _zipCloseFileInZipRaw = Module["_zipCloseFileInZipRaw"] = asm["_zipCloseFileInZipRaw"];
var _shuffle_fpr_data = Module["_shuffle_fpr_data"] = asm["_shuffle_fpr_data"];
var _reset_soft = Module["_reset_soft"] = asm["_reset_soft"];
var _genbgtz_out = Module["_genbgtz_out"] = asm["_genbgtz_out"];
var _ConfigRevertChanges = Module["_ConfigRevertChanges"] = asm["_ConfigRevertChanges"];
var _to_big_endian_buffer = Module["_to_big_endian_buffer"] = asm["_to_big_endian_buffer"];
var _mpk_file_ptr = Module["_mpk_file_ptr"] = asm["_mpk_file_ptr"];
var _eeprom_status_command = Module["_eeprom_status_command"] = asm["_eeprom_status_command"];
var _gensqrt_d = Module["_gensqrt_d"] = asm["_gensqrt_d"];
var _genbeq_idle = Module["_genbeq_idle"] = asm["_genbeq_idle"];
var _tlb_map = Module["_tlb_map"] = asm["_tlb_map"];
var _gensqrt_s = Module["_gensqrt_s"] = asm["_gensqrt_s"];
var _dummyvideo_UpdateScreen = Module["_dummyvideo_UpdateScreen"] = asm["_dummyvideo_UpdateScreen"];
var _savestates_load_set_pc = Module["_savestates_load_set_pc"] = asm["_savestates_load_set_pc"];
var _main_set_core_defaults = Module["_main_set_core_defaults"] = asm["_main_set_core_defaults"];
var _format_flashram = Module["_format_flashram"] = asm["_format_flashram"];
var _virtual_to_physical_address = Module["_virtual_to_physical_address"] = asm["_virtual_to_physical_address"];
var _VidExt_GL_GetAttribute = Module["_VidExt_GL_GetAttribute"] = asm["_VidExt_GL_GetAttribute"];
var _genldr = Module["_genldr"] = asm["_genldr"];
var _genfin_block = Module["_genfin_block"] = asm["_genfin_block"];
var _savestates_save = Module["_savestates_save"] = asm["_savestates_save"];
var _swap_buffer = Module["_swap_buffer"] = asm["_swap_buffer"];
var _init_r4300 = Module["_init_r4300"] = asm["_init_r4300"];
var _genbc1fl_idle = Module["_genbc1fl_idle"] = asm["_genbc1fl_idle"];
var _ConfigDeleteSection = Module["_ConfigDeleteSection"] = asm["_ConfigDeleteSection"];
var _read_rsp_regs = Module["_read_rsp_regs"] = asm["_read_rsp_regs"];
var _OverrideVideoFunctions = Module["_OverrideVideoFunctions"] = asm["_OverrideVideoFunctions"];
var _unzCloseCurrentFile = Module["_unzCloseCurrentFile"] = asm["_unzCloseCurrentFile"];
var _dummyvideo_ChangeWindow = Module["_dummyvideo_ChangeWindow"] = asm["_dummyvideo_ChangeWindow"];
var _genbgtz_idle = Module["_genbgtz_idle"] = asm["_genbgtz_idle"];
var _init_ri = Module["_init_ri"] = asm["_init_ri"];
var _gendivu = Module["_gendivu"] = asm["_gendivu"];
var _genldl = Module["_genldl"] = asm["_genldl"];
var _DebugMemWrite8 = Module["_DebugMemWrite8"] = asm["_DebugMemWrite8"];
var _genj_idle = Module["_genj_idle"] = asm["_genj_idle"];
var _genslti = Module["_genslti"] = asm["_genslti"];
var _CoreDoCommand = Module["_CoreDoCommand"] = asm["_CoreDoCommand"];
var _DebugMemGetMemInfo = Module["_DebugMemGetMemInfo"] = asm["_DebugMemGetMemInfo"];
var _ConfigInit = Module["_ConfigInit"] = asm["_ConfigInit"];
var _zipClose = Module["_zipClose"] = asm["_zipClose"];
var _genbc1t_idle = Module["_genbc1t_idle"] = asm["_genbc1t_idle"];
var _gencfc1 = Module["_gencfc1"] = asm["_gencfc1"];
var _DebugMemRead64 = Module["_DebugMemRead64"] = asm["_DebugMemRead64"];
var _JR_IDLE = Module["_JR_IDLE"] = asm["_JR_IDLE"];
var _main_volume_get_muted = Module["_main_volume_get_muted"] = asm["_main_volume_get_muted"];
var _DebugMemWrite32 = Module["_DebugMemWrite32"] = asm["_DebugMemWrite32"];
var _read_ri_regs = Module["_read_ri_regs"] = asm["_read_ri_regs"];
var _mempak_save = Module["_mempak_save"] = asm["_mempak_save"];
var _gensltu = Module["_gensltu"] = asm["_gensltu"];
var _pi_end_of_dma_event = Module["_pi_end_of_dma_event"] = asm["_pi_end_of_dma_event"];
var _queue_work = Module["_queue_work"] = asm["_queue_work"];
var _CoreOverrideVidExt = Module["_CoreOverrideVidExt"] = asm["_CoreOverrideVidExt"];
var _dummyrsp_RomClosed = Module["_dummyrsp_RomClosed"] = asm["_dummyrsp_RomClosed"];
var _main_volume_set_level = Module["_main_volume_set_level"] = asm["_main_volume_set_level"];
var _genaddi = Module["_genaddi"] = asm["_genaddi"];
var _genaddu = Module["_genaddu"] = asm["_genaddu"];
var _read_rdram_dram = Module["_read_rdram_dram"] = asm["_read_rdram_dram"];
var _zipOpen3 = Module["_zipOpen3"] = asm["_zipOpen3"];
var _af_rtc_status_command = Module["_af_rtc_status_command"] = asm["_af_rtc_status_command"];
var _gen_interupt = Module["_gen_interupt"] = asm["_gen_interupt"];
var _read_rdram = Module["_read_rdram"] = asm["_read_rdram"];
var _connect_rsp = Module["_connect_rsp"] = asm["_connect_rsp"];
var _savestates_get_slot = Module["_savestates_get_slot"] = asm["_savestates_get_slot"];
var _osal_dynlib_getproc = Module["_osal_dynlib_getproc"] = asm["_osal_dynlib_getproc"];
var _cheat_add_new = Module["_cheat_add_new"] = asm["_cheat_add_new"];
var _savestates_set_autoinc_slot = Module["_savestates_set_autoinc_slot"] = asm["_savestates_set_autoinc_slot"];
var _push_audio_samples = Module["_push_audio_samples"] = asm["_push_audio_samples"];
var _gentlbwr = Module["_gentlbwr"] = asm["_gentlbwr"];
var _genbltzall = Module["_genbltzall"] = asm["_genbltzall"];
var _main_volume_up = Module["_main_volume_up"] = asm["_main_volume_up"];
var _gentlbwi = Module["_gentlbwi"] = asm["_gentlbwi"];
var _ConfigShutdown = Module["_ConfigShutdown"] = asm["_ConfigShutdown"];
var _DebugMemRead16 = Module["_DebugMemRead16"] = asm["_DebugMemRead16"];
var _write_pif_ram = Module["_write_pif_ram"] = asm["_write_pif_ram"];
var _reset_hard = Module["_reset_hard"] = asm["_reset_hard"];
var _genbgezl = Module["_genbgezl"] = asm["_genbgezl"];
var _cheat_uninit = Module["_cheat_uninit"] = asm["_cheat_uninit"];
var _jump_to_func = Module["_jump_to_func"] = asm["_jump_to_func"];
var _fast_mem_access = Module["_fast_mem_access"] = asm["_fast_mem_access"];
var _raise_maskable_interrupt = Module["_raise_maskable_interrupt"] = asm["_raise_maskable_interrupt"];
var _gensdr = Module["_gensdr"] = asm["_gensdr"];
var _ConfigSetDefaultInt = Module["_ConfigSetDefaultInt"] = asm["_ConfigSetDefaultInt"];
var _si_end_of_dma_event = Module["_si_end_of_dma_event"] = asm["_si_end_of_dma_event"];
var _recompile_opcode = Module["_recompile_opcode"] = asm["_recompile_opcode"];
var _genc_ngt_d = Module["_genc_ngt_d"] = asm["_genc_ngt_d"];
var _close_sra_file = Module["_close_sra_file"] = asm["_close_sra_file"];
var _md5_init = Module["_md5_init"] = asm["_md5_init"];
var _genbeq = Module["_genbeq"] = asm["_genbeq"];
var _dyna_jump = Module["_dyna_jump"] = asm["_dyna_jump"];
var _genmtlo = Module["_genmtlo"] = asm["_genmtlo"];
var _realloc_exec = Module["_realloc_exec"] = asm["_realloc_exec"];
var _ini_parse_line = Module["_ini_parse_line"] = asm["_ini_parse_line"];
var _unzOpen2 = Module["_unzOpen2"] = asm["_unzOpen2"];
var _close_rom = Module["_close_rom"] = asm["_close_rom"];
var _genround_w_s = Module["_genround_w_s"] = asm["_genround_w_s"];
var _dummyvideo_ReadScreen2 = Module["_dummyvideo_ReadScreen2"] = asm["_dummyvideo_ReadScreen2"];
var _plugin_start = Module["_plugin_start"] = asm["_plugin_start"];
var _genc_un_d = Module["_genc_un_d"] = asm["_genc_un_d"];
var _fla_file_ptr = Module["_fla_file_ptr"] = asm["_fla_file_ptr"];
var _genround_w_d = Module["_genround_w_d"] = asm["_genround_w_d"];
var _cheat_set_enabled = Module["_cheat_set_enabled"] = asm["_cheat_set_enabled"];
var _dummyinput_SDL_KeyUp = Module["_dummyinput_SDL_KeyUp"] = asm["_dummyinput_SDL_KeyUp"];
var _VidExt_ResizeWindow = Module["_VidExt_ResizeWindow"] = asm["_VidExt_ResizeWindow"];
var _DebugStep = Module["_DebugStep"] = asm["_DebugStep"];
var _read_mi_regs = Module["_read_mi_regs"] = asm["_read_mi_regs"];
var _osal_mkdirp = Module["_osal_mkdirp"] = asm["_osal_mkdirp"];
var _gensltiu = Module["_gensltiu"] = asm["_gensltiu"];
var _gendsll32 = Module["_gendsll32"] = asm["_gendsll32"];
var _main_advance_one = Module["_main_advance_one"] = asm["_main_advance_one"];
var _read_pi_regs = Module["_read_pi_regs"] = asm["_read_pi_regs"];
var _gendsrlv = Module["_gendsrlv"] = asm["_gendsrlv"];
var _CoreAddCheat = Module["_CoreAddCheat"] = asm["_CoreAddCheat"];
var _gendiv_s = Module["_gendiv_s"] = asm["_gendiv_s"];
var _main_state_save = Module["_main_state_save"] = asm["_main_state_save"];
var _gendiv_d = Module["_gendiv_d"] = asm["_gendiv_d"];
var _ConfigSetParameter = Module["_ConfigSetParameter"] = asm["_ConfigSetParameter"];
var _main_state_set_slot = Module["_main_state_set_slot"] = asm["_main_state_set_slot"];
var _DebugMessage = Module["_DebugMessage"] = asm["_DebugMessage"];
var _gencache = Module["_gencache"] = asm["_gencache"];
var _genbc1fl_out = Module["_genbc1fl_out"] = asm["_genbc1fl_out"];
var _genbgtzl_out = Module["_genbgtzl_out"] = asm["_genbgtzl_out"];
var _genbne_idle = Module["_genbne_idle"] = asm["_genbne_idle"];
var _read_controller = Module["_read_controller"] = asm["_read_controller"];
var _main_core_state_query = Module["_main_core_state_query"] = asm["_main_core_state_query"];
var _gensrav = Module["_gensrav"] = asm["_gensrav"];
var _dummyaudio_AiDacrateChanged = Module["_dummyaudio_AiDacrateChanged"] = asm["_dummyaudio_AiDacrateChanged"];
var _unzGetLocalExtrafield = Module["_unzGetLocalExtrafield"] = asm["_unzGetLocalExtrafield"];
var _r4300_cp1_regs_double = Module["_r4300_cp1_regs_double"] = asm["_r4300_cp1_regs_double"];
var _genbgezall_idle = Module["_genbgezall_idle"] = asm["_genbgezall_idle"];
var _unzStringFileNameCompare = Module["_unzStringFileNameCompare"] = asm["_unzStringFileNameCompare"];
var _write_mi_regs = Module["_write_mi_regs"] = asm["_write_mi_regs"];
var _unzGetCurrentFileInfo64 = Module["_unzGetCurrentFileInfo64"] = asm["_unzGetCurrentFileInfo64"];
var _write_rsp_regs = Module["_write_rsp_regs"] = asm["_write_rsp_regs"];
var _genadd = Module["_genadd"] = asm["_genadd"];
var _genc_f_s = Module["_genc_f_s"] = asm["_genc_f_s"];
var _gencvt_l_d = Module["_gencvt_l_d"] = asm["_gencvt_l_d"];
var _genc_f_d = Module["_genc_f_d"] = asm["_genc_f_d"];
var _ConfigSetParameterHelp = Module["_ConfigSetParameterHelp"] = asm["_ConfigSetParameterHelp"];
var _VidExt_GL_SwapBuffers = Module["_VidExt_GL_SwapBuffers"] = asm["_VidExt_GL_SwapBuffers"];
var _gencvt_l_s = Module["_gencvt_l_s"] = asm["_gencvt_l_s"];
var _format_mempak = Module["_format_mempak"] = asm["_format_mempak"];
var _dummyaudio_VolumeUp = Module["_dummyaudio_VolumeUp"] = asm["_dummyaudio_VolumeUp"];
var _genfloor_w_s = Module["_genfloor_w_s"] = asm["_genfloor_w_s"];
var _plugin_connect = Module["_plugin_connect"] = asm["_plugin_connect"];
var _genblezl_idle = Module["_genblezl_idle"] = asm["_genblezl_idle"];
var _unzGoToNextFile = Module["_unzGoToNextFile"] = asm["_unzGoToNextFile"];
var _free_blocks = Module["_free_blocks"] = asm["_free_blocks"];
var _ConfigSetDefaultBool = Module["_ConfigSetDefaultBool"] = asm["_ConfigSetDefaultBool"];
var _romdatabase_open = Module["_romdatabase_open"] = asm["_romdatabase_open"];
var _VidExt_GL_GetProcAddress = Module["_VidExt_GL_GetProcAddress"] = asm["_VidExt_GL_GetProcAddress"];
var _read_rsp_mem = Module["_read_rsp_mem"] = asm["_read_rsp_mem"];
var _generic_jump_to = Module["_generic_jump_to"] = asm["_generic_jump_to"];
var _dummyvideo_ViStatusChanged = Module["_dummyvideo_ViStatusChanged"] = asm["_dummyvideo_ViStatusChanged"];
var _genc_nge_s = Module["_genc_nge_s"] = asm["_genc_nge_s"];
var _connect_cart_rom = Module["_connect_cart_rom"] = asm["_connect_cart_rom"];
var _write_rdramh = Module["_write_rdramh"] = asm["_write_rdramh"];
var _genc_nge_d = Module["_genc_nge_d"] = asm["_genc_nge_d"];
var _genbeql_idle = Module["_genbeql_idle"] = asm["_genbeql_idle"];
var _write_rdramb = Module["_write_rdramb"] = asm["_write_rdramb"];
var _translate_event_queue = Module["_translate_event_queue"] = asm["_translate_event_queue"];
var _genmthi = Module["_genmthi"] = asm["_genmthi"];
var _CoreCompareCallback = Module["_CoreCompareCallback"] = asm["_CoreCompareCallback"];
var _write_dps_regs = Module["_write_dps_regs"] = asm["_write_dps_regs"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _dummyrsp_DoRspCycles = Module["_dummyrsp_DoRspCycles"] = asm["_dummyrsp_DoRspCycles"];
var _genlwc1 = Module["_genlwc1"] = asm["_genlwc1"];
var _dyna_stop = Module["_dyna_stop"] = asm["_dyna_stop"];
var _DebugMemRead8 = Module["_DebugMemRead8"] = asm["_DebugMemRead8"];
var _genmfc1 = Module["_genmfc1"] = asm["_genmfc1"];
var _genmfc0 = Module["_genmfc0"] = asm["_genmfc0"];
var _set_audio_format = Module["_set_audio_format"] = asm["_set_audio_format"];
var _genctc1 = Module["_genctc1"] = asm["_genctc1"];
var _connect_ai = Module["_connect_ai"] = asm["_connect_ai"];
var _genbc1f_idle = Module["_genbc1f_idle"] = asm["_genbc1f_idle"];
var _zipWriteInFileInZip = Module["_zipWriteInFileInZip"] = asm["_zipWriteInFileInZip"];
var _unzGoToFirstFile = Module["_unzGoToFirstFile"] = asm["_unzGoToFirstFile"];
var _genld = Module["_genld"] = asm["_genld"];
var _ConfigSetDefaultString = Module["_ConfigSetDefaultString"] = asm["_ConfigSetDefaultString"];
var _genc_ult_d = Module["_genc_ult_d"] = asm["_genc_ult_d"];
var _init_cic_using_ipl3 = Module["_init_cic_using_ipl3"] = asm["_init_cic_using_ipl3"];
var _write_rdramd = Module["_write_rdramd"] = asm["_write_rdramd"];
var _genjalr = Module["_genjalr"] = asm["_genjalr"];
var _main_take_next_screenshot = Module["_main_take_next_screenshot"] = asm["_main_take_next_screenshot"];
var _genlh = Module["_genlh"] = asm["_genlh"];
var _plugin_check = Module["_plugin_check"] = asm["_plugin_check"];
var _dummyinput_SDL_KeyDown = Module["_dummyinput_SDL_KeyDown"] = asm["_dummyinput_SDL_KeyDown"];
var _genc_ult_s = Module["_genc_ult_s"] = asm["_genc_ult_s"];
var _zipRemoveExtraInfoBlock = Module["_zipRemoveExtraInfoBlock"] = asm["_zipRemoveExtraInfoBlock"];
var _VidExt_GL_SetAttribute = Module["_VidExt_GL_SetAttribute"] = asm["_VidExt_GL_SetAttribute"];
var _genteq = Module["_genteq"] = asm["_genteq"];
var _game_controller_is_connected = Module["_game_controller_is_connected"] = asm["_game_controller_is_connected"];
var _r4300_next_interrupt = Module["_r4300_next_interrupt"] = asm["_r4300_next_interrupt"];
var _zipOpenNewFileInZip3_64 = Module["_zipOpenNewFileInZip3_64"] = asm["_zipOpenNewFileInZip3_64"];
var _genlui = Module["_genlui"] = asm["_genlui"];
var _dummyvideo_RomOpen = Module["_dummyvideo_RomOpen"] = asm["_dummyvideo_RomOpen"];
var _ConfigOpenSection = Module["_ConfigOpenSection"] = asm["_ConfigOpenSection"];
var _genbgez_idle = Module["_genbgez_idle"] = asm["_genbgez_idle"];
var _gendsll = Module["_gendsll"] = asm["_gendsll"];
var _VidExt_Init = Module["_VidExt_Init"] = asm["_VidExt_Init"];
var _main_read_screen = Module["_main_read_screen"] = asm["_main_read_screen"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _dummyvideo_FBGetFrameBufferInfo = Module["_dummyvideo_FBGetFrameBufferInfo"] = asm["_dummyvideo_FBGetFrameBufferInfo"];
var _exception_general = Module["_exception_general"] = asm["_exception_general"];
var _savestates_select_slot = Module["_savestates_select_slot"] = asm["_savestates_select_slot"];
var _genblez_out = Module["_genblez_out"] = asm["_genblez_out"];
var _write_rdramFB = Module["_write_rdramFB"] = asm["_write_rdramFB"];
var _r4300_reset_soft = Module["_r4300_reset_soft"] = asm["_r4300_reset_soft"];
var _write_pi_regs = Module["_write_pi_regs"] = asm["_write_pi_regs"];
var _ConfigSaveSection = Module["_ConfigSaveSection"] = asm["_ConfigSaveSection"];
var _event_sdl_keydown = Module["_event_sdl_keydown"] = asm["_event_sdl_keydown"];
var _Write_Zip64EndOfCentralDirectoryRecord = Module["_Write_Zip64EndOfCentralDirectoryRecord"] = asm["_Write_Zip64EndOfCentralDirectoryRecord"];
var _invalidate_r4300_cached_code = Module["_invalidate_r4300_cached_code"] = asm["_invalidate_r4300_cached_code"];
var _genbltzal = Module["_genbltzal"] = asm["_genbltzal"];
var _cheat_add_hacks = Module["_cheat_add_hacks"] = asm["_cheat_add_hacks"];
var _genbnel_idle = Module["_genbnel_idle"] = asm["_genbnel_idle"];
var _genbltzl_idle = Module["_genbltzl_idle"] = asm["_genbltzl_idle"];
var _genbc1t_out = Module["_genbc1t_out"] = asm["_genbc1t_out"];
var _open_rom = Module["_open_rom"] = asm["_open_rom"];
var _get_savestatepath = Module["_get_savestatepath"] = asm["_get_savestatepath"];
var _init_ai = Module["_init_ai"] = asm["_init_ai"];
var _gencvt_w_d = Module["_gencvt_w_d"] = asm["_gencvt_w_d"];
var _read_rdram_fb = Module["_read_rdram_fb"] = asm["_read_rdram_fb"];
var _open_fla_file = Module["_open_fla_file"] = asm["_open_fla_file"];
var _workqueue_shutdown = Module["_workqueue_shutdown"] = asm["_workqueue_shutdown"];
var _read_ai_regs = Module["_read_ai_regs"] = asm["_read_ai_regs"];
var _gencvt_w_s = Module["_gencvt_w_s"] = asm["_gencvt_w_s"];
var _get_savesrampath = Module["_get_savesrampath"] = asm["_get_savesrampath"];
var _gencvt_d_w = Module["_gencvt_d_w"] = asm["_gencvt_d_w"];
var _event_initialize = Module["_event_initialize"] = asm["_event_initialize"];
var _gencvt_d_s = Module["_gencvt_d_s"] = asm["_gencvt_d_s"];
var _genmtc0 = Module["_genmtc0"] = asm["_genmtc0"];
var _dummyvideo_ResizeVideoOutput = Module["_dummyvideo_ResizeVideoOutput"] = asm["_dummyvideo_ResizeVideoOutput"];
var _unzGetOffset = Module["_unzGetOffset"] = asm["_unzGetOffset"];
var _genceil_l_d = Module["_genceil_l_d"] = asm["_genceil_l_d"];
var _genbeq_out = Module["_genbeq_out"] = asm["_genbeq_out"];
var _VidExt_ListFullscreenModes = Module["_VidExt_ListFullscreenModes"] = asm["_VidExt_ListFullscreenModes"];
var _open_eep_file = Module["_open_eep_file"] = asm["_open_eep_file"];
var _genlbu = Module["_genlbu"] = asm["_genlbu"];
var _write_cart_rom = Module["_write_cart_rom"] = asm["_write_cart_rom"];
var _event_gameshark_active = Module["_event_gameshark_active"] = asm["_event_gameshark_active"];
var _gencvt_d_l = Module["_gencvt_d_l"] = asm["_gencvt_d_l"];
var _unzOpenCurrentFilePassword = Module["_unzOpenCurrentFilePassword"] = asm["_unzOpenCurrentFilePassword"];
var _eeprom_read_command = Module["_eeprom_read_command"] = asm["_eeprom_read_command"];
var _genc_lt_d = Module["_genc_lt_d"] = asm["_genc_lt_d"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _read_from_file = Module["_read_from_file"] = asm["_read_from_file"];
var _genbc1t = Module["_genbc1t"] = asm["_genbc1t"];
var _genc_lt_s = Module["_genc_lt_s"] = asm["_genc_lt_s"];
var _unzOpenCurrentFile3 = Module["_unzOpenCurrentFile3"] = asm["_unzOpenCurrentFile3"];
var _unzOpenCurrentFile2 = Module["_unzOpenCurrentFile2"] = asm["_unzOpenCurrentFile2"];
var _rumblepak_read_command = Module["_rumblepak_read_command"] = asm["_rumblepak_read_command"];
var _r4300_cp0_regs = Module["_r4300_cp0_regs"] = asm["_r4300_cp0_regs"];
var _genbltzl = Module["_genbltzl"] = asm["_genbltzl"];
var _save_mpk_file = Module["_save_mpk_file"] = asm["_save_mpk_file"];
var _genbc1f = Module["_genbc1f"] = asm["_genbc1f"];
var _TLB_refill_exception = Module["_TLB_refill_exception"] = asm["_TLB_refill_exception"];
var _genceil_w_s = Module["_genceil_w_s"] = asm["_genceil_w_s"];
var _genc_sf_d = Module["_genc_sf_d"] = asm["_genc_sf_d"];
var _close_fla_file = Module["_close_fla_file"] = asm["_close_fla_file"];
var _genbgtz = Module["_genbgtz"] = asm["_genbgtz"];
var _gendsub = Module["_gendsub"] = asm["_gendsub"];
var _genc_ngt_s = Module["_genc_ngt_s"] = asm["_genc_ngt_s"];
var _new_vi = Module["_new_vi"] = asm["_new_vi"];
var _genc_sf_s = Module["_genc_sf_s"] = asm["_genc_sf_s"];
var _ConfigGetParameter = Module["_ConfigGetParameter"] = asm["_ConfigGetParameter"];
var _add_interupt_event_count = Module["_add_interupt_event_count"] = asm["_add_interupt_event_count"];
var _main_speedup = Module["_main_speedup"] = asm["_main_speedup"];
var _sdl_scancode2keysym = Module["_sdl_scancode2keysym"] = asm["_sdl_scancode2keysym"];
var _init_si = Module["_init_si"] = asm["_init_si"];
var _dummyvideo_FBWrite = Module["_dummyvideo_FBWrite"] = asm["_dummyvideo_FBWrite"];
var _gencvt_s_w = Module["_gencvt_s_w"] = asm["_gencvt_s_w"];
var _gensdl = Module["_gensdl"] = asm["_gensdl"];
var _genlb = Module["_genlb"] = asm["_genlb"];
var _genswl = Module["_genswl"] = asm["_genswl"];
var _gencvt_s_d = Module["_gencvt_s_d"] = asm["_gencvt_s_d"];
var _get_event = Module["_get_event"] = asm["_get_event"];
var _genc_un_s = Module["_genc_un_s"] = asm["_genc_un_s"];
var _r4300_cp1_fcr0 = Module["_r4300_cp1_fcr0"] = asm["_r4300_cp1_fcr0"];
var _genll = Module["_genll"] = asm["_genll"];
var _gencvt_s_l = Module["_gencvt_s_l"] = asm["_gencvt_s_l"];
var _dummyrsp_PluginGetVersion = Module["_dummyrsp_PluginGetVersion"] = asm["_dummyrsp_PluginGetVersion"];
var _genxor = Module["_genxor"] = asm["_genxor"];
var _zipOpen2 = Module["_zipOpen2"] = asm["_zipOpen2"];
var _genneg_s = Module["_genneg_s"] = asm["_genneg_s"];
var _dummyvideo_ViWidthChanged = Module["_dummyvideo_ViWidthChanged"] = asm["_dummyvideo_ViWidthChanged"];
var _namefrompath = Module["_namefrompath"] = asm["_namefrompath"];
var _connect_si = Module["_connect_si"] = asm["_connect_si"];
var _protect_framebuffers = Module["_protect_framebuffers"] = asm["_protect_framebuffers"];
var _DebugBreakpointCommand = Module["_DebugBreakpointCommand"] = asm["_DebugBreakpointCommand"];
var _DebugSetCoreCompare = Module["_DebugSetCoreCompare"] = asm["_DebugSetCoreCompare"];
var _r4300_cp1_regs = Module["_r4300_cp1_regs"] = asm["_r4300_cp1_regs"];
var _zipCloseFileInZip = Module["_zipCloseFileInZip"] = asm["_zipCloseFileInZip"];
var _unzGetFilePos = Module["_unzGetFilePos"] = asm["_unzGetFilePos"];
var _VidExt_InFullscreenMode = Module["_VidExt_InFullscreenMode"] = asm["_VidExt_InFullscreenMode"];
var _get_r4300_emumode = Module["_get_r4300_emumode"] = asm["_get_r4300_emumode"];
var _dummyaudio_VolumeSetLevel = Module["_dummyaudio_VolumeSetLevel"] = asm["_dummyaudio_VolumeSetLevel"];
var _genlw = Module["_genlw"] = asm["_genlw"];
var _read_vi_regs = Module["_read_vi_regs"] = asm["_read_vi_regs"];
var _af_rtc_write_command = Module["_af_rtc_write_command"] = asm["_af_rtc_write_command"];
var _r4300_cp1_regs_simple = Module["_r4300_cp1_regs_simple"] = asm["_r4300_cp1_regs_simple"];
var _genlhu = Module["_genlhu"] = asm["_genlhu"];
var _save_eep_file = Module["_save_eep_file"] = asm["_save_eep_file"];
var _set_fpr_pointers = Module["_set_fpr_pointers"] = asm["_set_fpr_pointers"];
var _main_volume_mute = Module["_main_volume_mute"] = asm["_main_volume_mute"];
var _genblezl = Module["_genblezl"] = asm["_genblezl"];
var _string_to_int = Module["_string_to_int"] = asm["_string_to_int"];
var _dummyvideo_InitiateGFX = Module["_dummyvideo_InitiateGFX"] = asm["_dummyvideo_InitiateGFX"];
var _genbgezall_out = Module["_genbgezall_out"] = asm["_genbgezall_out"];
var _dummyaudio_AiLenChanged = Module["_dummyaudio_AiLenChanged"] = asm["_dummyaudio_AiLenChanged"];
var _read_rdramh = Module["_read_rdramh"] = asm["_read_rdramh"];
var _formatstr = Module["_formatstr"] = asm["_formatstr"];
var _genbltz = Module["_genbltz"] = asm["_genbltz"];
var _read_rdramd = Module["_read_rdramd"] = asm["_read_rdramd"];
var _CoreCheatEnabled = Module["_CoreCheatEnabled"] = asm["_CoreCheatEnabled"];
var _connect_pi = Module["_connect_pi"] = asm["_connect_pi"];
var _genc_ule_d = Module["_genc_ule_d"] = asm["_genc_ule_d"];
var _read_rdramb = Module["_read_rdramb"] = asm["_read_rdramb"];
var _main_check_inputs = Module["_main_check_inputs"] = asm["_main_check_inputs"];
var _close_eep_file = Module["_close_eep_file"] = asm["_close_eep_file"];
var _ConfigGetUserCachePath = Module["_ConfigGetUserCachePath"] = asm["_ConfigGetUserCachePath"];
var _fill_fopen_filefunc = Module["_fill_fopen_filefunc"] = asm["_fill_fopen_filefunc"];
var _dummyaudio_VolumeMute = Module["_dummyaudio_VolumeMute"] = asm["_dummyaudio_VolumeMute"];
var _CoreGetAPIVersions = Module["_CoreGetAPIVersions"] = asm["_CoreGetAPIVersions"];
var _gensw = Module["_gensw"] = asm["_gensw"];
var _egcvip_get_input = Module["_egcvip_get_input"] = asm["_egcvip_get_input"];
var _md5_append = Module["_md5_append"] = asm["_md5_append"];
var _gensubu = Module["_gensubu"] = asm["_gensubu"];
var _main_core_state_set = Module["_main_core_state_set"] = asm["_main_core_state_set"];
var _event_sdl_keyup = Module["_event_sdl_keyup"] = asm["_event_sdl_keyup"];
var _write_ai_regs = Module["_write_ai_regs"] = asm["_write_ai_regs"];
var _gensh = Module["_gensh"] = asm["_gensh"];
var _set_audio_format_via_audio_plugin = Module["_set_audio_format_via_audio_plugin"] = asm["_set_audio_format_via_audio_plugin"];
var _unzOpenCurrentFile = Module["_unzOpenCurrentFile"] = asm["_unzOpenCurrentFile"];
var _gensd = Module["_gensd"] = asm["_gensd"];
var _init_fb = Module["_init_fb"] = asm["_init_fb"];
var _genbeql_out = Module["_genbeql_out"] = asm["_genbeql_out"];
var _main_toggle_pause = Module["_main_toggle_pause"] = asm["_main_toggle_pause"];
var _imagestring = Module["_imagestring"] = asm["_imagestring"];
var _gensc = Module["_gensc"] = asm["_gensc"];
var _write_flashram_command = Module["_write_flashram_command"] = asm["_write_flashram_command"];
var _update_x86_rounding_mode = Module["_update_x86_rounding_mode"] = asm["_update_x86_rounding_mode"];
var _gendsrav = Module["_gendsrav"] = asm["_gendsrav"];
var _unzGetCurrentFileInfo = Module["_unzGetCurrentFileInfo"] = asm["_unzGetCurrentFileInfo"];
var _VidExt_ToggleFullScreen = Module["_VidExt_ToggleFullScreen"] = asm["_VidExt_ToggleFullScreen"];
var _unzGoToFilePos64 = Module["_unzGoToFilePos64"] = asm["_unzGoToFilePos64"];
var _gendmultu = Module["_gendmultu"] = asm["_gendmultu"];
var _zipOpenNewFileInZip4 = Module["_zipOpenNewFileInZip4"] = asm["_zipOpenNewFileInZip4"];
var _zipOpenNewFileInZip3 = Module["_zipOpenNewFileInZip3"] = asm["_zipOpenNewFileInZip3"];
var _init_pi = Module["_init_pi"] = asm["_init_pi"];
var _unzOpen = Module["_unzOpen"] = asm["_unzOpen"];
var _r4300_pc = Module["_r4300_pc"] = asm["_r4300_pc"];
var _genbltzal_out = Module["_genbltzal_out"] = asm["_genbltzal_out"];
var _DebugBreakpointLookup = Module["_DebugBreakpointLookup"] = asm["_DebugBreakpointLookup"];
var _recompile_block = Module["_recompile_block"] = asm["_recompile_block"];
var _genbltzall_idle = Module["_genbltzall_idle"] = asm["_genbltzall_idle"];
var _SetDebugCallback = Module["_SetDebugCallback"] = asm["_SetDebugCallback"];
var _gentrunc_l_d = Module["_gentrunc_l_d"] = asm["_gentrunc_l_d"];
var _dummyaudio_ProcessAList = Module["_dummyaudio_ProcessAList"] = asm["_dummyaudio_ProcessAList"];
var _DebugMemWrite16 = Module["_DebugMemWrite16"] = asm["_DebugMemWrite16"];
var _gennotcompiled = Module["_gennotcompiled"] = asm["_gennotcompiled"];
var _genor = Module["_genor"] = asm["_genor"];
var _main_speeddown = Module["_main_speeddown"] = asm["_main_speeddown"];
var _write_vi_regs = Module["_write_vi_regs"] = asm["_write_vi_regs"];
var _gendsra = Module["_gendsra"] = asm["_gendsra"];
var _gendsrl = Module["_gendsrl"] = asm["_gendsrl"];
var _zipOpenNewFileInZip4_64 = Module["_zipOpenNewFileInZip4_64"] = asm["_zipOpenNewFileInZip4_64"];
var _gentrunc_l_s = Module["_gentrunc_l_s"] = asm["_gentrunc_l_s"];
var _dummyaudio_VolumeGetString = Module["_dummyaudio_VolumeGetString"] = asm["_dummyaudio_VolumeGetString"];
var _event_set_gameshark = Module["_event_set_gameshark"] = asm["_event_set_gameshark"];
var _gennop = Module["_gennop"] = asm["_gennop"];
var _format_eeprom = Module["_format_eeprom"] = asm["_format_eeprom"];
var _init_flashram = Module["_init_flashram"] = asm["_init_flashram"];
var _dummyaudio_VolumeGetLevel = Module["_dummyaudio_VolumeGetLevel"] = asm["_dummyaudio_VolumeGetLevel"];
var _gendmtc1 = Module["_gendmtc1"] = asm["_gendmtc1"];
var _ConfigGetParameterType = Module["_ConfigGetParameterType"] = asm["_ConfigGetParameterType"];
var _call_ztell64 = Module["_call_ztell64"] = asm["_call_ztell64"];
var _savestates_deinit = Module["_savestates_deinit"] = asm["_savestates_deinit"];
var _genddivu = Module["_genddivu"] = asm["_genddivu"];
var _VidExt_SetCaption = Module["_VidExt_SetCaption"] = asm["_VidExt_SetCaption"];
var _read_si_regs = Module["_read_si_regs"] = asm["_read_si_regs"];
var _genc_ngle_d = Module["_genc_ngle_d"] = asm["_genc_ngle_d"];
var _dummyaudio_RomOpen = Module["_dummyaudio_RomOpen"] = asm["_dummyaudio_RomOpen"];
var _main_volume_down = Module["_main_volume_down"] = asm["_main_volume_down"];
var _zipCloseFileInZipRaw64 = Module["_zipCloseFileInZipRaw64"] = asm["_zipCloseFileInZipRaw64"];
var _r4300_reset_hard = Module["_r4300_reset_hard"] = asm["_r4300_reset_hard"];
var _DebugMemGetPointer = Module["_DebugMemGetPointer"] = asm["_DebugMemGetPointer"];
var _save_eventqueue_infos = Module["_save_eventqueue_infos"] = asm["_save_eventqueue_infos"];
var _genc_ngle_s = Module["_genc_ngle_s"] = asm["_genc_ngle_s"];
var _ConfigListParameters = Module["_ConfigListParameters"] = asm["_ConfigListParameters"];
var _savestates_set_job = Module["_savestates_set_job"] = asm["_savestates_set_job"];
var _genreserved = Module["_genreserved"] = asm["_genreserved"];
var _write_rdram_fb = Module["_write_rdram_fb"] = asm["_write_rdram_fb"];
var _dma_read_sram = Module["_dma_read_sram"] = asm["_dma_read_sram"];
var _gendsrl32 = Module["_gendsrl32"] = asm["_gendsrl32"];
var _gendaddi = Module["_gendaddi"] = asm["_gendaddi"];
var _genj_out = Module["_genj_out"] = asm["_genj_out"];
var _gendaddu = Module["_gendaddu"] = asm["_gendaddu"];
var _DebugSetRunState = Module["_DebugSetRunState"] = asm["_DebugSetRunState"];
var _read_rdram_regs = Module["_read_rdram_regs"] = asm["_read_rdram_regs"];
var _genc_ule_s = Module["_genc_ule_s"] = asm["_genc_ule_s"];
var _init_blocks = Module["_init_blocks"] = asm["_init_blocks"];
var _LoadCentralDirectoryRecord = Module["_LoadCentralDirectoryRecord"] = asm["_LoadCentralDirectoryRecord"];
var _main_state_load = Module["_main_state_load"] = asm["_main_state_load"];
var _ConfigGetParamFloat = Module["_ConfigGetParamFloat"] = asm["_ConfigGetParamFloat"];
var _ConfigListSections = Module["_ConfigListSections"] = asm["_ConfigListSections"];
var _write_rdramFBb = Module["_write_rdramFBb"] = asm["_write_rdramFBb"];
var _dummyvideo_ShowCFB = Module["_dummyvideo_ShowCFB"] = asm["_dummyvideo_ShowCFB"];
var _cheat_delete_all = Module["_cheat_delete_all"] = asm["_cheat_delete_all"];
var _zipOpen = Module["_zipOpen"] = asm["_zipOpen"];
var _genori = Module["_genori"] = asm["_genori"];
var _genbc1tl_out = Module["_genbc1tl_out"] = asm["_genbc1tl_out"];
var _clear_rcp_interrupt = Module["_clear_rcp_interrupt"] = asm["_clear_rcp_interrupt"];
var _osal_get_shared_filepath = Module["_osal_get_shared_filepath"] = asm["_osal_get_shared_filepath"];
var _VidExt_SetVideoMode = Module["_VidExt_SetVideoMode"] = asm["_VidExt_SetVideoMode"];
var _process_controller_command = Module["_process_controller_command"] = asm["_process_controller_command"];
var _gentlbp = Module["_gentlbp"] = asm["_gentlbp"];
var _gentlbr = Module["_gentlbr"] = asm["_gentlbr"];
var _force_detected_rdram_size_hack = Module["_force_detected_rdram_size_hack"] = asm["_force_detected_rdram_size_hack"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _save_fla_file = Module["_save_fla_file"] = asm["_save_fla_file"];
var _init_pif = Module["_init_pif"] = asm["_init_pif"];
var _zipOpen2_64 = Module["_zipOpen2_64"] = asm["_zipOpen2_64"];
var _eeprom_save = Module["_eeprom_save"] = asm["_eeprom_save"];
var _egcvip_is_connected = Module["_egcvip_is_connected"] = asm["_egcvip_is_connected"];
var _CoreGetRomSettings = Module["_CoreGetRomSettings"] = asm["_CoreGetRomSettings"];
var _read_pif_ram = Module["_read_pif_ram"] = asm["_read_pif_ram"];
var _unzGetGlobalInfo = Module["_unzGetGlobalInfo"] = asm["_unzGetGlobalInfo"];
var _genc_eq_d = Module["_genc_eq_d"] = asm["_genc_eq_d"];
var _free_all_registers = Module["_free_all_registers"] = asm["_free_all_registers"];
var _DebuggerCallback = Module["_DebuggerCallback"] = asm["_DebuggerCallback"];
var _ai_end_of_dma_event = Module["_ai_end_of_dma_event"] = asm["_ai_end_of_dma_event"];
var _flashram_save = Module["_flashram_save"] = asm["_flashram_save"];
var _main_reset = Module["_main_reset"] = asm["_main_reset"];
var _gensb = Module["_gensb"] = asm["_gensb"];
var _genjal_out = Module["_genjal_out"] = asm["_genjal_out"];
var _unzSetOffset64 = Module["_unzSetOffset64"] = asm["_unzSetOffset64"];
var _r4300_mult_hi = Module["_r4300_mult_hi"] = asm["_r4300_mult_hi"];
var _dma_write_sram = Module["_dma_write_sram"] = asm["_dma_write_sram"];
var _write_rsp_regs2 = Module["_write_rsp_regs2"] = asm["_write_rsp_regs2"];
var _genneg_d = Module["_genneg_d"] = asm["_genneg_d"];
var _genbltz_idle = Module["_genbltz_idle"] = asm["_genbltz_idle"];
var _VidExt_VideoRunning = Module["_VidExt_VideoRunning"] = asm["_VidExt_VideoRunning"];
var _genswc1 = Module["_genswc1"] = asm["_genswc1"];
var _rumblepak_write_command = Module["_rumblepak_write_command"] = asm["_rumblepak_write_command"];
var _genbgezal_out = Module["_genbgezal_out"] = asm["_genbgezal_out"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _DebugDecodeOp = Module["_DebugDecodeOp"] = asm["_DebugDecodeOp"];
var _event_set_core_defaults = Module["_event_set_core_defaults"] = asm["_event_set_core_defaults"];
var _ini_search_by_crc = Module["_ini_search_by_crc"] = asm["_ini_search_by_crc"];
var _unzGetGlobalComment = Module["_unzGetGlobalComment"] = asm["_unzGetGlobalComment"];
var _genbc1tl_idle = Module["_genbc1tl_idle"] = asm["_genbc1tl_idle"];
var _genbgezall = Module["_genbgezall"] = asm["_genbgezall"];
var _genmult = Module["_genmult"] = asm["_genmult"];
var _dummyaudio_SetSpeedFactor = Module["_dummyaudio_SetSpeedFactor"] = asm["_dummyaudio_SetSpeedFactor"];
var _genbgezal_idle = Module["_genbgezal_idle"] = asm["_genbgezal_idle"];
var _dummyvideo_SetRenderingCallback = Module["_dummyvideo_SetRenderingCallback"] = asm["_dummyvideo_SetRenderingCallback"];
var _workqueue_init = Module["_workqueue_init"] = asm["_workqueue_init"];
var _dummyinput_RomOpen = Module["_dummyinput_RomOpen"] = asm["_dummyinput_RomOpen"];
var _dummyvideo_PluginGetVersion = Module["_dummyvideo_PluginGetVersion"] = asm["_dummyvideo_PluginGetVersion"];
var _init_cache = Module["_init_cache"] = asm["_init_cache"];
var _gensyscall = Module["_gensyscall"] = asm["_gensyscall"];
var _gendmfc1 = Module["_gendmfc1"] = asm["_gendmfc1"];
var _genblez = Module["_genblez"] = asm["_genblez"];
var _CoreDetachPlugin = Module["_CoreDetachPlugin"] = asm["_CoreDetachPlugin"];
var _dummyvideo_MoveScreen = Module["_dummyvideo_MoveScreen"] = asm["_dummyvideo_MoveScreen"];
var _genc_ueq_s = Module["_genc_ueq_s"] = asm["_genc_ueq_s"];
var _cp0_update_count = Module["_cp0_update_count"] = asm["_cp0_update_count"];
var _r4300_cp1_fcr31 = Module["_r4300_cp1_fcr31"] = asm["_r4300_cp1_fcr31"];
var _ConfigSetDefaultFloat = Module["_ConfigSetDefaultFloat"] = asm["_ConfigSetDefaultFloat"];
var _unzClose = Module["_unzClose"] = asm["_unzClose"];
var _genc_ueq_d = Module["_genc_ueq_d"] = asm["_genc_ueq_d"];
var _write_to_file = Module["_write_to_file"] = asm["_write_to_file"];
var _dummyaudio_VolumeDown = Module["_dummyaudio_VolumeDown"] = asm["_dummyaudio_VolumeDown"];
var _genbgezl_out = Module["_genbgezl_out"] = asm["_genbgezl_out"];
var _raise_rcp_interrupt = Module["_raise_rcp_interrupt"] = asm["_raise_rcp_interrupt"];
var _game_controller_get_input = Module["_game_controller_get_input"] = asm["_game_controller_get_input"];
var _check_cop1_unusable = Module["_check_cop1_unusable"] = asm["_check_cop1_unusable"];
var _DebugGetState = Module["_DebugGetState"] = asm["_DebugGetState"];
var _genbgezal = Module["_genbgezal"] = asm["_genbgezal"];
var _mempak_read_command = Module["_mempak_read_command"] = asm["_mempak_read_command"];
var _main_message = Module["_main_message"] = asm["_main_message"];
var _tlb_unmap = Module["_tlb_unmap"] = asm["_tlb_unmap"];
var _genxori = Module["_genxori"] = asm["_genxori"];
var _r4300_llbit = Module["_r4300_llbit"] = asm["_r4300_llbit"];
var _genc_le_d = Module["_genc_le_d"] = asm["_genc_le_d"];
var _gendadd = Module["_gendadd"] = asm["_gendadd"];
var _dummyinput_ReadController = Module["_dummyinput_ReadController"] = asm["_dummyinput_ReadController"];
var _unprotect_framebuffers = Module["_unprotect_framebuffers"] = asm["_unprotect_framebuffers"];
var _genc_le_s = Module["_genc_le_s"] = asm["_genc_le_s"];
var _DebugMemRead32 = Module["_DebugMemRead32"] = asm["_DebugMemRead32"];
var _zipOpenNewFileInZip2 = Module["_zipOpenNewFileInZip2"] = asm["_zipOpenNewFileInZip2"];
var _init_assembler = Module["_init_assembler"] = asm["_init_assembler"];
var _gendmult = Module["_gendmult"] = asm["_gendmult"];
var _ConfigGetUserDataPath = Module["_ConfigGetUserDataPath"] = asm["_ConfigGetUserDataPath"];
var _write_rdram = Module["_write_rdram"] = asm["_write_rdram"];
var _gensub_s = Module["_gensub_s"] = asm["_gensub_s"];
var _savestates_inc_slot = Module["_savestates_inc_slot"] = asm["_savestates_inc_slot"];
var _genandi = Module["_genandi"] = asm["_genandi"];
var _save_sra_file = Module["_save_sra_file"] = asm["_save_sra_file"];
var _write_rsp_mem = Module["_write_rsp_mem"] = asm["_write_rsp_mem"];
var _gensub_d = Module["_gensub_d"] = asm["_gensub_d"];
var _init_cart_rom = Module["_init_cart_rom"] = asm["_init_cart_rom"];
var _DebugMemGetRecompInfo = Module["_DebugMemGetRecompInfo"] = asm["_DebugMemGetRecompInfo"];
var _PluginGetVersion = Module["_PluginGetVersion"] = asm["_PluginGetVersion"];
var _osal_get_user_datapath = Module["_osal_get_user_datapath"] = asm["_osal_get_user_datapath"];
var _Write_Zip64EndOfCentralDirectoryLocator = Module["_Write_Zip64EndOfCentralDirectoryLocator"] = asm["_Write_Zip64EndOfCentralDirectoryLocator"];
var _genceil_w_d = Module["_genceil_w_d"] = asm["_genceil_w_d"];
var _unzOpen64 = Module["_unzOpen64"] = asm["_unzOpen64"];
var _update_pif_write = Module["_update_pif_write"] = asm["_update_pif_write"];
var _write_ri_regs = Module["_write_ri_regs"] = asm["_write_ri_regs"];
var _init_interupt = Module["_init_interupt"] = asm["_init_interupt"];
var _gensdc1 = Module["_gensdc1"] = asm["_gensdc1"];
var _CoreShutdown = Module["_CoreShutdown"] = asm["_CoreShutdown"];
var _dummyvideo_ProcessRDPList = Module["_dummyvideo_ProcessRDPList"] = asm["_dummyvideo_ProcessRDPList"];
var _unzGetCurrentFileZStreamPos64 = Module["_unzGetCurrentFileZStreamPos64"] = asm["_unzGetCurrentFileZStreamPos64"];
var _genbltz_out = Module["_genbltz_out"] = asm["_genbltz_out"];
var _gensync = Module["_gensync"] = asm["_gensync"];
var _r4300_mult_lo = Module["_r4300_mult_lo"] = asm["_r4300_mult_lo"];
var _af_rtc_read_command = Module["_af_rtc_read_command"] = asm["_af_rtc_read_command"];
var _unzGetFilePos64 = Module["_unzGetFilePos64"] = asm["_unzGetFilePos64"];
var _gendsllv = Module["_gendsllv"] = asm["_gendsllv"];
var _remove_event = Module["_remove_event"] = asm["_remove_event"];
var _main_volume_get_level = Module["_main_volume_get_level"] = asm["_main_volume_get_level"];
var _free_assembler = Module["_free_assembler"] = asm["_free_assembler"];
var _main_run = Module["_main_run"] = asm["_main_run"];
var _genldc1 = Module["_genldc1"] = asm["_genldc1"];
var _genbgez_out = Module["_genbgez_out"] = asm["_genbgez_out"];
var _genmov_d = Module["_genmov_d"] = asm["_genmov_d"];
var _genc_ole_d = Module["_genc_ole_d"] = asm["_genc_ole_d"];
var _init_rdram = Module["_init_rdram"] = asm["_init_rdram"];
var _update_pif_read = Module["_update_pif_read"] = asm["_update_pif_read"];
var _genmov_s = Module["_genmov_s"] = asm["_genmov_s"];
var _genc_ole_s = Module["_genc_ole_s"] = asm["_genc_ole_s"];
var _read_rsp_regs2 = Module["_read_rsp_regs2"] = asm["_read_rsp_regs2"];
var _pure_interpreter = Module["_pure_interpreter"] = asm["_pure_interpreter"];
var _gensrlv = Module["_gensrlv"] = asm["_gensrlv"];
var _genswr = Module["_genswr"] = asm["_genswr"];
var _unzOpen2_64 = Module["_unzOpen2_64"] = asm["_unzOpen2_64"];
var _genbne_out = Module["_genbne_out"] = asm["_genbne_out"];
var _dma_write_flashram = Module["_dma_write_flashram"] = asm["_dma_write_flashram"];
var _savestates_init = Module["_savestates_init"] = asm["_savestates_init"];
var _dummyvideo_ProcessDList = Module["_dummyvideo_ProcessDList"] = asm["_dummyvideo_ProcessDList"];
var _cheat_apply_cheats = Module["_cheat_apply_cheats"] = asm["_cheat_apply_cheats"];
var _CoreStartup = Module["_CoreStartup"] = asm["_CoreStartup"];
var _genlwr = Module["_genlwr"] = asm["_genlwr"];
var _gentrunc_w_d = Module["_gentrunc_w_d"] = asm["_gentrunc_w_d"];
var _genlwu = Module["_genlwu"] = asm["_genlwu"];
var _StateChanged = Module["_StateChanged"] = asm["_StateChanged"];
var _genlwl = Module["_genlwl"] = asm["_genlwl"];
var _unzReadCurrentFile = Module["_unzReadCurrentFile"] = asm["_unzReadCurrentFile"];
var _gentrunc_w_s = Module["_gentrunc_w_s"] = asm["_gentrunc_w_s"];
var _genblez_idle = Module["_genblez_idle"] = asm["_genblez_idle"];
var _trim = Module["_trim"] = asm["_trim"];
var _af_rtc_get_time = Module["_af_rtc_get_time"] = asm["_af_rtc_get_time"];
var _osal_get_user_configpath = Module["_osal_get_user_configpath"] = asm["_osal_get_user_configpath"];
var _format_sram = Module["_format_sram"] = asm["_format_sram"];
var _ConfigHasUnsavedChanges = Module["_ConfigHasUnsavedChanges"] = asm["_ConfigHasUnsavedChanges"];
var _call_zseek64 = Module["_call_zseek64"] = asm["_call_zseek64"];
var _ConfigGetParamBool = Module["_ConfigGetParamBool"] = asm["_ConfigGetParamBool"];
var _gendsra32 = Module["_gendsra32"] = asm["_gendsra32"];
var _genjal_idle = Module["_genjal_idle"] = asm["_genjal_idle"];
var _connect_rdram = Module["_connect_rdram"] = asm["_connect_rdram"];
var _dummyinput_PluginGetVersion = Module["_dummyinput_PluginGetVersion"] = asm["_dummyinput_PluginGetVersion"];
var _unzGetOffset64 = Module["_unzGetOffset64"] = asm["_unzGetOffset64"];
var _DebugGetCPUDataPtr = Module["_DebugGetCPUDataPtr"] = asm["_DebugGetCPUDataPtr"];
var _sra_file_ptr = Module["_sra_file_ptr"] = asm["_sra_file_ptr"];
var _zipOpenNewFileInZip2_64 = Module["_zipOpenNewFileInZip2_64"] = asm["_zipOpenNewFileInZip2_64"];
var _parse_hex = Module["_parse_hex"] = asm["_parse_hex"];
var _genbgtzl = Module["_genbgtzl"] = asm["_genbgtzl"];
var _genbne = Module["_genbne"] = asm["_genbne"];
var _generet = Module["_generet"] = asm["_generet"];
var _genbltzall_out = Module["_genbltzall_out"] = asm["_genbltzall_out"];
var _genddiv = Module["_genddiv"] = asm["_genddiv"];
var _genc_seq_s = Module["_genc_seq_s"] = asm["_genc_seq_s"];
var _main_state_inc_slot = Module["_main_state_inc_slot"] = asm["_main_state_inc_slot"];
var _genbgtzl_idle = Module["_genbgtzl_idle"] = asm["_genbgtzl_idle"];
var _osal_get_user_cachepath = Module["_osal_get_user_cachepath"] = asm["_osal_get_user_cachepath"];
var _rsp_interrupt_event = Module["_rsp_interrupt_event"] = asm["_rsp_interrupt_event"];
var _load_eventqueue_infos = Module["_load_eventqueue_infos"] = asm["_load_eventqueue_infos"];
var _CoreCompareDataSync = Module["_CoreCompareDataSync"] = asm["_CoreCompareDataSync"];
var _genc_seq_d = Module["_genc_seq_d"] = asm["_genc_seq_d"];
var _write_rdramFBh = Module["_write_rdramFBh"] = asm["_write_rdramFBh"];
var _write_rdramFBd = Module["_write_rdramFBd"] = asm["_write_rdramFBd"];
var _unzGetGlobalInfo64 = Module["_unzGetGlobalInfo64"] = asm["_unzGetGlobalInfo64"];
var _genbc1f_out = Module["_genbc1f_out"] = asm["_genbc1f_out"];
var _genc_olt_s = Module["_genc_olt_s"] = asm["_genc_olt_s"];
var _add_interupt_event = Module["_add_interupt_event"] = asm["_add_interupt_event"];
var _gennor = Module["_gennor"] = asm["_gennor"];
var _write_rdram_regs = Module["_write_rdram_regs"] = asm["_write_rdram_regs"];
var _genmfhi = Module["_genmfhi"] = asm["_genmfhi"];
var _TakeScreenshot = Module["_TakeScreenshot"] = asm["_TakeScreenshot"];
var _genc_olt_d = Module["_genc_olt_d"] = asm["_genc_olt_d"];
var _new_frame = Module["_new_frame"] = asm["_new_frame"];
var _fill_fopen64_filefunc = Module["_fill_fopen64_filefunc"] = asm["_fill_fopen64_filefunc"];
var _genjal = Module["_genjal"] = asm["_genjal"];
var _unzeof = Module["_unzeof"] = asm["_unzeof"];
var _unzLocateFile = Module["_unzLocateFile"] = asm["_unzLocateFile"];
var _genmultu = Module["_genmultu"] = asm["_genmultu"];
var _fill_zlib_filefunc64_32_def_from_filefunc32 = Module["_fill_zlib_filefunc64_32_def_from_filefunc32"] = asm["_fill_zlib_filefunc64_32_def_from_filefunc32"];
var _genfloor_l_d = Module["_genfloor_l_d"] = asm["_genfloor_l_d"];
var _sram_save = Module["_sram_save"] = asm["_sram_save"];
var _genbnel_out = Module["_genbnel_out"] = asm["_genbnel_out"];
var _genbc1tl = Module["_genbc1tl"] = asm["_genbc1tl"];
var _CoreErrorMessage = Module["_CoreErrorMessage"] = asm["_CoreErrorMessage"];
var _Write_LocalFileHeader = Module["_Write_LocalFileHeader"] = asm["_Write_LocalFileHeader"];
var _signal_rcp_interrupt = Module["_signal_rcp_interrupt"] = asm["_signal_rcp_interrupt"];
var _write_rdram_dram = Module["_write_rdram_dram"] = asm["_write_rdram_dram"];
var _gensllv = Module["_gensllv"] = asm["_gensllv"];
var _genfloor_l_s = Module["_genfloor_l_s"] = asm["_genfloor_l_s"];
var _unztell64 = Module["_unztell64"] = asm["_unztell64"];
var _genbgezl_idle = Module["_genbgezl_idle"] = asm["_genbgezl_idle"];
var _ConfigGetUserConfigPath = Module["_ConfigGetUserConfigPath"] = asm["_ConfigGetUserConfigPath"];
var _genni = Module["_genni"] = asm["_genni"];
var _genmul_s = Module["_genmul_s"] = asm["_genmul_s"];
var _to_little_endian_buffer = Module["_to_little_endian_buffer"] = asm["_to_little_endian_buffer"];
var _zipOpenNewFileInZip = Module["_zipOpenNewFileInZip"] = asm["_zipOpenNewFileInZip"];
var _Write_GlobalComment = Module["_Write_GlobalComment"] = asm["_Write_GlobalComment"];
var _init_memory = Module["_init_memory"] = asm["_init_memory"];
var _check_interupt = Module["_check_interupt"] = asm["_check_interupt"];
var _cheat_init = Module["_cheat_init"] = asm["_cheat_init"];
var _genmul_d = Module["_genmul_d"] = asm["_genmul_d"];

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function _png_set_longjmp_fn__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _png_set_longjmp_fn(p0|0,p1|0,p2|0)|0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function _free__wrapper(p0) {
 p0 = p0|0; _free(p0|0);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function _png_destroy_write_struct__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _png_destroy_write_struct(p0|0,p1|0);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b4(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(4);
}
function _png_set_IHDR__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _png_set_IHDR(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _png_create_info_struct__wrapper(p0) {
 p0 = p0|0; return _png_create_info_struct(p0|0)|0;
}
function _malloc__wrapper(p0) {
 p0 = p0|0; return _malloc(p0|0)|0;
}
function _fclose__wrapper(p0) {
 p0 = p0|0; return _fclose(p0|0)|0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function _png_set_rows__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _png_set_rows(p0|0,p1|0,p2|0);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function _png_create_write_struct__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _png_create_write_struct(p0|0,p1|0,p2|0,p3|0)|0;
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function _fopen__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}
function _png_set_write_fn__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _png_set_write_fn(p0|0,p1|0,p2|0,p3|0);
}
function _png_write_png__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _png_write_png(p0|0,p1|0,p2|0,p3|0);
}

var SIDE_FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,asm['_read_data_from_zip'],asm['_read_data_from_file'],b0,asm['_write_data_to_zip'],asm['_write_data_to_file'],b0,b0,asm['_read_rdram_dram'],b0,asm['_read_rdram_fb'],b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,asm['_read_rdram_regs'],b0,asm['_read_rsp_mem'],b0,asm['_read_rsp_regs'],b0,asm['_read_rsp_regs2'],b0,asm['_read_dpc_regs'],b0,asm['_read_dps_regs'],b0,asm['_read_mi_regs']
,b0,asm['_read_vi_regs'],b0,asm['_read_ai_regs'],b0,asm['_read_pi_regs'],b0,asm['_read_ri_regs'],b0,asm['_read_si_regs'],b0,asm['_read_dd_regs'],b0,asm['_read_flashram_status'],b0,asm['_read_cart_rom'],b0,asm['_read_pif_ram'],b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,asm['_fopen_file_func'],b0,b0,b0,b0,b0,b0,asm['_fopen64_file_func'],b0,b0,b0,b0,b0,b0,b0,b0,_png_set_longjmp_fn__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var SIDE_FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,asm['_dummyinput_RomOpen'],b1,b1,b1,b1,b1,b1,b1,b1,asm['_dummyaudio_RomOpen'],b1,b1,b1,asm['_dummyaudio_VolumeGetLevel'],b1,b1,asm['_dummyaudio_VolumeGetString'],b1
,b1,b1,b1,b1,b1,b1,asm['_dummyvideo_RomOpen'],b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var SIDE_FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,asm['_dummyinput_InitiateControllers'],b2,b2,b2,b2,b2,b2,asm['_dummyaudio_AiDacrateChanged'],b2,b2,b2,b2,b2,asm['_dummyaudio_SetSpeedFactor'],b2,b2,b2,asm['_dummyaudio_VolumeSetLevel'],b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,asm['_dummyvideo_SetRenderingCallback'],b2,asm['_dummyvideo_FBRead'],b2,asm['_dummyvideo_FBGetFrameBufferInfo'],b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,asm['_video_plugin_render_callback'],b2,b2,b2,b2
,b2,b2,asm['_save_mpk_file'],asm['_save_eep_file'],asm['_save_fla_file'],asm['_save_sra_file'],b2,b2,b2,asm['_savestates_save_m64p_work'],b2,b2,b2,asm['_workqueue_dismiss'],b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,asm['_backcompat_videoRenderCallback'],asm['_backcompat_setRenderCallbackIntercept'],b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,asm['__ZL15user_flush_dataP14png_struct_def'],b2,b2,b2,b2,_free__wrapper,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var SIDE_FUNCTION_TABLE_vii = [b3,b3,b3,asm['_dummyrsp_InitiateRSP'],b3,b3,asm['_dummyinput_ControllerCommand'],asm['_dummyinput_GetKeys'],b3,asm['_dummyinput_ReadController'],b3,b3,asm['_dummyinput_SDL_KeyDown'],asm['_dummyinput_SDL_KeyUp'],b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,asm['_dummyvideo_MoveScreen'],b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,asm['_dummyvideo_ResizeVideoOutput'],b3,asm['_dummyvideo_FBWrite'],b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,asm['_rvip_rumble'],b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,asm['__ZL15mupen_png_errorP14png_struct_defPKc'],asm['__ZL14mupen_png_warnP14png_struct_defPKc'],b3,b3,_png_destroy_write_struct__wrapper,b3,_emscripten_longjmp__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var SIDE_FUNCTION_TABLE_viiiiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_png_set_IHDR__wrapper,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var SIDE_FUNCTION_TABLE_ii = [b5,b5,asm['_dummyrsp_DoRspCycles'],b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,asm['_dummyaudio_InitiateAudio'],b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,asm['_dummyvideo_InitiateGFX'],b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,asm['_get_time_using_C_localtime'],b5
,asm['_egcvip_get_input'],b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,asm['_workqueue_thread_handler'],b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_png_create_info_struct__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,_malloc__wrapper,b5,b5,b5,_fclose__wrapper,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var SIDE_FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,asm['_set_audio_format_via_audio_plugin'],asm['_push_audio_samples_via_audio_plugin'],b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,asm['_DebugMessage'],b6,b6,b6,b6,b6,b6,asm['__ZL15user_write_dataP14png_struct_defPhj'],b6,b6,b6,_png_set_rows__wrapper,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var SIDE_FUNCTION_TABLE_v = [b7,b7,b7,b7,asm['_dummyrsp_RomClosed'],b7,b7,b7,b7,b7,asm['_dummyinput_RomClosed'],b7,b7,b7,b7,b7,asm['_dummyaudio_AiLenChanged'],b7,asm['_dummyaudio_ProcessAList'],asm['_dummyaudio_RomClosed'],b7,b7,asm['_dummyaudio_VolumeUp'],asm['_dummyaudio_VolumeDown'],b7,b7,asm['_dummyaudio_VolumeMute'],b7,b7
,asm['_dummyvideo_ChangeWindow'],b7,b7,asm['_dummyvideo_ProcessDList'],asm['_dummyvideo_ProcessRDPList'],asm['_dummyvideo_RomClosed'],b7,asm['_dummyvideo_ShowCFB'],asm['_dummyvideo_UpdateScreen'],asm['_dummyvideo_ViStatusChanged'],asm['_dummyvideo_ViWidthChanged'],b7,b7,b7,b7,b7,b7,asm['_LB'],asm['_LBU'],asm['_LH'],asm['_LHU'],asm['_LW'],asm['_LWL'],asm['_LWR'],asm['_SB'],asm['_SH'],asm['_SW'],asm['_SWL'],asm['_SWR'],asm['_LD']
,asm['_LDL'],asm['_LDR'],asm['_LL'],asm['_LWU'],asm['_SC'],asm['_SD'],asm['_SDL'],asm['_SDR'],asm['_SYNC'],asm['_ADDI'],asm['_ADDIU'],asm['_SLTI'],asm['_SLTIU'],asm['_ANDI'],asm['_ORI'],asm['_XORI'],asm['_LUI'],asm['_DADDI'],asm['_DADDIU'],asm['_ADD'],asm['_ADDU'],asm['_SUB'],asm['_SUBU'],asm['_SLT'],asm['_SLTU'],asm['_AND'],asm['_OR'],asm['_XOR'],asm['_NOR'],asm['_DADD']
,asm['_DADDU'],asm['_DSUB'],asm['_DSUBU'],asm['_MULT'],asm['_MULTU'],asm['_DIV'],asm['_DIVU'],asm['_MFHI'],asm['_MTHI'],asm['_MFLO'],asm['_MTLO'],asm['_DMULT'],asm['_DMULTU'],asm['_DDIV'],asm['_DDIVU'],asm['_J'],asm['_J_OUT'],asm['_J_IDLE'],asm['_JAL'],asm['_JAL_OUT'],asm['_JAL_IDLE'],asm['_JR_OUT'],asm['_JALR_OUT'],asm['_BEQ'],asm['_BEQ_OUT'],asm['_BEQ_IDLE'],asm['_BNE'],asm['_BNE_OUT'],asm['_BNE_IDLE'],asm['_BLEZ']
,asm['_BLEZ_OUT'],asm['_BLEZ_IDLE'],asm['_BGTZ'],asm['_BGTZ_OUT'],asm['_BGTZ_IDLE'],asm['_BLTZ'],asm['_BLTZ_OUT'],asm['_BLTZ_IDLE'],asm['_BGEZ'],asm['_BGEZ_OUT'],asm['_BGEZ_IDLE'],asm['_BLTZAL'],asm['_BLTZAL_OUT'],asm['_BLTZAL_IDLE'],asm['_BGEZAL'],asm['_BGEZAL_OUT'],asm['_BGEZAL_IDLE'],asm['_BEQL'],asm['_BEQL_OUT'],asm['_BEQL_IDLE'],asm['_BNEL'],asm['_BNEL_OUT'],asm['_BNEL_IDLE'],asm['_BLEZL'],asm['_BLEZL_OUT'],asm['_BLEZL_IDLE'],asm['_BGTZL'],asm['_BGTZL_OUT'],asm['_BGTZL_IDLE'],asm['_BLTZL']
,asm['_BLTZL_OUT'],asm['_BLTZL_IDLE'],asm['_BGEZL'],asm['_BGEZL_OUT'],asm['_BGEZL_IDLE'],asm['_BLTZALL'],asm['_BLTZALL_OUT'],asm['_BLTZALL_IDLE'],asm['_BGEZALL'],asm['_BGEZALL_OUT'],asm['_BGEZALL_IDLE'],asm['_BC1TL'],asm['_BC1TL_OUT'],asm['_BC1TL_IDLE'],asm['_BC1FL'],asm['_BC1FL_OUT'],asm['_BC1FL_IDLE'],asm['_SLL'],asm['_SRL'],asm['_SRA'],asm['_SLLV'],asm['_SRLV'],asm['_SRAV'],asm['_DSLL'],asm['_DSRL'],asm['_DSRA'],asm['_DSLLV'],asm['_DSRLV'],asm['_DSRAV'],asm['_DSLL32']
,asm['_DSRL32'],asm['_DSRA32'],asm['_MTC0'],asm['_MFC0'],asm['_TLBR'],asm['_TLBWI'],asm['_TLBWR'],asm['_TLBP'],asm['_CACHE'],asm['_ERET'],asm['_LWC1'],asm['_SWC1'],asm['_MTC1'],asm['_MFC1'],asm['_CTC1'],asm['_CFC1'],asm['_BC1T'],asm['_BC1T_OUT'],asm['_BC1T_IDLE'],asm['_BC1F'],asm['_BC1F_OUT'],asm['_BC1F_IDLE'],asm['_DMFC1'],asm['_DMTC1'],asm['_LDC1'],asm['_SDC1'],asm['_CVT_S_D'],asm['_CVT_S_W'],asm['_CVT_S_L'],asm['_CVT_D_S']
,asm['_CVT_D_W'],asm['_CVT_D_L'],asm['_CVT_W_S'],asm['_CVT_W_D'],asm['_CVT_L_S'],asm['_CVT_L_D'],asm['_ROUND_W_S'],asm['_ROUND_W_D'],asm['_ROUND_L_S'],asm['_ROUND_L_D'],asm['_TRUNC_W_S'],asm['_TRUNC_W_D'],asm['_TRUNC_L_S'],asm['_TRUNC_L_D'],asm['_CEIL_W_S'],asm['_CEIL_W_D'],asm['_CEIL_L_S'],asm['_CEIL_L_D'],asm['_FLOOR_W_S'],asm['_FLOOR_W_D'],asm['_FLOOR_L_S'],asm['_FLOOR_L_D'],asm['_ADD_S'],asm['_ADD_D'],asm['_SUB_S'],asm['_SUB_D'],asm['_MUL_S'],asm['_MUL_D'],asm['_DIV_S'],asm['_DIV_D']
,asm['_ABS_S'],asm['_ABS_D'],asm['_MOV_S'],asm['_MOV_D'],asm['_NEG_S'],asm['_NEG_D'],asm['_SQRT_S'],asm['_SQRT_D'],asm['_C_F_S'],asm['_C_F_D'],asm['_C_UN_S'],asm['_C_UN_D'],asm['_C_EQ_S'],asm['_C_EQ_D'],asm['_C_UEQ_S'],asm['_C_UEQ_D'],asm['_C_OLT_S'],asm['_C_OLT_D'],asm['_C_ULT_S'],asm['_C_ULT_D'],asm['_C_OLE_S'],asm['_C_OLE_D'],asm['_C_ULE_S'],asm['_C_ULE_D'],asm['_C_SF_S'],asm['_C_SF_D'],asm['_C_NGLE_S'],asm['_C_NGLE_D'],asm['_C_SEQ_S'],asm['_C_SEQ_D']
,asm['_C_NGL_S'],asm['_C_NGL_D'],asm['_C_LT_S'],asm['_C_LT_D'],asm['_C_NGE_S'],asm['_C_NGE_D'],asm['_C_LE_S'],asm['_C_LE_D'],asm['_C_NGT_S'],asm['_C_NGT_D'],asm['_SYSCALL'],asm['_TEQ'],asm['_NOP'],asm['_RESERVED'],asm['_NI'],asm['_FIN_BLOCK'],asm['_NOTCOMPILED'],asm['_NOTCOMPILED2'],asm['_RSPECIAL'],asm['_RREGIMM'],asm['_RJ'],asm['_RJAL'],asm['_RBEQ'],asm['_RBNE'],asm['_RBLEZ'],asm['_RBGTZ'],asm['_RADDI'],asm['_RADDIU'],asm['_RSLTI'],asm['_RSLTIU']
,asm['_RANDI'],asm['_RORI'],asm['_RXORI'],asm['_RLUI'],asm['_RCOP0'],asm['_RCOP1'],asm['_RSV'],asm['_RBEQL'],asm['_RBNEL'],asm['_RBLEZL'],asm['_RBGTZL'],asm['_RDADDI'],asm['_RDADDIU'],asm['_RLDL'],asm['_RLDR'],asm['_RLB'],asm['_RLH'],asm['_RLWL'],asm['_RLW'],asm['_RLBU'],asm['_RLHU'],asm['_RLWR'],asm['_RLWU'],asm['_RSB'],asm['_RSH'],asm['_RSWL'],asm['_RSW'],asm['_RSDL'],asm['_RSDR'],asm['_RSWR']
,asm['_RCACHE'],asm['_RLL'],asm['_RLWC1'],asm['_RLLD'],asm['_RLDC1'],asm['_RLD'],asm['_RSC'],asm['_RSWC1'],asm['_RSCD'],asm['_RSDC1'],asm['_RSD'],asm['_RMFC1'],asm['_RDMFC1'],asm['_RCFC1'],asm['_RMTC1'],asm['_RDMTC1'],asm['_RCTC1'],asm['_RBC'],asm['_RS'],asm['_RD'],asm['_RW'],asm['_RL'],asm['_RCVT_S_L'],asm['_RCVT_D_L'],asm['_RCVT_S_W'],asm['_RCVT_D_W'],asm['_RADD_D'],asm['_RSUB_D'],asm['_RMUL_D'],asm['_RDIV_D']
,asm['_RSQRT_D'],asm['_RABS_D'],asm['_RMOV_D'],asm['_RNEG_D'],asm['_RROUND_L_D'],asm['_RTRUNC_L_D'],asm['_RCEIL_L_D'],asm['_RFLOOR_L_D'],asm['_RROUND_W_D'],asm['_RTRUNC_W_D'],asm['_RCEIL_W_D'],asm['_RFLOOR_W_D'],asm['_RCVT_S_D'],asm['_RCVT_W_D'],asm['_RCVT_L_D'],asm['_RC_F_D'],asm['_RC_UN_D'],asm['_RC_EQ_D'],asm['_RC_UEQ_D'],asm['_RC_OLT_D'],asm['_RC_ULT_D'],asm['_RC_OLE_D'],asm['_RC_ULE_D'],asm['_RC_SF_D'],asm['_RC_NGLE_D'],asm['_RC_SEQ_D'],asm['_RC_NGL_D'],asm['_RC_LT_D'],asm['_RC_NGE_D'],asm['_RC_LE_D']
,asm['_RC_NGT_D'],asm['_RADD_S'],asm['_RSUB_S'],asm['_RMUL_S'],asm['_RDIV_S'],asm['_RSQRT_S'],asm['_RABS_S'],asm['_RMOV_S'],asm['_RNEG_S'],asm['_RROUND_L_S'],asm['_RTRUNC_L_S'],asm['_RCEIL_L_S'],asm['_RFLOOR_L_S'],asm['_RROUND_W_S'],asm['_RTRUNC_W_S'],asm['_RCEIL_W_S'],asm['_RFLOOR_W_S'],asm['_RCVT_D_S'],asm['_RCVT_W_S'],asm['_RCVT_L_S'],asm['_RC_F_S'],asm['_RC_UN_S'],asm['_RC_EQ_S'],asm['_RC_UEQ_S'],asm['_RC_OLT_S'],asm['_RC_ULT_S'],asm['_RC_OLE_S'],asm['_RC_ULE_S'],asm['_RC_SF_S'],asm['_RC_NGLE_S']
,asm['_RC_SEQ_S'],asm['_RC_NGL_S'],asm['_RC_LT_S'],asm['_RC_NGE_S'],asm['_RC_LE_S'],asm['_RC_NGT_S'],asm['_RBC1F'],asm['_RBC1T'],asm['_RBC1FL'],asm['_RBC1TL'],asm['_RMFC0'],asm['_RMTC0'],asm['_RTLB'],asm['_RTLBR'],asm['_RTLBWI'],asm['_RTLBWR'],asm['_RTLBP'],asm['_RERET'],asm['_RBLTZ'],asm['_RBGEZ'],asm['_RBLTZL'],asm['_RBGEZL'],asm['_RTGEI'],asm['_RTGEIU'],asm['_RTLTI'],asm['_RTLTIU'],asm['_RTEQI'],asm['_RTNEI'],asm['_RBLTZAL'],asm['_RBGEZAL']
,asm['_RBLTZALL'],asm['_RBGEZALL'],asm['_RSLL'],asm['_RSRL'],asm['_RSRA'],asm['_RSLLV'],asm['_RSRLV'],asm['_RSRAV'],asm['_RJR'],asm['_RJALR'],asm['_RSYSCALL'],asm['_RBREAK'],asm['_RSYNC'],asm['_RMFHI'],asm['_RMTHI'],asm['_RMFLO'],asm['_RMTLO'],asm['_RDSLLV'],asm['_RDSRLV'],asm['_RDSRAV'],asm['_RMULT'],asm['_RMULTU'],asm['_RDIV'],asm['_RDIVU'],asm['_RDMULT'],asm['_RDMULTU'],asm['_RDDIV'],asm['_RDDIVU'],asm['_RADD'],asm['_RADDU']
,asm['_RSUB'],asm['_RSUBU'],asm['_RAND'],asm['_ROR'],asm['_RXOR'],asm['_RNOR'],asm['_RSLT'],asm['_RSLTU'],asm['_RDADD'],asm['_RDADDU'],asm['_RDSUB'],asm['_RDSUBU'],asm['_RTGE'],asm['_RTGEU'],asm['_RTLT'],asm['_RTLTU'],asm['_RTEQ'],asm['_RTNE'],asm['_RDSLL'],asm['_RDSRL'],asm['_RDSRA'],asm['_RDSLL32'],asm['_RDSRL32'],asm['_RDSRA32'],b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,asm['_read_nomemb'],asm['_read_nomemh'],asm['_read_nomem'],asm['_read_nomemd'],asm['_write_nomemb'],asm['_write_nomemh'],asm['_write_nomem'],asm['_write_nomemd'],asm['_read_rdramb'],asm['_read_rdramh'],asm['_read_rdram'],asm['_read_rdramd']
,asm['_write_rdramb'],asm['_write_rdramh'],asm['_write_rdram'],asm['_write_rdramd'],asm['_read_nothingb'],asm['_read_nothingh'],asm['_read_nothing'],asm['_read_nothingd'],asm['_write_nothingb'],asm['_write_nothingh'],asm['_write_nothing'],asm['_write_nothingd'],asm['_read_rdramregb'],asm['_read_rdramregh'],asm['_read_rdramreg'],asm['_read_rdramregd'],asm['_write_rdramregb'],asm['_write_rdramregh'],asm['_write_rdramreg'],asm['_write_rdramregd'],asm['_read_rspmemb'],asm['_read_rspmemh'],asm['_read_rspmem'],asm['_read_rspmemd'],asm['_write_rspmemb'],asm['_write_rspmemh'],asm['_write_rspmem'],asm['_write_rspmemd'],asm['_read_rspregb'],asm['_read_rspregh']
,asm['_read_rspreg'],asm['_read_rspregd'],asm['_write_rspregb'],asm['_write_rspregh'],asm['_write_rspreg'],asm['_write_rspregd'],asm['_read_rspreg2b'],asm['_read_rspreg2h'],asm['_read_rspreg2'],asm['_read_rspreg2d'],asm['_write_rspreg2b'],asm['_write_rspreg2h'],asm['_write_rspreg2'],asm['_write_rspreg2d'],asm['_read_dpb'],asm['_read_dph'],asm['_read_dp'],asm['_read_dpd'],asm['_write_dpb'],asm['_write_dph'],asm['_write_dp'],asm['_write_dpd'],asm['_read_dpsb'],asm['_read_dpsh'],asm['_read_dps'],asm['_read_dpsd'],asm['_write_dpsb'],asm['_write_dpsh'],asm['_write_dps'],asm['_write_dpsd']
,asm['_read_mib'],asm['_read_mih'],asm['_read_mi'],asm['_read_mid'],asm['_write_mib'],asm['_write_mih'],asm['_write_mi'],asm['_write_mid'],asm['_read_vib'],asm['_read_vih'],asm['_read_vi'],asm['_read_vid'],asm['_write_vib'],asm['_write_vih'],asm['_write_vi'],asm['_write_vid'],asm['_read_aib'],asm['_read_aih'],asm['_read_ai'],asm['_read_aid'],asm['_write_aib'],asm['_write_aih'],asm['_write_ai'],asm['_write_aid'],asm['_read_pib'],asm['_read_pih'],asm['_read_pi'],asm['_read_pid'],asm['_write_pib'],asm['_write_pih']
,asm['_write_pi'],asm['_write_pid'],asm['_read_rib'],asm['_read_rih'],asm['_read_ri'],asm['_read_rid'],asm['_write_rib'],asm['_write_rih'],asm['_write_ri'],asm['_write_rid'],asm['_read_sib'],asm['_read_sih'],asm['_read_si'],asm['_read_sid'],asm['_write_sib'],asm['_write_sih'],asm['_write_si'],asm['_write_sid'],asm['_read_ddb'],asm['_read_ddh'],asm['_read_dd'],asm['_read_ddd'],asm['_write_ddb'],asm['_write_ddh'],asm['_write_dd'],asm['_write_ddd'],asm['_read_pi_flashram_statusb'],asm['_read_pi_flashram_statush'],asm['_read_pi_flashram_status'],asm['_read_pi_flashram_statusd']
,asm['_write_pi_flashram_commandb'],asm['_write_pi_flashram_commandh'],asm['_write_pi_flashram_command'],asm['_write_pi_flashram_commandd'],asm['_read_romb'],asm['_read_romh'],asm['_read_rom'],asm['_read_romd'],asm['_write_rom'],asm['_read_pifb'],asm['_read_pifh'],asm['_read_pif'],asm['_read_pifd'],asm['_write_pifb'],asm['_write_pifh'],asm['_write_pif'],asm['_write_pifd'],b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,asm['_EmptyFunc'],asm['_pure_interpreter_loop'],asm['_gennotcompiled'],asm['_genfin_block'],asm['_gennop'],asm['_genj'],asm['_genj_idle'],asm['_genj_out'],asm['_genjal']
,asm['_genjal_idle'],asm['_genjal_out'],asm['_genbeq'],asm['_genbeq_idle'],asm['_genbeq_out'],asm['_genbne'],asm['_genbne_idle'],asm['_genbne_out'],asm['_genblez'],asm['_genblez_idle'],asm['_genblez_out'],asm['_genbgtz'],asm['_genbgtz_idle'],asm['_genbgtz_out'],asm['_genaddi'],asm['_genaddiu'],asm['_genslti'],asm['_gensltiu'],asm['_genandi'],asm['_genori'],asm['_genxori'],asm['_genlui'],asm['_genreserved'],asm['_genbeql'],asm['_genbeql_idle'],asm['_genbeql_out'],asm['_genbnel'],asm['_genbnel_idle'],asm['_genbnel_out'],asm['_genblezl']
,asm['_genblezl_idle'],asm['_genblezl_out'],asm['_genbgtzl'],asm['_genbgtzl_idle'],asm['_genbgtzl_out'],asm['_gendaddi'],asm['_gendaddiu'],asm['_genldl'],asm['_genldr'],asm['_genlb'],asm['_genlh'],asm['_genlwl'],asm['_genlw'],asm['_genlbu'],asm['_genlhu'],asm['_genlwr'],asm['_genlwu'],asm['_gensb'],asm['_gensh'],asm['_genswl'],asm['_gensw'],asm['_gensdl'],asm['_gensdr'],asm['_genswr'],asm['_gencache'],asm['_genll'],asm['_genlwc1'],asm['_genni'],asm['_genldc1'],asm['_genld']
,asm['_gensc'],asm['_genswc1'],asm['_gensdc1'],asm['_gensd'],asm['_genmfc1'],asm['_gendmfc1'],asm['_gencfc1'],asm['_genmtc1'],asm['_gendmtc1'],asm['_genctc1'],asm['_gencvt_s_l'],asm['_gencvt_d_l'],asm['_gencvt_s_w'],asm['_gencvt_d_w'],asm['_genadd_d'],asm['_gensub_d'],asm['_genmul_d'],asm['_gendiv_d'],asm['_gensqrt_d'],asm['_genabs_d'],asm['_genmov_d'],asm['_genneg_d'],asm['_genround_l_d'],asm['_gentrunc_l_d'],asm['_genceil_l_d'],asm['_genfloor_l_d'],asm['_genround_w_d'],asm['_gentrunc_w_d'],asm['_genceil_w_d'],asm['_genfloor_w_d']
,asm['_gencvt_s_d'],asm['_gencvt_w_d'],asm['_gencvt_l_d'],asm['_genc_f_d'],asm['_genc_un_d'],asm['_genc_eq_d'],asm['_genc_ueq_d'],asm['_genc_olt_d'],asm['_genc_ult_d'],asm['_genc_ole_d'],asm['_genc_ule_d'],asm['_genc_sf_d'],asm['_genc_ngle_d'],asm['_genc_seq_d'],asm['_genc_ngl_d'],asm['_genc_lt_d'],asm['_genc_nge_d'],asm['_genc_le_d'],asm['_genc_ngt_d'],asm['_genadd_s'],asm['_gensub_s'],asm['_genmul_s'],asm['_gendiv_s'],asm['_gensqrt_s'],asm['_genabs_s'],asm['_genmov_s'],asm['_genneg_s'],asm['_genround_l_s'],asm['_gentrunc_l_s'],asm['_genceil_l_s']
,asm['_genfloor_l_s'],asm['_genround_w_s'],asm['_gentrunc_w_s'],asm['_genceil_w_s'],asm['_genfloor_w_s'],asm['_gencvt_d_s'],asm['_gencvt_w_s'],asm['_gencvt_l_s'],asm['_genc_f_s'],asm['_genc_un_s'],asm['_genc_eq_s'],asm['_genc_ueq_s'],asm['_genc_olt_s'],asm['_genc_ult_s'],asm['_genc_ole_s'],asm['_genc_ule_s'],asm['_genc_sf_s'],asm['_genc_ngle_s'],asm['_genc_seq_s'],asm['_genc_ngl_s'],asm['_genc_lt_s'],asm['_genc_nge_s'],asm['_genc_le_s'],asm['_genc_ngt_s'],asm['_genbc1f'],asm['_genbc1f_idle'],asm['_genbc1f_out'],asm['_genbc1t'],asm['_genbc1t_idle'],asm['_genbc1t_out']
,asm['_genbc1fl'],asm['_genbc1fl_idle'],asm['_genbc1fl_out'],asm['_genbc1tl'],asm['_genbc1tl_idle'],asm['_genbc1tl_out'],asm['_genmfc0'],asm['_genmtc0'],asm['_gentlbr'],asm['_gentlbwi'],asm['_gentlbwr'],asm['_gentlbp'],asm['_generet'],asm['_genbltz'],asm['_genbltz_idle'],asm['_genbltz_out'],asm['_genbgez'],asm['_genbgez_idle'],asm['_genbgez_out'],asm['_genbltzl'],asm['_genbltzl_idle'],asm['_genbltzl_out'],asm['_genbgezl'],asm['_genbgezl_idle'],asm['_genbgezl_out'],asm['_genbltzal'],asm['_genbltzal_idle'],asm['_genbltzal_out'],asm['_genbgezal'],asm['_genbgezal_idle']
,asm['_genbgezal_out'],asm['_genbltzall'],asm['_genbltzall_idle'],asm['_genbltzall_out'],asm['_genbgezall'],asm['_genbgezall_idle'],asm['_genbgezall_out'],asm['_gensll'],asm['_gensrl'],asm['_gensra'],asm['_gensllv'],asm['_gensrlv'],asm['_gensrav'],asm['_genjr'],asm['_genjalr'],asm['_gensyscall'],asm['_gensync'],asm['_genmfhi'],asm['_genmthi'],asm['_genmflo'],asm['_genmtlo'],asm['_gendsllv'],asm['_gendsrlv'],asm['_gendsrav'],asm['_genmult'],asm['_genmultu'],asm['_gendiv'],asm['_gendivu'],asm['_gendmult'],asm['_gendmultu']
,asm['_genddiv'],asm['_genddivu'],asm['_genadd'],asm['_genaddu'],asm['_gensub'],asm['_gensubu'],asm['_genand'],asm['_genor'],asm['_genxor'],asm['_gennor'],asm['_genslt'],asm['_gensltu'],asm['_gendadd'],asm['_gendaddu'],asm['_gendsub'],asm['_gendsubu'],asm['_genteq'],asm['_gendsll'],asm['_gendsrl'],asm['_gendsra'],asm['_gendsll32'],asm['_gendsrl32'],asm['_gendsra32'],asm['_read_rdramFBb'],asm['_read_rdramFBh'],asm['_read_rdramFB'],asm['_read_rdramFBd'],asm['_write_rdramFBb'],asm['_write_rdramFBh'],asm['_write_rdramFB']
,asm['_write_rdramFBd'],b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var SIDE_FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,asm['_write_rdram_dram'],b8,asm['_write_rdram_fb'],b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,asm['_write_rdram_regs'],b8,asm['_write_rsp_mem'],b8,asm['_write_rsp_regs'],b8,asm['_write_rsp_regs2'],b8,asm['_write_dpc_regs'],b8,asm['_write_dps_regs'],b8
,asm['_write_mi_regs'],b8,asm['_write_vi_regs'],b8,asm['_write_ai_regs'],b8,asm['_write_pi_regs'],b8,asm['_write_ri_regs'],b8,asm['_write_si_regs'],b8,asm['_write_dd_regs'],b8,asm['_write_flashram_command'],b8,asm['_write_cart_rom'],b8,asm['_write_pif_ram'],b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,asm['_fread_file_func'],asm['_fwrite_file_func'],b8,asm['_fseek_file_func'],b8,b8,b8,b8,b8,_png_create_write_struct__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var SIDE_FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,asm['_SDL_CompatEventFilter'],b9,b9,b9,b9,asm['_egcvip_is_connected']
,b9,b9,b9,b9,b9,b9,asm['_event_sdl_filter'],b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,asm['_ftell_file_func'],b9,asm['_fclose_file_func'],asm['_ferror_file_func'],b9,asm['_ftell64_file_func'],b9,b9,b9,b9,b9,b9,b9,b9,b9,_fopen__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var SIDE_FUNCTION_TABLE_iiiiii = [b10,asm['_dummyrsp_PluginGetVersion'],b10,b10,b10,asm['_dummyinput_PluginGetVersion'],b10,b10,b10,b10,b10,b10,b10,b10,asm['_dummyaudio_PluginGetVersion'],b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,asm['_dummyvideo_PluginGetVersion']
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,asm['_fseek64_file_func'],b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var SIDE_FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,asm['_dummyvideo_ReadScreen2'],b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_png_set_write_fn__wrapper,b11,b11,b11,b11,b11,_png_write_png__wrapper,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
Module["dynCall_iiii"] = dynCall_iiii
Module["dynCall_i"] = dynCall_i
Module["dynCall_vi"] = dynCall_vi
Module["dynCall_vii"] = dynCall_vii
Module["dynCall_viiiiiiiii"] = dynCall_viiiiiiiii
Module["dynCall_ii"] = dynCall_ii
Module["dynCall_viii"] = dynCall_viii
Module["dynCall_v"] = dynCall_v
Module["dynCall_iiiii"] = dynCall_iiiii
Module["dynCall_iii"] = dynCall_iii
Module["dynCall_iiiiii"] = dynCall_iiiiii
Module["dynCall_viiii"] = dynCall_viiii
Module["FUNCTION_TABLE_iiii"] = SIDE_FUNCTION_TABLE_iiii;
Module["FUNCTION_TABLE_i"] = SIDE_FUNCTION_TABLE_i;
Module["FUNCTION_TABLE_vi"] = SIDE_FUNCTION_TABLE_vi;
Module["FUNCTION_TABLE_vii"] = SIDE_FUNCTION_TABLE_vii;
Module["FUNCTION_TABLE_viiiiiiiii"] = SIDE_FUNCTION_TABLE_viiiiiiiii;
Module["FUNCTION_TABLE_ii"] = SIDE_FUNCTION_TABLE_ii;
Module["FUNCTION_TABLE_viii"] = SIDE_FUNCTION_TABLE_viii;
Module["FUNCTION_TABLE_v"] = SIDE_FUNCTION_TABLE_v;
Module["FUNCTION_TABLE_iiiii"] = SIDE_FUNCTION_TABLE_iiiii;
Module["FUNCTION_TABLE_iii"] = SIDE_FUNCTION_TABLE_iii;
Module["FUNCTION_TABLE_iiiiii"] = SIDE_FUNCTION_TABLE_iiiiii;
Module["FUNCTION_TABLE_viiii"] = SIDE_FUNCTION_TABLE_viiii;

var NAMED_GLOBALS = { "zip_copyright": 20667, "lo": 8410216, "input": 10521668, "g_dp": 8410952, "reset_hard_job": 14718180, "g_MemHasBeenBSwapped": 8410656, "g_rom_size": 8422112, "stop": 10523004, "g_EmulatorRunning": 8410660, "g_rdram": 21216, "g_FrameCallback": 8410652, "rdword": 8424332, "interupt_unsafe_state": 14717724, "skip_jump": 10522020, "last_addr": 10523012, "g_gs_vi_counter": 8410668, "dyna_interp": 10522024, "gfx": 10521540, "FCR31": 14717720, "g_si": 8410672, "r4300emu": 10522016, "Controls": 10521492, "g_sp": 8413160, "blocks": 10523024, "reg_cop1_fgr_64": 8410232, "dst_block": 14718148, "dst": 14718144, "delay_slot": 10523000, "PC": 10522028, "code_length": 14718136, "reg": 8409952, "g_ri": 8421480, "ROM_PARAMS": 8422180, "no_compiled_jump": 14718128, "g_cp0_regs": 14717332, "address": 8424328, "src": 14718152, "next_interupt": 10523016, "g_delay_si": 8410664, "op": 8410528, "invalid_code": 23109846, "initialized_video": 8410564, "readmemh": 8948628, "readmemd": 9210772, "g_CoreConfig": 8410648, "readmemb": 8686484, "writememd": 9997204, "writememb": 9735060, "tlb_e": 23106792, "writememh": 10259348, "cpu_word": 8424336, "g_pi": 8409824, "g_rom": 8422108, "hi": 8410208, "rompause": 10523008, "actual": 14717328, "rsp": 10521708, "reg_cop1_double": 14717588, "work": 8410552, "writemem": 9472916, "isGoldeneyeRom": 23109550, "rounding_mode": 1456, "cpu_hword": 23108460, "FCR0": 14717716, "max_code_length": 14718132, "tlb_LUT_r": 14718184, "cpu_byte": 23109845, "g_r4300": 8410936, "reg_cop1_simple": 14717460, "cpu_dword": 8409944, "local_rs": 8410224, "count_per_op": 488, "ROM_HEADER": 8422116, "llbit": 10522032, "fast_memory": 14718156, "readmem": 8424340, "current_instruction_table": 10522036, "l_iJoyInstanceID": 8421932, "jump_to_address": 10523020, "inst_pointer": 14718140, "tlb_LUT_w": 18912488, "unz_copyright": 20748, "g_ai": 8421404, "ROM_SETTINGS": 23109551, "g_vi": 8421560, "cached_interpreter_table": 492, "audio": 10521612 };
for (var named in NAMED_GLOBALS) {
  Module['_' + named] = gb + NAMED_GLOBALS[named];
}
Module['NAMED_GLOBALS'] = NAMED_GLOBALS;
;

Runtime.registerFunctions(['iiii', 'i', 'vi', 'vii', 'viiiiiiiii', 'ii', 'viii', 'v', 'iiiii', 'iii', 'iiiiii', 'viiii'], Module);



// === Auto-generated postamble setup entry stuff ===




__ATPRERUN__.push(runPostSets);

if (runtimeInitialized) {
  // dlopen case: we are being loaded after the system is fully initialized, so just run our prerun and atinit stuff now
  callRuntimeCallbacks(__ATPRERUN__);
  callRuntimeCallbacks(__ATINIT__);
} // otherwise, general dynamic linking case: stuff we added to prerun and init will be executed with the rest of the system as it loads





  // {{MODULE_ADDITIONS}}

  return Module;
});




